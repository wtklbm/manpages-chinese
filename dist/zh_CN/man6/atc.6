.\" -*- coding: UTF-8 -*-
.\"	$NetBSD: atc.6,v 1.21 2004/01/01 16:31:37 wiz Exp $
.\"
.\" Copyright (c) 1990, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Ed James.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	@(#)atc.6	8.1 (Berkeley) 5/31/93
.\"
.\" Copyright (c) 1986 Ed James. All rights reserved.
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.Dd January 1, 2004
.Dt ATC 6
.Os
.Sh NAME
.Nm atc
.Nd air traffic controller game
.Sh SYNOPSIS
.Nm atc
.Op Fl u?lstp
.Op Fl gf Ar "game name"
.Op Fl r Ar "random seed"
.Sh DESCRIPTION
.Nm
让您可以尝试空中交通管制员的紧张工作，而不会危及每年数百万旅客的生命。 您的职责要求您指挥喷气式飞机和 prop 飞机进出飞行场和机场。
飞机的速度 (更新时间) 和频率取决于所选竞技场的难度。
.Sh OPTIONS
.Bl -tag -width flag
.It Fl u
打印使用行并退出。
.It Fl \&?
与
.Fl u
相同。
.It Fl l
打印可用游戏列表并退出。 打印的第一个游戏名称是默认游戏。
.It Fl s
打印得分列表 (以前的前十名列表)。
.It Fl t
与
.Fl s
相同。
.It Fl p
打印
.Nm
希望在其中找到其私有文件的特殊目录的路径。 这在程序安装期间使用。
.It Fl g Ar game
玩命名游戏。 如果列出的游戏不是
.Fl l
选项打印的游戏之一，则玩默认游戏。
.It Fl f Ar game
与
.Fl g
相同。
.It Fl r Ar seed
设置随机 seed。 这个标志的目的是值得怀疑的。
.El
.Sh GOALS
您在
.Nm
中的目标是让游戏尽可能长时间地进行下去。 没有胜利的状态，除了战胜其他玩家的时代。 您将需要: 在机场发射飞机
(通过指示它们增加高度) ; 在机场降落的飞机 (通过指示他们在正好在机场上空时进入零高度) ; 和机动飞机离开出口点。
.Pp
有几件事会导致游戏结束。 每架飞机都有一个目的地 (见信息区)，将飞机发送到错误的目的地是错误的。 飞机可能会耗尽燃料，也可能会相撞。
碰撞被定义为所有三个维度的邻接。 飞机以任何其他方式离开竞技场而不是通过其目的地出口也属于错误。
.Pp
分数按照安全飞机的数量排序。 其他统计数据仅供娱乐。 比另一位玩家花费的时间更长不会受到处罚 (平局除外)。
.Pp
不允许暂停比赛。 如果您收到谈话信息，那就太难了。 空中交通管制员最后一次接到电话是什么时候?
.Sh THE DISPLAY
根据您运行
.Nm
的终端，屏幕将分为 4 个区域。 应该强调的是，游戏的终端驱动程序部分被设计为可重新配置，因此显示格式可能会因您玩的版本而异。
此处的描述基于游戏的 ascii 版本。 然而，游戏规则和输入格式应该保持一致。 如果屏幕变得混乱，Control-L 会重新绘制屏幕。
.Ss RADAR
第一个屏幕区域是雷达显示，显示飞机、机场、标准 entry/exit 点、雷达信标和 `线` 的相对位置，它们只是帮助您引导飞机。
.Pp
平面显示为带有高度的单个字母。 如果数字高度是个位数，那么它代表千英尺。 prop 飞机和喷气式飞机之间有一些区别。 在 ascii 终端上，prop
平面用大写字母表示，喷气机用小写字母表示。
.Pp
机场显示为数字，并且指示飞机必须降落在机场的方向。 在 ascii 终端上，这是 `^`、`\*[Gt]`、`\*[Lt]` 和 `v` 之一，表示北
(0 度)、东 (90)、西 (270) 和南 (180)，分别。 飞机也将朝这个方向起飞。
.Pp
信标表示为圆圈或星号和一个数字。 他们的目的是为飞行员提供一个容易引用的地方。 请参见下面的
.Sx THE DELAY COMMAND
部分。
.Pp
Entry/exit 点沿雷达屏幕的边界显示为数字。 飞机将在没有警告的情况下从这些点进入竞技场。
这些点有一个与之相关的方向，飞机总是从这个方向进入竞技场。 在
.Nm
的 ascii 版本上，不显示此方向。
随着游戏的进行，这个方向会变得很明显。
.Pp
进来的飞机总是会在相同的高度进入: 7000 英尺。 要使飞机成功通过 entry/exit 点起飞，它必须在 9000 英尺的高度飞行。
飞机离开竞技场 (yet) 时，没有必要朝任何特定方向飞行。
.Ss INFORMATION AREA
显示屏的第二个区域是信息区域，其中列出了时间 (自开始以来的更新次数)，以及您已指挥安全离开竞技场的飞机数量。
下面是当前在空中的飞机列表，后面是空行，然后是地面 (机场) 飞机的列表。
每行列出了飞机名称及其当前高度，一个可选的星号表示低燃料，飞机的目的地和飞机的当前命令。 改变高度不被视为命令，因此不会显示。 以下是一些可能的信息行:
.Pp
.Bd -literal -offset indent
B4*A0: 圆 @b1
g7 E4: 225
.Ed
.Pp
第一个例子显示了一个名为 `B` 的 prop 飞机，它在 4000 英尺的高度飞行。它的燃料不足 (注意 `*`)。它的目的地是机场
#0。它期望执行的下一个命令是在到达 Beacon #1 时盘旋。第二个示例显示一架名为 `g` 的喷气式飞机位于 7000 英尺处，目的地为 Exit
#4。 现在正在执行转向 225 度 (South-West)。
.Ss INPUT AREA
显示屏的第三个区域是输入区域。 正是在这里反映了您的输入。 有关详细信息，请参见本手册的
.Sx INPUT
标题。
.Ss AUTHOR AREA
该区域仅用于在信用到期时给予信用。:-)
.Sh INPUT
游戏中内置了命令完成界面。 在任何时候，输入 `? ` 将列出可能的输入字符。 输入退格键 (您的擦除字符) 备份，擦除命令的最后部分。
当一个命令完成时，一个回车进入它，并且在那个时候完成任何语义检查。 如果未检测到错误，则将命令发送到适当的平面。
如果在检查过程中发现错误，将在违规语句下划线并在其下方打印 (hopefully) 描述性消息。
.Pp
命令语法分为两部分:
.Em Immediate Only
和
.Em Delayable
命令。
.Em Immediate Only
命令在下次更新时发生。
.Em Delayable
命令也会在下一次更新时发生，除非它们后跟一个称为
.Em Delay
命令的可选谓词。
.Pp
在下表中，语法
.Em [0\-9]
表示任何单个数字，
.Aq Em dir
表示方向，由 `s` 键周围的键给出: `wedcxzaq`。
在绝对引用中，`q` 指西北或 315 度，`w` 指北，或 0 度。在相对引用中，'q' 指的是 \-45 度或向左 45 度，而 'w' 指的是 0
度，或方向不变。
.Pp
所有命令都以平面字母开头。 这表示命令的接收者。 忽略大小写。
.Ss IMMEDIATE ONLY COMMANDS
.Bl -tag -width aaaa
.It "a [ cd+- ]" Em number
高度: 改变飞机的高度，可能要求起飞。 `+' 和`-' 与 `c' 和`d' 相同。
.Bl -tag -width aaaaaaaaaa -compact
.It a Em number
爬升或下降到给定的高度 (以千英尺为单位)。
.It ac Em number
Climb: 相对高度变化。
.It ad Em number
下降: 相对高度变化。
.El
.It m
标记: 以高亮模式显示。 平面和指令信息正常显示。
.It i
Ignore: 不显示高亮。 如果没有命令，命令显示为一行破折号。
.It u
取消标记: 与忽略相同，但如果处理延迟命令，平面将变为标记。 如果您想在部分而非全部旅程中忘记飞机，这将很有用。
.El
.Ss DELAYABLE COMMANDS
.Bl -tag -width aaaa
.It "c [ lr ]"
圆: 有平面的圆。
.Bl -tag -width aaaaaaaaaa -compact
.It cl
左: 逆时针旋转。
.It cr
右图: 顺时针旋转 (default)。
.El
.It "t [ l-r+LR ] [ dir ] or tt [ abe* ]" Em number
转向: 改变方向。
.Bl -tag -width aaaaaaaaaa -compact
.It t\*[Lt]dir\*[Gt]
转向方向: 转向给定的绝对罗盘航向。 将采取最短的转弯。
.It "tl [ dir ]"
左: 逆时针转: 默认 45 度，或者
.Aq dir
中指定的量 (不是
.Em to
.Aq dir . )
`w' (0 度)
是不转。`e' 是 45 度; `q' 逆时针给出 \-45 度，即，顺时针 45 度。
.It "t- [ dir ]"
和左边一样。
.It "tr [ dir ]"
右: 顺时针旋转，默认为 45 度，或
.Aq dir
中指定的量。
.It "t+ [ dir ]"
和对的一样。
.It tL
左硬: 逆时针旋转 90 度。
.It tR
向右用力: 顺时针旋转 90 度。
.It "tt [abe*]"
朝向: 转向灯塔、机场或出口。 转牌只是一个估计。
.It tta Em number
转向给定的机场。
.It ttb Em number
转向指定的信标。
.It tte Em number
转向出口。
.It tt* Em number
和 tt 一样。
.El
.El
.Ss THE DELAY COMMAND
.Em Delay
(a/@) 命令可以追加到任何
.Em Delayable
命令。 它允许控制器在飞机到达特定信标 (或 future
版本中的其他对象) 时指示飞机执行操作。
.Bl -tag -width aaaa
.It ab Em number
当飞机到达指定的信标时执行延迟命令。 `信标` 的 `b` 是多余的以允许扩展。 `@' 可以用来代替`a'。
.El
.Ss MARKING, UNMARKING AND IGNORING
飞机进入竞技场时默认为
.Em marked
。 这意味着它们在雷达显示屏上以高亮模式显示。 平面也可以是
.Em unmarked
或
.Em ignored
。
.Em ignored
平面以非高亮模式绘制，信息区域的命令字段中显示一条虚线。
飞机将保持这种状态，直到发出标记命令。 将发出任何其他命令，但命令行将在命令完成时返回到一行破折号。
.Pp
.Em unmarked
平面与
.Em ignored
平面的处理方式相同，不同之处在于它会在处理延迟命令时自动切换到
.Em marked
状态。 如果您想暂时忘记一架飞机，但它的飞行路径尚未完全设置，这将很有用。
.Pp
与所有命令一样，标记、取消标记和忽略将在下一次更新开始时生效。 如果飞机没有立即切换到未突出显示模式，请不要感到惊讶。
.Ss EXAMPLES
.Bl -tag -width gtte4ab2 -offset indent
.It atlab1
A 平面: 在信标 #1 处左转
.It cc
平面 C: 圆
.It gtte4ab2
G 机: 在信标 #2 转向出口 #4
.It ma+2
M 机: 高度: 爬升 2000 英尺
.It stq
S 平面: 转向 315
.It xi
X 平面: 无视
.El
.Sh OTHER INFORMATION
.Bl -bullet
.It 
喷气机每次更新都会移动; prop 飞机每隔更新移动一次。
.It 
所有平面每次运动最多转动 90 度。
.It 
飞机在 7000 英尺的高度进入，在 9000 英尺的高度离开。
.It 
如果飞机不在机场上空，则在 0 高度飞行的飞机会坠毁。
.It 
在机场等候的飞机只能被告知起飞 (爬升高度)。
.It 
按回车 (即输入一个空命令) 将立即执行下一次更新。 如果没有有趣的事情发生，这允许您 `快进` 游戏时钟。
.Sh FILES
分数保存在
.Pa /var/lib/bsdgames/atc_score
中。
.Sh AUTHOR
Ed James，加州大学伯克利分校: edjames@ucbvax.berkeley.edu，ucbvax!edjames
.Pp
这个游戏是基于某人对多年前为某个未知 PC 编写的游戏的整体风格的描述，也许。
.Sh BUGS
屏幕有时会在您退出后刷新。
.Pp
.Sh [手册页中文版]
.Pp
本翻译为免费文档；阅读
.Lk https://www.gnu.org/licenses/gpl-3.0.html GNU 通用公共许可证第 3 版
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.Pp
该中文翻译由 wtklbm 根据个人学习需要制作
.Mt wtklbm<wtklbm@gmail.com>
.Pp
项目地址:
.Mt https://github.com/wtklbm/manpages-chinese
.Me 。
