.\" -*- coding: UTF-8 -*-
.\" This man page is Copyright (C) 2000 Andi Kleen <ak@muc.de>.
.\"
.\" %%%LICENSE_START(VERBATIM_ONE_PARA)
.\" Permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\" %%%LICENSE_END
.\"
.\" $Id: ipv6.7,v 1.3 2000/12/20 18:10:31 ak Exp $
.\"
.\" The following socket options are undocumented
.\"	All of the following are from:
.\"	    commit 333fad5364d6b457c8d837f7d05802d2aaf8a961
.\"	    Author: YOSHIFUJI Hideaki <yoshfuji@linux-ipv6.org>
.\"	    Support several new sockopt / ancillary data in Advanced API (RFC3542).
.\"		IPV6_2292PKTINFO (2.6.14)
.\"		    Formerly IPV6_PKTINFO
.\"		IPV6_2292HOPOPTS (2.6.14)
.\"		    Formerly IPV6_HOPOPTS, which is documented
.\"		IPV6_2292DSTOPTS (2.6.14)
.\"		    Formerly IPV6_DSTOPTS, which is documented
.\"		IPV6_2292RTHDR (2.6.14)
.\"		    Formerly IPV6_RTHDR, which is documented
.\"		IPV6_2292PKTOPTIONS (2.6.14)
.\"		    Formerly IPV6_PKTOPTIONS
.\"		IPV6_2292HOPLIMIT (2.6.14)
.\"		    Formerly IPV6_HOPLIMIT, which is documented
.\"
.\"		IPV6_RECVHOPLIMIT (2.6.14)
.\"		IPV6_RECVHOPOPTS (2.6.14)
.\"		IPV6_RTHDRDSTOPTS (2.6.14)
.\"		IPV6_RECVRTHDR (2.6.14)
.\"		IPV6_RECVDSTOPTS (2.6.14)
.\"
.\"	IPV6_RECVPATHMTU (Linux 2.6.35, flag value added in Linux 2.6.14)
.\"	    commit 793b14731686595a741d9f47726ad8b9a235385a
.\"	    Author: Brian Haley <brian.haley@hp.com>
.\"	IPV6_PATHMTU (Linux 2.6.35, flag value added in Linux 2.6.14)
.\"	    commit 793b14731686595a741d9f47726ad8b9a235385a
.\"	    Author: Brian Haley <brian.haley@hp.com>
.\"	IPV6_DONTFRAG (Linux 2.6.35, flag value added in Linux 2.6.14)
.\"	    commit 793b14731686595a741d9f47726ad8b9a235385a
.\"	    Author: Brian Haley <brian.haley@hp.com>
.\"	    commit 4b340ae20d0e2366792abe70f46629e576adaf5e
.\"	    Author: Brian Haley <brian.haley@hp.com>
.\"
.\"	IPV6_RECVTCLASS (Linux 2.6.14)
.\"	    commit 41a1f8ea4fbfcdc4232f023732584aae2220de31
.\"	    Author: YOSHIFUJI Hideaki <yoshfuji@linux-ipv6.org>
.\"		Based on patch from David L Stevens <dlstevens@us.ibm.com>
.\"
.\"	IPV6_CHECKSUM (Linux 2.2)
.\"	IPV6_NEXTHOP (Linux 2.2)
.\"	IPV6_JOIN_ANYCAST (Linux 2.4.21 / Linux 2.6)
.\"	IPV6_LEAVE_ANYCAST (Linux 2.4.21 / Linux 2.6)
.\"	IPV6_FLOWLABEL_MGR (Linux 2.2.7 / Linux 2.4)
.\"	IPV6_FLOWINFO_SEND (Linux 2.2.7 / Linux 2.4)
.\"	IPV6_IPSEC_POLICY (Linux 2.6)
.\"	IPV6_XFRM_POLICY (Linux 2.6)
.\"	IPV6_TCLASS (Linux 2.6)
.\"
.\"	IPV6_ADDR_PREFERENCES (Linux 2.6.26)
.\"	    commit 7cbca67c073263c179f605bdbbdc565ab29d801d
.\"	    Author: YOSHIFUJI Hideaki <yoshfuji@linux-ipv6.org>
.\"	IPV6_MINHOPCOUNT (Linux 2.6.35)
.\"	    commit e802af9cabb011f09b9c19a82faef3dd315f27eb
.\"	    Author: Stephen Hemminger <shemminger@vyatta.com>
.\"	IPV6_ORIGDSTADDR (Linux 2.6.37)
.\"	    Actually a CMSG rather than a sockopt?
.\"	    In header file, we have IPV6_RECVORIGDSTADDR == IPV6_ORIGDSTADDR
.\"	    commit 6c46862280c5f55eda7750391bc65cd7e08c7535
.\"	    Author: Balazs Scheidler <bazsi@balabit.hu>
.\"	IPV6_RECVORIGDSTADDR (Linux 2.6.37)
.\"	    commit 6c46862280c5f55eda7750391bc65cd7e08c7535
.\"	    Author: Balazs Scheidler <bazsi@balabit.hu>
.\"	        Support for IPV6_RECVORIGDSTADDR sockopt for UDP sockets
.\"		were contributed by Harry Mason.
.\"	IPV6_TRANSPARENT (Linux 2.6.37)
.\"	    commit 6c46862280c5f55eda7750391bc65cd7e08c7535
.\"	    Author: Balazs Scheidler <bazsi@balabit.hu>
.\"	IPV6_UNICAST_IF (Linux 3.4)
.\"	    commit c4062dfc425e94290ac427a98d6b4721dd2bc91f
.\"	    Author: Erich E. Hoover <ehoover@mines.edu>
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH ipv6 7 2023\-02\-05 "Linux man\-pages 6.03" 
.SH NAME
ipv6\-Linux IPv6 协议实现
.SH SYNOPSIS
.nf
\fB#include <sys/socket.h>\fP
\fB#include <netinet/in.h>\fP
.PP
\fItcp6_socket\fP\fB = socket(AF_INET6, SOCK_STREAM, 0);\fP
\fIraw6_socket\fP\fB = socket(AF_INET6, SOCK_RAW, \fP\fIprotocol\fP\fB);\fP
\fIudp6_socket\fP\fB = socket(AF_INET6, SOCK_DGRAM, \fP\fIprotocol\fP\fB);\fP
.fi
.SH DESCRIPTION
Linux 2.2 可选择实现 Internet 协议版本 6。 该手册页包含 Linux 内核和 glibc 2.1 实现的 IPv6 基本 API
的描述。 该接口基于 BSD 套接字接口; 请参见 \fBsocket\fP(7)。
.PP
IPv6 API 旨在与 IPv4 API 大部分兼容 (参见 \fBip\fP(7)).  此手册页中仅描述了不同之处。
.PP
要将 \fBAF_INET6\fP 套接字绑定到任何进程，应从具有 \fIin6_addr\fP 类型的 \fIin6addr_any\fP 变量复制本地地址。
在静态初始化中，也可以使用 \fBIN6ADDR_ANY_INIT\fP，它扩展为常量表达式。 它们都是网络字节顺序。
.PP
IPv6 回环地址 (::1) 在全局 \fIin6addr_loopback\fP 变量中可用。 对于初始化，应使用
\fBIN6ADDR_LOOPBACK_INIT\fP。
.PP
IPv4 连接可以通过使用 v4\-mapped\-on\-v6 地址类型的 v6 API 来处理; 因此，一个程序只需要支持这种 API
类型就可以支持这两种协议。 这由 C 库中的地址处理函数透明地处理。
.PP
IPv4 和 IPv6 共享本地端口空间。 当您获得到 IPv6 套接字的 IPv4 连接或数据包时，其源地址将映射到 v6。
.SS "Address format"
.in +4n
.EX
struct sockaddr_in6 {
    sa_family_t     sin6_family;   /* AF_INET6 */
    in_port_t       sin6_port;     /* port number */
    uint32_t        sin6_flowinfo; /* IPv6 flow information */
    struct in6_addr sin6_addr;     /* IPv6 address */
    uint32_t        sin6_scope_id; /* Scope ID (new in Linux 2.4) */
};

struct in6_addr {
    unsigned char   s6_addr[16];   /* IPv6 address */
};
.EE
.in
.PP
\fIsin6_family\fP 始终设置为 \fBAF_INET6\fP; \fIsin6_port\fP 为协议端口 (见 \fBip\fP(7)) 中的
\fIsin_port\fP; \fIsin6_flowinfo\fP 为 IPv6 流标识; \fIsin6_addr\fP 是 128 位的 IPv6 地址。
\fIsin6_scope_id\fP 是一个依赖于地址作用域的 ID。 它是 Linux 2.4 中的新产品。 Linux 仅支持链接本地地址，在这种情况下
\fIsin6_scope_id\fP 包含接口索引 (请参见 \fBnetdevice\fP(7))
.PP
IPv6 支持多种地址类型: 单播寻址单个主机，多播寻址一组主机，任播寻址一组主机中最近的成员 (Linux 中未实现)，IPv4\-on\-IPv6 寻址
IPv4 主机，和其他保留地址类型。
.PP
IPv6 的地址表示法是一组 8 个 4 位十六进制数，用 \[aq]:\[aq] 分隔。 \&"::" 代表一串 0 位。 特殊地址是用于回环的
::1 和用于 IPv4\-mapped\-on\-IPv6 的 ::FFFF:<IPv4 address>。
.PP
IPv6 的端口空间与 IPv4 共享。
.SS "Socket options"
IPv6 支持一些特定于协议的套接字选项，这些选项可以用 \fBsetsockopt\fP(2) 设置并用 \fBgetsockopt\fP(2) 读取。 IPv6
的套接字选项级别是 \fBIPPROTO_IPV6\fP。 布尔整数标志为假时为零，否则为真。
.TP 
\fBIPV6_ADDRFORM\fP
将 \fBAF_INET6\fP 套接字转换为不同地址系列的套接字。 目前仅支持 \fBAF_INET\fP。 仅允许连接并绑定到 v4\-mapped\-on\-v6
地址的 IPv6 套接字。 参数是指向包含 \fBAF_INET\fP 的整数的指针。 这对于将 v4 映射套接字作为文件描述符传递给不知道如何处理 IPv6
API 的程序很有用。
.TP 
\fBIPV6_ADD_MEMBERSHIP, IPV6_DROP_MEMBERSHIP\fP
控制多播组中的成员资格。 参数是指向 \fIstruct ipv6_mreq\fP 的指针。
.TP 
\fBIPV6_MTU\fP
\fBgetsockopt\fP(): 检索当前套接字的当前已知路径 MTU。 仅当套接字已连接时有效。 返回一个整数。
.IP
\fBsetsockopt\fP(): 设置要用于套接字的 MTU。 当启用路径 MTU 发现时，MTU 受设备 MTU 或路径 MTU 限制。
参数是一个指向整数的指针。
.TP 
\fBIPV6_MTU_DISCOVER\fP
控制套接字上的路径 MTU 发现。 详见 \fBip\fP(7) 中的 \fBIP_MTU_DISCOVER\fP。
.TP 
\fBIPV6_MULTICAST_HOPS\fP
设置套接字的多播跳数限制。 参数是一个指向整数的指针。 值中的 \-1 表示使用路由默认值，否则应介于 0 到 255 之间。
.TP 
\fBIPV6_MULTICAST_IF\fP
在套接字上设置用于传出多播数据包的设备。 这仅适用于 \fBSOCK_DGRAM\fP 和 \fBSOCK_RAW\fP 套接字。 参数是指向接口索引的指针
(请参见整数中的 \fBnetdevice\fP(7))。
.TP 
\fBIPV6_MULTICAST_LOOP\fP
控制套接字是否看到它自己发送的多播数据包。 参数是指向布尔值的指针。
.TP 
\fBIPV6_RECVPKTINFO\fP (since Linux 2.6.14)
在传入数据报上设置 \fBIPV6_PKTINFO\fP 控制消息的传递。 根据 RFC 3542，此类控制消息包含 \fIstruct in6_pktinfo\fP。 仅允许用于 \fBSOCK_DGRAM\fP 或 \fBSOCK_RAW\fP 套接字。 参数是一个指向整数中的布尔值的指针。
.TP 
.nh
\fBIPV6_RTHDR, IPV6_AUTHHDR, IPV6_DSTOPTS, IPV6_HOPOPTS, IPV6_FLOWINFO, IPV6_HOPLIMIT\fP
.hy
为传入的数据报设置控制消息的传递，其中包含来自接收到的数据包的扩展标头。 \fBIPV6_RTHDR\fP 传递路由标头，\fBIPV6_AUTHHDR\fP
传递身份验证标头，\fBIPV6_DSTOPTS\fP 传递目标选项，\fBIPV6_HOPOPTS\fP 传递跳数选项，\fBIPV6_FLOWINFO\fP
传递包含流 ID 的整数，\fBIPV6_HOPLIMIT\fP 传递包含数据包跳数的整数。 控制消息与套接字选项具有相同的类型。 通过将适当的控制消息放入
\fBsendmsg\fP(2) 的控制缓冲区，也可以为传出数据包设置所有这些标头选项。 仅允许用于 \fBSOCK_DGRAM\fP 或 \fBSOCK_RAW\fP
套接字。 参数是一个指向布尔值的指针。
.TP 
\fBIPV6_RECVERR\fP
控制异步错误选项的接收。 详见 \fBip\fP(7) 中的 \fBIP_RECVERR\fP。 参数是指向布尔值的指针。
.TP 
\fBIPV6_ROUTER_ALERT\fP
将包含路由器警报逐跳选项的转发数据包传递到此套接字。 仅允许用于 \fBSOCK_RAW\fP 套接字。
被窃取的数据包不会被内核转发，用户有责任将它们再次发送出去。 参数是一个指向整数的指针。 正整数表示要拦截的路由器警报选项值。
带有包含此整数的值字段的路由器警报选项的数据包将被传送到套接字。 negative 整数禁止将带有路由器警报选项的数据包传送到此套接字。
.TP 
\fBIPV6_UNICAST_HOPS\fP
设置套接字的单播跳数限制。 参数是一个指向整数的指针。 值中的 \-1 表示使用路由默认值，否则应介于 0 到 255 之间。
.TP 
\fBIPV6_V6ONLY\fP (since Linux 2.4.21 and 2.6)
.\" See RFC 3493
如果此标志设置为真 (nonzero)，则套接字仅限于发送和接收 IPv6 数据包。 在这种情况下，IPv4 和 IPv6
应用程序可以同时绑定到一个端口。
.IP
如果此标志设置为 false (zero)，则套接字可用于在 IPv6 地址或 IPv4 映射的 IPv6 地址之间发送和接收数据包。
.IP
参数是一个指向整数中的布尔值的指针。
.IP
.\" FLOWLABEL_MGR, FLOWINFO_SEND
该标志的默认值由文件 \fI/proc/sys/net/ipv6/bindv6only\fP 的内容定义。 该文件的默认值为 0 (false)。
.SH ERRORS
.TP 
\fBENODEV\fP
用户尝试将 \fBbind\fP(2) 连接到链接本地 IPv6 地址，但提供的 \fIsockaddr_in6\fP 结构体中的 \fIsin6_scope_id\fP
不是有效的接口索引。
.SH VERSIONS
Linux 2.4 将通过更改 \fIin6_addr\fP 的对齐并添加额外的 \fIsin6_scope_id\fP 字段来破坏 \fIsockaddr_in6\fP
对 64 位主机的二进制兼容性。 内核接口保持兼容，但将 \fIsockaddr_in6\fP 或 \fIin6_addr\fP 包含到其他结构中的程序可能不兼容。
对于像 i386 这样的 32 位主机来说这不是问题。
.PP
\fIsin6_flowinfo\fP 字段是 Linux 2.4 中新增的。 当传递的地址长度包含它时，它被内核透明地 passed/read。
一些传递较长地址缓冲区然后检查传出地址长度的程序可能会中断。
.SH NOTES
\fIsockaddr_in6\fP 结构体比泛型 \fIsockaddr\fP 大。 假定所有地址类型都可以安全地存储在 \fIstruct sockaddr\fP
中的程序需要改为使用 \fIstruct sockaddr_storage\fP。
.PP
\fBSOL_IP\fP、\fBSOL_IPV6\fP、\fBSOL_ICMPV6\fP 和其他 \fBSOL_*\fP 套接字选项是 \fBIPPROTO_*\fP
的非便携式变体。 另请详见 \fBip\fP(7)。
.SH BUGS
RFC\2292 中的 IPv6 扩展 API 目前仅部分实现; 尽管 2.2 内核几乎完全支持接收选项，但 glibc 2.1 中缺少用于生成
IPv6 选项的宏。
.PP
缺少对 EH 和 AH 标头的 IPSec 支持。
.PP
流标签管理不完整，此处未记录。
.PP
此手册页不完整。
.SH "SEE ALSO"
\fBcmsg\fP(3), \fBip\fP(7)
.PP
RFC\2553: IPv6 基本 API; Linux 试图符合这一点。 RFC\2460: IPv6 规范。
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
