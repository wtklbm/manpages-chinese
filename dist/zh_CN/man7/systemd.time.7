.\" -*- coding: UTF-8 -*-
'\" t
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH SYSTEMD\&.TIME 7 "" "systemd 253" systemd.time
.ie  \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH NAME
systemd.time \- 时间和日期规范
.SH DESCRIPTION
.PP
在 systemd 中，时间戳、时间跨度和日历事件被显示，并且可以在密切相关的语法中指定 \&。
.SH "DISPLAYING TIME SPANS"
.PP
时间跨度指的是持续时间 \&。在显示中，systemd 将时间跨度显示为一系列以空格分隔的时间值，每个时间值后缀为时间元 \&。Example:
.sp
.if  n \{\
.RS 4
.\}
.nf
2 小时 30 分钟
.fi
.if  n \{\
.RE
.\}
.PP
所有指定的时间值都应该相加 \&。以上因此指的是 150 分钟 \&。显示与语言环境无关，只使用英文时间单位名称 \&。
.SH "PARSING TIME SPANS"
.PP
解析时，systemd 会接受相同的时间跨度语法 \&。分隔空格可以省略 \&。了解以下时间单位:
.sp
.RS 4
.ie  n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
usec, 我们,\(mcs
.RE
.sp
.RS 4
.ie  n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
毫秒，毫秒
.RE
.sp
.RS 4
.ie  n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
秒，秒，秒，s
.RE
.sp
.RS 4
.ie  n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
分，分，分，米
.RE
.sp
.RS 4
.ie  n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
小时，小时，hr，h
.RE
.sp
.RS 4
.ie  n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
天，天，d
.RE
.sp
.RS 4
.ie  n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
周，周，w
.RE
.sp
.RS 4
.ie  n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
月、月、M (定义为 30\&.44 天)
.RE
.sp
.RS 4
.ie  n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
年、年、y (定义为 365\&.25 天)
.RE
.PP
如果不指定时间元，一般以秒为单位，但也有例外，并标明为秒 \&。在少数情况下，"ns"、"nsec" 也被接受，其中时间跨度的粒度允许此
\&。解析通常与语言环境无关，不接受时间单位的非英语名称 \&。
.PP
有效时间跨度规范的示例:
.sp
.if  n \{\
.RS 4
.\}
.nf
2 小时
2hours
48hr
1 年 12 个月
55s500ms
300ms20s 5 天
.fi
.if  n \{\
.RE
.\}
.PP
可以使用 \fBsystemd\-analyze\fP(1) 的 \fBtimespan\fP 命令规范化文本时间跨度以用于测试和验证目的 \&。
.PP
在内部，systemd 通常以微秒时间粒度运行，而用户可配置时间跨度中的默认时间单位通常是秒 (见上文) \&。当将 (high\-level)
元文件语法中的相同设置与匹配的 (更多底层) D\-Bus 属性 (这是 \fBsystemctl\fP(1)\*(Aqs \fBshow\fP 命令显示的内容)
\& 进行比较时，这种差异变得明显。前者通常以 "\&...Sec" 为后缀以指示默认单位秒，后者通常以 "\&...USec"
为后缀以指示底层时间单位，即使它们都封装了完全相同的设置 \&。
.SH "DISPLAYING TIMESTAMPS"
.PP
时间戳是指特定的、唯一的时间点。在显示中，systemd 将按如下方式在本地时区中格式化这些内容:
.sp
.if  n \{\
.RS 4
.\}
.nf
周五 2012\-11\-23 23:02:15 CET
.fi
.if  n \{\
.RE
.\}
.PP
工作日以缩写的英语语言形式 \& 打印。格式与语言环境无关 \&。
.PP
在某些情况下，时间戳显示在 UTC 时区而不是本地时区，这是通过输出中的 "UTC" 时区说明符指示的 \&。
.PP
在某些情况下，时间戳以微秒粒度显示。在这种情况下，亚秒余数由秒分量 \& 的句点分隔。
.SH "PARSING TIMESTAMPS"
.PP
解析时，systemd 将接受类似的语法，但不期望时区规范，除非它作为字符串 "UTC" (对于 UTC 时区) 给出，或者指定为本地配置的时区，或者
IANA 中的时区名称时区数据库格式 \&. 可以使用 "timedatectl list\-timezones" 获取系统支持的完整时区列表 (请参见
\fBtimedatectl\fP(1))\&。建议使用 IANA 格式而不是本地时区名称，因为不太容易出错 (例如 \&.g\&。使用本地时区它 \*
(Aqs 可以在冬天指定夏令时，即使那是不正确的) \&。工作日规范是可选的，但是当指定工作日时，它必须是缩写的 ("Wed") 或非缩写的
("Wednesday") 英文语言形式 (不区分大小写)，并且不受用户的语言环境选择影响 \&。可以省略日期或时间部分，在这种情况下，假定为当前日期或
00:00:00。时间的秒部分也可以省略，在这种情况下假定为 ":00"\&。年份数字可以完整指定，也可以缩写 (省略世纪) \&。
.PP
如果指定了工作日并且日期与指定的星期几不匹配，则时间戳被视为无效。
.PP
解析时，systemd 还将接受一些特殊的占位符而不是时间戳: "now" 可用于指代当前时间 (或当前执行命令的调用)
\&。"today"、"yesterday"、"tomorrow" 分别为当天 00:00:00、前一天 00:00:00\&。
.PP
解析时，systemd 也会接受相对时间规范 \&。以 "+" 为前缀的时间跨度 (见上文) 计算为当前时间加上指定的时间跨度 \&。相应地，以 "\-"
为前缀的时间跨度计算为当前时间减去指定的时间跨度 \&。除了使用 "+" 或 "\-" 作为时间跨度的前缀，它还可以使用空格和单词 "left" 或
`ago`\& 作为后缀。
.PP
最后，以 "@" 为前缀的时间跨度相对于 UNIX 时间纪元 1970 年 1 月 1 日 00:00\& 进行评估。
.PP
有效时间戳及其规范化形式的示例 (假设当前时间为 2012\-11\-23 18:15:22，时区为 UTC+8，例如
"TZ=:Asia/Shanghai") :
.sp
.if  n \{\
.RS 4
.\}
.nf
  2012\-11\-23 星期五 11:12:13 → 2012\-11\-23 星期五 11:12:13
      2012\-11\-23 11:12:13 → 周五 2012\-11\-23 11:12:13
  2012\-11\-23 11:12:13 UTC → 周五 2012\-11\-23 19:12:13
               2012\-11\-23 → 星期五 2012\-11\-23 00:00:00
                 12\-11\-23 → 星期五 2012\-11\-23 00:00:00
                 11:12:13 → 周五 2012\-11\-23 11:12:13
                    11:12 → 周五 2012\-11\-23 11:12:00
                      现在 → 周五 2012\-11\-23 18:15:22
                    今天 → 星期五 2012\-11\-23 00:00:00
                今天 UTC → 周五 2012\-11\-23 16:00:00
                昨天 → 星期五 2012\-11\-22 00:00:00
                 明天 → 星期五 2012\-11\-24 00:00:00
明天 Pacific/Auckland → 周四 2012\-11\-23 19:00:00
                 +3 小时 30 分钟 → 周五 2012\-11\-23 21:45:22
                      \-5s → 周五 2012\-11\-23 18:15:17
                11 分钟前 → 周五 2012\-11\-23 18:04:22
              @1395716396 → 星期二 2014\-03\-25 03:59:56
.fi
.if  n \{\
.RE
.\}
.PP
请注意，具有不匹配时区的远程系统显示的时间戳通常无法在本地解析，因为时区组件不被理解 (除非它恰好是 "UTC") \&。
.PP
时间戳也可以指定为微秒粒度 \&。亚秒余数预计由秒组件 \& 的句号分隔。Example:
.sp
.if  n \{\
.RS 4
.\}
.nf
2014\-03\-25 03:59:56\&.654563
.fi
.if  n \{\
.RE
.\}
.PP
在某些情况下，systemd 将显示相对时间戳 (相对于当前时间，或调用命令的时间) 来代替或补充上述绝对时间戳 \&。相对时间戳的格式如下:
.sp
.if  n \{\
.RS 4
.\}
.nf
2 个月 5 天前
.fi
.if  n \{\
.RE
.\}
.PP
请注意，在需要时间戳的地方也可以接受相对时间戳 (见上文) \&。
.PP
使用 \fBsystemd\-analyze\fP(1) 的 \fBtimestamp\fP 命令来验证和标准化时间戳以用于测试目的 \&。
.SH "CALENDAR EVENTS"
.PP
日历事件可用于在单个表达式中引用一个或多个时间点 \&。它们构成了上述绝对时间戳的超集:
.sp
.if  n \{\
.RS 4
.\}
.nf
周四，周五 2012\-*\-1,5 11:12:13
.fi
.if  n \{\
.RE
.\}
.PP
以上指的是 2012 年任何一个月的第一天或第五天的 11:12:13，但前提是该天是星期四或星期五 \&。
.PP
工作日规范是可选的 \&。如果指定，它应包含一个或多个英文工作日名称，采用缩写 (Wed) 或非缩写 (Wednesday) 形式
(不区分大小写)，并以逗号 \& 分隔。指定由 "\&.\&." 分隔的两个工作日是指一系列连续的工作日 \&。 "," 和 "\&.\&."
可以自由组合 \&。
.PP
在日期和时间规范中，任何组件都可以指定为 "*"，在这种情况下任何值都将匹配 \&。或者，可以将每个组件指定为以逗号 \& 分隔的值列表。值可以以
"/" 和重复值作为后缀，表示匹配值本身和值加上重复值的所有倍数 \&。由 "\&.\&." 分隔的两个值可用于指示值的范围; 范围也可以后跟 "/"
和一个重复值，在这种情况下，表达式匹配从起始值开始的所有时间，并继续匹配相对于起始值的重复值的所有倍数，以结束值结尾 latest\&.
.PP
日期规范可以使用 "~" 来指示一个月中的最后一天 \&。例如，"*\-02~03" 表示 "the third last day in
February,"，"Mon *\-05~07/1" 表示 "the last Monday in May\&."
.PP
秒部分可能在值和重复中包含小数部分 \&。所有分数都四舍五入到小数点后 6 位 \&。
.PP
可以省略时间或日期说明，在这种情况下，分别隐含当前日期和 00:00:00\&。如果未指定第二个组件，则假定为 ":00"\&。
.PP
时区可以指定为字面量字符串 "UTC"，或本地时区，类似于支持的时间戳语法 (见上文)，或 IANA 时区数据库格式的时区 (也见上文) \&。
.PP
以下特殊表达式可用作较长规范化形式的简写形式:
.sp
.if  n \{\
.RS 4
.\}
.nf
    每分钟 → *\-*\-*\\&*:*:00
      每小时 → *\-*\-*\\&*:00:00
       每日 → *\-*\-*\\&00:00:00
     每月 → *\-*\-01\\&00:00:00
      每周 → 星期一 *\-*\-*\\&00:00:00
      每年 → *\-01\-01\\&00:00:00
   每季度 → *\-01,04,07,10\-01 00:00:00
每半年 → *\-01,07\-01 00:00:00
   
.fi
.if  n \{\
.RE
.\}
.PP
有效时间戳及其规范化形式的示例:
.sp
.if  n \{\
.RS 4
.\}
.nf
  周六、周四、周一 \&.\&. 周三、周六 \&.\&. 周日 → Mon\&.\&.Thu,Sat,Sun *\-*\-* 00:00:00
      周一、周日 12\-*\-* 2,1:23 → 周一、周日 2012\-*\-* 01,02:23:00
                    周三 *\-1 → 周三 *\-*\-01 00:00:00
           Wed\&.\&.Wed,Wed *\-1 → 星期三 *\-*\-01 00:00:00
                 周三 17:48 → 周三 *\-*\-* 17:48:00
Wed\&.\&.Sat,Tue 12\-10\-15 1:2:3 → Tue\&.\&.Sat 2012\-10\-15 01:02:03
                *\-*\-7 0:0:0 → *\-*\-07 00:00:00
                      10\-15 → *\-10\-15 00:00:00
        星期一*\-12\-* 17:00 → 星期一*\-12\-* 17:00:00
  周一、周五*\-*\-3、1、2 *:30:45 → 周一、周五*\-*\-01,02,03 *:30:45
       12,14,13,12:20,10,30 → *\-*\-* 12,13,14:10,20,30:00
            12\&.\&.14:10,20,30 → *\-*\-* 12\&.\&.14:10,20,30:00
  周一、周五*\-1/2\-1,3 *:30:45 → 周一、周五*\-01/2\-01,03 *:30:45
             03\-05 08:05:40 → *\-03\-05 08:05:40
                   08:05:40 → *\-*\-* 08:05:40
                      05:40 → *\-*\-* 05:40:00
     周六、周日 12\-05 08:05:40 → 周六、周日 *\-12\-05 08:05:40
           周六、周日 08:05:40 → 周六、周日 *\-*\-* 08:05:40
           2003\-03\-05 05:40 → 2003\-03\-05 05:40:00
 05:40:23\&.4200004/3\&.1700005 → *\-*\-* 05:40:23\&.420000/3\&.170001
             2003\-02\&.\&.04\-05 → 2003\-02\&.\&.04\-05 00:00:00
       2003\-03\-05 05:40 UTC → 2003\-03\-05 05:40:00 UTC
                 2003\-03\-05 → 2003\-03\-05 00:00:00
                      03\-05 → *\-03\-05 00:00:00
                     每小时 → *\-*\-* *:00:00
                      每天 → *\-*\-* 00:00:00
                  每日 UTC → *\-*\-* 00:00:00 UTC
                    每月 → *\-*\-01 00:00:00
                     每周 → 周一 *\-*\-* 00:00:00
    每周 Pacific/Auckland → 星期一 *\-*\-* 00:00:00 Pacific/Auckland
                     每年 → *\-01\-01 00:00:00
                   每年 → *\-01\-01 00:00:00
                      *:2/3 → *\-*\-* *:02/3:00
.fi
.if  n \{\
.RE
.\}
.PP
日历事件由定时器单元使用，有关详细信息，请参见 \fBsystemd.timer\fP(5)\&。
.PP
使用 \fBsystemd\-analyze\fP(1) 的 \fBcalendar\fP 命令来验证和标准化用于测试目的的日历时间规范
\&。该工具还计算指定的日历事件下一次发生的时间。
.SH "SEE ALSO"
.PP
\fBsystemd\fP(1), \fBjournalctl\fP(1), \fBsystemd.timer\fP(5), \fBsystemd.unit\fP(5),
\fBsystemd.directives\fP(7), \fBsystemd\-analyze\fP(1)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
