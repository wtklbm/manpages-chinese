.\" -*- coding: UTF-8 -*-
.\" Copyright (c) 1993
.\"    The Regents of the University of California.  All rights reserved.
.\" and Copyright (c) 2020 by Alejandro Colomar <alx@kernel.org>
.\"
.\" SPDX-License-Identifier: BSD-3-Clause
.\"
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH queue 7 2023\-02\-05 "Linux man\-pages 6.03" 
.SH NAME
queue \- 链表和队列的实现
.SH DESCRIPTION
\fI<sys/queue.h>\fP 头文件提供了一组定义和操作以下数据结构的宏:
.TP 
SLIST
单链表
.TP 
LIST
双向链表
.TP 
STAILQ
单链尾队列
.TP 
TAILQ
双链尾队列
.TP 
CIRCLEQ
双向循环队列
.PP
所有结构都支持以下功能:
.IP \[bu] 3
在列表的头部插入一个新条目。
.IP \[bu]
在列表中的任何元素之后插入一个新条目。
.IP \[bu]
O(1) 从列表头部删除一个条目。
.IP \[bu]
.\".IP *
.\" Swapping the contents of two lists.
向前遍历列表。
.PP
代码大小和执行时间取决于所使用的数据结构体的复杂性，因此程序员应注意选择合适的结构体。
.SS "Singly linked lists (SLIST)"
单向链表是最简单的，只支持上述功能。 单向链表非常适合具有大型数据集且很少或没有删除的应用程序，或者用于实现 LIFO 队列。 单向链表添加以下功能:
.IP \[bu] 3
O(n) 删除列表中的任何条目。
.SS "Singly linked tail queues (STAILQ)"
单链接尾队列添加以下功能:
.IP \[bu] 3
条目可以添加到列表的末尾。
.IP \[bu]
O(n) 删除列表中的任何条目。
.IP \[bu]
它们可能是串联的。
.PP
However:
.IP \[bu] 3
所有列表插入都必须指定列表的头部。
.IP \[bu]
每个头条目需要两个指针而不是一个。
.PP
单链接尾队列非常适合具有大型数据集且很少或没有删除的应用程序，或者用于实现 FIFO 队列。
.SS "Doubly linked data structures"
所有双向链接类型的数据结构 (列表和尾队列) 还允许:
.IP \[bu] 3
在列表中的任何元素之前插入一个新条目。
.IP \[bu]
O(1) 删除列表中的任何条目。
.PP
However:
.IP \[bu] 3
每个元素需要两个指针而不是一个。
.SS "Doubly linked lists (LIST)"
链表是最简单的双向链接数据结构。 他们在上面添加了以下功能:
.IP \[bu] 3
它们可以向后遍历。
.PP
However:
.IP \[bu] 3
要向后遍历，必须指定开始遍历的条目和包含它的列表。
.SS "Doubly linked tail queues (TAILQ)"
尾队列添加以下功能:
.IP \[bu] 3
条目可以添加到列表的末尾。
.IP \[bu]
它们可以从尾部到头部向后遍历。
.IP \[bu]
它们可能是串联的。
.PP
However:
.IP \[bu] 3
所有列表插入和删除都必须指定列表的头部。
.IP \[bu]
每个头条目需要两个指针而不是一个。
.SS "Doubly linked circular queues (CIRCLEQ)"
循环队列在上面添加了以下功能:
.IP \[bu] 3
第一个和最后一个条目是连接的。
.PP
However:
.IP \[bu] 3
遍历的终止条件比较复杂。
.SH STANDARDS
不在 POSIX.1、POSIX.1\-2001 或 POSIX.1\-2008 中。 出现在 BSD 上。
\fI<sys/queue.h>\fP 宏首次出现在 4.4BSD 中。
.SH NOTES
一些 BSD 提供 SIMPLEQ 而不是 STAILQ。 它们是相同的，但由于历史原因，它们在不同的 BSD 上的名称不同。 STAILQ 起源于
FreeBSD，SIMPLEQ 起源于 NetBSD。 出于兼容性原因，某些系统同时提供两组宏。 glibc 提供 STAILQ 和
SIMPLEQ，它们除了缺少一个等同于 \fBSTAILQ_CONCAT\fP() 的 SIMPLEQ 之外是相同的。
.SH "SEE ALSO"
\fBcircleq\fP(3), \fBinsque\fP(3), \fBlist\fP(3), \fBslist\fP(3), \fBstailq\fP(3),
\fBtailq\fP(3)
.\" .BR tree (3)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
