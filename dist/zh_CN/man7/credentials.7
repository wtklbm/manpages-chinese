.\" -*- coding: UTF-8 -*-
.\" Copyright (c) 2007 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" SPDX-License-Identifier: Linux-man-pages-copyleft
.\"
.\" 2007-06-13 Creation
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH credentials 7 2023\-02\-05 "Linux man\-pages 6.03" 
.SH NAME
凭据 \- 进程标识符
.SH DESCRIPTION
.SS "Process ID (PID)"
每个进程都有一个唯一的非负整数标识符，该标识符是在使用 \fBfork\fP(2) 创建进程时分配的。 进程可以使用 \fBgetpid\fP(2) 获取其
PID。 PID 使用类型 \fIpid_t\fP 表示 (在 \fI<sys/types.h>\fP).h 中定义)。
.PP
.\" .BR sched_rr_get_interval (2),
.\" .BR sched_getaffinity (2),
.\" .BR sched_setaffinity (2),
.\" .BR sched_getparam (2),
.\" .BR sched_setparam (2),
.\" .BR sched_setscheduler (2),
.\" .BR sched_getscheduler (2),
.\" .BR getsid (2),
.\" .BR waitid (2),
.\" .BR wait4 (2),
PID 用于一系列系统调用以识别受调用影响的进程，例如:
\fBkill\fP(2)、\fBptrace\fP(2)、\fBsetpriority\fP(2)、\fBsetpgid\fP(2)、\fBsetsid\fP(2)、\fBsigqueue\fP(3)
和 \fBwaitpid\fP(2)。
.PP
进程的 PID 跨 \fBexecve\fP(2) 保留。
.SS "Parent process ID (PPID)"
进程的父进程 ID 标识使用 \fBfork\fP(2) 创建此进程的进程。 进程可以使用 \fBgetppid\fP(2) 获取其 PPID。 PPID 使用类型
\fIpid_t\fP 表示。
.PP
进程的 PPID 跨 \fBexecve\fP(2) 保留。
.SS "Process group ID and session ID"
每个进程都有一个会话 ID 和一个进程组 ID，两者都使用类型 \fIpid_t\fP 表示。 进程可以使用 \fBgetsid\fP(2) 获取其会话 ID，使用
\fBgetpgrp\fP(2) 获取其进程组 ID。
.PP
\fBfork\fP(2) 创建的子进程继承其父进程的会话 ID 和进程组 ID。进程的会话 ID 和进程组 ID 在 \fBexecve\fP(2) 中保留。
.PP
会话和进程组是为支持 shell 作业控制而设计的抽象概念。 进程组 (有时称为 "job") 是共享相同进程组 ID 的进程的集合; shell 为
process(es) 创建一个新的进程组，用于执行单个命令或管道 (例如，为执行命令 "ls\ |\ wc" 而创建的两个进程放在同一个进程组中)。
可以使用 \fBsetpgid\fP(2) 设置进程的组成员身份。 进程 ID 与其进程组 ID 相同的进程是该组的 \fIprocess group leader\fP。
.PP
会话是共享相同会话 ID 的进程的集合。一个进程组的所有成员也有相同的会话 ID
(即，一个进程组的所有成员总是属于同一个会话，因此会话和进程组形成严格的两级进程层次结构。) 当进程调用 \fBsetsid\fP(2)
时创建新会话，这将创建一个新会话，其会话 ID 与调用 \fBsetsid\fP(2) 的进程的 PID 相同。 会话的创建者称为 \fIsession leader\fP。
.PP
一个会话中的所有进程共享一个 \fIcontrolling terminal\fP。 控制终端在会话领导者第一次打开终端时建立 (除非在调用
\fBopen\fP(2)) 时指定了 \fBO_NOCTTY\fP 标志。 一个终端最多可以是一个会话的控制终端。
.PP
一个会话中至多一个作业可能是 \fIforeground job\fP; 会话中的其他作业是 \fIbackground jobs\fP。
只有前台作业可以从终端读取; 当后台进程尝试从终端读取时，它的进程组会收到一个 \fBSIGTTIN\fP 信号，该信号会暂停作业。 如果为终端设置了
\fBTOSTOP\fP 标志 (参见 \fBtermios\fP(3))，则只有前台作业可以写入终端; 从后台作业写入会导致生成 \fBSIGTTOU\fP
信号，从而暂停作业。 当按下生成信号的终端键 (例如 \fIinterrupt\fP 键，通常是 control\-C) 时，信号将发送到前台作业中的进程。
.PP
各种系统调用和库函数可能作用于一个进程组的所有成员，包括
\fBkill\fP(2)、\fBkillpg\fP(3)、\fBgetpriority\fP(2)、\fBsetpriority\fP(2)、\fBioprio_get\fP(2)、\fBioprio_set\fP(2)、\fBwaitid\fP(2)
和 \fBwaitpid\fP(2)。 另请参见 \fBfcntl\fP(2) 中对 \fBF_GETOWN\fP、\fBF_GETOWN_EX\fP、\fBF_SETOWN\fP
和 \fBF_SETOWN_EX\fP 操作的讨论。
.SS "User and group identifiers"
每个进程都有各种关联的用户和组 ID。 这些 ID 是整数，分别使用类型 \fIuid_t\fP 和 \fIgid_t\fP (定义在
\fI<sys/types.h>\fP).
.PP
在 Linux 上，每个进程都有以下用户和组标识符:
.IP \[bu] 3
真实用户 ID 和真实组 ID。这些 ID 确定谁拥有进程。 进程可以使用 \fBgetuid\fP(2) (\fBgetgid\fP(2)) 获取其真实用户
(group) ID。
.IP \[bu]
有效用户 ID 和有效组 ID。内核使用这些 ID 来确定进程在访问消息队列、共享内存和信号量等共享资源时将拥有所有权的权限。 在大多数 UNIX
系统上，这些 ID 还决定了访问文件时的权限。 但是，Linux 使用下面描述的文件系统 ID 来完成此任务。 进程可以使用 \fBgeteuid\fP(2)
(\fBgetegid\fP(2)) 获取其有效用户 (group) ID。
.IP \[bu]
已保存组用户 ID 和已保存组组 ID。 这些 ID 在 set\-user\-ID 和 set\-group\-ID
程序中使用，以保存程序执行时设置的相应有效 ID 的副本 (参见 \fBexecve\fP(2)).  set\-user\-ID 程序可以通过在其真实用户 ID
和保存的 set\-user\-ID 中的值之间来回切换其有效用户 ID 来承担和丢弃特权。 这种切换是通过调用
\fBseteuid\fP(2)、\fBsetreuid\fP(2) 或 \fBsetresuid\fP(2) 来完成的。 设置组 ID 程序使用
\fBsetegid\fP(2)、\fBsetregid\fP(2) 或 \fBsetresgid\fP(2) 执行类似的任务。 进程可以使用
\fBgetresuid\fP(2) (\fBgetresgid\fP(2)) 获取其保存的 set\-user\-ID (set\-group\-ID)。
.IP \[bu]
文件系统用户 ID 和文件系统组 ID (Linux\-specific)。 这些 ID 与下面描述的补充组 ID 一起用于确定访问文件的权限; 详见
\fBpath_resolution\fP(7)。 每当进程的有效用户 (group) ID 更改时，内核也会自动将文件系统用户 (group) ID
更改为相同的值。 因此，文件系统 ID 通常与相应的有效 ID 具有相同的值，因此文件权限检查的语义在 Linux 上与在其他 UNIX 系统上相同。
通过调用 \fBsetfsuid\fP(2) 和 \fBsetfsgid\fP(2) 可以使文件系统 ID 与有效 ID 不同。
.IP \[bu]
.\" Since Linux 2.6.4, the limit is visible via the read-only file
.\" /proc/sys/kernel/ngroups_max.
.\" As at 2.6.22-rc2, this file is still read-only.
补充组 ID。 这是一组额外的组 ID，用于在访问文件和其他共享资源时进行权限检查。 在 Linux 2.6.4 之前，一个进程最多可以是 32
个补充组的成员; 从 Linux 2.6.4 开始，一个进程最多可以成为 65536 个补充组的成员。 调用
\fIsysconf(_SC_NGROUPS_MAX)\fP 可用于确定进程可能属于的补充组的数量。 进程可以使用 \fBgetgroups\fP(2)
获取其补充组 ID 集。
.PP
\fBfork\fP(2) 创建的子进程继承其父进程的用户和组 ID 的副本。 在 \fBexecve\fP(2) 期间，保留进程的真实用户和组 ID 以及补充组
ID; 有效和保存的集 ID 可能会更改，如 \fBexecve\fP(2) 中所述。
.PP
除了上述目的之外，进程的用户 ID 还用于许多其他上下文:
.IP \[bu] 3
在确定发送信号的权限时 (参见 \fBkill\fP(2));
.IP \[bu]
在使用
\fBsetpriority\fP(2)、\fBsched_setaffinity\fP(2)、\fBsched_setscheduler\fP(2)、\fBsched_setparam\fP(2)、\fBsched_setattr\fP(2)
和 \fBioprio_set\fP(2) 确定设置进程调度参数 (nice 值、实时调度策略和优先级、CPU 亲和力、I/O 优先级) 的权限时;
.IP \[bu]
检查资源限制时 (参见 \fBgetrlimit\fP(2));
.IP \[bu]
.\"
检查进程可能创建的 inotify 实例数量限制时 (参见 \fBinotify\fP(7)).
.SS "Modifying process user and group IDs"
根据相关手册页中描述的规则，进程可以使用以下 API 来修改其用户和组 ID:
.TP 
\fBsetuid\fP(2) (\fBsetgid\fP(2))
修改进程的真实 (可能有效和保存集) 用户 (group) ID。
.TP 
\fBseteuid\fP(2) (\fBsetegid\fP(2))
修改进程的有效用户 (group) ID。
.TP 
\fBsetfsuid\fP(2) (\fBsetfsgid\fP(2))
修改进程的文件系统用户 (group) ID。
.TP 
\fBsetreuid\fP(2) (\fBsetregid\fP(2))
修改进程的真实有效 (可能是保存集) 用户 (group) ID。
.TP 
\fBsetresuid\fP(2) (\fBsetresgid\fP(2))
修改进程的真实、有效、保存集用户 (group) ID。
.TP 
\fBsetgroups\fP(2)
修改进程的补充组列表。
.PP
对进程的有效用户 (group) ID 的任何更改都会自动转移到进程的文件系统用户 (group) ID。如 \fBprctl\fP(2)
中所述，对进程的有效用户或组 ID 的更改也会影响进程 "dumpable" 属性。
.PP
如 \fBcapabilities\fP(7) 中所述，对流程用户和组 ID 的更改会影响流程的功能。
.SH STANDARDS
进程 ID、父进程 ID、进程组 ID 和会话 ID 在 POSIX.1 中指定。 真实的、有效的和保存的集合用户和组 ID，以及补充组 ID，在
POSIX.1 中指定。 文件系统用户和组 ID 是 Linux 扩展名。
.SH NOTES
\fI/proc/\fPpid\fI/status\fP 文件中的各个字段显示上述进程凭证。 有关详细信息，请参见 \fBproc\fP(5)。
.PP
POSIX 线程规范要求凭据由进程中的所有线程共享。 但是，在内核级别，Linux 为每个线程维护单独的用户和组凭据。 NPTL
线程实现做了一些工作来确保对用户或组凭据的任何更改 (例如，对 \fBsetuid\fP(2)、\fBsetresuid\fP(2)) 的调用)
都传递到进程中的所有 POSIX 线程。 有关详细信息，请参见 \fBnptl\fP(7)。
.SH "SEE ALSO"
\fBbash\fP(1), \fBcsh\fP(1), \fBgroups\fP(1), \fBid\fP(1), \fBnewgrp\fP(1), \fBps\fP(1),
\fBrunuser\fP(1), \fBsetpriv\fP(1), \fBsg\fP(1), \fBsu\fP(1), \fBaccess\fP(2),
\fBexecve\fP(2), \fBfaccessat\fP(2), \fBfork\fP(2), \fBgetgroups\fP(2), \fBgetpgrp\fP(2),
\fBgetpid\fP(2), \fBgetppid\fP(2), \fBgetsid\fP(2), \fBkill\fP(2), \fBsetegid\fP(2),
\fBseteuid\fP(2), \fBsetfsgid\fP(2), \fBsetfsuid\fP(2), \fBsetgid\fP(2),
\fBsetgroups\fP(2), \fBsetpgid\fP(2), \fBsetresgid\fP(2), \fBsetresuid\fP(2),
\fBsetsid\fP(2), \fBsetuid\fP(2), \fBwaitpid\fP(2), \fBeuidaccess\fP(3),
\fBinitgroups\fP(3), \fBkillpg\fP(3), \fBtcgetpgrp\fP(3), \fBtcgetsid\fP(3),
\fBtcsetpgrp\fP(3), \fBgroup\fP(5), \fBpasswd\fP(5), \fBshadow\fP(5),
\fBcapabilities\fP(7), \fBnamespaces\fP(7), \fBpath_resolution\fP(7),
\fBpid_namespaces\fP(7), \fBpthreads\fP(7), \fBsignal\fP(7), \fBsystem_data_types\fP(7),
\fBunix\fP(7), \fBuser_namespaces\fP(7), \fBsudo\fP(8)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
