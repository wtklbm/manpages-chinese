.\" -*- coding: UTF-8 -*-
.\" This manpage has been automatically generated by docbook2man
.\" from a DocBook document.  This tool can be found at:
.\" <http://shell.ipoline.com/~elmert/comp/docbook2X/>
.\" Please send any bug reports, improvements, comments, patches,
.\" etc. to Steve Cheng <steve@ggi-project.org>.
.\"
.\" SPDX-License-Identifier: MIT
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH futex 7 2022\-10\-30 "Linux man\-pages 6.03" 
.SH NAME
futex \- 快速用户空间锁定
.SH SYNOPSIS
.nf
\fB#include <linux/futex.h>\fP
.fi
.SH DESCRIPTION
Linux 内核提供 futexes (`快速用户空间交互锁`) 作为快速用户空间锁定和信号量的构建块。 Futexes
非常基础，非常适合构建更高级别的锁定抽象，例如交互锁、条件变量、读写锁、屏障和信号量。
.PP
大多数程序员实际上不会直接使用 futexes，而是依赖于构建在它们之上的系统库，例如 Native POSIX Thread Library
(NPTL) (参见 \fBpthreads\fP(7)).
.PP
futex 由一块可以在进程或线程之间共享的内存标识。 在这些不同的进程中，futex 不需要具有相同的地址。 在其最简单的形式中，futex
具有信号量语义; 它是一个可以原子递增和递减的计数器; 进程可以等待该值变为正值。
.PP
对于非竞争情况，Futex 操作完全发生在用户空间。 内核只参与仲裁有争议的案件。 由于任何理智的设计都会争取非竞争，因此 futexes
也针对这种情况进行了优化。
.PP
在它的裸体形式中，futex 是一个对齐的整数，它只被原子汇编程序指令触及。 这个整数在所有平台上都是四个字节长。 进程可以使用 \fBmmap\fP(2)
共享这个整数，通过共享内存段，或者因为它们共享内存空间，在这种情况下，应用程序通常称为多线程。
.SS Semantics
任何 futex 操作都在用户空间开始，但可能需要使用 \fBfutex\fP(2) 系统调用与内核通信。
.PP
要 "up" 一个 futex，执行适当的汇编程序指令，这将导致主机 CPU 自动递增整数。 之后，检查它是否确实从 0 变为
1，在这种情况下没有服务员并且操作完成。 这是非竞争性的情况，速度很快，应该很常见。
.PP
在竞争的情况下，原子增量从 \-1 (或其他一些 negative 数字) 更改了计数器。 如果检测到，则有服务员。 用户空间现在应该将计数器设置为 1
并指示内核使用 \fBFUTEX_WAKE\fP 操作唤醒任何等待者。
.PP
等待一个 futex，到 "down" 吧，就是逆向操作。 原子地递减计数器并检查它是否变为 0，在这种情况下操作完成并且 futex 是无竞争的。
在所有其他情况下，进程应将计数器设置为 \-1 并请求内核等待另一个进程启动 futex。 这是使用 \fBFUTEX_WAIT\fP 操作完成的。
.PP
\fBfutex\fP(2) 系统调用可以有选择地传递一个超时，指定内核应该等待 futex 被提升的时间。 在这种情况下，语义更加复杂，程序员参考
\fBfutex\fP(2) 以获取更多详细信息。 异步 futex 等待也是如此。
.SH VERSIONS
最初的 futex 支持已合并到 Linux 2.5.7 中，但语义与上述那些不同。 当前语义从 Linux 2.5.40 开始可用。
.SH NOTES
重申一下，裸 futexes 并不是为了让最终用户易于使用的抽象。 实现者应该具备汇编知识，并且阅读过下面引用的 futex 用户空间库的源代码。
.PP
.\" .SH AUTHORS
.\" .PP
.\" Futexes were designed and worked on by Hubertus Franke
.\" (IBM Thomas J. Watson Research Center),
.\" Matthew Kirkwood, Ingo Molnar (Red Hat) and
.\" Rusty Russell (IBM Linux Technology Center).
.\" This page written by bert hubert.
本手册页说明了 \fBfutex\fP(2) 原语，的最常见用法; 它绝不是唯一的。
.SH "SEE ALSO"
\fBclone\fP(2), \fBfutex\fP(2), \fBget_robust_list\fP(2), \fBset_robust_list\fP(2),
\fBset_tid_address\fP(2), \fBpthreads\fP(7)
.PP
\fIFuss, Futexes and Furwocks: Fast Userlevel Locking in Linux\fP (渥太华 Linux
研讨会论文集 2002)，futex 示例库，futex\-*.tar.bz2
.UR https://mirrors.kernel.org\:/pub\:/linux\:/kernel\:/people\:/rusty/
.UE .
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
