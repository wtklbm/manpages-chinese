.\" -*- coding: UTF-8 -*-
.\" Copyright (c) 2020 by Alejandro Colomar <alx@kernel.org>
.\" and Copyright (c) 2020 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" SPDX-License-Identifier: Linux-man-pages-copyleft
.\"
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH system_data_types 7 2023\-02\-05 "Linux man\-pages 6.03" 
.SH NAME
system_data_types \- 系统数据类型概述
.SH DESCRIPTION
.\" Layout:
.\"	A list of type names (the struct/union keyword will be omitted).
.\"	Each entry will have the following parts:
.\"		* Include (see NOTES)
.\"
.\"		* Definition (no "Definition" header)
.\"			Only struct/union types will have definition;
.\"			typedefs will remain opaque.
.\"
.\"		* Description (no "Description" header)
.\"			A few lines describing the type.
.\"
.\"		* Versions (optional)
.\"
.\"		* Conforming to (see NOTES)
.\"			Format: CXY and later; POSIX.1-XXXX and later.
.\"
.\"		* Notes (optional)
.\"
.\"		* Bugs (if any)
.\"
.\"		* See also
.\"------------------------------------- aiocb ------------------------/
.\"------------------------------------- blkcnt_t ---------------------/
.\"------------------------------------- blksize_t --------------------/
.\"------------------------------------- cc_t -------------------------/
.\"------------------------------------- clock_t ----------------------/
.\"------------------------------------- clockid_t --------------------/
.\"------------------------------------- dev_t ------------------------/
.\"------------------------------------- div_t ------------------------/
.\"------------------------------------- double_t ---------------------/
.\"------------------------------------- fd_set -----------------------/
.\"------------------------------------- fenv_t -----------------------/
.\"------------------------------------- fexcept_t --------------------/
.\"------------------------------------- FILE -------------------------/
.\"------------------------------------- float_t ----------------------/
.\"------------------------------------- gid_t ------------------------/
.\"------------------------------------- id_t -------------------------/
.\"------------------------------------- imaxdiv_t --------------------/
.\"------------------------------------- intmax_t ---------------------/
.\"------------------------------------- intN_t -----------------------/
.\"------------------------------------- intptr_t ---------------------/
.\"------------------------------------- lconv ------------------------/
.\"------------------------------------- ldiv_t -----------------------/
.\"------------------------------------- lldiv_t ----------------------/
.\"------------------------------------- mode_t -----------------------/
.\"------------------------------------- off64_t ----------------------/
.\"------------------------------------- off_t ------------------------/
.\"------------------------------------- pid_t ------------------------/
.\"------------------------------------- ptrdiff_t --------------------/
.\"------------------------------------- regex_t ----------------------/
.\"------------------------------------- regmatch_t -------------------/
.\"------------------------------------- regoff_t ---------------------/
.\"------------------------------------- sigevent ---------------------/
.TP 
\fIsigevent\fP
.RS
\fIInclude\fP: \fI<signal.h>\fP.
或者，\fI<aio.h>\fP、\fI<mqueue.h>\fP 或 \fI<time.h>\fP。
.PP
.EX
struct sigevent {
    int             sigev_notify; /* Notification type */
    int             sigev_signo;  /* Signal number */
    union sigval    sigev_value;  /* Signal value */
    void          (*sigev_notify_function)(union sigval);
                                  /* Notification function */
    pthread_attr_t *sigev_notify_attributes;
                                  /* Notification attributes */
};
.EE
.PP
有关此类型的更多详细信息，请参见 \fBsigevent\fP(7)。
.PP
\fIVersions\fP: \fI<aio.h>\fP and \fI<time.h>\fP define \fIsigevent\fP
since POSIX.1\-2008.
.PP
\fIConforming to\fP: POSIX.1\-2001 及更高版本。
.PP
\fISee also\fP: \fBtimer_create\fP(2), \fBgetaddrinfo_a\fP(3), \fBlio_listio\fP(3),
\fBmq_notify\fP(3)
.PP
另请参见本页中的 \fIaiocb\fP 结构体。
.RE
.\"------------------------------------- siginfo_t --------------------/
.TP 
\fIsiginfo_t\fP
.RS
\fIInclude\fP: \fI<signal.h>\fP.   或者，\fI<sys/wait.h>\fP。
.PP
.EX
typedef 结构体 {
    int      si_signo;  /* Signal number */
    int      si_code;   /* Signal code */
    pid_t    si_pid;    /* Sending process ID */
    uid_t    si_uid;    /* Real user ID of sending process */
    void    *si_addr;   /* Address of faulting instruction */
    int      si_status; /* Exit value or signal */
    union sigval si_value;  /* Signal value */
} siginfo_t;
.EE
.PP
与信号相关的信息。 有关此结构体的更多详细信息 (包括其他特定于 Linux 的字段)，请参见 \fBsigaction\fP(2)。
.PP
\fIConforming to\fP: POSIX.1\-2001 及更高版本。
.PP
\fISee also\fP: \fBpidfd_send_signal\fP(2), \fBrt_sigqueueinfo\fP(2),
\fBsigaction\fP(2), \fBsigwaitinfo\fP(2), \fBpsiginfo\fP(3)
.RE
.\"------------------------------------- sigset_t ---------------------/
.TP 
\fIsigset_t\fP
.RS
\fIInclude\fP: \fI<signal.h>\fP.   或者，\fI<spawn.h>\fP 或
\fI<sys/select.h>\fP。
.PP
这是一种表示一组信号的类型。 根据 POSIX，这应该是一个整数或结构体类型。
.PP
\fIConforming to\fP: POSIX.1\-2001 及更高版本。
.PP
\fISee also\fP: \fBepoll_pwait\fP(2), \fBppoll\fP(2), \fBpselect\fP(2), \fBsigaction\fP(2),
\fBsignalfd\fP(2), \fBsigpending\fP(2), \fBsigprocmask\fP(2), \fBsigsuspend\fP(2),
\fBsigwaitinfo\fP(2), \fBsignal\fP(7)
.RE
.\"------------------------------------- sigval -----------------------/
.TP 
\fIsigval\fP
.RS
\fIInclude\fP: \fI<signal.h>\fP.
.PP
.EX
union sigval {
    int     sigval_int; /* Integer value */
    void   *sigval_ptr; /* Pointer value */
};
.EE
.PP
数据通过信号传递。
.PP
\fIConforming to\fP: POSIX.1\-2001 及更高版本。
.PP
\fISee also\fP: \fBpthread_sigqueue\fP(3), \fBsigqueue\fP(3), \fBsigevent\fP(7)
.PP
另请参见本页中的 \fIsigevent\fP 结构体和 \fIsiginfo_t\fP 类型。
.RE
.\"------------------------------------- size_t -----------------------/
.\"------------------------------------- sockaddr ---------------------/
.\"------------------------------------- socklen_t --------------------/
.\"------------------------------------- ssize_t ----------------------/
.\"------------------------------------- stat -------------------------/
.\"------------------------------------- suseconds_t ------------------/
.\"------------------------------------- time_t -----------------------/
.\"------------------------------------- timer_t ----------------------/
.\"------------------------------------- timespec ---------------------/
.\"------------------------------------- timeval ----------------------/
.\"------------------------------------- uid_t ----------------------/
.\"------------------------------------- uintmax_t --------------------/
.\"------------------------------------- uintN_t ----------------------/
.\"------------------------------------- uintptr_t --------------------/
.\"------------------------------------- useconds_t -------------------/
.\"------------------------------------- va_list ----------------------/
.\"------------------------------------- void * -----------------------/
.\"--------------------------------------------------------------------/
.SH NOTES
本手册页中描述的结构应至少包含其定义中显示的成员，无特定顺序。
.PP
本页中描述的大多数整数类型没有对应的 \fBprintf\fP(3) 和 \fBscanf\fP(3) 系列的函数长度修饰符。
要打印没有长度修饰符的整数类型的值，应该通过显式转换将其转换为 \fIintmax_t\fP 或 \fIuintmax_t\fP。
要扫描到没有长度修饰符的整数类型变量，应使用 \fIintmax_t\fP 或 \fIuintmax_t\fP 类型的中间临时变量。
从临时变量复制到目标变量时，值可能会溢出。 如果类型有上限和下限，用户应该在实际复制值之前检查该值是否在这些限制内。
下面的示例显示了应该如何进行这些转换。
.SS "Conventions used in this page"
在 "Conforming to" 中，我们只关心 C99 及更高版本以及 POSIX.1\-2001 及更高版本。
某些类型可能在这些标准之一的早期版本中指定，但为了简单起见，我们省略了早期标准的细节。
.PP
在 "Include" 中，我们首先注意到根据 C 或 POSIX.1 标准定义类型的 "primary" header(s)。 在
"Alternatively" 下，我们注意到标准指定的附加标头应定义类型。
.SH EXAMPLES
下面显示的程序从字符串中扫描并打印存储在没有长度修饰符的整数类型变量中的值。 与 \fIintmax_t\fP
之间的适当转换以及适当的范围检查的使用如上文注释部分所述。
.PP
.EX
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>

int
main (void)
{
    static const char *const str = "500000 us in half a second";
    suseconds_t us;
    intmax_t    tmp;

    /* Scan the number from the string into the temporary variable. */

    sscanf(str, "%jd", &tmp);

    /* Check that the value is within the valid range of suseconds_t. */

    if (tmp < \-1 || tmp > 1000000) {
        fprintf(stderr, "Scanned value outside valid range!\en");
        exit(EXIT_FAILURE);
    }

    /* Copy the value to the suseconds_t variable \[aq]us\[aq]. */

    us = tmp;

    /* Even though suseconds_t can hold the value \-1, this isn\[aq]t
       a sensible number of microseconds. */

    if (us < 0) {
        fprintf(stderr, "Scanned value shouldn\[aq]t be negative!\en");
        exit(EXIT_FAILURE);
    }

    /* Print the value. */

    printf("There are %jd microseconds in half a second.\en",
            (intmax_t) us);

    exit(EXIT_SUCCESS);
}
.EE
.SH "SEE ALSO"
\fBfeature_test_macros\fP(7), \fBstandards\fP(7)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
