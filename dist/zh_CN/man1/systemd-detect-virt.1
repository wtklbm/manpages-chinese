.\" -*- coding: UTF-8 -*-
'\" t
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH SYSTEMD\-DETECT\-VIRT 1 "" "systemd 253" systemd\-detect\-virt
.ie  \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH NAME
systemd\-detect\-virt \- 检测虚拟化环境中的执行
.SH SYNOPSIS
.HP \w'\fBsystemd\-detect\-virt\fR\ 'u
\fBsystemd\-detect\-virt\fP [OPTIONS...]
.SH DESCRIPTION
.PP
\fBsystemd\-detect\-virt\fP 检测到虚拟化环境中的执行 \&。识别虚拟化技术，可以区分全机虚拟化和容器虚拟化。
如果检测到虚拟化技术，systemd\-detect\-virt 退出并返回 0 (success)，否则返回非零
(error)\&。默认情况下，检测任何类型的虚拟化，可以使用选项 \fB\-\-container\fP 和 \fB\-\-vm\fP 来限制检测什么类型的虚拟化 \&。
.PP
在没有 \fB\-\-quiet\fP 的情况下执行时，将为检测到的虚拟化技术打印一个短标识符 \&。目前确定了以下技术:
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
\fBTable\ \&1.\ \&Known virtualization technologies (both VM, i\&.e\&. full hardware virtualization, and container, i\&.e\&. shared kernel virtualization)\fP
.TS
allbox tab(:);
lB lB lB.
T{
Type
T}:T{
ID
T}:T{
Product
T}
.T&
lt l l
^ l l
^ l l
^ l l
^ l l
^ l l
^ l l
^ l l
^ l l
^ l l
^ l l
^ l l
^ l l
^ l l
^ l l
^ l l
^ l l
lt l l
^ l l
^ l l
^ l l
^ l l
^ l l
^ l l
^ l l
^ l l
^ l l.
T{
VM
T}:T{
\fIqemu\fP
T}:T{
QEMU software virtualization, without KVM
T}
:T{
\fIkvm\fP
T}:T{
Linux KVM kernel virtual machine, in combination with QEMU\&. Not used for other virtualizers using the KVM interfaces, such as Oracle VirtualBox or Amazon EC2 Nitro, see below\&.
T}
:T{
\fIamazon\fP
T}:T{
Amazon EC2 Nitro using Linux KVM
T}
:T{
\fIzvm\fP
T}:T{
s390 z/VM
T}
:T{
\fIvmware\fP
T}:T{
VMware Workstation or Server, and related products
T}
:T{
\fImicrosoft\fP
T}:T{
Hyper\-V, also known as Viridian or Windows Server Virtualization
T}
:T{
\fIoracle\fP
T}:T{
Oracle VM VirtualBox (historically marketed by innotek and Sun Microsystems), for legacy and KVM hypervisor
T}
:T{
\fIpowervm\fP
T}:T{
IBM PowerVM hypervisor \(em comes as firmware with some IBM POWER servers
T}
:T{
\fIxen\fP
T}:T{
Xen hypervisor (only domU, not dom0)
T}
:T{
\fIbochs\fP
T}:T{
Bochs Emulator
T}
:T{
\fIuml\fP
T}:T{
User\-mode Linux
T}
:T{
\fIparallels\fP
T}:T{
Parallels Desktop, Parallels Server
T}
:T{
\fIbhyve\fP
T}:T{
bhyve, FreeBSD hypervisor
T}
:T{
\fIqnx\fP
T}:T{
QNX hypervisor
T}
:T{
\fIacrn\fP
T}:T{
\m[blue]\fBACRN hypervisor\fP\m[]\&\s-2\u[1]\d\s+2
T}
:T{
\fIapple\fP
T}:T{
\m[blue]\fBApple Virtualization\&.framework\fP\m[]\&\s-2\u[2]\d\s+2
T}
:T{
\fIsre\fP
T}:T{
\m[blue]\fBLMHS SRE hypervisor\fP\m[]\&\s-2\u[3]\d\s+2
T}
T{
Container
T}:T{
\fIopenvz\fP
T}:T{
OpenVZ/Virtuozzo
T}
:T{
\fIlxc\fP
T}:T{
Linux container implementation by LXC
T}
:T{
\fIlxc\-libvirt\fP
T}:T{
Linux container implementation by libvirt
T}
:T{
\fIsystemd\-nspawn\fP
T}:T{
systemd\*(Aqs minimal container implementation, see \fBsystemd\-nspawn\fP(1)
T}
:T{
\fIdocker\fP
T}:T{
Docker container manager
T}
:T{
\fIpodman\fP
T}:T{
\m[blue]\fBPodman\fP\m[]\&\s-2\u[4]\d\s+2 container manager
T}
:T{
\fIrkt\fP
T}:T{
rkt app container runtime
T}
:T{
\fIwsl\fP
T}:T{
\m[blue]\fBWindows Subsystem for Linux\fP\m[]\&\s-2\u[5]\d\s+2
T}
:T{
\fIproot\fP
T}:T{
\m[blue]\fBproot\fP\m[]\&\s-2\u[6]\d\s+2 userspace chroot/bind mount emulation
T}
:T{
\fIpouch\fP
T}:T{
\m[blue]\fBPouch\fP\m[]\&\s-2\u[7]\d\s+2 Container Engine
T}
.TE
.sp 1
.PP
如果使用多个虚拟化解决方案，则仅检测并识别 "innermost"\&。也就是说，如果同时使用机器虚拟化和容器虚拟化，则只会识别后者 (除非传递
\fB\-\-vm\fP) \&。
.PP
Linux 的 Windows 子系统不是 Linux 容器，而是使用 Linux 兼容接口在 Windows 内核之上运行 Linux
用户空间应用程序的环境。出于实用目的，WSL 被归类为容器。多个 WSL 环境共享相同的内核，服务在容器中运行时通常应该表现得像 \&。
.SH OPTIONS
.PP
理解以下选项:
.PP
\fB\-c\fP, \fB\-\-container\fP
.RS 4
只检测容器虚拟化 (i\&.e\&. 共享内核虚拟化) \&。
.RE
.PP
\fB\-v\fP, \fB\-\-vm\fP
.RS 4
只检测硬件虚拟化 \&。
.RE
.PP
\fB\-r\fP, \fB\-\-chroot\fP
.RS 4
检测是否在 \fBchroot\fP(2) 环境下调用 \&。在这种模式下，不写入任何输出，但返回值指示进程是否在 \fBchroot()\fP 环境中调用 \&。
.RE
.PP
\fB\-\-private\-users\fP
.RS 4
检测是否在用户命名空间中调用 \&。在此模式下，不写入任何输出，但返回值指示进程是否在用户命名空间内调用 \&。有关详细信息，请参见
\fBuser_namespaces\fP(7)\&。
.RE
.PP
\fB\-q\fP, \fB\-\-quiet\fP
.RS 4
抑制虚拟化技术标识符 \& 的输出。
.RE
.PP
\fB\-\-list\fP
.RS 4
输出所有当前已知和可检测的容器和 VM 环境 \&。
.RE
.PP
\fB\-h\fP, \fB\-\-help\fP
.RS 4
打印一个简短的帮助文本并退出 \&。
.RE
.PP
\fB\-\-version\fP
.RS 4
打印一个短版本字符串并退出 \&。
.RE
.SH "EXIT STATUS"
.PP
如果检测到虚拟化技术，则返回 0，否则返回非零代码 \&。
.SH "SEE ALSO"
.PP
\fBsystemd\fP(1), \fBsystemd\-nspawn\fP(1), \fBchroot\fP(2), \fBnamespaces\fP(7)
.SH NOTES
.IP " 1." 4
ACRN 管理程序
.RS 4
\%https://projectacrn.org
.RE
.IP " 2." 4
苹果 Virtualization.framework
.RS 4
\%https://developer.apple.com/documentation/virtualization
.RE
.IP " 3." 4
LMHS SRE 管理程序
.RS 4
\%https://www.lockheedmartin.com/en\-us/products/Hardened\-Security\-for\-Intel\-Processors.html
.RE
.IP " 4." 4
Podman
.RS 4
\%https://podman.io
.RE
.IP " 5." 4
Linux 的 Windows 子系统
.RS 4
\%https://docs.microsoft.com/en\-us/windows/wsl/about
.RE
.IP " 6." 4
proot
.RS 4
\%https://proot\-me.github.io/
.RE
.IP " 7." 4
Pouch
.RS 4
\%https://github.com/alibaba/pouch
.RE
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
