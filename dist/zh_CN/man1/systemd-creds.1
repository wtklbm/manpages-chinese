.\" -*- coding: UTF-8 -*-
'\" t
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH SYSTEMD\-CREDS 1 "" "systemd 253" systemd\-creds
.ie  \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH NAME
systemd\-creds \- 列出、显示、加密和解密服务凭证
.SH SYNOPSIS
.HP \w'\fBsystemd\-creds\fR\ 'u
\fBsystemd\-creds\fP [OPTIONS...] 命令 [ARGS...]
.SH DESCRIPTION
.PP
\fBsystemd\-creds\fP
是一个用于列出、显示、加密和解密元凭证的工具。凭据是可以传递给元进程的有限大小的二进制或文本对象。它们主要用于将加密密钥 (公钥和私钥)
或证书、用户帐户信息或身份信息从主机传递给服务 \&。
.PP
凭据通过 \fILoadCredential=\fP、\fISetCredential=\fP、\fILoadCredentialEncrypted=\fP 和
\fISetCredentialEncrypted=\fP 设置在元文件中配置，有关详细信息，请参见 \fBsystemd.exec\fP(5)\&。
.PP
有关详细信息，请参见 \m[blue]\fBSystem and Service Credentials\fP\m[]\&\s-2\u[1]\d\s+2 文档
\&。
.SH COMMANDS
.PP
理解以下命令:
.PP
\fBlist\fP
.RS 4
显示传递到当前执行上下文的凭据列表 \&。此命令显示 \fI$CREDENTIALS_DIRECTORY\fP 环境变量引用的目录中的文件，旨在从服务上下文
\& 中执行。
.sp
与每个凭据名称一起显示大小和安全状态 \&。后者是 "secure" (如果凭证由不可交换的内存支持，i\&.e\&. "ramfs")、"weak"
(如果它由任何其他类型的内存支持) 或 "insecure" (如果有任何访问权限) 之一不是 0400
的模式，i\&.e\&. 如果所有者以外的任何人都可以读取) \&。
.RE
.PP
\fBcat\fP \fIcredential\&.\&.\&.\fP
.RS 4
显示传递到当前执行上下文的指定凭据的内容 \&。采用一个或多个凭证名称，其内容应写入标准输出 \&。
.sp
当与 \fB\-\-json=\fP 或 \fB\-\-transcode=\fP 结合使用时，输出会在输出 \& 之前以简单的方式进行转码。
.RE
.PP
\fBsetup\fP
.RS 4
为凭据生成主机加密密钥 (如果尚未生成) \&。如果 /var/lib/systemd/credential\&.secret 文件不存在 \*(Aqt
还存在 \&. 当 encrypting/decrypting 凭据 \fBencrypt\fP 或 \fBdecrypt\fP 时使用此密钥，并且只能由根用户访问
\&。请注意，\*(Aqs 通常不需要显式调用此命令，因为它是在调用 \fBencrypt\fP 时隐式调用的，并且选择了凭证主机密钥加密 \&。
.RE
.PP
\fBencrypt\fP \fIinput|\-\fP \fIoutput|\-\fP
.RS 4
加载指定的 (未加密的明文) 输入凭证文件，对其进行加密并将 (加密的密文) 输出写入指定的目标凭证文件 \&。生成的文件可能在元文件中的
\fILoadCredentialEncrypted=\fP 设置中引用，或者其内容在 \fISetCredentialEncrypted=\fP 设置 \&
中按字面意义使用。
.sp
采用两个文件系统路径 \&。输出路径的文件名部分作为名称嵌入到加密凭据中，以确保加密凭据不会被重命名和重用于不同目的而不会被注意到
\&。要嵌入的凭据名称可能会被 \fB\-\-name=\fP 设置覆盖 \&。输入或输出路径可以指定为 "\-"，在这种情况下，凭证数据被读取
from/written 到标准输入和标准输出 \&。如果输出路径指定为 "\-"，则凭证名称无法从文件系统路径派生，因此应通过 \fB\-\-name=\fP
开关 \& 明确指定。
.sp
使用以下加密密钥之一对称地加密和验证凭据数据:
.sp
.RS 4
.ie  n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
系统自动派生的秘钥 \*(Aqs TPM2 芯片 \&. 此加密密钥未存储在主机系统上，因此只有访问原始 TPM2 芯片 \&
才能解密。或者换句话说，以这种方式保护的凭据只能由本地机器再次解密 \&。
.RE
.sp
.RS 4
.ie  n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
存储在 /var/lib/systemd/credential\&.secret 文件中的密钥，只有根用户才能访问 \&。此 "host"
加密密钥存储在主机文件系统中，因此可以通过访问主机文件系统和足够的权限进行解密 \&。密钥在需要时自动生成，但也可以使用 \fBsetup\fP
命令显式创建，请参见上文 \&。
.RE
.sp
.RS 4
.ie  n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
以上的组合: 从 TPM2 芯片和主机文件系统派生的加密密钥 \&。这意味着解密需要访问原始 TPM2 芯片和操作系统安装 \&。如果 TPM2
芯片可用且 /var/lib/systemd/ 驻留在永久媒体上，则这是默认操作模式。
.RE
.sp
三个密钥中的哪一个用于加密可以通过 \fB\-\-with\-key=\fP 开关 \& 来配置。根据加密凭证的用例，使用的密钥可能会有所不同
\&。例如，对于应可从 initrd 访问的凭据，使用主机密钥加密是不合适的，因为通常无法从 initrd\&
访问主机密钥。因此，对于此类凭据，仅应使用 TPM2 密钥 \&。
.sp
加密凭证始终以 Base64\& 编码。
.sp
使用 \fBdecrypt\fP (见下文) 撤销加密操作，从加密的密文凭据 \& 中获取解密的明文凭据。
.sp
凭证数据使用 AES256\-GCM 加密，i\&.e\&。提供机密性和完整性，由上述一个或两个密钥的 SHA256 散列键控。
.RE
.PP
\fBdecrypt\fP \fIinput|\-\fP [\fIoutput|\-\fP]
.RS 4
撤消 \fBencrypt\fP 操作的效果: 加载指定的 (加密密文) 输入凭据文件，对其进行解密和验证并将 (解密后的明文) 输出写入指定的目标凭据文件
\&。
.sp
采用一个或两个文件系统路径 \&。输入路径的文件名部分与加密文件中嵌入的凭据名称进行比较 \&。如果不匹配则解密失败
\&。这样做是为了确保加密凭证不会在未被检测到的情况下被重新利用。与嵌入式凭证名称进行比较的凭证名称也可能被 \fB\-\-name=\fP 开关 \&
覆盖。如果输入路径指定为 "\-"，则从标准输入 \& 读取加密凭据。如果只指定一个路径或输出路径指定为 "\-"，解密后的凭据将写入标准输出
\&。在此模式下，凭证中嵌入的预期名称无法从路径派生，应使用 \fB\-\-name=\fP\& 明确指定。
.sp
解密凭据需要访问原始 TPM2 芯片或者凭据主机密钥，请参见上文 \&。有关需要哪些密钥的信息嵌入在加密的凭证数据中，因此解密是完全自动的 \&。
.RE
.PP
\fBhas\-tpm2\fP
.RS 4
报告系统是否配备了可用于保护凭据的 TPM2 设备。如果 TPM2 设备已被发现、受支持并被固件、操作系统内核驱动程序和用户空间
(i\&.e\&.systemd) 使用，则此打印 "yes" 并以退出状态零 \& 退出。如果没有这样的设备是
discovered/supported/used，则打印 `no`\&。否则打印 `部分`\&。在这两种情况中的任何一种情况下，退出状态都为非零
\&。它还显示四行，分别表示固件、驱动程序、系统和内核 discovered/support/use TPM2\&。
.sp
与 \fB\-\-quiet\fP 结合抑制输出 \&。
.RE
.PP
\fB\-h\fP, \fB\-\-help\fP
.RS 4
打印一个简短的帮助文本并退出 \&。
.RE
.PP
\fB\-\-version\fP
.RS 4
打印一个短版本字符串并退出 \&。
.RE
.SH OPTIONS
.PP
\fB\-\-system\fP
.RS 4
当使用 \fBlist\fP 和 \fBcat\fP 命令指定时，对作为一个整体传递给系统的凭据进行操作，而不是对传递给当前执行上下文的凭据进行操作
\&。这在可以从容器管理器传入凭据的容器环境中很有用 \&。
.RE
.PP
\fB\-\-transcode=\fP
.RS 4
当使用 \fBcat\fP 或 \fBdecrypt\fP 命令指定时，在显示输出之前转码输出 \&。取 "base64"、"unbase64"、"hex" 或
"unhex" 其中之一作为参数，以 encode/decode 与 Base64 或作为一系列十六进制值 \& 的凭证数据。
.sp
请注意，这对 \fBencrypt\fP 命令没有影响，因为加密凭据无条件地以 Base64\& 编码。
.RE
.PP
\fB\-\-newline=\fP
.RS 4
当使用 \fBcat\fP 或 \fBdecrypt\fP 指定时，控制是否在输出末尾添加一个尾随换行符，如果它没有 \*(Aqt end in one,
anyway\&. 采用 "auto"、"yes" 或 `no`\& 之一。只有在将凭证数据写入 TTY\& 时，"auto"
的默认模式才会使用单个换行符作为输出后缀。
.RE
.PP
\fB\-\-pretty\fP, \fB\-p\fP
.RS 4
当与 \fBencrypt\fP 一起指定时，控制是否将加密凭证显示为 \fISetCredentialEncrypted=\fP 设置，可以直接粘贴到元文件中
\&。
.RE
.PP
\fB\-\-name=\fP\fIname\fP
.RS 4
当使用 \fBencrypt\fP 命令指定时，控制凭证名称嵌入到加密的凭证数据中。如果未指定，则从指定输出路径的文件名部分自动选择名称
\&。如果指定为空字符串，则加密凭证中不嵌入凭证名称，并且在解密凭证时不对凭证名称进行验证 \&。
.sp
当使用 \fBdecrypt\fP 命令指定时，控制凭据名称以验证嵌入在带有 \&
的加密凭据中的凭据名称。如果未指定，则从指定输入路径的文件名部分自动选择名称 \&。如果加密的凭证文件中没有嵌入凭证名称
(i\&.e\&。加密时使用了带有空字符串的 \fB\-\-name=\fP)，则指定的名称无效，因为没有完成凭证名称验证 \&。
.sp
在加密凭证中嵌入凭证名称是为了防止凭证被重复用于它们不是 \* (Aqt 最初的目的，假设凭证名称被仔细选择以编码其预期目的 \&。
.RE
.PP
\fB\-\-timestamp=\fP\fItimestamp\fP
.RS 4
当使用 \fBencrypt\fP 命令指定时，控制时间戳嵌入到加密凭证中。默认为当前时间 \&。采用 \fBsystemd.time\fP(7)\&
中描述的格式的时间戳规范。
.sp
当使用 \fBdecrypt\fP 命令指定时，控制时间戳以用于验证在加密期间使用 \fB\-\-not\-after=\fP 配置的 "not\-after" 时间戳
\&。如果未指定，则默认为当前系统时间 \&。
.RE
.PP
\fB\-\-not\-after=\fP\fItimestamp\fP
.RS 4
当用 \fBencrypt\fP 命令指定时，控制不再使用凭证的时间
\&。这会将指定的时间戳嵌入到加密凭证中。在解密期间，根据当前系统时钟检查时间戳，如果时间戳是过去的，解密将失败 \&。默认情况下没有设置这样的时间戳
\&。采用 \fBsystemd.time\fP(7)\& 中描述的格式的时间戳规范。
.RE
.PP
\fB\-\-with\-key=\fP, \fB\-H\fP, \fB\-T\fP
.RS 4
当指定用 \fBencrypt\fP 命令控制 encryption/signature 键时使用 \&。采用
"host"、"tpm2"、"host+tpm2"、"tpm2\-absent"、"auto"、`auto\-initrd`\&
之一。有关三种键类型的详细信息，请参见上文 \&。如果设置为 "auto" (这是默认值)，则在找到 TPM2 设备但未在容器中运行时使用 TPM2
密钥 \&。如果 /var/lib/systemd/ 在持久性媒体上 \&，则使用主机密钥。这意味着在典型系统上，加密默认绑定到 TPM2
芯片和操作系统安装，并且两者都需要可用才能再次解密凭证 \&。如果选择 "auto" 但 TPM2 不可用 (或在容器中运行) 或
/var/lib/systemd/ 不在持久性媒体上，加密将失败 \&。如果设置为 "tpm2\-absent"，则使用固定的零长度密钥
(因此，在此模式下不提供机密性或真实性! ) \&。此逻辑可用于覆盖缺少 TPM2 芯片但应生成凭据的系统。请注意，在具有 TPM2 芯片且启用了
UEFI SecureBoot 的系统上拒绝解密此类凭据 (这样做是为了防止此类锁定系统被诱骗加载以这种方式生成的缺少身份验证信息的凭据)
\&。如果设置为 "auto\-initrd"，则在找到 TPM2 时使用 TPM2 密钥 \&。如果不使用固定的零长度密钥，相当于
"tpm2\-absent" 模式 \&。此选项对于生成 encrypted/authenticated 和 TPM2 的凭证文件特别有用，但在不支持此
\& 的系统上仍然有效。
.sp
\fB\-H\fP 开关是 \fB\-\-with\-key=host\fP\& 的快捷方式。类似的，\fB\-T\fP 是 \fB\-\-with\-key=tpm2\fP\& 的快捷方式。
.sp
加密应在 initrd 中使用的凭据时 (/var/lib/systemd/ 通常不可用) 确保使用 \fB\-\-with\-key=auto\-initrd\fP
模式，以禁用对主机机密的绑定 \&。
.sp
此开关对 \fBdecrypt\fP 命令没有影响，因为有关用于解密的密钥的信息已包含在加密凭证中 \&。
.RE
.PP
\fB\-\-tpm2\-device=\fP\fIPATH\fP
.RS 4
控制 TPM2 设备使用 \&。期望引用 TPM2 芯片的设备节点路径 (e\&.g\&. /dev/tpmrm0)\&。或者，可以指定特殊值
"auto"，以便自动确定合适的 TPM2 设备 (其中必须恰好有一个) 的设备节点 \&。特殊值 "list" 可用于枚举当前发现的所有合适的
TPM2 设备。
.RE
.PP
\fB\-\-tpm2\-pcrs=\fP [PCR...]
.RS 4
配置 TPM2 PCR (平台配置寄存器) 以将加密密钥绑定到 \&。采用 "+" 分隔的数字 PCR 索引列表，范围为
0\&...23\&。如果不使用，默认为 PCR 7 only\&。如果指定了一个空字符串，则将加密密钥绑定到任何 PCRs\&。有关可用 PCR
的详细信息，请参见 \fBsystemd\-cryptenroll\fP(1)\& 的同名开关的文档。
.RE
.PP
\fB\-\-tpm2\-public\-key=\fP [PATH], \fB\-\-tpm2\-public\-key\-pcrs=\fP [PCR...]
.RS 4
配置 TPM2 签名 PCR 策略以绑定加密，以与 \fBencrypt\fP 命令 \& 一起使用。\fB\-\-tpm2\-public\-key=\fP 选项接受
PEM 编码的 RSA 公钥的路径，以将加密绑定到 \&。如果未明确指定，但目录
/etc/systemd/、/run/systemd/、/usr/lib/systemd/ (按此顺序搜索) 之一存在文件
tpm2\-pcr\-public\-key\&.pem，则自动使用它 \&。\fB\-\-tpm2\-public\-key\-pcrs=\fP 选项采用要绑定到的
TPM2 PCR 索引列表 (与上述 \fB\-\-tpm2\-pcrs=\fP 语法相同) \&。如果未指定，则默认为 11
(i\&.e\&。这会将策略绑定到可以为其提供 PCR 签名的任何统一内核映像) \&。
.sp
请注意 \fB\-\-tpm2\-pcrs=\fP 和 \fB\-\-tpm2\-public\-key\-pcrs=\fP: 之间的区别，前者将解密绑定到当前的特定 PCR 值;
后者将解密绑定到任何一组 PCR 值，可以为其提供指定公钥的签名
\&。因此，后者在应该可以进行软件更新而不会丢失对所有先前加密的秘密的访问权限的情况下更有用 \&。
.RE
.PP
\fB\-\-tpm2\-signature=\fP [PATH]
.RS 4
采用 \fBsystemd\-measure\fP(1) 工具生成的 TPM2 PCR 签名文件的路径，该文件可用于允许 \fBdecrypt\fP
命令解密绑定到特定签名 PCR 值的凭据 \&。如果未明确指定，并且尝试解密具有签名 PCR 策略的凭证，则在
/etc/systemd/、/run/systemd/、/usr/lib/systemd/ (按此顺序) 中搜索合适的签名文件
tpm2\-pcr\-signature\&.json 并使用 \&。
.RE
.PP
\fB\-\-quiet\fP, \fB\-q\fP
.RS 4
与 \fBhas\-tpm2\fP 一起使用时会抑制输出，并且仅返回表示支持 TPM2\& 的退出状态。
.RE
.PP
\fB\-\-no\-pager\fP
.RS 4
不要将输出通过管道传输到寻呼机 \&。
.RE
.PP
\fB\-\-no\-legend\fP
.RS 4
不要打印图例，i\&.e\&。带有提示的列标题和页脚 \&。
.RE
.PP
\fB\-\-json=\fP\fIMODE\fP
.RS 4
显示格式为 JSON\& 的输出。期望 "short" (用于尽可能短的输出，没有任何冗余空格或换行符)、"pretty"
(用于相同版本的漂亮版本，带有缩进和换行符) 或 "off" (关闭 JSON 输出，默认值) \&。
.RE
.SH "EXIT STATUS"
.PP
成功时，返回 0\&。
.PP
如果固件、驱动程序和用户空间 (i\&.e\&.systemd)\& 发现、支持和使用 TPM2 设备，则 \fBhas\-tpm2\fP 命令返回
0。否则返回值 1 (如果缺少固件支持)、2 (如果缺少驱动程序支持) 和 4 (如果缺少用户空间支持) \& 的 OR 组合。如果根本没有 TPM2
支持可用，则返回值 7\&。
.SH EXAMPLES
.PP
\fBExample\ \&1.\ \&Encrypt a password for use as credential\fP
.PP
以下命令行对指定密码 "hunter2" 进行加密，将结果写入文件 password\&.cred\&。
.sp
.if  n \{\
.RS 4
.\}
.nf
# 回声 \-n hunter2 |systemd\-creds 加密 \- password\&.cred
.fi
.if  n \{\
.RE
.\}
.PP
这再次解密文件 password\&.cred，显示字面量密码:
.sp
.if  n \{\
.RS 4
.\}
.nf
# systemd\-creds 解密 password\&.cred
hunter2
.fi
.if  n \{\
.RE
.\}
.PP
\fBExample\ \&2.\ \&Encrypt a password and include it in a unit file\fP
.PP
以下命令行提示用户输入密码并从中生成一个 \fISetCredentialEncrypted=\fP 行，用于名为 "mysql\-password"
的凭证，适合包含在元文件中 \&。
.sp
.if  n \{\
.RS 4
.\}
.nf
# systemd 询问密码 \-n |systemd\-creds encrypt\-\-name=mysql \- 密码 \-p\-\-
🔐密码: ****
SetCredentialEncrypted=mysql\-password: \e
        k6iUCUh0RJCQyvL8k8q1UyAAAAABAAAADAAAABAAAAASfFsBoPLIm/dlDoGAAAAAAAAAA \e
        NAAAAAgAAAAAH4AILIOZ3w6rTzYsBy9G7liaCAd4i+Kpvs8mAgArzwuKxd0ABDjgSeO5k \e
        mKQc58zM94ZffyRmuNeX1lVHE+9e2YD87KfRFNoDLS7F3YmCb347gCiSk2an9egZ7Y0Xs \e
        700Kr6heqQswQEemNEc62k9RJnEl2q7SbcEYguegnPQUATgAIAAsAAAASACA/B90W7E+6 \e
        yAR9NgiIJvxr9bpElztwzB5lUJAxtMBHIgAQACCaSV9DradOZz4EvO/LSaRyRSq2Hj0ym \e
        gVJk/dVzE8Uxj8H3RbsT7rIBH02CIgm/Gv1ukSXO3DMHmVQkDG0wEciyageTfrVEer8z5 \e
        9cUQfM5ynSaV2UjeUWEHuz4fwDsXGLB9eELXLztzUU9nsAyLvs3ZRR+eEK/A==
.fi
.if  n \{\
.RE
.\}
.PP
生成的行可以 1:1 粘贴到一个元文件中，并确保获取的密码将在启动服务的
\fI$CREDENTIALS_DIRECTORY\fP/mysql\-password 凭据文件中可用 \&。
.PP
利用元文件丢弃 \- 在逻辑上，这可以用来安全地将密码凭证传递给元 \&。一组类似的、更全面的命令，用于将密码插入服务 xyz\&.service:
.sp
.if  n \{\
.RS 4
.\}
.nf
# mkdir \-p /etc/systemd/system/xyz\&.service\&.d
# systemd 询问密码 \-n |systemd\-creds encrypt\-\-name=mysql \- 密码 \-p\-\->/etc/systemd/system/xyz\&.service\&.d/50\-password\&.conf
# systemctl 守护进程 \- 重新加载
# systemctl 重启 xyz\&.service
.fi
.if  n \{\
.RE
.\}
.SH "SEE ALSO"
.PP
\fBsystemd\fP(1), \fBsystemd.exec\fP(5), \fBsystemd\-measure\fP(1)
.SH NOTES
.IP " 1." 4
系统和服务凭证
.RS 4
\%https://systemd.io/CREDENTIALS
.RE
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
