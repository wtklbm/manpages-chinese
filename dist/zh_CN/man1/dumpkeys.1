.\" -*- coding: UTF-8 -*-
.\" @(#)loadkeys.1 1.0 93/09/1 RK
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH DUMPKEYS 1 "1 Sep 1993" kbd 
.SH NAME
dumpkeys \- 转储键盘翻译表
.SH SYNOPSIS
\fBdumpkeys\fP [OPTIONS]
.SH DESCRIPTION
.IX "dumpkeys command" "" "\fLdumpkeys\fR command"
.LP
\fBdumpkeys\fP 以 \fBkeymaps\fP(5) 指定的格式将键盘驱动程序转换表的当前内容写入标准输出。
.LP
使用各种选项，可以控制输出格式，还可以从内核和程序 \fBdumpkeys\fP(1) 和 \fBloadkeys\fP(1) 获取其他信息。
.SH OPTIONS
.TP 
\fB\-h \-\-help\fP
将程序的版本号和简短的使用消息打印到程序的标准错误输出并退出。
.TP 
\fB\-i \-\-short\-info\fP
打印内核键盘驱动程序的一些特征。显示的项目是:
.LP
.RS
内核支持的键码范围
.LP
.RS
这说明在键表文件中 \fBkeycode\fP 关键字之后可以使用哪些值。有关更多信息和这些文件的语法，请参见 \fBkeymaps\fP(5)。
.RE
.LP
可绑定到键的操作数
.LP
.RS
这表明单个键可以使用各种修改键输出多少种不同的操作。例如，如果该值为 16，则您可以为一个键与修饰符组合定义最多 16 个不同的操作。当该值为 16
时，内核可能知道四个修改键，您可以按不同的键组合来访问所有绑定的操作。
.RE
.LP
内核支持的动作代码范围
.LP
.RS
此项包含十六进制表示法的操作代码范围列表。 这些是可以在键定义的右侧使用的值，即。一行中的 \fIvv\fP's
.LP
.RS
\fBkeycode\fP \fIxx\fP = \fIvv vv vv vv\fP
.RE
.LP
(有关键定义行格式的更多信息，请参见 \fBkeymaps\fP(5))。 \fBdumpkeys\fP(1) 和 \fBloadkeys\fP(1)
支持符号表示法，这比数字表示法更可取，因为操作代码可能因内核而异，而符号名称通常保持不变。但是，动作代码范围列表可用于确定内核是否实际上支持
\fBloadkeys\fP(1) 知道的所有符号，或者是否有一些内核支持的动作在您的 \fBloadkeys\fP(1)
程序中没有符号名称。要查看这一点，您可以将范围列表与操作符号列表进行比较，请参见下面的选项 \fB\-\-long\-info\fP。
.RE
.LP
内核支持的任意键数
.LP
.RS
这表明可用于输出字符串的操作代码的数量。这些动作代码传统上绑定到键盘的各种函数和编辑键，并被定义为发送标准转义序列。但是，您可以重新定义这些以发送常用命令行、电子邮件地址或任何您喜欢的内容。
特别是如果此项的数量大于键盘上的号码和编辑键的数量，您可能有一些 "spare" 操作代码可以绑定到 AltGr \-
字母组合，例如，发送一些有用的字符串。有关详细信息，请参见 \fBloadkeys\fP(1)。
.RE
.LP
函数字符串
.LP
.RS
您可以使用以下命令查看当前的任数键定义
.LP
.RS
\fBdumpkeys \-\-funcs\-only\fP
.RE
.LP
.RE
.RE
.LP
.TP 
\fB\-l \-s \-\-long\-info\fP
该选项指示 \fBdumpkeys\fP 打印一个长信息列表。输出与 \fB\-\-short\-info\fP 相同，追加，了 \fBloadkeys\fP(1) 和
\fBdumpkeys\fP(1) 支持的动作符号列表，以及符号的数值。
.LP
.TP 
\fB\-n \-\-numeric\fP
此选项导致 \fBdumpkeys\fP 绕过将操作代码值转换为符号表示法，而是以十六进制格式打印。
.LP
.TP 
\fB\-f \-\-full\-table\fP
这使得 \fBdumpkeys\fP 跳过所有的简写启发法 (参见 \fBkeymaps\fP(5))
并以规范形式输出键绑定。首先打印描述当前定义的修饰符组合的键映射行。然后为每个键打印一行，并为每个修饰符组合打印一列。例如，如果当前使用的键映射使用七个修饰符，则每行将有七个操作代码列。这种格式对于后处理
\fBdumpkeys\fP 输出的程序很有用。
.LP
.TP 
\fB\-S\fP\fIshape\fP\fB \fP\fI \fP\fB\-\-shape=\fP\fIshape\fP
可用形状:
.LP
.RS
\fB2\fP 默认输出。
.RE
.LP
.RS
\fB4\fP 每个键码一行。
.RE
.LP
.RS
\fB8\fP 每对 (modifier,keycode) 一行。
.RE
.LP
.RS
\fB16\fP 每个键码一行，直到第一个 hole。
.RE
.LP
.TP 
\fB\-1 \-\-separate\-lines\fP
这会强制 \fBdumpkeys\fP 为每个 (modifier,keycode) 对写入一行。它在单词 \fIplain\fP 前加上普通键码。
.LP
.TP 
\fB\-t \-\-funcs\-only\fP
给出此选项时，\fBdumpkeys\fP 仅打印函数键字符串定义。通常 \fBdumpkeys\fP 打印键绑定和字符串定义。
.LP
.TP 
\fB\-k \-\-keys\-only\fP
给出此选项时，\fBdumpkeys\fP 仅打印键绑定。通常 \fBdumpkeys\fP 打印键绑定和字符串定义。
.LP
.TP 
\fB\-d \-\-compose\-only\fP
给出此选项时，\fBdumpkeys\fP 仅打印组合键组合。 仅当您的内核支持组合键时，此选项才可用。
.LP
.TP 
\fB\-c\fP\fIcharset\fP\fB \fP\fI \fP\fB\-\-charset=\fP\fIcharset\fP
这指示 \fBdumpkeys\fP 根据指定的字符集解释字符代码值。这仅影响字符代码值到符号名称的转换。当前 \fIcharset\fP 的有效值为
\fBiso\-8859\-X\fP，其中 X 是 1\-9 中的数字。 如果未指定 \fIcharset\fP，则默认使用 \fBiso\-8859\-1\fP。
这个选项产生一个输出行 `charset"iso\-8859\-X"'，告诉 loadkeys 如何解释键盘映射。(例如，"division" 在
iso\-8859\-1 中是 0xf7，但在 iso\-8859\-8 中是 0xba。)
.LP
.TP 
\fB\-C\fP\fIdev\fP\fB \fP\fI \fP\fB\-\-console=\fP\fIdev\fP
可以使用 \fI\-C\fP (或 \fI\-\-console\fP) 选项指定受影响的控制台设备。此选项仅支持一个设备名称。
.LP
.TP 
\fB\-v \-\-verbose\fP
打开详细输出。
.LP
.TP 
\fB\-V \-\-version\fP
打印版本号并退出。
.LP
.SH FILES
.TP 
\fI/usr/share/kbd/keymaps\fP
密钥表文件的推荐目录。
.LP
.SH "SEE ALSO"
\fBloadkeys\fP(1), \fBkeymaps\fP(5)

.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
