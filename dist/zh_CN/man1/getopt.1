.\" -*- coding: UTF-8 -*-
'\" t
.\"     Title: getopt
.\"    Author: [see the "AUTHOR(S)" section]
.\" Generator: Asciidoctor 2.0.15
.\"      Date: 2022-05-11
.\"    Manual: User Commands
.\"    Source: util-linux 2.38.1
.\"  Language: English
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH GETOPT 1 2022\-05\-11 "util\-linux 2.38.1" "User Commands"
.ie  \n(.g .ds Aq \(aq
.el       .ds Aq '
.ss \n[.ss] 0
.nh
.ad l
.de  URL
\fI\\$2\fP <\\$1>\\$3
..
.als MTO URL
.if  \n[.g] \{\
.  mso www.tmac
.  am URL
.    ad l
.  .
.  am MTO
.    ad l
.  .
.  LINKSTYLE blue R < >
.\}
.SH NAME
getopt \- 解析命令选项 (enhanced)
.SH SYNOPSIS
.sp
\fBgetopt\fP \fIoptstring\fP \fIparameters\fP
.sp
\fBgetopt\fP [options] [\fB\-\-\fP] \fIoptstring\fP \fIparameters\fP
.sp
\fBgetopt\fP [options] \fB\-o\fP|\fB\-\-options\fP \fIoptstring\fP [options] [\fB\-\-\fP]
\fIparameters\fP
.SH DESCRIPTION
.sp
\fBgetopt\fP 用于分解命令行中的 (\fIparse\fP) 选项，以便 shell 程序轻松解析，并检查有效选项。它使用 GNU
\fBgetopt\fP(3) 例程来执行此操作。
.sp
\fBgetopt\fP 被调用的参数分为两部分: 修改 \fBgetopt\fP 解析方式的选项 (\fBSYNOPSIS\fP) 中的 \fIoptions\fP 和
\fIoptstring\fP，\fBSYNOPSIS\fP) 中的 (\fIparameters\fP
要解析的参数。第二部分将从第一个不是选项参数的非选项参数开始，或者在第一次出现 \(aq\fB\-\-\fP\(aq 之后。如果在第一部分中没有找到
\(aq\fB\-o\fP\(aq 或 \(aq\fB\-\-options\fP\(aq 选项，则第二部分的第一个参数用作短选项字符串。
.sp
如果设置了环境变量 \fBGETOPT_COMPATIBLE\fP，或者如果第一个 \fIparameter\fP 不是一个选项 (不以 \(aq\fB\-\fP\(aq
开头，\fBSYNOPSIS\fP) 中的第一个格式)，\fBgetopt\fP 将生成与其他版本的 \fBgetopt\fP(1)
兼容的输出。它仍将进行参数改组并识别可选参数 (有关更多信息，请参见 \fBCOMPATIBILITY\fP 部分)。
.sp
\fBgetopt\fP(1) 的传统实现无法处理参数和非选项参数中的空格和其他 (shell\-specific)
特殊字符。为了解决这个问题，这个实现可以生成引用输出，必须再次由 shell 解释 (通常使用 \fBeval\fP
命令)。这具有保留这些字符的效果，但您必须以不再与其他版本兼容的方式调用 \fBgetopt\fP (\fBSYNOPSIS\fP)
中的第二种或第三种格式)。要确定是否安装了 \fBgetopt\fP(1) 的增强版本，可以使用特殊的测试选项 (\fB\-T\fP)。
.SH OPTIONS
.sp
\fB\-a\fP, \fB\-\-alternative\fP
.RS 4
允许长选项以单个 \(aq\fB\-\fP\(aq 开头。
.RE
.sp
\fB\-l\fP, \fB\-\-longoptions\fP \fIlongopts\fP
.RS 4
要识别的长 (multi\-character) 选项。通过用逗号分隔名称，可以一次指定多个选项名称。这个选项可以多次给出，\fIlongopts\fP
是累积的。\fIlongopts\fP 中的每个长选项名称后面可能跟一个冒号，表示它有一个必需的参数，两个冒号表示它有一个可选的参数。
.RE
.sp
\fB\-n\fP, \fB\-\-name\fP \fIprogname\fP
.RS 4
\fBgetopt\fP(3) 例程在报告错误时将使用的名称。请注意，\fBgetopt\fP(1) 的错误仍被报告为来自 getopt。
.RE
.sp
\fB\-o\fP, \fB\-\-options\fP \fIshortopts\fP
.RS 4
要识别的短 (one\-character) 选项。如果未找到此选项，则 \fBgetopt\fP 的第一个不以 \(aq\fB\-\fP\(aq 开头的参数
(并且不是选项参数) 将用作短选项字符串。\fIshortopts\fP
中的每个短选项字符后面可以跟一个冒号，表示它有一个必需的参数，两个冒号表示它有一个可选的参数。shortopts 的第一个字符可能是
\(aq\fB+\fP\(aq 或 \(aq\fB\-\fP\(aq，以影响解析选项和生成输出的方式 (有关详细信息，请参见 \fBSCANNING MODES\fP
部分)。
.RE
.sp
\fB\-q\fP, \fB\-\-quiet\fP
.RS 4
禁用 \fBgetopt\fP(3) 的错误报告。
.RE
.sp
\fB\-Q\fP, \fB\-\-quiet\-output\fP
.RS 4
不生成正常输出。\fBgetopt\fP(3) 仍然报告错误，除非您也使用 \fB\-q\fP。
.RE
.sp
\fB\-s\fP, \fB\-\-shell\fP \fIshell\fP
.RS 4
将引用约定设置为 \fIshell\fP 的引用约定。如果未给出 \fB\-s\fP 选项，则使用 \fBBASH\fP 约定。有效参数目前为
\(aq\fBsh\fP\(aq、\(aq\fBbash\fP\(aq、\(aq\fBcsh\fP\(aq 和 \(aq\fBtcsh\fP\(aq。
.RE
.sp
\fB\-T\fP, \fB\-\-test\fP
.RS 4
测试您的 \fBgetopt\fP(1) 是这个增强版还是旧版。这不会生成任何输出，并将错误状态设置为 4。\fBgetopt\fP(1)
的其他实现，而这个版本如果设置了环境变量 \fBGETOPT_COMPATIBLE\fP，将返回 \(aq\fB\-\-\fP\(aq 和错误状态 0.
.RE
.sp
\fB\-u\fP, \fB\-\-unquoted\fP
.RS 4
不要引用输出。请注意，空格和特殊的 (shell\-dependent) 字符可能会在此模式下造成严重破坏 (就像它们对其他 \fBgetopt\fP(1)
实现所做的那样)。
.RE
.sp
\fB\-h\fP, \fB\-\-help\fP
.RS 4
显示帮助文本并退出。
.RE
.sp
\fB\-V\fP, \fB\-\-version\fP
.RS 4
打印版本并退出。
.RE
.SH PARSING
.sp
本节规定了 \fBgetopt\fP (\fBSYNOPSIS\fP).\fIparameters\fP 中的 \fIparameters\fP. 下一节
(\fBOUTPUT\fP) 描述了生成的输出。这些参数通常是调用 shell 函数的参数。必须注意，调用 shell 函数的每个参数都恰好对应于
\fBgetopt\fP 参数列表中的一个参数 (请参见 \fBEXAMPLES\fP). 所有解析都由 GNU \fBgetopt\fP(3) 例程完成。
.sp
参数从左到右解析。每个参数都分为短选项、长选项、选项的参数或非选项参数。
.sp
一个简单的短选项是 \(aq\fB\-\fP\(aq 后跟一个短选项字符。如果选项有必需的参数，则可以直接写在选项字符之后或作为下一个参数
(即在命令行中以空格分隔)。如果选项有一个可选的参数，它必须直接写在选项字符之后 (如果存在)。
.sp
可以在一个 \(aq\fB\-\fP\(aq 之后指定多个短选项，只要所有选项 (可能最后一个除外) 都没有必需或可选的参数。
.sp
长选项通常以 \(aq\fB\-\-\fP\(aq 开头，后跟长选项名称。如果选项有必需的参数，可以直接写在长选项名后，用 \(aq\fB=\fP\(aq
分隔，或者作为下一个参数 (即在命令行上用空格分隔)。如果选项有一个可选的参数，它必须直接写在长选项名称之后，如果存在则用 \(aq\fB=\fP\(aq
分隔 (如果您添加了 \(aq\fB=\fP\(aq 但后面什么都没有，它被解释为好像没有参数存在; 这是一个小错误，请参见
\fBBUGS\fP)。长选项可以缩写，只要缩写没有歧义即可。
.sp
每个不以 \(aq\fB\-\fP\(aq 开头且不是前一个选项的必需参数的参数都是非选项参数。\(aq\fB\-\-\fP\(aq
参数之后的每个参数始终被解释为非选项参数。如果设置了环境变量 \fBPOSIXLY_CORRECT\fP，或者如果短选项字符串以 \(aq\fB+\fP\(aq
开头，则一旦找到第一个非选项参数，所有剩余参数都将被解释为非选项参数。
.SH OUTPUT
.sp
为上一节中描述的每个元素生成输出。输出以与输入中指定的元素相同的顺序完成，非选项参数除外。输出可以在 \fIcompatible\fP
(\fIunquoted\fP) 模式下完成，或者以保留参数和非选项参数中的空格和其他特殊字符的方式完成 (参见 \fBQUOTING\fP). 当在 shell
脚本中处理输出时，它似乎由不同的元素组成，可以一个接一个地处理 (通过使用大多数 shell 语言中的 shift
命令)。这在未引用模式下是不完美的，因为如果元素包含空格或特殊字符，它们可能会在意想不到的地方被拆分。
.sp
如果解析参数时出现问题，例如因为未找到所需的参数或无法识别选项，则会在标准错误上报告错误，有问题的元素将不会输出，并且错误状态为非零被退回。
.sp
对于短选项，单个 \(aq\fB\-\fP\(aq
和选项字符作为一个参数生成。如果选项有一个参数，下一个参数将是参数。如果该选项采用可选参数，但没有找到，则将生成下一个参数，但在引用模式下为空，但在未引用
(compatible) 模式下不会生成第二个参数。请注意，许多其他 \fBgetopt\fP(1) 实现不支持可选的参数。
.sp
如果在单个 \(aq\fB\-\fP\(aq 之后指定了多个短选项，则每个选项都将作为单独的参数出现在输出中。
.sp
对于长选项，\(aq\fB\-\-\fP\(aq 和完整的选项名称作为一个参数生成。无论选项是缩写的还是在输入中使用单个 \(aq\fB\-\fP\(aq
指定的，都会执行此操作。参数与短选项一样处理。
.sp
通常，在生成所有选项及其参数之前，不会生成非选项参数输出。然后 \(aq\fB\-\-\fP\(aq
作为单个参数生成，在它之后是非选项参数，按它们被发现的顺序生成，每个都作为一个单独的参数。仅当短选项字符串的第一个字符是 \(aq\fB\-\fP\(aq
时，才会在输入中找到它们的位置生成非选项参数输出 (如果使用 \fBSYNOPSIS\fP 的第一个格式则不支持; 在这种情况下，所有前面出现的
\(aq\fB\-\fP\(aq 和 \(aq\fB+\fP\(aq 都将被忽略)。
.SH QUOTING
.sp
在兼容模式下，空白或 \(aqspecial\(aq 参数中的参数或非选项参数没有被正确处理。当输出被馈送到 shell
脚本时，脚本不知道应该如何将输出分解为单独的参数。为了避免这个问题，这个实现提供了引用。这个想法是在每个参数周围用引号生成输出。当此输出再次馈送到
shell (通常通过 shell \fBeval\fP 命令) 时，它会正确地拆分为单独的参数。
.sp
如果设置了环境变量 \fBGETOPT_COMPATIBLE\fP，如果使用 \fBSYNOPSIS\fP 的第一种形式，或者如果找到选项
\(aq\fB\-u\fP\(aq，则不会启用引用。
.sp
不同的 shells 使用不同的引用约定。您可以使用 \(aq\fB\-s\fP\(aq 选项来选择您正在使用的 shell。目前支持以下 shells:
\(aq\fBsh\fP\(aq、\(aq\fBbash\fP\(aq、\(aq\fBcsh\fP\(aq 和 \(aq\fBtcsh\fP\(aq。实际上，只有两种
\(aqflavors\(aq 是有区别的: 类似于 sh 的引用约定和类似于 csh 的引用约定。如果您使用另一种 shell
脚本语言，很可能仍然可以使用其中一种风格。
.SH "SCANNING MODES"
.sp
短选项字符串的第一个字符可以是 \(aq\fB\-\fP\(aq 或 \(aq\fB+\fP\(aq，以指示特殊的扫描模式。如果使用了 \fBSYNOPSIS\fP
中的第一个调用形式，它们将被忽略; 不过，环境变量 \fBPOSIXLY_CORRECT\fP 仍在检查中。
.sp
如果第一个字符是 \(aq\fB+\fP\(aq，或者如果设置了环境变量 \fBPOSIXLY_CORRECT\fP，则一旦发现第一个非选项参数 (即不以
\(aq\fB\-\fP\(aq) 开头的参数不是选项参数)，解析就会停止。其余参数均解释为非选项参数。
.sp
如果第一个字符是 \(aq\fB\-\fP\(aq，则在找到的地方输出非选项参数; 在正常操作中，它们都是在生成 \(aq\fB\-\-\fP\(aq
参数后在输出结束时收集的。请注意，此 \(aq\fB\-\-\fP\(aq 参数仍会生成，但它将始终是此模式下的最后一个参数。
.SH COMPATIBILITY
.sp
此版本的 \fBgetopt\fP(1) 旨在尽可能与其他版本兼容。通常您可以用这个版本替换它们而不做任何修改，并且有一些优势。
.sp
如果 getopt 的第一个参数的第一个字符不是 \(aq\fB\-\fP\(aq，则 \fBgetopt\fP
进入兼容模式。它将其第一个参数解释为短选项字符串，所有其他参数将被解析。除非设置了环境变量
\fBPOSIXLY_CORRECT\fP，否则它仍然会进行参数打乱 (即，所有非选项参数都在最后输出)，在这种情况下，\fBgetopt\fP
会自动在短选项之前添加一个 \(aq\fB+\fP\(aq。
.sp
环境变量 \fBGETOPT_COMPATIBLE\fP 强制 \fBgetopt\fP 进入兼容模式。设置此环境变量和 \fBPOSIXLY_CORRECT\fP 可为
\(aqdifficult\(aq 程序提供 100% 的兼容性。不过，通常两者都不需要。
.sp
在兼容模式下，短选项字符串中的前导 \(aq\fB\-\fP\(aq 和 \(aq\fB+\fP\(aq 字符将被忽略。
.SH "RETURN CODES"
.sp
\fBgetopt\fP 解析成功返回错误码 \fB0\fP，\fBgetopt\fP(3) 返回错误返回 \fB1\fP，不理解自身参数返回 \fB2\fP，内存不足等内部错误返回
\fB3\fP，调用 \fB\-T\fP 返回 \fB4\fP。
.SH EXAMPLES
.sp
(ba) sh 和 (t) csh 的示例脚本随 \fBgetopt\fP(1) 发行版一起提供，并安装在
\fI/usr/share/doc/util\-linux\fP 目录中。
.SH ENVIRONMENT
.sp
\fBPOSIXLY_CORRECT\fP
.RS 4
\fBgetopt\fP(3)
例程检查此环境变量。如果已设置，一旦发现不是选项或选项参数的参数，解析就会停止。所有其余参数也被解释为非选项参数，无论它们是否以
\(aq\fB\-\fP\(aq 开头。
.RE
.sp
\fBGETOPT_COMPATIBLE\fP
.RS 4
强制 \fBgetopt\fP 使用 \fBSYNOPSIS\fP 中指定的第一个调用格式。
.RE
.SH BUGS
.sp
\fBgetopt\fP(3) 可以解析带有可选参数的长选项，给定一个空的可选参数 (但不能对短选项执行此操作)。此 \fBgetopt\fP(1)
将空的可选参数视为不存在。
.sp
如果您根本不需要任何短选项变量，则语法不是很直观 (您必须将它们显式设置为空字符串)。
.SH AUTHOR
.sp
.MTO frodo\(atfrodo.looijaard.name "Frodo Looijaard" ""
.SH "SEE ALSO"
.sp
\fBbash\fP(1), \fBtcsh\fP(1), \fBgetopt\fP(3)
.SH "REPORTING BUGS"
.sp
对于错误报告，请使用问题跟踪器
.URL https://github.com/util\-linux/util\-linux/issues "" .
.SH AVAILABILITY
.sp
\fBgetopt\fP 命令是 util\-linux 包的一部分，可以从
.URL https://www.kernel.org/pub/linux/utils/util\-linux/ "Linux Kernel Archive" .
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
