.\" -*- coding: UTF-8 -*-
.\"
.\" dc.1 - the *roff document processor source for the dc manual
.\"
.\" This file is part of GNU dc.
.\" Copyright (C) 1994, 1997, 1998, 2000, 2001, 2005, 2006, 2008, 2013, 2016
.\" Free Software Foundation, Inc.
.\"
.\" Permission is granted to copy, distribute and/or modify this document
.\" under the terms of the GNU Free Documentation License, Version 1.2 or
.\" any later version published by the Free Software Foundation; with no
.\" Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
.\" Texts.
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH dc 1 2008\-05\-22 "GNU Project" 
.ds dc \fIdc\fP
.ds Dc \fIdc\fP
.SH NAME
dc \- 任意精度计算器
.SH SYNOPSIS
直流 [\-V] [\-\-version] [\-h] [\-\-help]
   [\-e scriptexpression] [\-\-expression=scriptexpression]
   [\-f scriptfile] [\-\-file=scriptfile]
   [file ...]
.SH DESCRIPTION
.PP
\*(Dc 是一款逆向抛光桌面计算器，支持无限精度运算。 它还允许您定义和调用宏。 通常 \*(dc 从标准输入读取;
如果给它任何命令参数，它们是文件名，并且 \*(dc 在从标准输入读取之前读取并执行文件的内容。 所有正常输出都是标准输出; 所有错误输出都是标准错误。
.PP
反向抛光计算器将数字存储在栈上。 输入一个数字将其推入栈。 算术运算从栈中弹出参数并将结果压入栈中。
.PP
要在 \fIdc\fP 中输入数字，请键入数字 (使用大写字母 \fIA\fP 到 \fIF\fP 作为 "digits"，当输入基数大于 10 时)，以及可选的小数点。
不支持指数符号。 要输入 negative 数字，数字以 `_` 开头。 \*(lq\-\*(rq 不能用于此，因为它是用于减法的二元运算符。
要连续输入两个数字，请用空格或换行符将它们分隔开。 这些作为命令没有任何意义。
.SH OPTIONS
\*(可以使用以下命令行选项调用 Dc:
.TP 
\fB\-V\fP
.TP 
\fB\-\-version\fP
打印出正在运行的 \*(dc 版本和版权声明，然后退出。
.TP 
\fB\-h\fP
.TP 
\fB\-\-help\fP
打印一条简要总结这些命令行选项和错误报告地址的用法消息，然后退出。
.TP 
\fB\-e \fP\fIscript\fP
.TP 
\fB\-\-expression=\fP\fIscript\fP
将 \fIscript\fP 中的命令添加到处理输入时要运行的命令集中。
.TP 
\fB\-f \fP\fIscript\-file\fP
.TP 
\fB\-\-file=\fP\fIscript\-file\fP
将文件 \fIscript\-file\fP 中包含的命令添加到处理输入时要运行的命令集中。
.PP
如果在上述处理后还有任何命令行参数，这些参数将被解释为要处理的输入文件的名称。 文件名 \fB\-\fP 指的是标准输入流。
如果没有指定脚本文件或表达式，将处理标准输入。
.PD
.SH "Printing Commands"
.TP 
\fBp\fP
在栈顶打印值，而不改变栈。 在值之后打印一个换行符。
.TP 
\fBn\fP
在栈顶打印值，将其弹出，之后不打印换行符。
.TP 
\fBP\fP
弹出栈顶的值。 如果它是一个字符串，它只是简单地打印而没有尾随换行符。 否则它是一个数字，其绝对值的整数部分作为 "base
(UCHAR_MAX+1)" 字节流打印出来。 假设 (UCHAR_MAX+1) 是 256 (因为它在大多数具有 8 位字节的机器上都是如此)，序列
\fBKSK0k1/_1Ss [ls*]Sxd0>x [256~Ssd0<x]dsxxsx[q]Sq[Lsd0>qaPlxx] dsxxsx0sqLqsxLxLK+k\fP 也可以完成这个函数。 (上述 native\-dc
代码的大部分复杂性是由于～向后计算字符，以及希望确保所有寄存器都回到其原始状态的愿望。)
.TP 
\fBf\fP
打印栈的全部内容
.ig
and the contents of all of the registers,
..
没有改变任何东西。 如果您迷路或想弄清楚某些命令的效果，这是一个很好的命令。
.PD
.SH Arithmetic
.TP 
\fB+\fP
从栈中弹出两个值，将它们相加，然后压入结果。 结果的精度仅由参数的值决定，并且足够准确。
.TP 
\fB\-\fP
弹出两个值，从弹出的第二个值中减去第一个弹出的值，然后压入结果。
.TP 
\fB*\fP
弹出两个值，将它们相乘，然后压入结果。 结果中的小数位数取决于当前精度值和两个参数中的小数位数。
.TP 
\fB/\fP
弹出两个值，将弹出的第二个值与弹出的第一个值相除，然后压入结果。 小数位数由精度值指定。
.TP 
\fB%\fP
弹出两个值，计算 \fB/\fP 命令将执行的除法余数，然后将其压入。 计算出的值与序列 \fBSd dld/ Ld*\-\fP 计算出的值相同。
.TP 
\fB~\fP
弹出两个值，将弹出的第二个值与弹出的第一个值相除。 先压入商，后压入余数。 除法中使用的小数位数由精度值指定。 (序列 \fBSdSn lnld/ LnLd%\fP 也可以完成这个函数，但错误检查略有不同。)
.TP 
\fB^\fP
弹出两个值并求幂，使用弹出的第一个值作为指数，使用弹出的第二个值作为底数。 指数的小数部分被忽略。 精度值指定结果中的小数位数。
.TP 
\fB|\fP
弹出三个值并计算模幂。 弹出的第一个值用作减少模数; 这个值必须是一个非零数字，并且应该是一个整数。 弹出的第二个用作指数; 该值必须是非
negative 数，并且该指数的任何小数部分都将被忽略。 弹出的第三个值是取幂的基数，它应该是一个整数。 对于小整数，这类似于序列
\fBSm^Lm%\fP，但与 \fB^\fP 不同的是，此命令适用于任意大的指数。
.TP 
\fBv\fP
弹出一个值，计算其平方根，然后将其压入。 精度值的最大值和参数的精度用于确定结果中的小数位数。
.PP
大多数算术运算都受 `精度值` 的影响，您可以使用 \fBk\fP 命令进行设置。 默认精度值为零，这意味着除加法和减法之外的所有算术运算都会产生整数结果。
.SH "Stack Control"
.TP 
\fBc\fP
清除栈，使其为空。
.TP 
\fBd\fP
复制栈顶上的值，推送它的另一个副本。 因此，`4d*p` 计算 4 的平方并打印出来。
.TP 
\fBr\fP
反转 (swaps) 栈顶部两个值的顺序。 (这也可以通过序列 \fBSaSbLaLb\fP.) 来完成
.TP 
\fBR\fP
将栈顶作为整数 \fIn\fP 弹出。 循环旋转更新栈上的顶部 \fIn\fP 项。 如果 \fIn\fP 为正，则旋转方向将使最顶部的元素成为倒数第二个元素; 如果
\fIn\fP 为 negative，则旋转将使最顶层元素成为从顶部开始的 \fIn\fP\-th 元素。 如果栈深度小于 \fIn\fP，则整个栈将旋转
(以适当的方向)，而不会报告任何错误。
.SH Registers
.PP
\*(Dc 至少提供了 256 个内存寄存器，每个寄存器由一个字符命名。 您可以将数字或字符串存储在寄存器中并稍后检索。
.TP 
\fBs\fP\fIr\fP
弹出栈顶的值并将其存储到寄存器 \fIr\fP 中。
.TP 
\fBl\fP\fIr\fP
复制寄存器 \fIr\fP 中的值并将其压入栈。 如果寄存器未初始化，则检索值 0。 这不会改变 \fIr\fP 的内容。
.PP
每个寄存器还包含自己的栈。 当前寄存器值位于寄存器栈的顶部。
.TP 
\fBS\fP\fIr\fP
弹出 (main) 栈顶部的值并将其压入寄存器 \fIr\fP 的栈。 寄存器的先前值变得不可访问。
.TP 
\fBL\fP\fIr\fP
弹出寄存器 \fIr\fP's 栈顶部的值并将其压入主栈。 寄存器 \fIr\fP's 栈中的先前值 (如果有) 现在可通过 \fBl\fP\fIr\fP 命令访问。
.ig
.PP
The
\fBf\fR
command prints a list of all registers that have contents stored in them,
together with their contents.
Only the current contents of each register
(the top of its stack)
is printed.
..
.SH Parameters
.PP
\*(Dc 有三个控制其操作的参数: 精度、输入基数和输出基数。 精度指定要保留在大多数算术运算结果中的小数位数。 输入基数控制输入数字的解释;
输入的所有数字都使用此基数。 输出基数用于打印数字。
.PP
输入和输出基数是单独的参数; 您可以使它们不相等，这可能有用或令人困惑。 输入基数必须介于 2 和 16 之间 (含)。 输出基数必须至少为 2。
精度必须为零或更高。 无论当前输入或输出基数如何，精度始终以十进制数字衡量。
.TP 
\fBi\fP
从栈顶弹出值并使用它来设置输入基数。
.TP 
\fBo\fP
从栈顶弹出值并使用它来设置输出基数。
.TP 
\fBk\fP
从栈顶弹出值并使用它来设置精度。
.TP 
\fBI\fP
将当前输入基数压入栈。
.TP 
\fBO\fP
将当前输出基数压入栈。
.TP 
\fBK\fP
将当前精度压入栈。
.SH Strings
.PP
\*(Dc 对字符串和数字的操作能力有限; 您唯一可以对字符串执行的操作是打印它们并将它们作为宏执行 (这意味着字符串的内容被处理为 \*(dc
命令)。 所有寄存器和栈都可以保存字符串，并且 \*(dc 始终知道任何给定对象是字符串还是数字。 某些命令 (例如算术运算)
需要数字作为参数，如果给定字符串则打印错误。 其他命令可以接受数字或字符串; 例如，\fBp\fP 命令可以接受任何一个并根据其类型打印对象。
.TP 
\fB[\fP\fIcharacters\fP\fB]\fP
生成一个包含 \fIcharacters\fP (包含在平衡的 \fB[\fP 和 \fB]\fP 字符之间) 的字符串，并将其压入栈。 例如，\fB[foo]P\fP
打印字符 \fBfoo\fP (没有换行符)。
.TP 
\fBa\fP
栈顶被弹出。 如果它是一个数字，那么这个数字的低位字节被转换成一个字符串并压入栈。 否则栈顶是一个字符串，该字符串的第一个字符被推回。
.TP 
\fBx\fP
从栈中弹出一个值并将其作为宏执行。 通常它应该是一个字符串; 如果它是一个数字，它只是被推回栈。 例如，\fB[1p]x\fP 执行宏 \fB1p\fP，它将
\fB1\fP 压入栈并在单独的行上打印 \fB1\fP。
.PP
宏通常存储在寄存器中; \fB[1p]sa\fP 存储一个宏以将 \fB1\fP 打印到寄存器 \fBa\fP 中，\fBlax\fP 调用这个宏。
.TP 
\fB>\fP\fIr\fP
从栈弹出两个值并比较它们，假设它们是数字，如果原始栈顶部更大，则将寄存器 \fIr\fP 的内容作为宏执行。 因此，\fB1 2>a\fP 将调用寄存器
\fBa\fP's 的内容，而 \fB2 1>a\fP 则不会。
.TP 
\fB!>\fP\fIr\fP
类似，但如果原始栈顶不大于 (小于或等于) 倒数第二个，则调用宏。
.TP 
\fB<\fP\fIr\fP
类似，但如果原始栈顶较少，则调用宏。
.TP 
\fB!<\fP\fIr\fP
类似，但如果原始栈顶不小于 (大于或等于) 倒数第二个，则调用宏。
.TP 
\fB=\fP\fIr\fP
类似，但如果弹出的两个数字相等，则调用宏。
.TP 
\fB!=\fP\fIr\fP
类似，但如果弹出的两个数字不相等，则调用宏。
.ig
This can also be validly used to compare two strings for equality.
..
.TP 
\fB?\fP
从终端读取一行并执行。 此命令允许宏请求用户输入。
.TP 
\fBq\fP
从宏退出，也从调用它的宏退出。 如果从顶层调用，或者从直接从顶层调用的宏调用，\fBq\fP 命令将导致 \*(dc 退出。
.TP 
\fBQ\fP
从栈中弹出一个值并将其用作要退出的宏执行级别的计数。 因此，\fB3Q\fP 退出三个级别。 \fBQ\fP 命令永远不会导致 \*(dc 退出。
.SH "Status Inquiry"
.TP 
\fBZ\fP
从栈弹出一个值，计算它具有的小数位数 (或字符数，如果它是一个字符串) 并压入该数字。 数字的数字计数 \fInot\fP
包括任何前导零，即使它们出现在小数点的右侧。
.TP 
\fBX\fP
.\" -1.
从栈中弹出一个值，计算它的小数位数，然后压入该数字。 对于字符串，推送的值是 0.
.TP 
\fBz\fP
压入当前栈深度: 执行 \fBz\fP 命令之前栈中的对象数。
.SH Miscellaneous
.TP 
\fB!\fP
将作为系统命令运行该行的其余部分。 请注意，!<、!= 和 !> 命令的解析优先，因此如果要运行以 <、= 或 >
开头的命令，您需要在! 之后添加一个空格。
.TP 
\fB#\fP
将把该行的其余部分解释为注释。
.TP 
\fB:\fP\fIr\fP
将从栈中弹出顶部的两个值。 旧的倒数第二个值将存储在数组 \fIr\fP 中，由旧的栈顶值索引。
.TP 
\fB;\fP\fIr\fP
弹出栈顶并将其用作数组 \fIr\fP 的索引。 然后将选定的值压入栈。
.P
请注意，寄存器的每个栈实例都有自己的关联数组。 因此 \fB1 0:a 0Sa 2 0:a La 0;ap\fP 将打印 1，因为 2 存储在稍后弹出的
0:a 实例中。
.SH BUGS
.PP
通过电子邮件向 \fBbug\-dc@gnu.org\fP 报告错误。
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
