.\" -*- coding: UTF-8 -*-
'\" t
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH COREDUMPCTL 1 "" "systemd 253" coredumpctl
.ie  \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH NAME
coredumpctl \- 检索和处理保存的核心转储和元数据
.SH SYNOPSIS
.HP \w'\fBcoredumpctl\fR\ 'u
\fBcoredumpctl\fP [OPTIONS...] {COMMAND} [PID|COMM|EXE|MATCH...]
.SH DESCRIPTION
.PP
\fBcoredumpctl\fP 是一个工具，可用于检索和处理 \fBsystemd\-coredump\fP(8)\& 保存的核心转储和元数据。
.SH COMMANDS
.PP
理解以下命令:
.PP
\fBlist\fP
.RS 4
列出与指定特征匹配的日志中捕获的核心转储。如果未指定命令，则这是隐含的默认值 \&。
.sp
输出被设计为易于阅读，并包含一个包含以下列的表格:
.PP
TIME
.RS 4
内核报告的崩溃时间戳 \&。
.RE
.PP
PID
.RS 4
崩溃的进程的标识符 \&。
.RE
.PP
用户标识符、全局标识符
.RS 4
崩溃的进程的用户和组标识符 \&。
.RE
.PP
SIGNAL
.RS 4
导致进程崩溃的信号，适用时 \&。
.RE
.PP
COREFILE
.RS 4
coredump 是否被存储，以及是否仍然可以访问的信息: "none" 表示 core 没有被存储，"\-" 表示它不可用
(例如因为进程没有被信号终止)，"present" 表示 core 文件是当前用户可以访问，"journal" 表示内核存放在 "journal"
中，"truncated" 和前两个一样，但是内核太大没有完整存放，"error" 表示内核文件不能访问过，很可能是权限不足，"missing"
表示核心存放在一个文件中，但是这个文件已经被删除了 \&。
.RE
.PP
EXE
.RS 4
可执行文件的完整路径 \&。对于脚本的回溯，这是解释器的名称 \&。
.RE
.sp
它 \*(值得注意的是，不同的限制适用于保存在日志中的数据和保存在 /var/lib/systemd/coredump 中的核心转储文件，请参见
\fBsystemd\-coredump\fP(8)\& 中的概述。因此，很可能会发生特定核心转储仍列在日志中而其相应的核心转储文件已被删除 \&。
.RE
.PP
\fBinfo\fP
.RS 4
显示有关日志中捕获的与指定特征匹配的最后一个核心转储或核心转储的详细信息 \&。
.RE
.PP
\fBdump\fP
.RS 4
提取匹配指定特征的最后一个核心转储 \&。核心转储将写入标准输出，除非使用 \fB\-\-output=\fP\& 指定输出文件。
.RE
.PP
\fBdebug\fP
.RS 4
在匹配指定特征的最后一个核心转储上调用调试器 \&。默认情况下，将使用 \fBgdb\fP(1)\&。这可以使用 \fB\-\-debugger=\fP 选项或
\fI$SYSTEMD_DEBUGGER\fP 环境变量 \& 进行更改。使用 \fB\-\-debugger\-arguments=\fP
选项将额外的命令行参数传递给调试器 \&。
.RE
.SH OPTIONS
.PP
理解以下选项:
.PP
\fB\-h\fP, \fB\-\-help\fP
.RS 4
打印一个简短的帮助文本并退出 \&。
.RE
.PP
\fB\-\-version\fP
.RS 4
打印一个短版本字符串并退出 \&。
.RE
.PP
\fB\-\-no\-pager\fP
.RS 4
不要将输出通过管道传输到寻呼机 \&。
.RE
.PP
\fB\-\-no\-legend\fP
.RS 4
不要打印图例，i\&.e\&。带有提示的列标题和页脚 \&。
.RE
.PP
\fB\-\-json=\fP\fIMODE\fP
.RS 4
显示格式为 JSON\& 的输出。期望 "short" (用于尽可能短的输出，没有任何冗余空格或换行符)、"pretty"
(用于相同版本的漂亮版本，带有缩进和换行符) 或 "off" (关闭 JSON 输出，默认值) \&。
.RE
.PP
\fB\-1\fP
.RS 4
仅显示最近核心转储的信息，而不是列出所有已知的核心转储 \&。相当于 \fB\-\-reverse \-n 1\fP\&。
.RE
.PP
\fB\-n\fP \fIINT\fP
.RS 4
最多显示指定数量的条目 \&。指定的参数必须是大于或等于 1\& 的整数。
.RE
.PP
\fB\-S\fP, \fB\-\-since\fP
.RS 4
仅打印自指定日期以来的条目 \&。
.RE
.PP
\fB\-U\fP, \fB\-\-until\fP
.RS 4
仅打印指定日期之前的条目 \&。
.RE
.PP
\fB\-r\fP, \fB\-\-reverse\fP
.RS 4
反转输出，以便首先显示最新的条目 \&。
.RE
.PP
\fB\-F\fP \fIFIELD\fP, \fB\-\-field=\fP\fIFIELD\fP
.RS 4
打印指定字段在匹配日志的核心转储条目中所采用的所有可能数据值 \&。
.RE
.PP
\fB\-o\fP \fIFILE\fP, \fB\-\-output=\fP\fIFILE\fP
.RS 4
将内核写入 \fBFILE\fP\&。
.RE
.PP
\fB\-\-debugger=\fP\fIDEBUGGER\fP
.RS 4
将给定的调试器用于 \fBdebug\fP 命令 \&。如果未给出且未设置 \fI$SYSTEMD_DEBUGGER\fP，则将使用 \fBgdb\fP(1)\&。
.RE
.PP
\fB\-A\fP \fIARGS\fP, \fB\-\-debugger\-arguments=\fP\fIARGS\fP
.RS 4
将给定的 \fIARGS\fP 作为额外的命令行参数传递给调试器 \&。当 \fIARGS\fP 包含空格 \& 时适当引用。(参见示例 \&。)
.RE
.PP
\fB\-\-file=\fP\fIGLOB\fP
.RS 4
将文件 glob 作为参数 \&。如果指定，coredumpctl 将对匹配 \fIGLOB\fP 的指定日志文件进行操作，而不是默认的运行时和系统日志路径
\&。可以指定多次，在这种情况下文件将适当地交错 \&。
.RE
.PP
\fB\-D\fP \fIDIR\fP, \fB\-\-directory=\fP\fIDIR\fP
.RS 4
使用指定 \fBDIR\fP\& 中的日志文件。
.RE
.PP
\fB\-\-root=\fP\fIROOT\fP
.RS 4
搜索 coredumps\& 时使用根目录 \fBROOT\fP。
.RE
.PP
\fB\-\-image=\fP\fIimage\fP
.RS 4
采用磁盘映像文件或块设备节点的路径 \&。如果指定，所有操作都将应用于指定磁盘映像中的文件系统 \&。该选项与 \fB\-\-root=\fP
类似，但对存储在磁盘映像或块设备 \& 中的文件系统进行操作。磁盘映像应该在 GPT 分区表中仅包含一个文件系统或一组文件系统，紧跟在
\m[blue]\fBDiscoverable Partitions Specification\fP\m[]\&\s-2\u[1]\d\s+2\&
之后。有关支持的磁盘映像的更多信息，请参见同名的 \fBsystemd\-nspawn\fP(1)\*(Aqs 开关 \&。
.RE
.PP
\fB\-q\fP, \fB\-\-quiet\fP
.RS 4
抑制有关无法访问日志文件和可能的正在进行的核心转储 \& 的信息性消息。
.RE
.PP
\fB\-\-all\fP
.RS 4
查看 /var/log/journal/ 中所有可用的日志文件 (不包括日志名称空间)，而不仅仅是本地文件 \&。
.RE
.SH MATCHING
.PP
一场比赛可以是:
.PP
\fIPID\fP
.RS 4
转储核心的进程的进程 ID\&。一个整数 \&。
.RE
.PP
\fICOMM\fP
.RS 4
可执行文件的名称 (与 \fBCOREDUMP_COMM=\fP)\& 匹配。不得包含斜杠 \&。
.RE
.PP
\fIEXE\fP
.RS 4
可执行文件的路径 (匹配 \fBCOREDUMP_EXE=\fP)\&。必须至少包含一个斜杠 \&。
.RE
.PP
\fIMATCH\fP
.RS 4
通用 journalctl 匹配过滤器，必须包含等号 ("=")\&。请参见 \fBjournalctl\fP(1)\&。
.RE
.SH "EXIT STATUS"
.PP
成功返回 0; 否则，返回一个非零故障代码 \&。找不到任何匹配的核心转储被视为失败 \&。
.SH ENVIRONMENT
.PP
\fI$SYSTEMD_DEBUGGER\fP
.RS 4
将给定的调试器用于 \fBdebug\fP 命令 \&。请参见 \fB\-\-debugger=\fP 选项 \&。
.RE
.SH EXAMPLES
.PP
\fBExample\ \&1.\ \&List all the core dumps of a program\fP
.sp
.if  n \{\
.RS 4
.\}
.nf
$ coredumpctl 列表 /usr/lib64/firefox/firefox
TIME PID UID GID SIG 核心文件 EXE 大小
周二 \&...   8018 1000 1000 缺少 SIGSEGV /usr/lib64/firefox/firefox\-
星期三 \&... 251609 1000 1000 SIGTRAP 缺失 /usr/lib64/firefox/firefox\-
周五 \&... 552351 1000 1000 SIGSEGV 当前 /usr/lib64/firefox/firefox 28\&.7M
.fi
.if  n \{\
.RE
.\}
.PP
该日志有三个与 /usr/lib64/firefox/firefox 相关的条目，只有最后一个条目还有一个可用的核心文件 (在磁盘的外部存储中) \&。
.PP
请注意，coredumpctl 需要访问日志文件才能从日志中检索相关条目。因此，非特权用户通常只会看到有关该用户崩溃程序的信息。
.PP
\fBExample\ \&2.\ \&Invoke gdb on the last core dump\fP
.sp
.if  n \{\
.RS 4
.\}
.nf
$ coredumpctl 调试
.fi
.if  n \{\
.RE
.\}
.PP
\fBExample\ \&3.\ \&Use gdb to display full register info from the last core dump\fP
.sp
.if  n \{\
.RS 4
.\}
.nf
$ coredumpctl debug \-\-debugger\-arguments="\-batch \-ex \*(Aqinfo all\-registers\*(Aq"
.fi
.if  n \{\
.RE
.\}
.PP
\fBExample\ \&4.\ \&Show information about a core dump matched by PID\fP
.sp
.if  n \{\
.RS 4
.\}
.nf
$ coredumpctl 信息 6654
           PID: 6654 (bash)
           UID: 1000 (user)
           GID: 1000 (user)
        信号: 11 (SEGV)
     时间戳: Mon 2021\-01\-01 00:00:01 CET (20 年前)
  命令行: bash \-c $\*(Aqkill \-SEGV $$\*(Aq
    可执行文件: /usr/bin/bash
 控制组: /user\&.slice/user\-1000\&.slice/\&...
          单位: user@1000\&.service
     用户元: vte\-spawn\-\&...\&.scope
         切片: user\-1000\&.slice
     所有者 UID: 1000 (user)
       引导标识: \&...
    机器号: \&...
      主机名: \&...
       存储: /var/lib/systemd/coredump/core\&.bash\&.1000\&.\&...\&.zst (present)
  磁盘大小: 51\&.7K
       消息: 用户 1000 转储核心的进程 130414 (bash)\&。

                线程 130414 的栈跟踪:
                #0 0x00007f398142358b 杀 (libc\&.so\&.6 + 0x3d58b)
                #1  0x0000558c2c7fda09 kill_builtin (bash + 0xb1a09)
                #2  0x0000558c2c79dc59 execute_builtin\&.lto_priv\&.0 (bash + 0x51c59)
                #3  0x0000558c2c79709c execute_simple_command (bash + 0x4b09c)
                #4  0x0000558c2c798408 execute_command_internal (bash + 0x4c408)
                #5  0x0000558c2c7f6bdc parse_and_execute (bash + 0xaabdc)
                #6  0x0000558c2c85415c run_one_command\&.isra\&.0 (bash + 0x10815c)
                #7 0x0000558c2c77d040 主 (bash + 0x31040)
                #8  0x00007f398140db75 __libc_start_main (libc\&.so\&.6 + 0x27b75)
                #9  0x0000558c2c77dd1e _start (bash + 0x31d1e)
.fi
.if  n \{\
.RE
.\}
.PP
\fBExample\ \&5.\ \&Extract the last core dump of /usr/bin/bar to a file named bar\&.coredump\fP
.sp
.if  n \{\
.RS 4
.\}
.nf
$ coredumpctl \-o bar\&.coredump 转储 /usr/bin/bar
.fi
.if  n \{\
.RE
.\}
.SH "SEE ALSO"
.PP
\fBsystemd\-coredump\fP(8), \fBcoredump.conf\fP(5), \fBsystemd\-journald.service\fP(8),
\fBgdb\fP(1)
.SH NOTES
.IP " 1." 4
可发现分区规范
.RS 4
\%https://uapi\-group.org/specifications/specs/discoverable_partitions_specification
.RE
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
