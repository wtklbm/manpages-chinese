.\" -*- coding: UTF-8 -*-
'\" t
.\"***************************************************************************
.\" Copyright 2018-2021,2022 Thomas E. Dickey                                *
.\" Copyright 1998-2016,2017 Free Software Foundation, Inc.                  *
.\"                                                                          *
.\" Permission is hereby granted, free of charge, to any person obtaining a  *
.\" copy of this software and associated documentation files (the            *
.\" "Software"), to deal in the Software without restriction, including      *
.\" without limitation the rights to use, copy, modify, merge, publish,      *
.\" distribute, distribute with modifications, sublicense, and/or sell       *
.\" copies of the Software, and to permit persons to whom the Software is    *
.\" furnished to do so, subject to the following conditions:                 *
.\"                                                                          *
.\" The above copyright notice and this permission notice shall be included  *
.\" in all copies or substantial portions of the Software.                   *
.\"                                                                          *
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
.\" IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
.\" DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
.\" OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
.\" THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
.\"                                                                          *
.\" Except as contained in this notice, the name(s) of the above copyright   *
.\" holders shall not be used in advertising or otherwise to promote the     *
.\" sale, use or other dealings in this Software without prior written       *
.\" authorization.                                                           *
.\"***************************************************************************
.\"
.\" $Id: tput.1,v 1.76 2022/02/12 20:02:20 tom Exp $
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH tput 1 ""  
.ds d /usr/share/terminfo
.ds n 1
.ie  \n(.g .ds `` \(lq
.el       .ds `` ``
.ie  \n(.g .ds '' \(rq
.el       .ds '' ''
.de  bP
.ie n  .IP \(bu 4
.el    .IP \(bu 2
..
.SH NAME
\fBtput\fP, \fBreset\fP \- 初始化终端或查询 terminfo 数据库
.SH SYNOPSIS
\fBtput\fP [\fB\-T\fP\fItype\fP] \fIcapname\fP [\fIparameters\fP]
.br
\fBtput\fP [\fB\-T\fP\fItype\fP] [\fB\-x\fP] \fBclear\fP
.br
\fBtput\fP [\fB\-T\fP\fItype\fP] \fBinit\fP
.br
\fBtput\fP [\fB\-T\fP\fItype\fP] \fBreset\fP
.br
\fBtput\fP [\fB\-T\fP\fItype\fP] \fBlongname\fP
.br
\fBtput \-S\fP \fB<<\fP
.br
\fBtput \-V\fP
.br
.SH DESCRIPTION
\fBtput\fP 实用程序使用 \fBterminfo\fP 数据库为 shell 提供依赖于最终端的功能和信息的值 (请参见
\fBsh\fP(1))，以初始化或重置最终端，或返回所请求的最终端类型的长名称。 结果取决于能力的类型:
.RS 3
.TP  5
string
\fBtput\fP 将字符串写入标准输出。 不提供尾随换行符。
.TP 
integer
\fBtput\fP 将十进制值写入标准输出，并带有尾随换行符。
.TP 
boolean
如果终端有能力，\fBtput\fP 只是将退出代码 (\fB0\fP 设置为 TRUE，如果终端没有能力，则将 \fB1\fP 设置为
FALSE)，并且不向标准输出写入任何内容。
.RE
.PP
在使用标准输出返回的值之前，应用程序应该测试退出代码 (例如，\fB$?\fP，查看 \fBsh\fP(1)) 以确保它是 \fB0\fP。 (请参见 \fBEXIT CODES\fP 和 \fBDIAGNOSTICS\fP 部分。) 有关功能的完整列表以及与每个功能关联的 \fIcapname\fP，请参见
\fBterminfo\fP(5)。
.SS Options
.TP 
\fB\-S\fP
每次调用 \fBtput\fP 时允许不止一种能力。 这些功能必须从标准输入而不是命令行传递给 \fBtput\fP (参见示例)。 每行只允许一个
\fIcapname\fP。 \fB\-S\fP 选项更改 \fB0\fP 和 \fB1\fP 布尔值和字符串退出代码的含义 (请参见退出代码部分)。
.IP
由于某些功能可能使用 \fIstring\fP 参数而不是 \fInumbers\fP，因此 \fBtput\fP 使用表格和其输入中存在的参数来决定是否使用
\fBtparm\fP(3X) 以及如何解释参数。
.TP 
\fB\-T\fP\fItype\fP
表示终点的 \fItype\fP。 通常这个选项是不必要的，因为默认值取自环境变量 \fBTERM\fP。 如果指定 \fB\-T\fP，则 shell 变量
\fBLINES\fP 和 \fBCOLUMNS\fP 也将被忽略。
.TP 
\fB\-V\fP
报告此程序中使用的 ncurses 版本，然后退出。
.TP 
\fB\-x\fP
不要尝试使用扩展的 \*(``E3\*('' 功能清除最终端的回滚缓冲区。
.SS Commands
(\fBinit\fP、\fBreset\fP、\fBlongname\fP) 几个命令比较特殊; 它们由 \fBtput\fP 程序定义。 其他的是来自终点数据库的
\fIcapabilities\fP 的名称 (参见 \fBterminfo\fP(5) 的列表)。 尽管 \fBinit\fP 和 \fBreset\fP 类似于功能名称，但
\fBtput\fP 使用多种功能来执行这些特殊的数。
.TP 
\fIcapname\fP
表示终端数据库的能力。
.IP
如果 capability 是带参数的字符串，则 capability 后面的参数将作为字符串的参数。
.IP
大多数参数都是数字。 只有少数终端功能需要字符串参数; \fBtput\fP 使用一个表来决定将哪些作为字符串传递。 通常 \fBtput\fP 使用
\fBtparm\fP(3X) 来执行替换。 如果没有为该功能提供参数，则 \fBtput\fP 写入字符串而不执行替换。
.TP 
\fBinit\fP
如果终端数据库存在并且存在用户终端的条目 (参见上面的 \fB\-T\fP\fItype\fP)，将发生以下情况:
.RS
.TP  5
(1)
首先，\fBtput\fP 检索您的终端的当前终端模式设置。 它通过连续测试来做到这一点
.RS
.bP
标准误，
.bP
标准输出，
.bP
标准输入和
.bP
最终 \*(``/dev/tty\*(''
.RE
.IP
获取终端设置。 检索到这些设置后，\fBtput\fP 会记住更新设置时要使用的文件描述符。
.TP 
(2)
如果无法从操作系统获得窗口大小，但最终描述 (或环境，例如 \fBLINES\fP 和 \fBCOLUMNS\fP 变量指定此)，请更新操作系统的窗口大小概念。
.TP 
(3)
终端模式将更新:
.RS
.bP
条目中指定的任何延迟 (例如，换行符) 都将在 tty 驱动程序中设置，
.bP
选项卡扩展将根据条目中的规范打开或关闭，并且
.bP
如果未展开制表符，将设置标准制表符 (每 8 个空格)。
.RE
.TP 
(4)
如果存在，最终端的初始化字符串将按照 \fITabs and Initialization\fP 的 \fBterminfo\fP(5) 部分中的详细信息输出，
.TP 
(5)
输出被刷新。
.RE
.IP
如果条目不包含任何这些活动所需的信息，则该活动将被静默跳过。
.TP 
\fBreset\fP
这类似于 \fBinit\fP，但有两个区别:
.RS
.TP  5
(1)
在任何其他初始化之前，终端模式将重置为 \*(``sane\*('' 状态:
.RS
.bP
设置煮熟和回声模式，
.bP
关闭 cbreak 和 raw 模式，
.bP
打开换行符翻译和
.bP
将任何未设置的特殊字符重置为其默认值
.RE
.TP  5
(2)
如果存在 (\fBrs1\fP、\fBrs2\fP、\fBrs3\fP、\fBrf\fP)，将输出最终的 \fIreset\fP 字符串，而不是输出
\fIinitialization\fP 字符串。 如果 \fIreset\fP 字符串不存在，但 \fIinitialization\fP 字符串存在，则将输出
\fIinitialization\fP 字符串。
.RE
.IP
否则，\fBreset\fP 的行为与 \fBinit\fP 相同。
.TP 
\fBlongname\fP
如果终端数据库存在并且存在用户终端的条目 (参见上面的 \fB\-T\fP\fItype\fP)，那么终端的长名称将被输出。 长名是 \fBterminfo\fP
数据库中终端描述的第一行中的姓氏 [参见 \fBterm\fP(5)].
.SS Aliases
\fBtput\fP 专门处理 \fBclear\fP、\fBinit\fP 和 \fBreset\fP 命令: 它允许通过具有这些名称的链接调用它。
.PP
如果 \fBtput\fP 由名为 \fBreset\fP 的链接调用，则其效果与 \fBtput reset\fP 相同。 \fBtset\fP(\*n)
实用程序还专门处理名为 \fBreset\fP 的链接。
.PP
在 ncurses 6.1 之前，这两个实用工具彼此不同:
.bP
\fBtset\fP 实用程序重置终端模式和特殊字符 (\fBtput\fP) 未完成。
.bP
另一方面，用于重置最终端的 \fBtset\fP's 的最终端功能更为有限，即与此实用程序设置的制表位和边距相比，只有
\fBreset_1string\fP、\fBreset_2string\fP 和 \fBreset_file\fP。
.bP
\fBreset\fP 程序通常是 \fBtset\fP 的别名，因为它与重置终端模式和特殊字符不同。
.PP
通过对 ncurses 6.1 所做的更改，两个程序的 \fIreset\fP 特性与 (mostly) 相同。 仍然存在一些差异:
.bP
\fBtset\fP 程序在复位时等待一秒，以防碰巧是硬件终端。
.bP
这两个程序将最终初始化字符串写入不同的流 (即 \fBtset\fP 的标准错误和 \fBtput\fP) 的标准输出。
.IP
\fBNote:\fP 虽然这些程序写入不同的流，但将它们的输出重定向到一个文件只会捕获它们的部分操作。 对最终模式的更改不受重定向输出的影响。
.PP
如果 \fBtput\fP 由名为 \fBinit\fP 的链接调用，则其效果与 \fBtput init\fP 相同。 同样，您不太可能使用该链接，因为另一个名为
\fBinit\fP 的程序具有更成熟的用途。
.SS "Terminal Size"
.PP
除了特殊命令 (例如，\fBclear\fP)，tput 还特别处理某些 terminfo 功能: \fBlines\fP 和 \fBcols\fP。 tput 调用
\fBsetupterm\fP(3X) 获取终端大小:
.bP
首先，它从最终数据库获取大小 (通常不为没有固定窗口大小的最终模拟器提供)
.bP
然后它向操作系统询问终端的大小 (这通常有效，除非通过不支持 \fINAWS\fP: 协商窗口大小的串行线路连接)。
.bP
最后，它检查环境变量 \fBLINES\fP 和 \fBCOLUMNS\fP，这可能会覆盖最终大小。
.PP
如果给出了 \fB\-T\fP 选项，tput 将通过调用 \fBuse_tioctl(TRUE)\fP 忽略环境变量，这取决于操作系统 (或最终，终端数据库)。
.SH EXAMPLES
.TP  5
\fBtput init\fP
根据环境变量 \fBTERM\fP 中终端的类型初始化终端。 在导出环境变量 \fBTERM\fP 后，此命令应包含在每个人的 .profile 中，如
\fBprofile\fP(5) 手册页所示。
.TP  5
\fBtput \-T5620 reset\fP
重置 AT&T 5620 终端，覆盖环境变量 \fBTERM\fP 中终端的类型。
.TP  5
\fBtput cup 0 0\fP
发送序列将游标移动到 \fB0\fP 行，\fB0\fP 列 (屏幕左上角，通常称为 \*(``home\*('' 游标位置。
.TP  5
\fBtput clear\fP
回显当前终端的清屏序列。
.TP  5
\fBtput cols\fP
打印当前终点的列数。
.TP  5
\fBtput \-T450 cols\fP
打印 450 终端的列数。
.TP  5
\fBbold=`tput smso` offbold=`tput rmso`\fP
设置 shell 变量 \fBbold\fP，开始突出模式序列，和 \fBoffbold\fP，结束突出模式序列，对于当前终点。 这之后可能会出现提示:
\fBecho "${bold}Please type in your name: ${offbold}\ec"\fP
.TP  5
\fBtput hc\fP
设置退出代码以指示当前终端是否为硬拷贝终端。
.TP  5
\fBtput cup 23 4\fP
发送序列将游标移动到第 23 行，第 1 列 4.
.TP  5
\fBtput cup\fP
发送用于游标移动的 terminfo 字符串，不替换任何参数。
.TP  5
\fBtput longname\fP
打印 \fBterminfo\fP 数据库中环境变量 \fBTERM\fP 中指定的终端类型的长名称。
.PP
.RS 5
\fBtput \-S <<!\fP
.br
\fB> clear\fP
.br
\fB> cup 10 10\fP
.br
\fB> bold\fP
.br
\fB> !\fP
.RE
.TP  5
\&
此示例显示 \fBtput\fP 在一次调用中处理多项功能。 它清除屏幕，将游标移动到位置 10、10 并打开粗体 (超亮) 模式。 该列表以单独一行的感叹号
(\fB!\fP) 结束。
.SH FILES
.TP 
\fB\*d\fP
编译结束描述数据库
.TP 
\fB/usr/share/tabset/*\fP
某些终端的制表符设置，格式适合输出到最终 (设置边距和制表符的转义序列) ; 有关详细信息，请参见 \fITabs and Initialization\fP，\fBterminfo\fP(5) 部分
.SH "EXIT CODES"
如果使用 \fB\-S\fP 选项，\fBtput\fP 检查每一行的错误，如果发现任何错误，会将退出代码设置为 4 加上有错误的行数。 如果未发现错误，则退出代码为
\fB0\fP。 无法给出哪条线路失败的指示，因此永远不会出现退出代码 \fB1\fP。 退出代码 \fB2\fP、\fB3\fP 和 \fB4\fP 保留其通常的解释。 如果不使用
\fB\-S\fP 选项，则退出代码取决于 \fIcapname\fP: 的类型
.RS 3
.TP 
\fIboolean\fP
\fB0\fP 的值设置为 TRUE，\fB1\fP 的值设置为 FALSE。
.TP 
\fIstring\fP
如果为此终端 \fItype\fP 定义了 \fIcapname\fP，则设置 \fB0\fP 的值 (\fIcapname\fP 的值在标准输出中返回) ; 如果
\fIcapname\fP 没有为此终端 \fItype\fP 定义，则设置 \fB1\fP 的值 (没有任何内容写入标准输出)。
.TP 
\fIinteger\fP
始终设置 \fB0\fP 的值，无论是否为此终端 \fItype\fP 定义了 \fIcapname\fP。 要确定是否为此终端 \fItype\fP 定义了
\fIcapname\fP，用户必须测试写入标准输出的值。 \fB\-1\fP 的值意味着 \fIcapname\fP 没有为这个终端 \fItype\fP 定义。
.TP 
\fIother\fP
\fBreset\fP 或 \fBinit\fP 可能无法找到各自的文件。 在这种情况下，退出代码设置为 4 + \fBerrno\fP。
.RE
.PP
任何其他退出代码表示错误; 请参见诊断部分。
.SH DIAGNOSTICS
\fBtput\fP 打印以下错误消息并设置相应的退出代码。
.PP
.ne 15
.TS
l l.
exit code	error message
=
\fB0\fP	T{
(\fIcapname\fP is a numeric variable that is not specified in the
\fBterminfo\fP(5) database for this terminal type, e.g.
\fBtput \-T450 lines\fP and \fBtput \-Thp2621 xmc\fP)
T}
\fB1\fP	no error message is printed, see the \fBEXIT CODES\fP section.
\fB2\fP	usage error
\fB3\fP	unknown terminal \fItype\fP or no \fBterminfo\fP database
\fB4\fP	unknown \fBterminfo\fP capability \fIcapname\fP
\fB>4\fP	error occurred in \-S
=
.TE
.SH HISTORY
\fBtput\fP 命令由 Bill Joy 于 1980 年开始使用。 初始版本仅清除屏幕。
.PP
AT&T System V 提供了不同的 \fBtput\fP 命令:
.bP
SVr2 提供了一个基本的 \fBtput\fP，它根据每个预定义的功能检查参数并返回相应的值。 此版本的 \fBtput\fP 未将 \fBtparm\fP(3X)
用于参数化的功能。
.bP
一年后，SVr3 将其替换为一个更广泛的程序，该程序的 \fBinit\fP 和 \fBreset\fP 子命令 (超过程序的一半) 合并自 Eric Allman
编写的 BSD \fBtset\fP 的 \fBreset\fP 特性。
.bP
SVr4 在 \fBinit\fP 子命令中使用 \fBorig_colors\fP 和 \fBorig_pair\fP 功能添加了颜色初始化。
.PP
Keith Bostic 在 1989 年用基于 AT&T System V 程序 \fBtput\fP 的新实现替换了 BSD \fBtput\fP 命令。 与
AT&T 程序一样，Bostic 的版本接受了一些以 \fIterminfo\fP 功能命名的参数 (\fBclear\fP、\fBinit\fP、\fBlongname\fP
和 \fBreset\fP)。 但是 (因为他只有 \fItermcap\fP 可用)，它接受其他功能的 \fItermcap\fP 名称。 此外，Bostic 的
BSD \fBtput\fP 没有像早期的 BSD \fBtset\fP 那样修改终端 I/O 模式。
.PP
同时，Bostic 添加了一个名为 \*(``clear\*('' 的 shell 脚本，使用 \fBtput\fP 清屏。
.PP
这两者都出现在 4.4BSD 中，成为 \fBtput\fP 的 \*(``modern\*('' BSD 实现。
.PP
\fBtput\fP 的这种实现始于与 AT&T 或 BSD 不同的来源: Ross Ridge 的 \fImytinfo\fP 包，于 1992 年 12 月在
\fIcomp.sources.unix\fP 上发布。 与 BSD 程序相比，Ridge 的程序对终端功能的使用更为复杂。 Eric Raymond 于
1995 年 6 月在 ncurses 中使用了该 \fBtput\fP 程序 (以及 \fImytinfo\fP) 的其他部分。
使用处理终端功能的部分几乎没有改变，Raymond 改进了命令行参数的处理方式。
.SH PORTABILITY
.PP
\fBtput\fP 的这种实现在两个重要方面不同于 AT&T \fBtput\fP:
.bP
\fBtput\fP \fIcapname\fP 写入标准输出。 这不一定是一个普通的终端。 但是，操作终端模式的子命令可能不使用标准输出。
.IP
AT&T 实现的 \fBinit\fP 和 \fBreset\fP 命令使用 BSD (4.1c) \fBtset\fP 源，它操纵终端模式。 它在回退到
\*(``/dev/tty\*('' 并最终假定 1200Bd 终端之前连续尝试标准输出、标准错误、标准输入。 更新终端模式时，它会忽略错误。
.IP
直到 ncurses 6.0 之后进行更改，\fBtput\fP 才修改终端模式。 \fBtput\fP 现在采用类似的方案，使用与 \fBtset\fP 共享的函数
(最终基于 4.4BSD \fBtset\fP).  如果无法打开终端，例如在 \fBcron\fP(1) 中运行时，\fBtput\fP 将返回一个错误。
.bP
AT&T \fBtput\fP 通过查看所有字符是否都是数字来猜测其 \fIcapname\fP 操作数的类型。
.IP
大多数支持 \fIcapname\fP 操作数的实现都使用 \fBtparm\fP 函数来扩展其中的参数。 那个函数需要数字和字符串参数的混合，要求 \fBtput\fP
知道要使用哪种类型。
.IP
此实现使用一个表来确定标准 \fIcapname\fP 操作数的参数类型，并使用一个内部库函数来分析非标准 \fIcapname\fP 操作数。
.IP
除了提供比 AT&T 的实用程序更可靠的操作之外，此分析还引入了一个可移植性问题: OpenBSD 开发人员改编了 ncurses 的内部库函数，以将
NetBSD 基于 termcap 的 \fBtput\fP 移植到 terminfo。 它已被修改为解释一行中的多个命令。 便携式应用程序不应依赖此，特性;
ncurses 提供它以支持专门为 OpenBSD 编写的应用程序。
.PP
如果编译了 \fItermcap\fP 支持，此实现 (与其他实现不同) 可以接受 \fIcapname\fP 特性的 \fItermcap\fP 和
\fIterminfo\fP 名称。 但是，在这种情况下，预定义的 \fItermcap\fP 和 \fIterminfo\fP 名称有两个歧义 (假定为
\fIterminfo\fP 名称) :
.bP
\fItermcap\fP 名称 \fBdl\fP 对应 \fIterminfo\fP 名称 \fBdl1\fP (删去一行)。
.br
\fIterminfo\fP 名称 \fBdl\fP 对应于 \fItermcap\fP 名称 \fBDL\fP (删除给定行数)。
.bP
\fItermcap\fP 名称 \fBed\fP 对应 \fIterminfo\fP 名称 \fBrmdc\fP (结束删除模式)。
.br
\fIterminfo\fP 名称 \fBed\fP 对应于 \fItermcap\fP 名称 \fBcd\fP (清晰到屏幕末尾)。
.PP
\fBlongname\fP 和 \fB\-S\fP 选项以及 \fBcup\fP 示例中使用的参数替换特性在 4.3reno (1989) 之前的 BSD curses
或 SVr4 (1988) 之前的 AT&T/USL curses 中不受支持。
.PP
IEEE Std 1003.1/The Open Group Base Specifications Issue 7 (POSIX.1\-2008)
仅记录了 \fBclear\fP、\fBinit\fP 和 \fBreset\fP 的操作数。 对此有一些有趣的观察:
.bP
在此实现中，\fBclear\fP 是 \fIcapname\fP 支持的一部分。 其他 (\fBinit\fP 和 \fBlongname\fP) 不对应终端能力。
.bP
\fBtput\fP 在基于 SVr4 的系统 (如 Solaris、IRIX64 和 HPUX) 以及 AIX 和 Tru64 等其他系统上的其他实现提供对
\fIcapname\fP 操作数的支持。
.bP
FreeBSD 等少数平台在其各自的 \fBtput\fP 命令中识别 termcap 名称而不是 terminfo 功能名称。 自 2010
年以来，NetBSD 的 \fBtput\fP 使用 terminfo 名称。 在此之前，它 (如 FreeBSD) 识别 termcap 名称。
.IP
从 2021 年开始，FreeBSD 使用 ncurses \fBtput\fP，为 terminfo (首先测试) 和 termcap (作为后备) 配置。
.PP
因为经过认证的 Unix 系统的 (apparently) \fIall\fP 支持完整的功能名称集，所以仅记录少数几个的原因可能并不明显。
.bP
X/Open Curses Issue 7 以不同的方式记录 \fBtput\fP，\fIcapname\fP 和此实现中使用的其他，特性。
.bP
也就是说，有 \fBtput\fP: POSIX (子集) 和 X/Open Curses (完整实现) 两个标准。 POSIX 记录了一个子集，以避免包含
X/Open Curses 和终端功能数据库的复杂性。
.bP
虽然不使用 curses 编写 \fBtput\fP 程序当然是可能的，但是没有一个具有 curses 实现的系统提供了不提供 \fIcapname\fP 特性的
\fBtput\fP 实用程序。
.PP
X/Open Curses Issue 7 (2009) 是记录实用工具的第一个版本。 然而，X/Open Curses 的那部分并不遵循现有的做法
(即 SVID 3 中记录的 Unix 特性) :
.bP
它将退出代码 4 分配给 \*(`` 无效操作数 \*(''，可能与 \fIunknown capability\fP 相同。 例如，Solaris 的
xcurses 的源代码使用术语 \*(``invalid\*(在这种情况下为 \*(rq。
.bP
它将退出代码 255 分配给 terminfo 数据库中未指定的数字变量。 这可能是一个文档错误，将写入标准输出的 \fB\-1\fP 与 (unsigned)
退出代码混淆为缺少或取消的数值。
.PP
各种 Unix 系统 (AIX、HPUX、Solaris) 使用与 ncurses 相同的退出代码。
.PP
NetBSD curses 记录了不对应于 ncurses 或 X/Open 的不同退出代码。
.SH "SEE ALSO"
\fBclear\fP(\*n), \fBstty\fP(1), \fBtabs\fP(\*n), \fBtset\fP(\*n), \fBcurs_termcap\fP(3X),
\fBterminfo\fP(5).
.PP
这描述了 \fBncurses\fP 版本 6.4 (补丁 20221231)。
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
