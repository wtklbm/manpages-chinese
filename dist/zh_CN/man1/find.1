.\" -*- coding: UTF-8 -*-
.\" -*- nroff -*-
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH FIND 1   
'\" t
.SH NAME
find \- 在目录层次结构中搜索文件
.SH SYNOPSIS
\fBfind\fP [\-H] [\-L] [\-P] [\-D debugopts] [\-Olevel] [starting\-point...\&]
[expression]
.
.SH DESCRIPTION
本手册页记录了 \fBfind\fP 的 GNU 版本。 GNU \fBfind\fP 根据优先规则 (参见运算符部分)
从左到右计算给定表达式，搜索以每个给定起点为根的目录树，直到结果已知 (\fIand\fP 的左侧为假操作，对于 \fIor\fP) 为真，此时 \fBfind\fP
移动到下一个文件名。 如果没有指定起点，则假定为 `.\&`。
.PP
如果您在安全性很重要的环境中使用 \fBfind\fP (例如，如果您使用它来搜索其他用户可写的目录)，您应该阅读 findutils 文档的
`安全注意事项` 一章，称为 \fBFinding Files\fP 和带有 finutils。
该文档还包括比本手册页更多的细节和讨论，因此您可能会发现它是更有用的信息来源。
.
.SH OPTIONS
\fB\-H\fP、\fB\-L\fP 和 \fB\-P\fP 选项控制符号链接的处理。 这些后面的命令行参数被认为是要检查的文件或目录的名称，直到第一个以 `\-`
开头的参数，或参数 ` (` 或 `! `。 那个参数和任何后面的参数被认为是描述要搜索的内容的表达式。 如果没有给出路径，则使用当前目录。
如果没有给出表达式，则使用表达式 \fB\-print\fP (但无论如何您应该考虑使用 \fB\-print0\fP)。
.PP
This manual page talks about `options' within the expression list.  These
options control the behaviour of \fBfind\fP but are specified immediately after
the last path name.  The five `real' options \fB\-H\fP, \fB\-L\fP, \fB\-P\fP, \fB\-D\fP and
\fB\-O\fP must appear before the first path name, if at all.  A double dash
\fB\-\-\fP could theoretically be used to signal that any remaining arguments are
not options, but this does not really work due to the way \fBfind\fP determines
the end of the following path arguments: it does that by reading until an
expression argument comes (which also starts with a `\-').  Now, if a path
argument would start with a `\-', then \fBfind\fP would treat it as expression
argument instead.  Thus, to ensure that all start points are taken as such,
and especially to prevent that wildcard patterns expanded by the calling
shell are not mistakenly treated as expression arguments, it is generally
safer to prefix wildcards or dubious path names with either `./' or to use
absolute path names starting with '/'.  Alternatively, it is generally safe
though non\-portable to use the GNU option \fB\-files0\-from\fP to pass arbitrary
starting points to \fBfind\fP.

.IP \-P
永远不要关注符号链接。 这是默认行为。 当 \fBfind\fP 检查或打印文件信息时，如果文件是符号链接，则使用的信息应取自符号链接本身的属性。

.IP \-L
遵循符号链接。 当 \fBfind\fP 检查或打印有关文件的信息时，所使用的信息应取自链接指向的文件的属性，而不是链接本身 (除非它是损坏的符号链接或
\fBfind\fP 无法检查链接指向的文件) 链接点)。 使用此选项意味着 \fB\-noleaf\fP。 如果您以后使用 \fB\-P\fP 选项，\fB\-noleaf\fP
仍然有效。 如果 \fB\-L\fP 有效并且 \fBfind\fP 在其搜索过程中发现了指向子目录的符号链接，则将搜索符号链接指向的子目录。
.IP
当 \fB\-L\fP 选项生效时，\fB\-type\fP 谓词将始终匹配符号链接指向的文件类型而不是链接本身 (除非符号链接被破坏)。 在 \fBfind\fP
执行时可能导致符号链接损坏的操作 (例如 \fB\-delete\fP) 可能会导致混乱的行为。 使用 \fB\-L\fP 会导致 \fB\-lname\fP 和
\fB\-ilname\fP 谓词始终返回 false。

.IP \-H
不要跟随符号链接，除非在处理命令行参数时。 当 \fBfind\fP 检查或打印有关文件的信息时，所使用的信息应取自符号链接本身的属性。
此行为的唯一例外是命令行上指定的文件是符号链接，并且可以解析该链接。 对于这种情况，所使用的信息取自链接指向的任何内容 (即跟随链接)。
如果无法检查符号链接指向的文件，则有关链接本身的信息将用作后备。 如果 \fB\-H\fP
有效并且在命令行上指定的路径之一是指向目录的符号链接，则将检查该目录的内容 (当然 \fB\-maxdepth\ 0\fP 会阻止这种情况)。
.P
如果指定了 \fB\-H\fP、\fB\-L\fP 和 \fB\-P\fP 中的多个，则每个都会覆盖其他; 出现在命令行中的最后一个生效。 由于它是默认值，除非指定 \fB\-H\fP
或 \fB\-L\fP，否则应认为 \fB\-P\fP 选项有效。

GNU \fBfind\fP 在开始任何搜索之前，在命令行本身的处理过程中经常统计文件。 这些选项也会影响这些参数的处理方式。
具体来说，有许多测试将命令行上列出的文件与我们当前正在考虑的文件进行比较。 在每种情况下，都会检查命令行中指定的文件，并保存其某些属性。
如果命名文件实际上是一个符号链接，并且 \fB\-P\fP 选项有效 (或者如果 \fB\-H\fP 和 \fB\-L\fP
均未指定)，用于比较的信息将从符号链接的属性中获取。 否则，它将从链接指向的文件的属性中获取。 如果 \fBfind\fP 无法访问链接
(例如，因为它没有足够的权限或链接指向不存在的文件)，将使用链接本身的属性。
.P
当 \fB\-H\fP 或 \fB\-L\fP 选项生效时，将解引用任何列为 \fB\-newer\fP 的参数的符号链接，并且将从符号链接指向的文件中获取时间戳。
同样的考虑适用于 \fB\-newerXY\fP、\fB\-anewer\fP 和 \fB\-cnewer\fP。

\fB\-follow\fP 选项与 \fB\-L\fP 具有类似的效果，尽管它在它出现的地方生效 (也就是说，如果没有使用 \fB\-L\fP 但使用了
\fB\-follow\fP，则在命令行上出现在 \fB\-follow\fP 之后的任何符号链接都将被解引用，而那些在之前的符号链接它不会)。

.IP "\-D debugopts"
打印诊断信息; 这有助于诊断 \fBfind\fP 为何未按照您的意愿行事的问题。 调试选项列表应该以逗号分隔。 不保证 findutils
版本之间调试选项的兼容性。 有关有效调试选项的完整列表，请参见 \fBfind \-D\ help\fP 的输出。 有效的调试选项包括
.RS
.IP exec
显示与 \-exec、\-execdir、\-ok 和 \-okdir 相关的诊断信息
.IP opt
打印与表达式树优化相关的诊断信息; 请参见 \-O 选项。
.IP rates
打印一个总结，指示每个谓词成功或失败的频率。
.IP search
详细导航目录树。
.IP stat
在使用 \fBstat\fP 和 \fBlstat\fP 系统调用检查文件时打印消息。 \fBfind\fP 程序会尽量减少此类调用。
.IP tree
以原始形式和优化形式显示表达式树。
.IP all
启用所有其他调试选项 (但 \fBhelp\fP).
.IP help
解释调试选项。
.RE
.IP \-Olevel
启用查询优化。 \fBfind\fP 程序重新排序测试以加快执行速度，同时保持整体效果; 也就是说，具有副作用的谓词不会相对于彼此重新排序。
在每个优化级别执行的优化如下。
.RS
.IP 0
相当于优化级别 1.
.IP 1
这是默认优化级别，对应于传统行为。 表达式被重新排序，以便仅基于文件名 (例如 \fB\-name\fP 和 \fB\-regex\fP)) 的测试首先执行。
.IP 2
任何 \fB\-type\fP 或 \fB\-xtype\fP 测试都在仅基于文件名的任何测试之后执行，但在需要 inode 信息的任何测试之前执行。 在许多现代版本的
Unix 上，文件类型由 \fBreaddir()\fP 返回，因此这些谓词的评估速度比需要先统计文件的谓词更快。 如果您使用 \fB\-fstype\ \fP\fIFOO\fP 谓词并指定在 \fBfind\fP 启动时未知 (即存在于 `/etc/mtab' 中) 的文件系统类型 \fIFOO\fP，则该谓词等同于
\fB\-false\fP。
.IP 3
在此优化级别，启用了完全基于成本的查询优化器。 测试的顺序被修改，以便首先执行便宜 (即 \& 快速) 的测试，然后在必要时执行更昂贵的测试。
在每个成本范围内，谓词根据它们是否可能成功而被提前或延迟评估。 对于 \fB\-o\fP，可能成功的谓词会被较早地求值，而对于
\fB\-a\fP，可能会失败的谓词会被较早地求值。
.RE
.IP
基于成本的优化器对任何给定测试成功的可能性有一个固定的想法。 在某些情况下，概率会考虑测试的特定性质 (例如，假定 \fB\-type\ f\fP 比
\fB\-type\ c\fP) 更有可能成功。 目前正在评估基于成本的优化器。 如果它没有真正提高 \fBfind\fP 的性能，它将再次被删除。
相反，随着时间的推移，可以在较低的优化级别启用被证明可靠、稳健和有效的优化。 但是，默认行为 (即 \& 优化级别 1) 不会在 4.3.x
版本系列中更改。 findutils 测试套件在每个优化级别运行 \fBfind\fP 上的所有测试，并确保结果相同。
.
.SH EXPRESSION
起始点列表之后的命令行部分是 \fIexpression\fP。 这是一种查询规范，描述了我们如何匹配文件以及我们如何处理匹配到的文件。
表达式由一系列事物组成:

.IP Tests
测试返回真值或假值，通常基于我们正在考虑的文件的某些属性。 例如，\fB\-empty\fP 测试仅在当前文件为空时才为真。

.IP Actions
操作有副作用 (例如在标准输出上打印一些东西) 并返回 true 或 false，通常取决于它们是否成功。 例如，\fB\-print\fP
操作在标准输出上打印当前文件的名称。

.IP "Global options"
全局选项影响命令行任何部分指定的测试和操作的操作。 全局选项总是返回 true。 例如，\fB\-depth\fP 选项使 \fBfind\fP
以深度优先顺序遍历文件系统。

.IP "Positional options"
位置选项仅影响测试或跟随它们的操作。 位置选项总是返回真。 例如，\fB\-regextype\fP
选项是位置性的，它为命令行后面出现的正则表达式指定正则表达式方言。

.IP Operators
运算符将表达式中的其他项连接在一起。 它们包括例如 \fB\-o\fP (表示逻辑 OR) 和 \fB\-a\fP (表示逻辑 AND)。 如果缺少运算符，则假定为
\fB\-a\fP。

.P
\fB\-print\fP 操作对整个表达式为真的所有文件执行，除非它包含 \fB\-prune\fP 或 \fB\-quit\fP 以外的操作。 禁止默认 \fB\-print\fP
的动作有
\fB\-delete\fP、\fB\-exec\fP、\fB\-execdir\fP、\fB\-ok\fP、\fB\-okdir\fP、\fB\-fls\fP、\fB\-fprint\fP、\fB\-fprintf\fP、\fB\-ls\fP、\fB\-print\fP
和 \fB\-printf\fP。


\fB\-delete\fP 动作也像一个选项 (因为它暗示 \fB\-depth\fP).

.SS "POSITIONAL OPTIONS"
位置选项总是返回真。 它们仅影响稍后在命令行上发生的测试。

.IP \-daystart
测量时间 (对于 \fB\-amin\fP、\fB\-atime\fP、\fB\-cmin\fP、\fB\-ctime\fP、\fB\-mmin\fP 和
\fB\-mtime\fP)，从今天开始而不是从 24 小时前开始。 此选项仅影响稍后出现在命令行中的测试。

.IP \-follow
弃用; 请改用 \fB\-L\fP 选项。 解引使用符号链接。 表示 \fB\-noleaf\fP。 \fB\-follow\fP 选项仅影响命令行中出现在它之后的那些测试。
除非已指定 \fB\-H\fP 或 \fB\-L\fP 选项，否则 \fB\-follow\fP 选项的位置会更改 \fB\-newer\fP 谓词的行为; 任何列为
\fB\-newer\fP 的参数的文件如果是符号链接将被解引用。 同样的考虑适用于 \fB\-newerXY\fP、\fB\-anewer\fP 和 \fB\-cnewer\fP。
同样，\fB\-type\fP 谓词将始终匹配符号链接指向的文件类型，而不是链接本身。 使用 \fB\-follow\fP 会导致 \fB\-lname and\fP
\fB\-ilname\fP 谓词始终返回 false。

.IP "\-regextype \fItype\fP"
更改稍后在命令行上发生的 \fB\-regex\fP 和 \fB\-iregex\fP 测试所理解的正则表达式语法。 要查看哪些正则表达式类型是已知的，请使用
\fB\-regextype\ help\fP。 Texinfo 文档 (参见 \fBSEE\fP \fBALSO\fP)) 解释了各种正则表达式的含义和区别。

.IP "\-warn, \-nowarn"
打开或关闭警告消息。 这些警告仅适用于命令行用法，不适用于 \fBfind\fP 在搜索目录时可能遇到的任何情况。 如果标准输入是 tty，则默认行为对应于
\fB\-warn\fP，否则对应于 \fB\-nowarn\fP。 如果生成与命令行使用相关的警告消息，则 \fBfind\fP 的退出状态不受影响。 如果设置了
\fBPOSIXLY_CORRECT\fP 环境变量，并且还使用了 \fB\-warn\fP，则未指定哪个警告 (如果有) 将处于活动状态。

.SS "GLOBAL OPTIONS"
全局选项总是返回 true。 全局选项甚至对命令行中较早发生的测试也有效。
为防止混淆，全局选项应在开始点列表之后的命令行上指定，就在第一个测试、位置选项或操作之前。 如果您在其他地方指定全局选项，\fBfind\fP
将发出一条警告消息，说明这可能会造成混淆。

全局选项出现在起点列表之后，因此与 \fB\-L\fP 等选项不同。

.IP \-d
\-depth 的同义词，用于与 FreeBSD、NetBSD、MacOS X 和 OpenBSD 兼容。

.IP \-depth
在目录本身之前处理每个目录的内容。 \-delete 动作也意味着 \fB\-depth\fP。

.IP "\-files0\-from \fIfile\fP"
从 \fIfile\fP 读取起点而不是在命令行上获取它们。
与通过命令行上的参数传递起点的已知限制，即文件名数量的限制，以及文件名与选项名称冲突的固有歧义相比，使用此选项可以安全地传递任意数量的起点指向
\fBfind\fP。

使用此选项和在命令行上传递起点是互斥的，因此不允许同时使用。

\fIfile\fP 参数是强制性的。 可以使用 \fB\-files0\-from\ \-\fP 从 \fIstandard input\fP 流 (例如从管道)
中读取起点列表。 在这种情况下，不允许执行 \fB\-ok\fP 和 \fB\-okdir\fP 操作，因为它们显然会干扰从 \fIstandard input\fP
读取以获得用户确认。

\fIfile\fP 中的起点必须由 ASCII NUL 字符分隔。 两个连续的 NUL
字符，即零长度文件名的起点是不允许的，这将导致错误诊断，随后是非零退出代码。

在给定的 \fIfile\fP 为空的情况下，\fBfind\fP 不处理任何起点，因此在解析完程序参数后会立即退出。
这与标准调用不同，在标准调用中，如果没有传递路径参数，则 \fBfind\fP 假定当前目录为起点。

起点的处理与往常一样，例如 \fBfind\fP 将递归到子目录中，除非另外阻止。 要只处理起点，可以额外传递 \fB\-maxdepth\ 0\fP。

进一步注意: 如果一个文件在输入文件中被多次列出，则不确定它是否被多次访问。 如果 \fIfile\fP 在 \fBfind\fP
运算过程中发生可变，结果也是不确定的。 最后，在 \fBfind\fP 退出时命名 \fIfile\fP 中的 seek 位置，无论是与 \fB\-quit\fP
还是以任何其他方式，也是未指定的。 这里的 "unspecified" 意味着它可能会或可能不会工作或做任何特定的事情，并且行为可能会因平台而异，或者因
\fBfindutils\fP 版本而异。

.IP "\-help, \-\-help"
打印 \fBfind\fP 命令行用法的总结并退出。

.IP \-ignore_readdir_race
通常，\fBfind\fP 会在无法统计文件时发出错误消息。 如果您提供此选项并且在 \fBfind\fP
从目录中读取文件名和尝试统计文件之间的时间删除文件，则不会发出错误消息。 这也适用于其名称在命令行中给出的文件或目录。
此选项在读取命令行时生效，这意味着您无法在打开此选项和关闭此选项的情况下搜索文件系统的一部分 (如果需要这样做，您将需要发出两个 \fBfind\fP
命令，一个有选项，一个没有)。

此外，带有 \fB\-ignore_readdir_race\fP 选项的 \fBfind\fP 将在文件自读取父目录后消失的情况下忽略 \fB\-delete\fP
操作的错误: 它不会输出错误诊断，并且 \fB\-delete\fP 操作的返回代码将为真。

.IP "\-maxdepth \fIlevels\fP"
在起点以下最多下降 \fIlevels\fP (非 negative 整数) 目录级别。 使用 \fB\-maxdepth\ 0\fP
意味着仅将测试和操作应用于起点本身。

.IP "\-mindepth \fIlevels\fP"
不要在小于 \fIlevels\fP (非 negative 整数) 的级别应用任何测试或操作。 使用 \fB\-mindepth\ 1\fP
意味着处理除起点之外的所有文件。

.IP \-mount
不要降低其他文件系统上的目录。 \fB\-xdev\fP 的替代名称，用于与 \fBfind\fP 的某些其他版本兼容。

.IP \-noignore_readdir_race
关闭 \fB\-ignore_readdir_race\fP 的效果。

.IP \-noleaf
不要通过假设目录包含的子目录比其硬链接数少 2 个来进行优化。 在搜索不遵循 Unix 目录链接约定的文件系统时需要此选项，例如 CD\-ROM 或
MS\-DOS 文件系统或 AFS 卷安装点。 普通 Unix 文件系统上的每个目录至少有 2 个硬链接: 它的名称和它的 `.\&'
条目。此外，它的每个子目录 (如果有的话) 都有一个链接到该目录的`..\&`条目。当 \fBfind\fP 检查一个目录时，在它发现子目录比目录的链接数少
2 个之后，它知道目录中的其余条目是非目录 (目录树中的` 叶 ` 文件)。 如果只需要检查文件名，则不需要统计它们; 这显着提高了搜索速度。

.IP "\-version, \-\-version"
打印 \fBfind\fP 版本号并退出。

.IP \-xdev
不要降低其他文件系统上的目录。

.SS TESTS
一些测试，例如 \fB\-newerXY\fP 和 \fB\-samefile\fP，允许将当前正在检查的文件与命令行上指定的一些引用文件进行比较。
当使用这些测试时，引用文件的解释由选项 \fB\-H\fP、\fB\-L\fP 和 \fB\-P\fP 以及任何先前的 \fB\-follow\fP
决定，但引用文件仅在解析命令行时检查一次。 如果无法检查引用文件 (例如，\fBstat\fP(2) 系统调用失败)，则会发出错误消息，并且 \fBfind\fP
会以非零状态退出。
.P
可以为测试指定一个数字参数 \fIn\fP (如
\fB\-amin\fP、\fB\-mtime\fP、\fB\-gid\fP、\fB\-inum\fP、\fB\-links\fP、\fB\-size\fP、\fB\-uid\fP 和 \fB\-used\fP)
作为
.IP \fI+n\fP
对于大于 \fIn\fP，
.IP \fI\-n\fP
对于小于 \fIn\fP，
.IP \fIn\fP
正好是 \fIn\fP。
.
.P
支持的测试:

.IP "\-amin \fIn\fP"
上次访问文件的时间少于、多于或恰好 \fIn\fP 分钟前。

.IP "\-anewer \fIreference\fP"
当前文件的最后一次访问时间比 \fIreference\fP 文件的最后一次数据修改时间更近。 如果 \fIreference\fP 是符号链接，并且 \fB\-H\fP
选项或 \fB\-L\fP 选项生效，则始终使用它指向的文件的最后一次数据修改时间。

.IP "\-atime \fIn\fP"
上次访问文件的时间早于、早于或正好 \fIn\fP*24 小时前。 当 find 计算出上次访问文件的 24 小时周期后，任何小数部分都将被忽略，因此要匹配
\fB\-atime\ +1\fP，文件必须至少在 \fItwo\fP 天前被访问过。

.IP "\-cmin \fIn\fP"
文件的状态最后一次更改是在小于、大于或恰好 \fIn\fP 分钟前。

.IP "\-cnewer \fIreference\fP"
当前文件最后一次状态变化时间比 \fIreference\fP 文件最后一次数据修改时间最近。 如果 \fIreference\fP 是符号链接，并且 \fB\-H\fP
选项或 \fB\-L\fP 选项生效，则始终使用它指向的文件的最后一次数据修改时间。

.IP "\-ctime \fIn\fP"
文件的状态最后一次更改是在小于、大于或正好 \fIn\fP*24 小时之前。 请参见 \fB\-atime\fP 的注释以了解舍入如何影响文件状态更改时间的解释。

.IP \-empty
文件为空并且是常规文件或目录。

.IP \-executable
匹配可执行文件和可由当前用户搜索 (在文件名解析意义上) 的目录。 这考虑了 \fB\-perm\fP 测试忽略的访问控制列表和其他权限人工制品。 此测试使用
\fBaccess\fP(2) 系统调用，因此可能会被执行 UID 映射 (或根压缩) 的 NFS 服务器所愚弄，因为许多系统在客户端内核中实现
\fBaccess\fP(2)，因此无法使用 UID 映射信息服务器。 因为本次测试仅基于 \fBaccess\fP(2)
系统调用的结果，所以不保证本次测试成功的文件真的可以执行。

.IP \-false
总是假的。

.IP "\-fstype \fItype\fP"
文件位于 \fItype\fP 类型的文件系统上。 有效的文件系统类型因 Unix 的不同版本而异; 某些版本的 Unix
或其他版本接受的文件系统类型的不完整列表是: ufs、4.2、4.3、nfs、tmp、mfs、S51K、S52K。 您可以将 \fB\-printf\fP 与
%F 指令一起使用来查看文件系统的类型。

.IP "\-gid \fIn\fP"
文件的数字组 ID 小于、大于或恰好为 \fIn\fP。

.IP "\-group \fIgname\fP"
文件属于组 \fIgname\fP (允许使用数字组 ID)。

.IP "\-ilname \fIpattern\fP"
与 \fB\-lname\fP 类似，但匹配不区分大小写。 如果 \fB\-L\fP 选项或 \fB\-follow\fP 选项有效，除非符号链接被破坏，否则此测试将返回
false。


.IP "\-iname \fIpattern\fP"
与 \fB\-name\fP 类似，但匹配不区分大小写。 例如，模式 `fo*` 和 `F??` 匹配文件名 `Foo`、`FOO`、`foo`、`fOo`
等。模式 `*foo*` 也将匹配名为 '.foobar' 的文件。

.IP "\-inum \fIn\fP"
文件的 inode 编号小于、大于或恰好为 \fIn\fP。 使用 \fB\-samefile\fP 测试通常更容易。

.IP "\-ipath \fIpattern\fP"
像 \fB\-path\fP。 但匹配不区分大小写。

.IP "\-iregex \fIpattern\fP"
与 \fB\-regex\fP 类似，但匹配不区分大小写。

.IP "\-iwholename \fIpattern\fP"
请参见 \-ipath。 此替代方案的可移植性不如 \fB\-ipath\fP。

.IP "\-links \fIn\fP"
文件具有少于、多于或恰好 \fIn\fP 硬链接。

.IP "\-lname \fIpattern\fP"
文件是一个符号链接，其内容与 shell 模式 \fIpattern\fP 匹配。 元字符不会特殊对待 `/` 或 `.\&`。 如果 \fB\-L\fP 选项或
\fB\-follow\fP 选项有效，除非符号链接被破坏，否则此测试将返回 false。

.IP "\-mmin \fIn\fP"
文件数据的最后修改时间少于、多于或恰好 \fIn\fP 分钟前。

.IP "\-mtime \fIn\fP"
文件数据的最后修改时间少于、多于或恰好 \fIn\fP*24 小时前。 请参见 \fB\-atime\fP 的注释以了解舍入如何影响文件修改时间的解释。

.IP "\-name \fIpattern\fP"
文件名的基础 (删除了前导目录的路径) 匹配 shell 模式 \fIpattern\fP。 因为删除了前导目录，考虑与 \fB\-name\fP
匹配的文件名将永远不会包含斜杠，所以 `\-name a/b' 永远不会匹配任何东西 (您可能需要使用 \fB\-path\fP
代替)。如果您尝试这样做，则会发出警告，除非设置了环境变量 \fBPOSIXLY_CORRECT\fP。元字符 (`*`、`?`和`[]`)
匹配基本名称开头的`.\&` (这是 findutils\-4.2.2 中的一个变化; 请参见下面的标准一致性部分)。 要忽略目录及其下的文件，请使用
\fB\-prune\fP 而不是检查树中的每个文件; 请参见该操作描述中的示例。 大括号不被认为是特殊的，尽管包括 Bash 在内的一些 shells 在
shell 模式中赋予大括号以特殊含义。 文件名匹配是使用 \fBfnmatch\fP(3) 库函数执行的。 不要忘记将模式括在引号中，以防止它被 shell
扩展。

.IP "\-newer \fIreference\fP"
当前文件的最后一次数据修改时间比 \fIreference\fP 文件的最后一次数据修改时间最近。 如果 \fIreference\fP 是符号链接，并且
\fB\-H\fP 选项或 \fB\-L\fP 选项生效，则始终使用它指向的文件的最后一次数据修改时间。

.IP "\-newerXY \fIreference\fP"
如果正在考虑的文件的时间戳 \fIX\fP 比文件 \fIreference\fP 的时间戳 \fIY\fP 更新，则成功。 字母 \fIX\fP 和 \fIY\fP
可以是以下任何字母:

.TS
ll
ll
ll
ll
llw(2i).
a	The access time of the file \fIreference\fP
B	The birth time of the file \fIreference\fP
c	The inode status change time of \fIreference\fP
m	The modification time of the file \fIreference\fP
t	\fIreference\fP is interpreted directly as a time
.TE

部分组合无效; 例如，\fIX\fP 为 \fIt\fP 是无效的。 某些组合并未在所有系统上实现; 例如，并非所有系统都支持 \fIB\fP。
如果指定了无效或不受支持的 \fIXY\fP 组合，则会产生致命错误。 时间规格解释为 GNU \fBdate\fP 的 \fB\-d\fP 选项的参数。
如果您尝试使用引用文件的出生时间，但无法确定出生时间，则会出现致命错误消息。
如果您指定一个引用正在检查的文件的出生时间的测试，则对于任何出生时间未知的文件，此测试将失败。

.IP \-nogroup
没有组对应于文件的数字组 ID。

.IP \-nouser
没有用户对应于文件的数字用户 ID。

.IP "\-path \fIpattern\fP"
文件名匹配 shell 模式 \fIpattern\fP。 元字符不会特殊对待 `/` 或 `.\&`; 所以，例如，
.in +4m
.nf
寻找。\-path "./sr*sc"
.fi
.in
将打印名为 \fI./src/misc\fP 的目录的条目 (如果存在)。 要忽略整个目录树，请使用 \fB\-prune\fP 而不是检查树中的每个文件。
请注意，模式匹配测试适用于整个文件名，从命令行中指定的起点之一开始。 如果相关的起点也是绝对路径，那么在这里使用绝对路径名才有意义。
这意味着此命令永远不会匹配任何内容:
.br
.in +4m
.nf
找到栏 \-path /foo/bar/myfile \-print
.fi
.in
Find 将 \fB\-path\fP 参数与目录名称和它正在检查的文件的基本名称的串联进行比较。 由于串联永远不会以斜杠结束，因此以斜杠结尾的
\fB\-path\fP 参数将不匹配任何内容 (除了可能在命令行上指定的起点)。 谓词 \fB\-path\fP 也受 HP\-UX \fBfind\fP 支持，并且是
POSIX 2008 标准的一部分。

.IP "\-perm \fImode\fP"
文件的权限位正好是 \fImode\fP (八进制或符号)。 由于需要精确匹配，如果要将此形式用于符号模式，则可能必须指定相当复杂的模式字符串。 例如
`\-perm g=w' 将只匹配模式为 0020 的文件
(即组写权限是唯一权限集的文件)。您更有可能希望使用`/`或`\-`形式，例如`\-perm\-g=w`，它匹配任何具有组写权限的文件。
有关一些说明性示例，请参见 \fBEXAMPLES\fP 部分。

.IP "\-perm \-\fImode\fP"
为该文件设置了所有权限位 \fImode\fP。 符号模式以这种形式被接受，这通常是您希望使用它们的方式。 如果使用符号模式，则必须指定 `u`、`g` 或
`o`。 有关一些说明性示例，请参见 \fBEXAMPLES\fP 部分。

.IP "\-perm /\fImode\fP"
为文件设置了任何权限位 \fImode\fP。 这种形式接受符号模式。 如果使用符号模式，则必须指定 `u`、`g` 或 `o`。 有关一些说明性示例，请参见
\fBEXAMPLES\fP 部分。 如果 \fImode\fP 中没有设置权限位，则此测试匹配任何文件 (这里的想法是与 \fB\-perm\ \-000\fP)
的行为保持一致。

.IP "\-perm +\fImode\fP"
这不再受支持 (并且自 2005 年以来已被弃用)。 请改用 \fB\-perm /\fP\fImode\fP。

.IP \-readable
匹配当前用户可读的文件。 这考虑了 \fB\-perm\fP 测试忽略的访问控制列表和其他权限人工制品。 此测试使用 \fBaccess\fP(2)
系统调用，因此可能会被执行 UID 映射 (或根压缩) 的 NFS 服务器所愚弄，因为许多系统在客户端内核中实现 \fBaccess\fP(2)，因此无法使用
UID 映射信息服务器。

.IP "\-regex \fIpattern\fP"
文件名匹配正则表达式 \fIpattern\fP。 这是整个路径上的匹配，而不是搜索。 例如，要匹配名为 \fI./fubar3,\fP
的文件，您可以使用正则表达式 `.*bar.\&` 或 `.*b.*3`，但不能使用 `f.*r3`。 \fBfind\fP 理解的正则表达式默认为
Emacs 正则表达式 (除了 `.` 匹配换行符)，但这可以通过 \fB\-regextype\fP 选项更改。

.IP "\-samefile \fIname\fP"
文件引用与 \fIname\fP 相同的索引节点。 当 \fB\-L\fP 生效时，这可以包括符号链接。

.IP "\-size \fIn\fP[cwbkMG]"
文件使用的空间小于、大于或恰好为 \fIn\fP 单位，向上舍入。 可以使用以下后缀:
.RS
.IP `b'
对于 512 字节块 (如果没有使用后缀，这是默认值)
.IP `c'
对于字节
.IP `w'
对于两个字节的单词
.IP `k'
对于千字节 (KiB，1024 字节的单位)
.IP `M'
对于兆字节 (MiB，单位为 1024 * 1024= 1\|048\|576 字节)
.IP `G'
对于千兆字节 (GiB，单位为 1024 * 1024 * 1024= 1\|073\|741\|824 字节)
.RE
.IP
大小只是由 lstat (或 stat) 系统调用填充的结构体 stat 的 st_size 成员，如上所示四舍五入。 换句话说，它与您为 \fBls\ \-l\fP 获得的结果一致。 请记住，\fB\-printf\fP 的 `%k` 和 `%b` 格式说明符处理稀疏文件的方式不同。`b` 后缀总是表示 512
字节块而不是 1024 字节块，这与 \fB\-ls\fP 的行为不同。
.IP
+ 和 \- 前缀像往常一样表示大于和小于; 即，\fIn\fP 单位的确切大小不匹配。 请记住，尺寸四舍五入到下一个元。 因此 \fB\-size\ \-1M\fP
不等同于 \fB\-size\ \-1\|048\|576c\fP。 前者只匹配空文件，后者匹配 0 到 1048575 字节的文件。
.IP \-true
总是真实的。

.IP "\-type \fIc\fP"
文件类型为 \fIc\fP:
.RS
.IP b
块 (buffered) 特殊
.IP c
字符 (unbuffered) 特别
.IP d
directory
.IP p
命名管道 (FIFO)
.IP f
常规文件
.IP l
符号链接; 如果 \fB\-L\fP 选项或 \fB\-follow\fP 选项有效，则永远不会如此，除非符号链接被破坏。 如果要在 \fB\-L\fP
生效时搜索符号链接，请使用 \fB\-xtype\fP。
.IP s
socket
.IP D
门 (Solaris)
.RE
.IP
要一次搜索多个类型，您可以提供以逗号 `,` (GNU 扩展名) 分隔的类型字母组合列表。
.IP "\-uid \fIn\fP"
文件的数字用户 ID 小于、大于或恰好为 \fIn\fP。

.IP "\-used \fIn\fP"
上次访问文件的时间少于、多于或恰好是在其状态上次更改后的 \fIn\fP 天内。

.IP "\-user \fIuname\fP"
文件归用户 \fIuname\fP 所有 (允许使用数字用户 ID)。

.IP "\-wholename \fIpattern\fP"
请参见 \-path。 此替代方案的可移植性不如 \fB\-path\fP。

.IP \-writable
匹配当前用户可写的文件。 这考虑了 \fB\-perm\fP 测试忽略的访问控制列表和其他权限人工制品。 此测试使用 \fBaccess\fP(2)
系统调用，因此可能会被执行 UID 映射 (或根压缩) 的 NFS 服务器所愚弄，因为许多系统在客户端内核中实现 \fBaccess\fP(2)，因此无法使用
UID 映射信息服务器。

.IP "\-xtype \fIc\fP"
与 \fB\-type\fP 相同，除非文件是符号链接。 对于符号链接: 如果指定了 \fB\-H\fP 或 \fB\-P\fP 选项，如果文件是指向 \fIc\fP
类型文件的链接则为真; 如果已给出 \fB\-L\fP 选项，则如果 \fIc\fP 为 `l` 则为真。换句话说，对于符号链接，\fB\-xtype\fP 检查
\fB\-type\fP 不检查的文件类型。
.IP "\-context \fIpattern\fP"
(仅限 SELinux) 文件的安全上下文匹配 glob \fIpattern\fP。

.SS ACTIONS
.IP \-delete
删除文件或目录; 如果移除成功则为真。 如果删除失败，将发出一条错误消息并且 \fBfind\fP's 退出状态将为非零 (当它最终退出时)。

\fBWarning\fP: 不要忘记 \fBfind\fP 将命令行作为表达式求值，因此将 \fB\-delete\fP 放在首位将使 \fBfind\fP
尝试删除指定起点以下的所有内容。

在命令行上使用 \fB\-delete\fP 操作会自动打开 \fB\-depth\fP 选项。 由于 \fB\-depth\fP 反过来使 \fB\-prune\fP 无效，因此
\fB\-delete\fP 动作不能与 \fB\-prune\fP 有效组合。

通常，用户可能希望在为实际删除运行添加 \fB\-delete\fP 之前使用 \fB\-print\fP 测试查找命令行。
为避免意外结果，通常最好记住在早期测试运行期间显式使用 \fB\-depth\fP。

\fB\-delete\fP 操作将无法删除目录，除非它是空的。

与 \fB\-ignore_readdir_race\fP 选项一起，\fBfind\fP 将在文件自读取父目录后消失的情况下忽略 \fB\-delete\fP 操作的错误:
它不会输出错误诊断，不会将退出代码更改为非零，并且返回代码 \fB\-delete\fP 动作将为真。


.IP "\-exec \fIcommand\fP ;"
执行 \fIcommand\fP; 如果返回 0 状态，则为真。 \fBfind\fP 之后的所有参数都被认为是命令的参数，直到一个参数由 `;'
组成遇到了。字符串`{}` 被替换为当前正在处理的文件名，它出现在命令的参数中，而不是像在某些版本的 \fBfind\fP 中那样单独出现在参数中。
这两种结构都可能需要转义 (使用 `\e`) 或引用以防止它们被 shell 扩展。 有关使用 \fB\-exec\fP 选项的示例，请参见
\fBEXAMPLES\fP 部分。 指定的命令对每个匹配的文件运行一次。 该命令在起始目录中执行。 \fB\-exec\fP 操作的使用存在不可避免的安全问题;
您应该改用 \fB\-execdir\fP 选项。

.IP "\-exec \fIcommand\fP {} +"
\fB\-exec\fP 操作的这种变体对选定的文件运行指定的命令，但命令行是通过在末尾，追加，每个选定的文件名来构建的;
该命令的调用总数将远少于匹配文件的数量。 命令行的构建方式与 \fBxargs\fP 构建其命令行的方式大致相同。 命令中只允许出现一次
`{}`，它必须出现在末尾，紧接在 `+` 之前; 它需要被转义 (用 '\e') 或引用以保护它不被 shell 解释。 该命令在起始目录中执行。
如果任何带有 `+` 形式的调用返回非零值作为退出状态，则 \fBfind\fP 返回非零退出状态。 如果 \fBfind\fP 遇到错误，这有时会导致
immediate 退出，因此一些挂起的命令可能根本不会运行。 因此 \fB\-exec\ \fP\fImy\-command\fP\fB\ \&...\{}\+\-quit\fP 可能不会导致 \fImy\-command\fP 实际运行。 \fB\-exec\fP 的这个变体总是返回 true。

.IP "\-execdir \fIcommand\fP ;"
.IP "\-execdir \fIcommand\fP {} +"
与 \fB\-exec\fP 类似，但指定的命令是从包含匹配文件的子目录运行的，该目录通常不是您启动 \fBfind\fP 的目录。 与 \-exec 一样，如果从
shell 调用 find，则应引用 {}。 这是一种调用命令的更安全的方法，因为它避免了在解析匹配文件的路径期间的竞争状态。 与 \fB\-exec\fP
操作一样，\fB\-execdir\fP 的 `+` 形式将构建一个命令行来处理多个匹配的文件，但任何给定的 \fIcommand\fP
调用都只会列出存在于同一子目录中的文件。如果您使用这个选项，您必须确保您的 \fBPATH\fP 环境变量没有引用 `.'; 否则，攻击者可以通过在您将运行
\fB\-execdir\fP 的目录中留下适当命名的文件来运行他们喜欢的任何命令。这同样适用于 \fBPATH\fP 中的条目为空或不是绝对目录名称。如果使用`+`
形式的任何调用返回非零值作为退出状态，则 \fBfind\fP 返回非零退出状态。 如果 \fBfind\fP 遇到错误，这有时会导致 immediate
退出，因此一些挂起的命令可能根本不会运行。 操作的结果取决于使用的是 \fB+\fP 还是 \fB;\fP 变体; \fB\-execdir\ \fP\fIcommand\fP\fB\ {}\ +\fP 总是返回真，而 \fB\-execdir\ \fP\fIcommand\fP\fB\ {}\;\fP 只有当
\fIcommand\fP 返回时才返回真 0.


.IP "\-fls \fIfile\fP"
真的; 像 \fB\-ls\fP 但像 \fB\-fprint\fP 一样写入 \fIfile\fP。 始终创建输出文件，即使谓词从未匹配。
有关如何处理文件名中的异常字符的信息，请参见 \fBUNUSUAL FILENAMES\fP 部分。

.IP "\-fprint \fIfile\fP"
真的; 将完整的文件名打印到文件 \fIfile\fP 中。 如果 \fBfind\fP 运行时 \fIfile\fP 不存在，则创建; 如果它确实存在，它将被截断。
文件名 \fI/dev/stdout\fP 和 \fI/dev/stderr\fP 特殊处理; 它们分别指的是标准输出和标准错误输出。
始终创建输出文件，即使谓词从未匹配。 有关如何处理文件名中的异常字符的信息，请参见 \fBUNUSUAL FILENAMES\fP 部分。

.IP "\-fprint0 \fIfile\fP"
真的; 像 \fB\-print0\fP 但像 \fB\-fprint\fP 一样写入 \fIfile\fP。 始终创建输出文件，即使谓词从未匹配。
有关如何处理文件名中的异常字符的信息，请参见 \fBUNUSUAL FILENAMES\fP 部分。

.IP "\-fprintf \fIfile\fP \fIformat\fP"
真的; 像 \fB\-printf\fP 但像 \fB\-fprint\fP 一样写入 \fIfile\fP。 始终创建输出文件，即使谓词从未匹配。
有关如何处理文件名中的异常字符的信息，请参见 \fBUNUSUAL FILENAMES\fP 部分。

.IP \-ls
真的; 在标准输出上以 \fBls \-dils\fP 格式列出当前文件。 块计数为 1\KB 块，除非设置了环境变量
\fBPOSIXLY_CORRECT\fP，在这种情况下使用 512 字节块。 有关如何处理文件名中的异常字符的信息，请参见 \fBUNUSUAL FILENAMES\fP 部分。

.IP "\-ok \fIcommand\fP ;"
喜欢 \fB\-exec\fP 但先询问用户。 如果用户同意，则运行命令。 否则只返回 false。 如果运行该命令，其标准输入将从 \fI/dev/null\fP
重定向。 此操作不能与 \fB\-files0\-from\fP 选项一起指定。

.IP
对提示的响应与一对正则表达式匹配，以确定它是肯定响应还是 negative 响应。 如果设置了 \fBPOSIXLY_CORRECT\fP
环境变量，则此正则表达式从系统获取，否则从 \fBfind\fP's 消息翻译获取。 如果系统没有合适的定义，则使用 \fBfind\fP's 自己的定义。
无论哪种情况，正则表达式本身的解释都会受到环境变量 \fBLC_CTYPE\fP (字符类) 和 \fBLC_COLLATE\fP (字符范围和等价类) 的影响。



.IP "\-okdir \fIcommand\fP ;"
与 \fB\-execdir\fP 类似，但首先以与 \fB\-ok\fP 相同的方式询问用户。 如果用户不同意，就返回 false。 如果运行该命令，其标准输入将从
\fI/dev/null\fP 重定向。 此操作不能与 \fB\-files0\-from\fP 选项一起指定。


.IP \-print
真的; 在标准输出上打印完整的文件名，后跟一个换行符。 如果您将 \fBfind\fP
的输出通过管道传输到另一个程序，并且您正在搜索的文件极有可能包含换行符，那么您应该认真考虑使用 \fB\-print0\fP 选项而不是 \fB\-print\fP。
有关如何处理文件名中的异常字符的信息，请参见 \fBUNUSUAL FILENAMES\fP 部分。

.IP \-print0
真的; 在标准输出上打印完整的文件名，后跟一个空字符 (而不是 \fB\-print\fP 使用的换行符)。 这允许处理 \fBfind\fP
输出的程序正确解释包含换行符或其他类型的空白的文件名。 该选项对应 \fBxargs\fP 的 \fB\-0\fP 选项。

.IP "\-printf \fIformat\fP"
真的; 在标准输出上打印 \fIformat\fP，解释 `\e` 转义和 `%` 指令。可以使用 \fBprintf\fP(3) C
函数指定字段宽度和精度。请注意，许多字段打印为 %s 而不是 %d，这可能意味着标志不会像您预期的那样工作。这也意味着 `\-' 标志确实有效
(它强制字段左对齐)。 与 \fB\-print\fP 不同，\fB\-printf\fP 不会在字符串末尾添加换行符。 转义和指令是:
.RS
.IP \ea
警钟。
.IP \eb
Backspace.
.IP \ec
立即停止从此格式打印并刷新输出。
.IP \ef
换页。
.IP \en
Newline.
.IP \er
回车。
.IP \et
水平制表符。
.IP \ev
垂直选项卡。
.IP \e0
ASCII 空值。
.IP \e\e
一个字面量反斜杠 (`\e')。
.IP \eNNN
ASCII 码为 NNN (octal) 的字符。
.PP
`\e` 字符后跟任何其他字符被视为普通字符，因此它们都被打印出来。
.IP %%
字面量百分号。
.IP %a
C \fBctime\fP(3) 函数返回格式的文件上次访问时间。
.IP %A\fIk\fP
\fIk\fP 指定格式的文件上次访问时间，可以是 `@` 或 C \fBstrftime\fP(3) 函数的指令。 下面显示了 \fIk\fP 的可能值的不完整列表。
有关完整列表，请参见 \fBstrftime\fP(3) 的文档。 由于 \fBstrftime\fP(3)
库函数的实现存在差异，某些转换规范字符可能无法在所有系统上使用。
.RS
.IP @
自 Jan.\&1, 1970, 00:00 GMT 以来的秒数，带小数部分。
.PP
时间字段:
.IP H
小时 (00..23)
.IP I
小时 (01..12)
.IP k
小时 (0..23)
.IP l
小时 (1..12)
.IP M
分钟 (00..59)
.IP p
语言环境的上午或下午
.IP r
时间，12 小时制 (hh:mm:ss [AP] M)
.IP S
第二个 (00.00\&..\&61.00)。 有小数部分。
.IP T
时间，24 小时制 (hh:mm:ss.xxxxxxxxxx)
.IP +
日期和时间，以 `+` 分隔，例如 `2004\-04\-28+22:22:05.0`。这是一个 GNU 扩展。 时间以当前时区给出 (可能受设置
\fBTZ\fP 环境变量的影响)。 秒字段包括小数部分。
.IP X
语言环境的时间表示 (H:M:S)。 秒字段包括小数部分。
.IP Z
时区 (例如，EDT)，如果无法确定时区，则无
.PP
日期字段:
.IP a
语言环境的缩写工作日名称 (Sun..Sat)
.IP A
区域设置的完整工作日名称，可变长度 (Sunday..Saturday)
.IP b
语言环境的缩写月份名称 (Jan..Dec)
.IP B
语言环境的完整月份名称，可变长度 (January..December)
.IP c
语言环境的日期和时间 (1989 年 11 月 4 日星期六 12:02:33 EST)。 格式与 \fBctime\fP(3)
相同，因此为了保持与该格式的兼容性，秒字段中没有小数部分。
.IP d
月中的第几天 (01..31)
.IP D
日期 (mm/dd/yy)
.IP F
日期 (yyyy\-mm\-dd)
.IP h
和 b 一样
.IP j
年 (001..366)
.IP m
月 (01..12)
.IP U
以星期日为一周的第一天的一年中的周数 (00..53)
.IP w
星期几 (0..6)
.IP W
以星期一作为一周的第一天的一年中的周数 (00..53)
.IP x
语言环境的日期表示 (mm/dd/yy)
.IP y
年份的最后两位数 (00..99)
.IP Y
年份 (1970...\&)
.RE
.IP %b
用于此文件的磁盘空间量 (以 512 字节块为单位)。 由于磁盘空间是以文件系统块大小的倍数分配的，这通常大于 %
s/512，但如果文件是稀疏文件，它也可以更小。

.IP %B\fIk\fP
文件的出生时间，即创建时间，格式为 \fIk\fP，与 %A 相同。 如果底层操作系统或文件系统不支持出生时间，则此指令会生成一个空字符串。

.IP %c
C \fBctime\fP(3) 函数返回格式的文件上次状态改变时间。
.IP %C\fIk\fP
\fIk\fP 指定格式的文件最后一次状态改变时间，与 %A 相同。
.IP %d
文件在目录树中的深度; 0 表示文件是起点。
.IP %D
文件所在的设备号 (结构体 stat 的 st_dev 字段)，十进制。
.IP %f
打印基本名称; 删除了所有前导目录的文件名 (仅最后一个元素)。 对于 \fB/\fP，结果为 `/`。有关示例，请参见 \fBEXAMPLES\fP 部分。

.IP %F
文件所在的文件系统的类型; 该值可用于 \-fstype。
.IP %g
文件的组名称，如果组没有名称，则为数字组 ID。
.IP %G
文件的数字组 ID。
.IP %h
名; 文件名的前导目录 (除最后一个元素外的所有元素)。 如果文件名不包含斜杠 (因为它在当前目录中)，则 %h 说明符扩展为
`.`。对于本身是目录并包含斜杠的文件 (包括 \fB/\fP)、%h 扩展为空字符串。 有关示例，请参见 \fBEXAMPLES\fP 部分。
.IP %H
找到文件的起点。
.IP %i
文件的 inode 编号 (十进制)。
.IP %k
此文件使用的磁盘空间量 (以 1\KB 块为单位)。 由于磁盘空间是以文件系统块大小的倍数分配的，这通常大于 %
s/1024，但如果文件是稀疏文件，它也可以更小。
.IP %l
符号链接的对象 (如果文件不是符号链接，则为空字符串)。
.IP %m
文件的权限位 (八进制)。 此选项使用大多数 Unix 实现使用的 `传统`
数字，但如果您的特定实现使用八进制权限位的不寻常排序，您将看到文件模式的实际值与 %m
的输出之间的差异。通常您会希望这个数字有一个前导零，为此，您应该使用 \fB#\fP 标志 (例如，'%#m')。
.IP %M
文件的权限 (符号形式，如 \fBls\fP).  findutils 4.2.5 及更高版本支持此指令。
.IP %n
文件的硬链接数。
.IP %p
文件的名称。
.IP %P
文件的名称及其被发现时的起点名称已被删除。
.IP %s
文件的大小 (以字节为单位)。
.IP %S
文件的稀疏性。 这被计算为 (BLOCKSIZE*st_blocks/st_size)。 对于特定长度的普通文件，您将获得的确切值取决于系统。
但是，通常稀疏文件的值小于 1.0，而使用间接块的文件的值可能大于 1.0。 通常，文件使用的块数取决于文件系统。 用于 BLOCKSIZE
的值取决于系统，但通常为 512 字节。 如果文件大小为零，则打印的值未定义。 在不支持 st_blocks 的系统上，文件的稀疏性假定为 1.0。
.IP %t
C \fBctime\fP(3) 函数返回格式的文件的最后修改时间。
.IP %T\fIk\fP
\fIk\fP 指定格式的文件最后修改时间，与 %A 相同。
.IP %u
文件的用户名，如果用户没有名字，则为数字用户 ID。
.IP %U
文件的数字用户 ID。
.IP %y
文件类型 (如 \fBls \-l\fP)，U = 未知类型 (不应该发生)
.IP %Y
文件类型 (如 %y)，加上符号链接: `L`= 循环，`N`= 不存在，`?` 在确定符号链接的目标类型时出现任何其他错误。
.IP %Z
(仅限 SELinux) 文件的安全上下文。
.IP "%{ %[ %("
保留给 future 使用。
.PP
后跟任何其他字符的 `%` 字符将被丢弃，但会打印其他字符 (不要依赖于此，因为可能会引入更多格式字符)。格式 `参数` 末尾的 `%`
会导致未定义的行为，因为没有后续字符。 在某些地区，它可能会隐藏您的门钥匙，而在其他地区，它可能会删除您正在阅读的小说的最后一页。

%m 和 %d 指令支持 \fB#\fP、\fB0\fP 和 \fB+\fP 标志，但其他指令不支持，即使它们打印数字。 不支持这些标志的数字指令包括
\fBG\fP、\fBU\fP、\fBb\fP、\fBD\fP、\fBk\fP 和 \fBn\fP。 支持 `\-` 格式标志并将字段的对齐方式从右对齐 (默认) 更改为左对齐。
.PP
有关如何处理文件名中的异常字符的信息，请参见 \fBUNUSUAL FILENAMES\fP 部分。


.RE
.IP \-prune
真的; 如果文件是一个目录，不要进入它。 如果给出 \fB\-depth\fP，则 \fB\-prune\fP 无效。 因为 \fB\-delete\fP 意味着
\fB\-depth\fP，所以不能同时使用 \fB\-prune\fP 和 \fB\-delete\fP。 例如，要跳过目录 \fIsrc/emacs\fP
及其下的所有文件和目录，并打印找到的其他文件的名称，请执行以下操作:
.in +4m
.nf
寻找。\-path ./src/emacs \-prune \-o \-print
.fi
.in


.IP \-quit
立即退出 (如果没有发生错误，返回值为零)。 这与 \fB\-prune\fP 不同，因为 \fB\-prune\fP 仅适用于修剪目录的内容，而 \fB\-quit\fP
只是让 \fBfind\fP 立即停止。 没有子进程将继续运行。 在程序退出之前调用由 \fB\-exec\ ...\ +\fP 或 \fB\-execdir\ ...\ +\fP 构建的任何命令行。 \fB\-quit\fP 执行后，不再处理命令行指定的文件。 例如，`\fBfind\ \fP\fI/tmp/foo\fP\fB\ \fP\fI/tmp/bar\fP\fB\-print\-quit\fP` 将只打印 `/tmp/foo`。
.br
\fB\-quit\fP 的一个常见用途是在找到所需内容后停止搜索文件系统。 例如，如果我们只想查找一个文件，我们可以这样做:
.in +4m
.nf
找 /\-name 针 \-print \-quit
.fi
.in

.SS OPERATORS
按优先级递减顺序列出:

.IP "( \fIexpr\fP )"
强制优先。 由于括号对于 shell 是特殊的，因此您通常需要引用它们。 本手册页中的许多示例为此目的使用反斜杠: `\e (...\e)` 而不是
`(...)`。

.IP "! \fIexpr\fP"
如果 \fIexpr\fP 为假，则为真。 这个字符通常也需要保护免受 shell 的解释。

.IP "\-not \fIexpr\fP"
与 !\&\fIexpr\fP 相同，但不符合 POSIX。

.IP "\fIexpr1 expr2\fP"
一行中的两个表达式被认为与隐含的 \fB\-a\fP 连接; 如果 \fIexpr1\fP 为假，则不评估 \fIexpr2\fP。

.IP "\fIexpr1\fP \-a \fIexpr2\fP"
与 \fIexpr1 expr2\fP 相同。

.IP "\fIexpr1\fP \-and \fIexpr2\fP"
与 \fIexpr1 expr2\fP 相同，但不符合 POSIX。

.IP "\fIexpr1\fP \-o \fIexpr2\fP"
或者; 如果 \fIexpr1\fP 为真，则不评估 \fIexpr2\fP。

.IP "\fIexpr1\fP \-or \fIexpr2\fP"
与 \fIexpr1\fP \fB\-o\fP \fIexpr2\fP 相同，但不符合 POSIX。

.IP "\fIexpr1\fP , \fIexpr2\fP"
列表;\fIexpr1\fP 和 \fIexpr2\fP 总是被评估。 \fIexpr1\fP 的值被丢弃; 列表的值是 \fIexpr2\fP 的值。
逗号运算符可用于搜索多种不同类型的事物，但只遍历文件系统层次结构一次。 \fB\-fprintf\fP 动作可用于将各种匹配项列出到几个不同的输出文件中。
.P
请注意，\fB\-a\fP 在隐式指定时 (例如，两个测试之间没有显式运算符) 或显式指定时，其优先级高于 \fB\-o\fP。 这意味着 \fBfind . \-name afile \-o \-name bfile \-print\fP 永远不会打印 \fIafile\fP。
.
.SH "UNUSUAL FILENAMES"
\fBfind\fP 的许多操作都会导致数据打印，而这些数据在其他用户的控制下。 这包括文件名、大小、修改时间等。 文件名是一个潜在的问题，因为它们可以包含除
`\e0` 和 `/` 之外的任何字符。文件名中的不寻常字符可能会对您的最终终端产生意想不到且通常不受欢迎的事情 (例如，更改某些终端上的号码键设置)。
如下所述，各种操作会以不同方式处理不寻常的字符。

.IP "\-print0, \-fprint0"
始终打印准确的文件名，保持不变，即使输出是最终的。

.IP "\-ls, \-fls"
不寻常的字符总是被转义。 空格、反斜杠和双引号字符使用 C 风格转义 (例如 `\ef'、`\e"') 打印。 其他不常见的字符使用八进制转义打印。
其他可打印字符 (对于 \fB\-ls\fP 和 \fB\-fls\fP，这些是八进制 041 和 0176 之间的字符) 按原样打印。

.IP "\-printf, \-fprintf"
如果输出不会到达终点，则按原样打印。 否则，结果取决于正在使用的指令。 指令 %D、%F、%g、%G、%H、%Y 和 %y
扩展为不受文件所有者控制的值，因此按原样打印。指令 %a、%b、%c、%d、%i、%k、%m、%M、%n、%s、%t、%u 和 %U
的值由文件所有者控制，但不能用于将任意数据发送到终端，因此这些按原样打印。 引用指令 %f、%h、%l、%p 和 %P。 该引用的执行方式与 GNU
\fBls\fP 相同。 这与用于 \fB\-ls\fP 和 \fB\-fls\fP 的引用机制不同。 如果您能够决定 \fBfind\fP 的输出使用什么格式，那么通常使用
`\e0` 作为终止符比使用换行符更好，因为文件名可以包含空格和换行符。 \fBLC_CTYPE\fP 环境变量的设置用于确定哪些字符需要被引用。

.IP "\-print, \-fprint"
引用的处理方式与 \fB\-printf\fP 和 \fB\-fprintf\fP 相同。 如果您在脚本中使用
\fBfind\fP，或者在匹配文件可能具有任意名称的情况下，您应该考虑使用 \fB\-print0\fP 而不是 \fB\-print\fP。
.P
\fB\-ok\fP 和 \fB\-okdir\fP 操作按原样打印当前文件名。 这可能会在 future 版本中改变。
.
.SH "STANDARDS CONFORMANCE"
为了最接近 POSIX 标准，您应该设置 \fBPOSIXLY_CORRECT\fP 环境变量。 POSIX 标准 (IEEE Std
1003.1\-2008，2016 版) 中指定了以下选项:

.IP \fB\-H\fP
支持此选项。

.IP \fB\-L\fP
支持此选项。

.IP \fB\-name\fP
支持此选项，但 POSIX 一致性取决于系统 \fBfnmatch\fP(3) 库函数的 POSIX 一致性。 从 findutils\-4.2.2
开始，shell 元字符 (例如 `*`、`?` 或 `[]`) 匹配前导 `.`，因为 IEEE PASC 解释 126 要求这样做。
这是对以前版本的 findutils 的更改。

.IP \fB\-type\fP
支持的。POSIX 指定 `b`、`c`、`d`、`l`、`p`、`f` 和 `s`。GNU find 还支持 `D`，代表一扇门，操作系统提供这些。
此外，GNU find 允许在逗号分隔列表中同时指定多个类型。

.IP \fB\-ok\fP
支持的。响应的解释是根据通过设置 \fBLC_MESSAGES\fP 环境变量选择的 `是` 和 `否` 模式。当设置 \fBPOSIXLY_CORRECT\fP
环境变量时，这些模式采用系统定义的正 (yes) 或 negative (no) 响应。请参见 \fBnl_langinfo\fP(3) 的系统文档，尤其是
YESEXPR 和 NOEXPR。当未设置 \fBPOSIXLY_CORRECT\fP 时，模式取而代之的是 \fBfind\fP's 自己的消息目录。

.IP \fB\-newer\fP
支持的。如果指定的文件是一个符号链接，它总是被解引用。 这与以前的行为有所不同，以前的行为是从符号链接中获取相关时间; 请参见下面的历史部分。

.IP \fB\-perm\fP
支持的。如果未设置 \fBPOSIXLY_CORRECT\fP 环境变量，则支持某些在 POSIX 中无效的模式参数 (例如 + a+x) 以实现向后兼容性。

.IP "Other primaries"
原色
\fB\-atime\fP、\fB\-ctime\fP、\fB\-depth\fP、\fB\-exec\fP、\fB\-group\fP、\fB\-links\fP、\fB\-mtime\fP、\fB\-nogroup\fP、\fB\-nouser\fP、\fB\-ok\fP、\fB\-path\fP、\fB\-print\fP、\fB\-prune\fP、\fB\-size\fP、\fB\-user\fP
和 \fB\-xdev\fP 均受支持。

.P
POSIX 标准指定括号 `(', `)'，否定 `!' 和逻辑 AND/OR 运算符 \fB\-a\fP 和 \fB\-o\fP。
.P
所有其他选项、谓词、表达式等都是 POSIX 标准之外的扩展。 然而，其中许多扩展并不是 GNU 所独有的。
.P
POSIX 标准要求 \fBfind\fP 检测环路:
.IP
\fBfind\fP 实用程序应检测无限循环; 也就是说，进入一个先前访问过的目录，该目录是遇到的最后一个文件的祖先。 当它检测到无限循环时，find
应将诊断消息写入标准错误，并且应恢复其在层次结构中的位置或终止。
.P
GNU \fBfind\fP 符合这些要求。 包含指向祖先的硬链接条目的目录的链接计数通常会低于它们应有的数量。 这可能意味着 GNU
查找有时会优化访问实际上是祖先链接的子目录。 由于 \fBfind\fP 实际上并没有进入这样的子目录，因此可以避免发出诊断消息。
尽管此行为可能有些令人困惑，但实际上任何人都不太可能依赖于此行为。 如果使用 \fB\-noleaf\fP
关闭叶优化，将始终检查目录条目并在适当的地方发出诊断消息。 符号链接本身不能用于创建文件系统循环，但如果正在使用 \fB\-L\fP 选项或
\fB\-follow\fP 选项，则当 \fBfind\fP 遇到符号链接循环时会发出诊断消息。 对于包含硬链接的循环，叶优化通常意味着 \fBfind\fP
知道它不需要在符号链接上调用 \fIstat()\fP 或 \fIchdir()\fP，因此通常不需要此诊断。
.P
支持 \fB\-d\fP 选项以兼容各种 BSD 系统，但您应该改用符合 POSIX 标准的选项 \fB\-depth\fP。
.P
\fBPOSIXLY_CORRECT\fP 环境变量不会影响 \fB\-regex\fP 或 \fB\-iregex\fP 测试的行为，因为这些测试未在 POSIX
标准中指定。
.
.SH "ENVIRONMENT VARIABLES"

.IP LANG
为未设置或为 null 的国际化变量提供默认值。

.IP LC_ALL
如果设置为非空字符串值，则覆盖所有其他国际化变量的值。

.IP LC_COLLATE
POSIX 标准指定此变量影响用于 \fB\-name\fP 选项的模式匹配。 GNU 查找使用 \fBfnmatch\fP(3) 库函数，因此对
\fBLC_COLLATE\fP 的支持取决于系统库。 该变量还会影响对 \fB\-ok\fP 响应的解释; 虽然 \fBLC_MESSAGES\fP 变量选择用于解释对
\fB\-ok\fP 的响应的实际模式，但模式中任何括号表达式的解释都将受到 \fBLC_COLLATE\fP 的影响。

.IP LC_CTYPE
如果系统的 \fBfnmatch\fP(3) 库函数支持此变量，则此变量会影响正则表达式中使用的字符类的处理以及 \fB\-name\fP 测试。
此变量还影响用于解释对 \fB\-ok\fP 发出的提示的响应的正则表达式中任何字符类的解释。 \fBLC_CTYPE\fP
环境变量也会影响打印文件名时哪些字符被认为是不可打印的; 请参见不寻常的文件名部分。

.IP LC_MESSAGES
确定用于国际化消息的语言环境。 如果设置了 \fBPOSIXLY_CORRECT\fP 环境变量，这也决定了对 \fB\-ok\fP 操作做出的提示的响应的解释。

.IP NLSPATH
确定国际化消息目录的位置。

.IP PATH
影响为查找 \fB\-exec\fP、\fB\-execdir\fP、\fB\-ok\fP 和 \fB\-okdir\fP 调用的可执行文件而搜索的目录。

.IP POSIXLY_CORRECT
确定 \fB\-ls\fP 和 \fB\-fls\fP 使用的块大小。 如果设置了 \fBPOSIXLY_CORRECT\fP，块将以 512 字节为单位。 否则它们是以
1024 字节为单位的。
.IP
设置此变量还会关闭警告消息 (即默认情况下暗示 \fB\-nowarn\fP)，因为 POSIX 要求除了 \fB\-ok\fP
的输出外，打印在标准错误上的所有消息都是诊断消息，并且必须导致非零退出状态。
.IP
当 \fBPOSIXLY_CORRECT\fP 未设置时，如果 \fI+zzz\fP 不是有效的符号模式，则 \fB\-perm \fP\fI+zzz\fP 将被视为
\fB\-perm \fP\fI/zzz\fP。 设置 \fBPOSIXLY_CORRECT\fP 时，此类构造将被视为错误。
.IP
设置 \fBPOSIXLY_CORRECT\fP 时，根据系统的消息目录解释对 \fB\-ok\fP 操作提示的响应，而不是根据 \fBfind\fP's 自己的消息翻译。

.IP TZ
影响用于 \fB\-printf\fP 和 \fB\-fprintf\fP 的一些与时间相关的格式指令的时区。
.
.SH EXAMPLES
.\" A bulleted \[bu] list of examples.
.SS "Simple `find|xargs` approach"
.IP \[bu]
在 \fI/tmp\fP 目录下找到名为 \fIcore\fP 的文件并删除。
.nf
\&
.in +4m
\fB$ find /tmp \-name core \-type f \-print | xargs /bin/rm \-f\fP
.in
\&
.fi
请注意，如果有任何文件名包含换行符、单引号或双引号或空格，这将无法正常工作。
.
.SS "Safer `find \-print0 | xargs \-0` approach"
.IP \[bu]
在目录 \fI/tmp\fP 或目录下查找名为 \fIcore\fP 的文件并删除它们，以正确处理文件名或目录名包含单引号或双引号、空格或换行符的方式处理文件名。
.nf
\&
.in +4m
\fB$ find /tmp \-name core \-type f \-print0 | xargs \-0 /bin/rm \-f\fP
.in
\&
.fi
\fB\-name\fP 测试在 \fB\-type\fP 测试之前进行，以避免必须在每个文件上调用 \fBstat\fP(2)。
.PP
请注意，在 \fBfind\fP 遍历打印匹配文件名的层次结构的时间与 \fBxargs\fP 执行的进程处理该文件的时间之间仍然存在竞争。
.
.SS "Processing arbitrary starting points"
.IP \[bu]
鉴于另一个程序 \fIproggy\fP 预过滤并创建了一个巨大的 NUL 分隔文件列表，将它们作为起点进行处理，并在其中找到所有常规的空文件:
.nf
\&
.in +4m
\fB$ proggy | find \-files0\-from \- \-maxdepth 0 \-type f \-empty\fP
.in
\&
.fi
使用 \fB`\-files0\-from\ \-`\fP 表示从 \fIstandard input\fP 即从管道中读取起点名称; 并且 \fB\-maxdepth\ 0\fP 确保只明确地检查这些条目而不递归到目录中 (在起点之一是一个的情况下)。
.
.SS "Executing a command for each file"
.IP \[bu]
对当前目录中或当前目录下的每个文件运行 \fIfile\fP。
.nf
\&
.in +4m
\fB$ find . \-type f \-exec file \(aq{}\(aq \e;\fP
.in
\&
.fi
请注意，大括号括在单引号中，以防止它们被解释为 shell 脚本标点符号。 分号同样通过使用反斜杠来保护，尽管在这种情况下也可以使用单引号。
.PP
在许多情况下，出于性能和安全原因，人们可能更喜欢 \fB`\-exec\ \&...\&\ +`\fP 或更好的 \fB`\-execdir\ \&...\&\ +`\fP 语法。
.
.SS "Traversing the filesystem just once \- for 2 different actions"
.IP \[bu]
只遍历文件系统一次，将设置用户 ID 的文件和目录列到 \fI/root/suid.txt\fP 中，将大文件列到 \fI/root/big.txt\fP 中。
.nf
\&
.in +4m
\fB$ find / \e\fP
.in +4m
\fB\e( \-perm \-4000 \-fprintf /root/suid.txt \(aq%#m %u %p\en\(aq \e) , \e\fP
.br
\fB\e( \-size +100M \-fprintf /root/big.txt \(aq%\-10s %p\en\(aq \e)\fP
.in -4m
.in -4m
\&
.fi
此示例在前两行使用行继续符 \(aq\e\(aq 来指示 shell 继续读取下一行的命令。
.
.SS "Searching files by age"
.IP \[bu]
在您的主目录中搜索最近二十四小时内修改过的文件。
.nf
\&
.in +4m
\fB$ find $HOME \-mtime 0\fP
.in
\&
.fi
此命令以这种方式工作，因为自上次修改每个文件以来的时间除以 24 小时，并丢弃任何剩余部分。 这意味着要匹配 \fB\-mtime\fP
\fB0\fP，文件必须在过去不到 24 小时前进行修改。
.
.SS "Searching files by permissions"
.IP \[bu]
搜索可执行但不可读的文件。
.nf
\&
.in +4m
\fB$ find /sbin /usr/sbin \-executable \e! \-readable \-print\fP
.in
\&
.fi
.
.IP \[bu]
搜索其所有者和组具有读写权限但其他用户可以读取但不能写入的文件。
.nf
\&
.in +4m
\fB$ find . \-perm 664\fP
.in
\&
.fi
满足这些条件但设置了其他权限位的文件 (例如，如果有人可以执行该文件) 将不会被匹配。
.
.IP \[bu]
搜索对其所有者和组具有读写权限的文件，以及其他用户可以读取的文件，而不考虑是否存在任何额外的权限位 (例如可执行位)。
.nf
\&
.in +4m
\fB$ find . \-perm \-664\fP
.in
\&
.fi
例如，这将匹配模式为 \fI0777\fP 的文件。
.
.IP \[bu]
搜索可由某人 (他们的所有者、他们的组或任何其他人) 写入的文件。
.nf
\&
.in +4m
\fB$ find . \-perm /222\fP
.in
\&
.fi
.
.IP \[bu]
搜索其所有者或组可写的文件。
.nf
\&
.in +4m
\fB$ find . \-perm /220\fP
\fB$ find . \-perm /u+w,g+w\fP
\fB$ find . \-perm /u=w,g=w\fP
.in
\&
.fi
所有这三个命令都做同样的事情，但第一个使用文件模式的八进制表示，另外两个使用符号形式。 这些文件不必由所有者和组都可写才能匹配; 两者都行。
.
.IP \[bu]
搜索其所有者和组都可写的文件。
.nf
\&
.in +4m
\fB$ find . \-perm \-220\fP
\fB$ find . \-perm \-g+w,u+w\fP
.in
\&
.fi
这两个命令做同样的事情。
.
.IP \[bu]
更详细的权限搜索。
.nf
\&
.in +4m
\fB$ find . \-perm \-444 \-perm /222 \e! \-perm /111\fP
\fB$ find . \-perm \-a+r \-perm /a+w \e! \-perm /a+x\fP
.in
\&
.fi
这两个命令都搜索对每个人都可读的文件 (\fB\-perm \-444\fP 或 \fB\-perm \-a+r\fP)，至少有一个写位设置 (\fB\-perm /222\fP
或 \fB\-perm /a+w\fP) 但对任何人都不可执行 (\fB! \-perm /111\fP 或 \fB! \-perm /a+x\fP 分别)。
.
.SS "Pruning \- omitting files and subdirectories"
.IP \[bu]
将 \fI/source\-dir\fP 的内容复制到 \fI/dest\-dir\fP，但省略名为 \fI.snapshot\fP 的文件和目录 (以及其中的任何内容)。
它还会忽略名称以 `\(ti` 结尾的文件或目录，但不包括它们的内容。
.nf
\&
.in +4m
\fB$ cd /source\-dir\fP
\fB$ find . \-name .snapshot \-prune \-o \e( \e! \-name \(aq*~\(aq \-print0 \e) \e\fP
.br
.in +4m
\fB| cpio \-pmd0 /dest\-dir\fP
.in -4m
.in -4m
\&
.fi
\fB\-prune\ \-o\ \e(\ \&...\&\ \-print0\ \e)\fP 结构很常见。 这里的想法是 \fB\-prune\fP
之前的表达式匹配要被修剪的东西。 但是，\fB\-prune\fP 操作本身返回 true，因此下面的 \fB\-o\fP 确保仅对那些未被修剪的目录评估右侧
(修剪目录的内容甚至未被访问，因此它们的内容无关紧要)。 \fB\-o\fP 右侧的表达式放在括号中只是为了清楚起见。 它强调 \fB\-print0\fP
操作仅针对未应用 \fB\-prune\fP 的事物发生。 因为测试之间默认的 `and` 条件比 \fB\-o\fP
绑定得更紧密，所以这是默认的，但是括号有助于显示正在发生的事情。
.
.IP \[bu]
给定以下项目目录及其关联的 SCM 管理目录，对项目的根执行高效搜索:
.nf
\&
.in +4m
\fB$ find repo/ \e\fP
.in +4m
\fB\e( \-exec test \-d \(aq{}/.svn\(aq \e; \e\fP
\fB\-or \-exec test \-d \(aq{}/.git\(aq \e; \e\fP
\fB\-or \-exec test \-d \(aq{}/CVS\(aq \e; \e\fP
\fB\e) \-print \-prune\fP
.in -4m
.in -4m
\&
.fi
示例输出:
.nf
\&
.in +4m
\fBrepo/project1/CVS\fP
\fBrepo/gnu/project2/.svn\fP
\fBrepo/gnu/project3/.svn\fP
\fBrepo/gnu/project3/src/.svn\fP
\fBrepo/project4/.git\fP
.in
\&
.fi
在此示例中，\fB\-prune\fP 防止不必要地下降到已发现的目录 (例如，我们不搜索 \fIproject3/src\fP，因为我们已经找到
\fIproject3/.svn\fP)，但确保找到兄弟目录 (\fIproject2\fP 和 \fIproject3\fP)。
.
.SS "Other useful examples"
.IP \[bu]
搜索多种文件类型。
.nf
\&
.in +4m
\fB$ find /tmp \-type f,d,l\fP
.in
\&
.fi
在目录 \fI/tmp\fP 中搜索文件、目录和符号链接，将这些类型作为逗号分隔列表 (GNU 扩展名) 传递，否则等同于更长但更便携的列表:
.nf
\&
.in +4m
\fB$ find /tmp \e( \-type f \-o \-type d \-o \-type l \e)\fP
.in
\&
.fi
.
.IP \[bu]
搜索具有特定名称 \fIneedle\fP 的文件，并在找到第一个文件时立即停止。
.nf
\&
.in +4m
\fB$ find / \-name needle \-print \-quit\fP
.in
\&
.fi
.
.IP \[bu]
演示 \fB\-printf\fP 操作的 \fB%f\fP 和 \fB%h\fP 格式指令对于某些极端情况的解释。 这是一个包含一些输出的示例。
.nf
\&
.in +4m
\fB$ find . .. / /tmp /tmp/TRACE compile compile/64/tests/find \-maxdepth 0 \-printf '[%h][%f]\en'\fP
\fB[.][.]\fP
\fB[.][..]\fP
\fB[][/]\fP
\fB[][tmp]\fP
\fB[/tmp][TRACE]\fP
\fB[.][compile]\fP
\fB[compile/64/tests][find]\fP
.in
\&
.fi
.
.SH "EXIT STATUS"
如果所有文件都已成功处理，\fBfind\fP 以状态 0 退出，如果发生错误，则状态大于 0。 这是一个非常宽泛的描述，但如果返回值非零，则不应依赖
\fBfind\fP 结果的正确性。

当发生某些错误时，\fBfind\fP 可能会立即停止，而没有完成指定的所有操作。 例如，一些起始点可能没有被检查，或者 \fB\-exec\ \&...\&\ {}\ +\fP 或 \fB\-execdir\ \&...\&\ {}\ +\fP 的一些挂起的程序调用可能没有被执行。
.
.SH HISTORY
从 findutils\-4.2.2 开始，文件名模式中使用的 shell 元字符 (例如 `*`、`?` 或 `[]`) 匹配前导 `.`，因为
IEEE POSIX 解释 126 要求这样做。
.P
从 findutils\-4.3.3 开始，\fB\-perm\ /000\fP 现在匹配所有文件而不是一个都不匹配。
.P
纳秒分辨率时间戳在 findutils\-4.3.3 中实现。
.P
从 findutils\-4.3.11 开始，\fB\-delete\fP 操作在失败时将 \fBfind\fP's 退出状态设置为非零值。 但是，\fBfind\fP
不会立即退出。 以前，\fBfind\fP's 退出状态不受 \fB\-delete\fP 故障的影响。
.TS
l l l .
Feature	Added in	Also occurs in
\-files0\-from	4.9.0
\-newerXY	4.3.3	BSD
\-D	4.3.1
\-O	4.3.1
\-readable	4.3.0
\-writable	4.3.0
\-executable	4.3.0
\-regextype	4.2.24
\-exec ... +	4.2.12	POSIX
\-execdir	4.2.12	BSD
\-okdir	4.2.12
\-samefile	4.2.11
\-H	4.2.5	POSIX
\-L	4.2.5	POSIX
\-P	4.2.5	BSD
\-delete	4.2.3
\-quit	4.2.3
\-d	4.2.3	BSD
\-wholename	4.2.0
\-iwholename	4.2.0
\-ignore_readdir_race	4.2.0
\-fls	4.0
\-ilname	3.8
\-iname	3.8
\-ipath	3.8
\-iregex	3.8
.TE
.P
在 findutils\-4.5.12 中删除了语法 \fB\-perm +MODE\fP，取而代之的是 \fB\-perm\fP \fB/MODE\fP。 自 2005
年发布的 findutils\-4.2.21 以来，\fB+MODE\fP 语法已被弃用。
.
.SH NON\-BUGS
.SS "Operator precedence surprises"
命令 \fBfind . \-name afile \-o \-name bfile \-print\fP 永远不会打印 \fIafile\fP，因为这实际上等同于
\fBfind . \-name afile \-o \e( \-name bfile \-a \-print \e)\fP。 请记住，\fB\-a\fP 的优先级高于
\fB\-o\fP，如果在测试之间没有指定运算符，则假定为 \fB\-a\fP。
.SS "\(lqpaths must precede expression\(rq error message"
.nf
\fB$ find . \-name *.c \-print\fP
查找: 路径必须在表达式之前
发现: 谓词 `\-name` 后可能未加引号的模式?
.fi
.P
当 shell 可以将模式 \fI*.c\fP 扩展为当前目录中存在的多个文件名，并在命令行中将生成的文件名传递给 \fBfind\fP
时，就会发生这种情况，如下所示:
.nf
.
\fBfind . \-name frcode.c locate.c word_io.c \-print\fP
.
.fi
该命令当然不会起作用，因为 \fB\-name\fP 谓词只允许一个模式作为参数。 不要这样做，您应该将模式用引号括起来或转义通配符，从而允许 \fBfind\fP
在搜索文件名匹配而不是父 shell 扩展的文件名时使用带有通配符的模式:
.nf
\fB$ find . \-name \(aq*.c\(aq \-print\fP
\fB$ find . \-name \e*.c \-print\fP
.fi
.
.SH BUGS
POSIX 标准为 \fBfind\fP 指定的行为中存在固有的安全问题，因此无法修复。 例如，\fB\-exec\fP 操作本身就是不安全的，应该改用
\fB\-execdir\fP。
.
.P
环境变量 \fBLC_COLLATE\fP 对 \fB\-ok\fP 操作没有影响。
.
.SH "REPORTING BUGS"
GNU findutils 联机帮助:
<https://www.gnu.org/software/findutils/#get\-help>
.br
向 <https://translationproject.org/team/> 报告任何翻译错误
.PP
通过 GNU Savannah 错误跟踪器上的表格报告任何其他问题:
.RS
<https://savannah.gnu.org/bugs/?group=findutils>
.RE
\fIbug\-findutils\fP 邮件列表中讨论了有关 GNU findutils 包的一般主题:
.RS
<https://lists.gnu.org/mailman/listinfo/bug\-findutils>
.RE
.
.SH COPYRIGHT
Copyright \(co 1990\-2022 Free Software Foundation, Inc.   License GPLv3+:
GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
.br
这是免费软件: 您可以自由更改和重新分发它。 在法律允许的范围内，不提供任何保证。
.
.SH "SEE ALSO"
\fBchmod\fP(1), \fBlocate\fP(1), \fBls\fP(1), \fBupdatedb\fP(1), \fBxargs\fP(1),
\fBlstat\fP(2), \fBstat\fP(2), \fBctime\fP(3)  \fBfnmatch\fP(3), \fBprintf\fP(3),
\fBstrftime\fP(3), \fBlocatedb\fP(5), \fBregex\fP(7)
.PP
完整文档 <https://www.gnu.org/software/findutils/find>
.br
或通过以下方式在本地获取: \fBinfo find\fP
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
