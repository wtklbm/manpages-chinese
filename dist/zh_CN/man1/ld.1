.\" -*- coding: UTF-8 -*-
.de  Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de  Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de  Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie  n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.ie  \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.de  IX
..
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.nr rF 0
.if  \n(.g .if rF .nr rF 1
.if  (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" fudge factors for nroff and troff
.    
.if  n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.if  t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.\" simple accents for nroff and troff
.    
.if  n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if  t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.\" troff and (daisy-wheel) nroff accents
.    
.ds : \k:\h'-(\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \k:\h'-(\n(.wu+\w'\(de'u\-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\fI\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.\" corrections for vroff
.    
.if  v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if  v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.\" for low resolution devices (crt and lpr)
.    
.if  \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "LD 1"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH LD 1 2023\-02\-03 binutils\-2.40 "GNU Development Tools"
.if  n .ad l
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.nh
.SH NAME
ld\-GNU 链接器
.SH SYNOPSIS
.IX Header SYNOPSIS
ld [\fBoptions\fP] \fIobjfile\fP ...
.SH DESCRIPTION
.IX Header DESCRIPTION
\&\fBld\fP 结合了一些目标文件和存档文件，重新定位了它们的数据并绑定了符号引用。通常编译程序的最后一步是运行 \fBld\fP.
.PP
\&\fBld\fP 接受以 \s-1AT&T\s0 的链接编辑器命令语言语法的超集编写的链接器命令语言文件，以提供对链接过程的明确和全面的控制。
.PP
此手册页不描述命令语言; 有关命令语言和 \s-1GNU\s0 链接器其他方面的完整详细信息，请参见 \f(CW\*(C`info\*(C'\fP 中的
\&\fBld\fP 条目。
.PP
此版本的 \fBld\fP 使用通用 \s-1BFD\s0 库来操作目标文件。这允许 \fBld\fP 读取、合并和写入许多不同格式的目标文件 \-\-
例如，\s-1COFF\s0 或 \&\f(CW\*(C`a.out\*(C'\fP。 可以将不同的格式链接在一起以生成任何可用类型的目标文件。
.PP
除了灵活性之外，\s-1GNU\s0 链接器在提供诊断信息方面比其他链接器更有帮助。 许多链接器在遇到错误时立即放弃执行; 只要有可能，\&\fBld\fP
就会继续执行，使您能够识别其他错误 (或者，在某些情况下，尽管有错误，但仍会获取输出文件)。
.PP
\s-1GNU\s0 链接器 \fBld\fP 旨在涵盖广泛的情况，并尽可能与其他链接器兼容。 因此，您有多种选择来控制其行为。
.SH OPTIONS
.IX Header OPTIONS
链接器支持过多的命令行选项，但在实际操作中，很少有人在任何特定上下文中使用它们。 例如，\fBld\fP 的频繁使用是在标准的、受支持的 Unix
系统上链接标准的 Unix 目标文件。 在这样的系统上，链接文件 \f(CW\*(C`hello.o\*(C'\fP:
.PP
.Vb 1
\& ld \-o <output> /lib/crt0.o hello.o \-lc
.Ve
.PP
这告诉 \fBld\fP 生成一个名为 \fIoutput\fP 的文件，作为将文件 \f(CW\*(C`/lib/crt0.o\*(C'\fP 与
\f(CW\*(C`hello.o\*(C'\fP 和库 \f(CW\*(C`libc.a\*(C'\fP 链接的结果，这些文件将来自标准搜索目录。 (参见下面对
\fB\-l\fP 选项的讨论。)
.PP
\fBld\fP 的一些命令行选项可以在命令行中的任何位置指定。 但是，引用文件的选项 (例如 \fB\-l\fP 或 \fB\-T\fP)
会导致在选项出现在命令行中的位置读取文件，相对于目标文件和其他文件选项。 使用不同的参数重复非文件选项将没有进一步的效果，或者覆盖该选项的先前出现
(那些在命令行左侧更远的地方)。 可能多次指定的选项在下面的描述中注明。
.PP
非选项参数是要链接在一起的目标文件或档案。 它们可以跟在命令行选项之后、之前或与命令行选项混合，除了目标文件参数不能放在选项和它的参数之间。
.PP
通常至少使用一个目标文件调用链接器，但您可以使用 \fB\-l\fP、\fB\-R\fP 和脚本命令语言指定其他形式的二进制输入文件。 如果指定了 \fIno\fP
二进制输入文件，链接器不会产生任何输出，并发出消息 \fBNo input files\fP。
.PP
如果链接器无法识别目标文件的格式，它将假定它是一个链接描述文件。 以这种方式指定的脚本增加了用于链接的主链接器脚本 (默认链接器脚本或使用
\fB\-T\fP).h 指定的链接器脚本)。 此特性允许链接器链接到一个文件，该文件看起来是一个对象或档案，但实际上仅定义了一些符号值，或使用
\&\f(CW\*(C`INPUT\*(C'\fP 或 \f(CW\*(C`GROUP\*(C'\fP 加载其他对象。
以这种方式指定脚本只是增加了主链接描述文件，额外的命令放在主脚本之后; 使用 \fB\-T\fP 选项完全替换默认链接描述文件，但请注意
\f(CW\*(C`INSERT\*(C'\fP 命令的效果。
.PP
对于名称为单个字母的选项，选项参数必须跟在选项字母后面且中间没有空格，或者在需要它们的选项之后作为单独的参数给出。
.PP
对于名称为多个字母的选项，可以在选项名称前加上一个或两个破折号; 例如，\fB\-trace\-symbol\fP 和 \&\fB\-\-trace\-symbol\fP
是等价的。 注意 \-\-\- 这一规则有一个例外。 以小写字母 'o' 开头的多个字母选项只能以两个破折号开头。 这是为了减少与 \&\fB\-o\fP
选项的混淆。 因此，例如 \fB\-omagic\fP 将输出文件名设置为 \fBmagic\fP，而 \fB\-\-omagic\fP 在输出上设置
\s-1NMAGIC\s0 标志。
.PP
多字母选项的参数必须用等号与选项名称分开，或者在需要它们的选项之后作为单独的参数给出。 例如，\&\fB\-\-trace\-symbol foo\fP 和
\fB\-\-trace\-symbol=foo\fP 是等价的。 接受多字母选项名称的唯一缩写。
.PP
注意 \-\-\- 如果通过编译器驱动程序 (例如 \fBgcc\fP)) 间接调用链接器，则所有链接器命令行选项都应以 \fB\-Wl,\fP
(或适合特定编译器驱动程序的任何内容) 为前缀，如下所示:
.PP
.Vb 1
\&gcc\-Wl,\-\- 开始组 foo.o bar.o\-Wl,\-\- 结束组
.Ve
.PP
这一点很重要，否则编译器驱动程序可能会悄悄地丢弃链接器选项，从而导致错误链接。
当通过驱动程序传递需要值的选项时，也可能会出现混淆，因为在选项和参数之间使用空格作为分隔符，并导致驱动程序仅将选项传递给链接器，将参数传递给编译器。
在这种情况下，最简单的方法是使用单字母和多字母选项的连接形式，例如:
.PP
.Vb 1
\& gcc foo.o bar.o \-Wl,\-eENTRY \-Wl,\-Map=a.map
.Ve
.PP
下面是 \s-1GNU\s0 链接器接受的泛型命令行开关表:
.IP \fB@\fP\fIfile\fP 4
.IX Item @file
从 \fIfile\fP 读取命令行选项。 读取的选项插入到原始 @\fIfile\fP 选项的位置。 如果 \fIfile\fP
不存在或无法读取，则该选项将按字面意思处理，而不是删除。
.Sp
\fIfile\fP 中的选项由空格分隔。 通过用单引号或双引号将整个选项括起来，可以将空白字符包含在选项中。 任何字符 (包括反斜杠)
都可以通过在要包含的字符前加上反斜杠来包含。 \fIfile\fP 本身可能包含额外的 @\fIfile\fP 选项; 任何此类选项都将递归处理。
.IP "\fB\-a\fP \fIkeyword\fP" 4
.IX Item "\-a keyword"
支持此选项以实现 \s-1HP/UX\s0 兼容性。 \fIkeyword\fP 参数必须是字符串 \fBarchive\fP、\fBshared\fP 或
\&\fBdefault\fP 之一。 \fB\-aarchive\fP 在功能上等同于 \&\fB\-Bstatic\fP，另外两个关键字在功能上等同于
\fB\-Bdynamic\fP。 此选项可以使用任意次数。
.IP "\fB\-\-audit\fP \fI\s-1AUDITLIB\s0\fP" 4
.IX Item "\-\-audit AUDITLIB"
将 \fI\s-1AUDITLIB\s0\fP 添加到动态部分的 \f(CW\*(C`DT_AUDIT\*(C'\fP 条目。 不检查
\&\fI\s-1AUDITLIB\s0\fP 是否存在，也不会使用库中指定的 \s-1DT_SONAME\s0。
如果多次指定，\f(CW\*(C`DT_AUDIT\*(C'\fP
将包含以冒号分隔的要使用的审计接口列表。如果链接器在搜索共享库时发现一个带有审计条目的对象，它将在输出文件中添加一个相应的
\f(CW\*(C`DT_DEPAUDIT\*(C'\fP 条目。 此选项仅在支持 rtld\-audit 接口的 \s-1ELF\s0 平台上有意义。
.IP "\fB\-b\fP \fIinput\-format\fP" 4
.IX Item "\-b input\-format"
.PD 0
.IP \fB\-\-format=\fP\fIinput\-format\fP 4
.IX Item \-\-format=input\-format
.PD
\&\fBld\fP 可以配置为支持多种目标文件。 如果您的 \fBld\fP 是这样配置的，您可以使用 \&\fB\-b\fP
选项指定命令行上此选项后面的输入目标文件的二进制格式。 即使 \fBld\fP 配置为支持替代对象格式，您通常也不需要指定它，因为 \fBld\fP
应该配置为期望每台机器上最常用的格式作为默认输入格式。 \&\fIinput\-format\fP 是一个文本字符串，是 \s-1BFD\s0
库支持的特定格式的名称。 (您可以使用 \fBobjdump \-i\fP.) 列出可用的二进制格式
.Sp
如果您链接的文件具有不常见的二进制格式，则可能需要使用此选项。 您还可以使用 \fB\-b\fP 显式切换格式
(当链接不同格式的目标文件时)，方法是在特定格式的每组目标文件之前包含 \&\fB\-b\fP \fIinput\-format\fP。
.Sp
默认格式取自环境变量 \&\f(CW\*(C`GNUTARGET\*(C'\fP。
.Sp
您还可以使用命令 \&\f(CW\*(C`TARGET\*(C'\fP 从脚本定义输入格式;
.IP "\fB\-c\fP \fIMRI\-commandfile\fP" 4
.IX Item "\-c MRI\-commandfile"
.PD 0
.IP \fB\-\-mri\-script=\fP\fIMRI\-commandfile\fP 4
.IX Item \-\-mri\-script=MRI\-commandfile
.PD
为了与 \s-1MRI 生成的链接器兼容，\s0 \fBld\fP 接受以替代的受限命令语言编写的脚本文件，如 \s-1GNU\s0 ld 文档的
\s-1MRI\s0 兼容脚本文件部分所述。 引入 \fB\-c\fP 选项的 \s-1MRI\s0 脚本文件; 使用 \fB\-T\fP 选项运行以通用 \fBld\fP
脚本语言编写的链接描述文件。 如果 \fIMRI\-cmdfile\fP 不存在，则 \fBld\fP 在任何 \fB\-L\fP 选项指定的目录中查找它。
.IP \fB\-d\fP 4
.IX Item \-d
.PD 0
.IP \fB\-dc\fP 4
.IX Item \-dc
.IP \fB\-dp\fP 4
.IX Item \-dp
.PD
这三个选项是等价的; 支持多种形式以与其他链接器兼容。 即使指定了可重定位的输出文件 (使用 \fB\-r\fP).  脚本命令
\f(CW\*(C`FORCE_COMMON_ALLOCATION\*(C'\fP 具有相同的效果。
.IP "\fB\-\-depaudit\fP \fI\s-1AUDITLIB\s0\fP" 4
.IX Item "\-\-depaudit AUDITLIB"
.PD 0
.IP "\fB\-P\fP \fI\s-1AUDITLIB\s0\fP" 4
.IX Item "\-P AUDITLIB"
.PD
将 \fI\s-1AUDITLIB\s0\fP 添加到动态部分的 \f(CW\*(C`DT_DEPAUDIT\*(C'\fP 条目。 不检查
\&\fI\s-1AUDITLIB\s0\fP 是否存在，也不会使用库中指定的 \s-1DT_SONAME\s0。
如果多次指定，\f(CW\*(C`DT_DEPAUDIT\*(C'\fP 将包含以冒号分隔的要使用的审计接口列表。 此选项仅在支持 rtld\-audit 接口的
\s-1ELF\s0 平台上有意义。 提供 \-P 选项是为了与 Solaris 兼容。
.IP \fB\-\-enable\-non\-contiguous\-regions\fP 4
.IX Item \-\-enable\-non\-contiguous\-regions
如果输入部分不适合匹配的输出部分，此选项可避免生成错误。链接器尝试将输入节分配给后续匹配的输出节，并且只有在没有足够大的输出节时才会产生错误。
当有几个不连续的内存区域可用并且输入部分不需要特定的内存区域时，这很有用。 评估输入部分的顺序不会改变，例如:
.Sp
.Vb 10
\&MEMORY { \& MEM1 (rwx) : ORIGIN : 0x1000, LENGTH = 0x14 \& MEM2 (rwx) :
ORIGIN : 0x1000, LENGTH = 0x40 \& MEM3 (rwx) : ORIGIN : 0x2000, LENGTH =
0x40 \& }\&SECTIONS { \& mem1 : { *(.data.*); } > MEM1 \& mem2 : {
*(.data.*); } > MEM2 \& mem3 : { *(.data.*); } > MEM2 \& }\&\& 输入部分:
\&.data.1: size 8\&.data.2: size 0x10\&.data.3: size 4\&\&results in. data.1
影响 mem1，.data.2 和 .data.3\& 影响 mem2，即使 .data.3 适合 mem3。
.Ve
.Sp
此选项与 \s-1INSERT\s0 语言不兼容，因为它更改了输入部分映射到输出部分的方式。
.IP \fB\-\-enable\-non\-contiguous\-regions\-warnings\fP 4
.IX Item \-\-enable\-non\-contiguous\-regions\-warnings
当 \&\f(CW\*(C`\-\-enable\-non\-contiguous\-regions\*(C'\fP
允许部分映射中可能出现意外匹配时，此选项启用警告，可能会导致静默丢弃部分而不是失败，因为它不适合任何输出区域。
.IP "\fB\-e\fP \fIentry\fP" 4
.IX Item "\-e entry"
.PD 0
.IP \fB\-\-entry=\fP\fIentry\fP 4
.IX Item \-\-entry=entry
.PD
使用 \fIentry\fP 作为开始执行程序的显式符号，而不是默认入口点。 如果没有名为 \fIentry\fP 的符号，链接器将尝试将 \fIentry\fP
解析为一个数字，并将其用作入口地址 (该数字将以 10 为基数进行解释; 您可以使用前导 \fB0x\fP 表示 16 进制，或前导 \&\fB0\fP 对于基数
8)。
.IP "\fB\-\-exclude\-libs\fP \fIlib\fP\fB,\fP\fIlib\fP\fB,...\fP" 4
.IX Item "\-\-exclude\-libs lib,lib,..."
指定不应从中自动导出符号的存档库列表。 库名称可以用逗号或冒号分隔。 指定 \&\f(CW\*(C`\-\-exclude\-libs ALL\*(C'\fP
会将所有存档库中的符号排除在自动导出之外。 此选项仅适用于链接器的 i386 \s-1PE\s0 目标端口和 \s-1ELF\s0 目标端口。 对于
i386\s-1PE，.def 文件中明确列出的 \s0 符号仍会被导出，无论此选项如何。 对于 \s-1ELF\s0
目标端口，受此选项影响的符号将被视为隐藏。
.IP "\fB\-\-exclude\-modules\-for\-implib\fP \fImodule\fP\fB,\fP\fImodule\fP\fB,...\fP" 4
.IX Item "\-\-exclude\-modules\-for\-implib module,module,..."
指定目标文件或存档成员的列表，不应从中自动导出符号，但应将其批量复制到链接期间生成的导入库中。 模块名称可以用逗号或冒号分隔，并且必须与 \fBld\fP
用于打开文件的文件名完全匹配; 对于存档成员，这只是成员名称，但对于目标文件，列出的名称必须包括并精确匹配用于在链接器命令行上指定输入文件的任何路径。
此选项仅适用于链接器的 i386 \s-1PE\s0 目标端口。 无论此选项如何，.def 文件中明确列出的符号仍会导出。
.IP \fB\-E\fP 4
.IX Item \-E
.PD 0
.IP \fB\-\-export\-dynamic\fP 4
.IX Item \-\-export\-dynamic
.IP \fB\-\-no\-export\-dynamic\fP 4
.IX Item \-\-no\-export\-dynamic
.PD
创建动态链接的可执行文件时，使用 \fB\-E\fP 选项或 \fB\-\-export\-dynamic\fP 选项会导致链接器将所有符号添加到动态符号表中。
动态符号表是一组在运行时从动态对象中可见的符号。
.Sp
如果您不使用这些选项中的任何一个 (或使用 \&\fB\-\-no\-export\-dynamic\fP
选项恢复默认行为)，动态符号表通常只包含链接中提到的某些动态对象引用的那些符号。
.Sp
如果您使用 \f(CW\*(C`dlopen\*(C'\fP
加载一个需要引用程序定义的符号的动态对象，而不是其他一些动态对象，那么您可能需要在链接程序本身时使用此选项。
.Sp
如果输出格式支持，您还可以使用动态列表来控制应将哪些符号添加到动态符号表中。 请参见 \fB\-\-dynamic\-list\fP 的说明。
.Sp
请注意，此选项特定于 \s-1ELF\s0 目标端口。 \s-1PE\s0 目标支持类似的函数以从 \s-1DLL\s0 或 \s-1EXE\s0
导出所有符号; 请参见下面对 \fB\-\-export\-all\-symbols\fP 的说明。
.IP \fB\-\-export\-dynamic\-symbol=\fP\fIglob\fP 4
.IX Item \-\-export\-dynamic\-symbol=glob
创建动态链接的可执行文件时，匹配 \&\fIglob\fP 的符号将添加到动态符号表中。创建共享库时，引用匹配 \fIglob\fP
的符号将不会绑定到共享库中的定义。创建共享库时此选项是空操作，并且未指定 \fB\-Bsymbolic\fP 或
\&\fB\-\-dynamic\-list\fP。此选项仅在支持共享库的 \s-1ELF\s0 平台上有意义。
.IP \fB\-\-export\-dynamic\-symbol\-list=\fP\fIfile\fP 4
.IX Item \-\-export\-dynamic\-symbol\-list=file
为文件中的每个模式指定一个 \fB\-\-export\-dynamic\-symbol\fP。 文件格式与版本节点相同，没有使用域和节点名称。 有关更多信息，请参见
\fB\s-1VERSION\s0\fP。
.IP \fB\-EB\fP 4
.IX Item \-EB
链接大端对象。 这会影响默认输出格式。
.IP \fB\-EL\fP 4
.IX Item \-EL
链接小端对象。 这会影响默认输出格式。
.IP "\fB\-f\fP \fIname\fP" 4
.IX Item "\-f name"
.PD 0
.IP \fB\-\-auxiliary=\fP\fIname\fP 4
.IX Item \-\-auxiliary=name
.PD
创建 \s-1ELF\s0 共享对象时，将内部 \s-1DT_AUXILIARY\s0 字段设置为指定名称。
这告诉动态链接器共享对象的符号表应该用作共享对象 \fIname\fP 的符号表的辅助过滤器。
.Sp
如果您稍后将程序链接到此过滤器对象，那么，当您运行该程序时，动态链接器将看到 \s-1DT_AUXILIARY\s0 字段。
如果动态链接器从过滤器对象解析任何符号，它会首先检查共享对象 \&\fIname\fP 中是否有定义。 如果有，它将被用来代替过滤器对象中的定义。 共享对象
\fIname\fP 不需要存在。 因此，共享对象 \fIname\fP 可用于提供某些函数的替代实现，可能用于调试或特定于机器的性能。
.Sp
可以多次指定此选项。 \s-1DT_AUXILIARY\s0 条目将按照它们在命令行中出现的顺序创建。
.IP "\fB\-F\fP \fIname\fP" 4
.IX Item "\-F name"
.PD 0
.IP \fB\-\-filter=\fP\fIname\fP 4
.IX Item \-\-filter=name
.PD
创建 \s-1ELF\s0 共享对象时，将内部 \s-1DT_FILTER\s0 字段设置为指定名称。
这告诉动态链接器正在创建的共享对象的符号表应该用作共享对象 \fIname\fP 的符号表的过滤器。
.Sp
如果稍后将程序链接到此过滤器对象，则在运行该程序时，动态链接器将看到 \s-1DT_FILTER\s0 字段。
动态链接器会像往常一样根据过滤器对象的符号表解析符号，但它实际上会链接到在共享对象 \fIname\fP 中找到的定义。 因此，过滤器对象可用于选择对象
\&\fIname\fP 提供的符号子集。
.Sp
一些较旧的链接器在整个编译工具链中使用 \fB\-F\fP 选项来指定输入和输出目标文件的目标文件格式。 \s-1GNU\s0 链接器为此目的使用其他机制:
\&\fB\-b\fP、\fB\-\-format\fP、\fB\-\-oformat\fP 选项、链接描述文件中的 \&\f(CW\*(C`TARGET\*(C'\fP 命令和
\f(CW\*(C`GNUTARGET\*(C'\fP 环境变量。 当不创建 \s-1ELF\s0 共享对象时，\s-1GNU\s0 链接器将忽略 \fB\-F\fP
选项。
.IP \fB\-fini=\fP\fIname\fP 4
.IX Item \-fini=name
创建 \s-1ELF\s0 可执行文件或共享对象时，在卸载可执行文件或共享对象时调用 \s-1NAME\s0，方法是将 \s-1DT_FINI\s0
设置为函数的地址。 默认情况下，链接器使用 \f(CW\*(C`_fini\*(C'\fP 作为调用的函数。
.IP \fB\-g\fP 4
.IX Item \-g
忽略。提供与其他工具的兼容性。
.IP "\fB\-G\fP \fIvalue\fP" 4
.IX Item "\-G value"
.PD 0
.IP \fB\-\-gpsize=\fP\fIvalue\fP 4
.IX Item \-\-gpsize=value
.PD
使用 \s-1GP\s0 寄存器将要优化的对象的最大大小设置为 \&\fIsize\fP。 这只对目标文件格式有意义，例如 \&\s-1MIPS
ELF\s0，支持将大小目标放在不同的部分。 对于其他目标文件格式，这将被忽略。
.IP "\fB\-h\fP \fIname\fP" 4
.IX Item "\-h name"
.PD 0
.IP \fB\-soname=\fP\fIname\fP 4
.IX Item \-soname=name
.PD
创建 \s-1ELF\s0 共享对象时，将内部 \s-1DT_SONAME\s0 字段设置为指定名称。 当可执行文件与具有
\s-1DT_SONAME\s0 字段的共享对象链接时，当可执行文件运行时，动态链接器将尝试加载由 \s-1DT_SONAME\s0
字段指定的共享对象，而不是使用给链接器的文件名。
.IP \fB\-i\fP 4
.IX Item \-i
执行增量链接 (与选项 \fB\-r\fP).
.IP \fB\-init=\fP\fIname\fP 4
.IX Item \-init=name
创建 \s-1ELF\s0 可执行文件或共享对象时，在加载可执行文件或共享对象时调用 \s-1NAME\s0，方法是将 \s-1DT_INIT\s0
设置为函数的地址。 默认情况下，链接器使用 \f(CW\*(C`_init\*(C'\fP 作为调用的函数。
.IP "\fB\-l\fP \fInamespec\fP" 4
.IX Item "\-l namespec"
.PD 0
.IP \fB\-\-library=\fP\fInamespec\fP 4
.IX Item \-\-library=namespec
.PD
将 \fInamespec\fP 指定的存档或目标文件添加到要链接的文件列表中。 此选项可以使用任意次数。 如果 \fInamespec\fP 的格式为
\fI:filename\fP，\fBld\fP 将在库路径中搜索名为 \fIfilename\fP 的文件，否则它将在库路径中搜索名为 \fIlibnamespec.a\fP
的文件。
.Sp
在支持共享库的系统上，\fBld\fP 也可以搜索 \fIlibnamespec.a\fP 以外的文件。 具体来说，在 \s-1ELF\s0 和 SunOS
系统上，\fBld\fP 将在目录中搜索名为 \fIlibnamespec.so\fP 的库，然后再搜索名为 \&\fIlibnamespec.a\fP 的库。
(按照惯例，\f(CW\*(C`.so\*(C'\fP 扩展名表示共享库。) 请注意，此行为不适用于 \fI:filename\fP，它始终指定名为
\&\fIfilename\fP 的文件。
.Sp
链接器只会在命令行中指定的位置搜索存档一次。 如果存档定义了一个符号，而该符号在命令行上出现在存档之前的某个对象中未定义，则链接器将从存档中包含适当的
file(s)。 但是，稍后出现在命令行中的对象中的未定义符号不会导致链接器再次搜索存档。
.Sp
有关强制链接器多次搜索档案的方法，请参见 \fB\-(\fP 选项。
.Sp
您可以在命令行中多次列出同一个存档。
.Sp
这种类型的存档搜索是 Unix 链接器的标准。 但是，如果您在 \s-1AIX 上使用 \fBld\fP，\s0 请注意它与 \s-1AIX\s0
链接器的行为不同。
.IP "\fB\-L\fP \fIsearchdir\fP" 4
.IX Item "\-L searchdir"
.PD 0
.IP \fB\-\-library\-path=\fP\fIsearchdir\fP 4
.IX Item \-\-library\-path=searchdir
.PD
将路径 \fIsearchdir\fP 添加到 \fBld\fP 将搜索存档库和 \fBld\fP 控制脚本的路径列表中。 您可以多次使用此选项。
按照在命令行中指定的顺序搜索目录。 在默认目录之前搜索命令行中指定的目录。 所有 \&\fB\-L\fP 选项适用于所有 \fB\-l\fP
选项，无论选项出现的顺序如何。 除非指定 \fB\-T\fP 选项，否则 \fB\-L\fP 选项不会影响 \fBld\fP 搜索链接描述文件的方式。
.Sp
如果 \fIsearchdir\fP 以 \f(CW\*(C`=\*(C'\fP 或 \f(CW$SYSROOT\fP 开头，则此前缀将由 \fIsysroot prefix\fP
替换，由 \&\fB\-\-sysroot\fP 选项控制，或在配置链接器时指定。
.Sp
搜索的默认路径集 (未指定 \&\fB\-L\fP) 取决于 \fBld\fP 使用的仿真模式，在某些情况下还取决于它的配置方式。
.Sp
也可以使用 \&\f(CW\*(C`SEARCH_DIR\*(C'\fP 命令在链接脚本中指定路径。
在链接描述文件出现在命令行中的位置搜索以这种方式指定的目录。
.IP "\fB\-m\fP \fIemulation\fP" 4
.IX Item "\-m emulation"
模拟 \fIemulation\fP 链接器。 您可以使用 \fB\-\-verbose\fP 或 \fB\-V\fP 选项列出可用的仿真。
.Sp
如果未使用 \fB\-m\fP 选项，则仿真取自 \&\f(CW\*(C`LDEMULATION\*(C'\fP 环境变量 (如果已定义)。
.Sp
否则，默认仿真取决于链接器的配置方式。
.IP \fB\-M\fP 4
.IX Item \-M
.PD 0
.IP \fB\-\-print\-map\fP 4
.IX Item \-\-print\-map
.PD
将链接 map 打印到标准输出。 链接 map 提供有关链接的信息，包括以下内容:
.RS 4
.IP \(bu 4
目标文件映射到内存的位置。
.IP \(bu 4
如何分配常用符号。
.IP \(bu 4
链接中包含所有存档成员，并提及导致存档成员被引入的符号。
.IP \(bu 4
分配给符号的值。
.Sp
注意 \- 其值由涉及引用相同符号的先前值的表达式计算的符号可能不会在链接 map 中显示正确的结果。
这是因为链接器丢弃了中间结果，只保留了表达式的最终值。 在这种情况下，链接器将显示用方括号括起来的最终值。 因此，例如一个包含以下内容的链接描述文件:
.Sp
.Vb 3
\& foo = 1 \& foo = foo * 4 \& foo = foo + 8
.Ve
.Sp
如果使用 \fB\-M\fP 选项，将在链接 map 中产生以下输出:
.Sp
.Vb 3
\& 0x00000001 foo = 0x1 \& [0x0000000c] foo = (foo * 0x4)  \& [0x0000000c]
foo = (foo + 0x8)
.Ve
.Sp
有关链接描述文件中表达式的更多信息，请参见 \fBExpressions\fP。
.IP \(bu 4
\s-1GNU\s0 属性如何合并。
.Sp
当链接器将输入 .note.gnu.property 部分合并到一个输出 \&.note.gnu.property 部分时，一些属性将被删除或更新。
这些操作在链接 map 中报告。 例如:
.Sp
.Vb 1
\& 删除属性 0xc0000002 以合并 foo.o (0x1) 和 bar.o (未找到)
.Ve
.Sp
这表示在合并 \fIfoo.o\fP (其属性 0xc0000002 值为 0x1) 和没有属性 0xc0000002 的 \fIbar.o\fP 中的属性时，属性
0xc0000002 从输出中删除。
.Sp
.Vb 1
\& 更新属性 0xc0010001 (0x1) 以合并 foo.o (0x1) 和 bar.o (0x1)
.Ve
.Sp
这表示在合并 \fIfoo.o\fP (其 0xc0010001 属性值为 0x1) 和 \fIbar.o\fP (其 0xc0010001 属性值为 0x1)
中的属性时，属性 0xc0010001 值在输出中更新为 0x1。
.RE
.RS 4
.RE
.IP \fB\-\-print\-map\-discarded\fP 4
.IX Item \-\-print\-map\-discarded
.PD 0
.IP \fB\-\-no\-print\-map\-discarded\fP 4
.IX Item \-\-no\-print\-map\-discarded
.PD
打印 (或不打印) 链接 map 中丢弃和垃圾收集部分的列表。 默认启用。
.IP \fB\-n\fP 4
.IX Item \-n
.PD 0
.IP \fB\-\-nmagic\fP 4
.IX Item \-\-nmagic
.PD
关闭部分的页面对齐，并禁用对共享库的链接。 如果输出格式支持 Unix 样式的幻数，则将输出标记为 \f(CW\*(C`NMAGIC\*(C'\fP。
.IP \fB\-N\fP 4
.IX Item \-N
.PD 0
.IP \fB\-\-omagic\fP 4
.IX Item \-\-omagic
.PD
将文本和数据部分设置为可读和可写。 此外，不要对字段进行页面对齐，并禁用对共享库的链接。 如果输出格式支持 Unix 样式的幻数，则将输出标记为
\f(CW\*(C`OMAGIC\*(C'\fP。注意: 虽然 PE\-COFF 目标允许可写文本部分，但它不符合 Microsoft 发布的格式规范。
.IP \fB\-\-no\-omagic\fP 4
.IX Item \-\-no\-omagic
该选项抵消了 \fB\-N\fP 选项的大部分影响。 它将文本段设置为只读，并强制字段页对齐。 注意 \- 此选项不会启用针对共享库的链接。 为此使用
\fB\-Bdynamic\fP。
.IP "\fB\-o\fP \fIoutput\fP" 4
.IX Item "\-o output"
.PD 0
.IP \fB\-\-output=\fP\fIoutput\fP 4
.IX Item \-\-output=output
.PD
使用 \fIoutput\fP 作为 \fBld\fP 制作的程序的名称; 如果未指定此选项，则默认使用名称 \fIa.out\fP。 脚本命令
\f(CW\*(C`OUTPUT\*(C'\fP 也可以指定输出文件名。
.IP \fB\-\-dependency\-file=\fP\fIdepfile\fP 4
.IX Item \-\-dependency\-file=depfile
写一个 \fIdependency file\fP 到 \fIdepfile\fP。 该文件包含适用于 \f(CW\*(C`make\*(C'\fP
的规则，描述输出文件和为生成它而读取的所有输入文件。 输出类似于带有 \fB\-M \-MP\fP 的编译器输出。 请注意，没有像编译器的 \fB\-MM\fP
这样的选项来排除 \*(L"system files\*(R" (这在链接器中不是一个明确指定的概念，不像 \*(L"system
headers\*(R` 在编译器中)。 因此，\&\fB\-\-dependency\-file\fP
的输出始终特定于生成它的安装的确切状态，并且不应在未经仔细编辑的情况下复制到分发的 makefile 中。
.IP "\fB\-O\fP \fIlevel\fP" 4
.IX Item "\-O level"
如果 \fIlevel\fP 是大于零的数值，则 \fBld\fP 优化输出。 这可能需要更长的时间，因此可能只应为最终的二进制文件启用。 目前这个选项只影响
\s-1ELF\s0 共享库的生成。 链接器的 Future 版本可能会更多地使用此选项。 此外，当前对于此选项的不同非零值，链接器的行为没有区别。
同样，这可能会随着 future 版本的发布而改变。
.IP "\fB\-plugin\fP \fIname\fP" 4
.IX Item "\-plugin name"
在链接过程中涉及一个插件。 \fIname\fP 参数是插件的绝对文件名。
通常这个参数是由编译器自动添加的，当使用链接时间优化时，但用户也可以根据需要添加自己的插件。
.Sp
请注意，编译器生成的插件的位置与 \fBar\fP、\fBnm\fP 和 \&\fBranlib\fP 程序搜索其插件的位置不同。
为了让这些命令使用基于编译器的插件，必须首先将其复制到 \fI${libdir}/bfd\-plugins\fP 目录中。 所有基于 gcc
的链接器插件都是向后兼容的，所以只复制最新的就足够了。
.IP \fB\-\-push\-state\fP 4
.IX Item \-\-push\-state
\fB\-\-push\-state\fP 允许保留管理输入文件处理的标志的当前状态，以便它们都可以通过一个相应的 \fB\-\-pop\-state\fP 选项恢复。
.Sp
涵盖的选项有:
\fB\-Bdynamic\fP、\fB\-Bstatic\fP、\&\fB\-dn\fP、\fB\-dy\fP、\fB\-call_shared\fP、\fB\-non_shared\fP、\&\fB\-static\fP、\fB\-N\fP、\fB\-n\fP、\fB\-\-whole\-archive\fP、\&\fB\-\-no\-whole\-archive\fP、\fB\-r\fP、\fB\-Ur\fP、\&\fB\-\-copy\-dt\-needed\-entries\fP、\fB\-\-no\-copy\-dt\-needed\-entries\fP、\&\fB\-\-as\-needed\fP、\fB\-\-no\-as\-needed\fP
和 \fB\-a\fP。
.Sp
该选项的一个目标是 \fIpkg\-config\fP 的规范。 当与 \fB\-\-libs\fP 选项一起使用时，将列出所有可能需要的库，然后可能一直与之链接。
最好返回如下内容:
.Sp
.Vb 1
\&\-Wl,\-\-push\-state,\-\- 根据需要 \-libone \-libtwo\-Wl,\-\-pop\-state
.Ve
.IP \fB\-\-pop\-state\fP 4
.IX Item \-\-pop\-state
撤消 \-\-push\-state 的影响，恢复管理输入文件处理的标志的先前值。
.IP \fB\-q\fP 4
.IX Item \-q
.PD 0
.IP \fB\-\-emit\-relocs\fP 4
.IX Item \-\-emit\-relocs
.PD
在完全链接的可执行文件中保留重定位部分和内容。 后链接分析和优化工具可能需要此信息才能对可执行文件执行正确的修改。 这会导致更大的可执行文件。
.Sp
此选项当前仅在 \s-1ELF\s0 平台上受支持。
.IP \fB\-\-force\-dynamic\fP 4
.IX Item \-\-force\-dynamic
强制输出文件具有动态部分。 此选项特定于 VxWorks 目标。
.IP \fB\-r\fP 4
.IX Item \-r
.PD 0
.IP \fB\-\-relocatable\fP 4
.IX Item \-\-relocatable
.PD
生成可重定位输出 \-\- 即生成一个输出文件，该文件又可以用作 \fBld\fP 的输入。 这通常称为 \fIpartial linking\fP。
作为副作用，在支持标准 Unix 幻数的环境中，此选项还会将输出文件的幻数设置为 \&\f(CW\*(C`OMAGIC\*(C'\fP。
如果未指定此选项，则会生成绝对文件。 链接 \*(C + 程序时，此选项 \fIwill not\fP 将引用解析为构造函数; 为此，请使用 \fB\-Ur\fP。
.Sp
当输入文件的格式与输出文件的格式不同时，仅当该输入文件不包含任何重定位时才支持部分链接。 不同的输出格式可以有进一步的限制; 例如，某些
\f(CW\*(C`a.out\*(C'\fP\-based 格式根本不支持与其他格式的输入文件的部分链接。
.Sp
此选项与 \fB\-i\fP 的作用相同。
.IP "\fB\-R\fP \fIfilename\fP" 4
.IX Item "\-R filename"
.PD 0
.IP \fB\-\-just\-symbols=\fP\fIfilename\fP 4
.IX Item \-\-just\-symbols=filename
.PD
从 \fIfilename\fP 读取符号名称及其地址，但不要重新定位它或将其包含在输出中。 这允许您的输出文件象征性地引用其他程序中定义的内存的绝对位置。
您可以多次使用此选项。
.Sp
为了与其他 \s-1ELF\s0 链接器兼容，如果 \fB\-R\fP 选项后跟目录名而不是文件名，则将其视为 \fB\-rpath\fP 选项。
.IP \fB\-s\fP 4
.IX Item \-s
.PD 0
.IP \fB\-\-strip\-all\fP 4
.IX Item \-\-strip\-all
.PD
省略输出文件中的所有符号信息。
.IP \fB\-S\fP 4
.IX Item \-S
.PD 0
.IP \fB\-\-strip\-debug\fP 4
.IX Item \-\-strip\-debug
.PD
从输出文件中省略调试器符号信息 (但不是所有符号)。
.IP \fB\-\-strip\-discarded\fP 4
.IX Item \-\-strip\-discarded
.PD 0
.IP \fB\-\-no\-strip\-discarded\fP 4
.IX Item \-\-no\-strip\-discarded
.PD
省略 (或不省略) 废弃部分中定义的全局符号。 默认启用。
.IP \fB\-t\fP 4
.IX Item \-t
.PD 0
.IP \fB\-\-trace\fP 4
.IX Item \-\-trace
.PD
在 \fBld\fP 处理输入文件时打印它们的名称。 如果 \&\fB\-t\fP 被给出两次，那么档案中的成员也会被打印出来。 \&\fB\-t\fP
输出对于生成链接中涉及的所有目标文件和脚本的列表很有用，例如，在为链接器错误报告打包文件时。
.IP "\fB\-T\fP \fIscriptfile\fP" 4
.IX Item "\-T scriptfile"
.PD 0
.IP \fB\-\-script=\fP\fIscriptfile\fP 4
.IX Item \-\-script=scriptfile
.PD
使用 \fIscriptfile\fP 作为链接描述文件。 此脚本替换 \&\fBld\fP's 默认链接器脚本 (而不是添加到它)，因此
\&\fIcommandfile\fP 必须指定描述输出文件所需的一切。 如果当前目录中不存在 \fIscriptfile\fP，则
\f(CW\*(C`ld\*(C'\fP 会在任何前面的 \fB\-L\fP 选项指定的目录中查找它。 多个 \fB\-T\fP 选项累积。
.IP "\fB\-dT\fP \fIscriptfile\fP" 4
.IX Item "\-dT scriptfile"
.PD 0
.IP \fB\-\-default\-script=\fP\fIscriptfile\fP 4
.IX Item \-\-default\-script=scriptfile
.PD
使用 \fIscriptfile\fP 作为默认链接描述文件。
.Sp
此选项类似于 \fB\-\-script\fP 选项，只是脚本的处理被延迟到命令行的其余部分处理完之后。 这允许放置在命令行上
\&\fB\-\-default\-script\fP 选项之后的选项影响链接器脚本的行为，这在用户无法直接控制链接器命令行时可能很重要。
(例如，因为命令行是由另一个工具构建的，例如 \&\fBgcc\fP)。
.IP "\fB\-u\fP \fIsymbol\fP" 4
.IX Item "\-u symbol"
.PD 0
.IP \fB\-\-undefined=\fP\fIsymbol\fP 4
.IX Item \-\-undefined=symbol
.PD
强制将 \fIsymbol\fP 作为未定义符号输入到输出文件中。 例如，这样做可能会触发标准库中附加模块的链接。 \fB\-u\fP
可以重复使用不同的选项参数来输入额外的未定义符号。 此选项等效于 \f(CW\*(C`EXTERN\*(C'\fP 链接描述文件命令。
.Sp
如果此选项用于强制将其他模块拉入链接，并且如果符号保持未定义是错误的，则应改用选项 \fB\-\-require\-defined\fP。
.IP \fB\-\-require\-defined=\fP\fIsymbol\fP 4
.IX Item \-\-require\-defined=symbol
要求在输出文件中定义 \fIsymbol\fP。 此选项与选项 \fB\-\-undefined\fP 相同，只是如果 \fIsymbol\fP
未在输出文件中定义，则链接器将发出错误并退出。 通过同时使用 \&\f(CW\*(C`EXTERN\*(C'\fP、\f(CW\*(C`ASSERT\*(C'\fP 和
\f(CW\*(C`DEFINED\*(C'\fP，可以在链接描述文件中实现相同的效果。 此选项可以多次使用以需要额外的符号。
.IP \fB\-Ur\fP 4
.IX Item \-Ur
对于除 \*(C + 程序之外的任何其他程序，此选项等同于 \&\fB\-r\fP:，它生成可重定位的输出 \-\- 即，一个输出文件又可以作为 \fBld\fP
的输入。 链接 \*(C + 程序时，\fB\-Ur\fP \&\fIdoes\fP 将引用解析为构造函数，这与 \fB\-r\fP 不同。 在本身与 \fB\-Ur\fP
链接的文件上使用 \fB\-Ur\fP 不起作用; 一旦构建了构造函数表，就无法将其添加到其中。 仅对最后部分链接使用 \fB\-Ur\fP，对其他链接使用
\&\fB\-r\fP。
.IP \fB\-\-orphan\-handling=\fP\fI\s-1MODE\s0\fP 4
.IX Item \-\-orphan\-handling=MODE
控制孤立部分的处理方式。 孤立部分是链接描述文件中未具体提及的部分。
.Sp
\&\fI\s-1MODE\s0\fP 可以具有以下任何值:
.RS 4
.ie  n .IP """place""" 4
.el .IP "\f(CWplace\fR" 4
.IX Item place
按照 \fBOrphan Sections\fP 中描述的策略，将孤立部分放入合适的输出部分。 选项 \&\fB\-\-unique\fP 也会影响截面的放置方式。
.ie  n .IP """discard""" 4
.el .IP "\f(CWdiscard\fR" 4
.IX Item discard
所有孤立部分都将被丢弃，方法是将它们放在 \&\fB/DISCARD/\fP 部分中。
.ie  n .IP """warn""" 4
.el .IP "\f(CWwarn\fR" 4
.IX Item warn
链接器将放置与 \f(CW\*(C`place\*(C'\fP 一样的孤立部分，并发出警告。
.ie  n .IP """error""" 4
.el .IP "\f(CWerror\fR" 4
.IX Item error
如果找到任何孤立部分，链接器将退出并出错。
.RE
.RS 4
.Sp
如果未给出 \fB\-\-orphan\-handling\fP，则默认为 \f(CW\*(C`place\*(C'\fP。
.RE
.IP \fB\-\-unique[=\fP\fI\s-1SECTION\s0\fP\fB]\fP 4
.IX Item \-\-unique[=SECTION]
为每个匹配 \&\fI\s-1SECTION\s0\fP 的输入部分创建一个单独的输出部分，或者如果缺少可选的通配符 \fI\s-1SECTION\s0\fP
参数，则为每个孤立的输入部分创建一个单独的输出部分。 孤立部分是链接描述文件中未具体提及的部分。 您可以在命令行中多次使用此选项;
它阻止正常合并具有相同名称的输入节，覆盖链接描述文件中的输出节分配。
.IP \fB\-v\fP 4
.IX Item \-v
.PD 0
.IP \fB\-\-version\fP 4
.IX Item \-\-version
.IP \fB\-V\fP 4
.IX Item \-V
.PD
显示 \fBld\fP 的版本号。 \fB\-V\fP 选项还列出了支持的仿真。
.IP \fB\-x\fP 4
.IX Item \-x
.PD 0
.IP \fB\-\-discard\-all\fP 4
.IX Item \-\-discard\-all
.PD
删除所有本地符号。
.IP \fB\-X\fP 4
.IX Item \-X
.PD 0
.IP \fB\-\-discard\-locals\fP 4
.IX Item \-\-discard\-locals
.PD
删除所有临时局部符号。 (这些符号以系统特定的本地标签前缀开头，通常 \fB.L\fP 用于 \s-1ELF\s0 系统或 \fBL\fP 用于传统 a.out
系统。)
.IP "\fB\-y\fP \fIsymbol\fP" 4
.IX Item "\-y symbol"
.PD 0
.IP \fB\-\-trace\-symbol=\fP\fIsymbol\fP 4
.IX Item \-\-trace\-symbol=symbol
.PD
打印出现 \fIsymbol\fP 的每个链接文件的名称。 这个选项可以给出任意次数。 在许多系统上，有必要在前面加上下划线。
.Sp
当您的链接中有未定义的符号但不知道引用来自何处时，此选项很有用。
.IP "\fB\-Y\fP \fIpath\fP" 4
.IX Item "\-Y path"
将 \fIpath\fP 添加到默认库搜索路径。 存在此选项是为了与 Solaris 兼容。
.IP "\fB\-z\fP \fIkeyword\fP" 4
.IX Item "\-z keyword"
公认的关键字是:
.RS 4
.IP \fBcall\-nop=prefix\-addr\fP 4
.IX Item call\-nop=prefix\-addr
.PD 0
.IP \fBcall\-nop=suffix\-nop\fP 4
.IX Item call\-nop=suffix\-nop
.IP \fBcall\-nop=prefix\-\fP\fIbyte\fP 4
.IX Item call\-nop=prefix\-byte
.IP \fBcall\-nop=suffix\-\fP\fIbyte\fP 4
.IX Item call\-nop=suffix\-byte
.PD
在通过其 \s-1GOT\s0 插槽将间接调用转换为本地定义的函数 foo 时指定 1 字节 \f(CW\*(C`NOP\*(C'\fP 填充。
\&\fBcall\-nop=prefix\-addr\fP 生成 \f(CW\*(C`0x67 call foo\*(C'\fP。
\&\fBcall\-nop=suffix\-nop\fP 生成 \f(CW\*(C`call foo 0x90\*(C'\fP。
\&\fBcall\-nop=prefix\-\fP\fIbyte\fP generates \f(CW\*(C`\fP\f(CIbyte\f(CW call foo\*(C'\fP.   \&\fBcall\-nop=suffix\-\fP\fIbyte\fP generates \f(CW\*(C`call foo \fP\f(CIbyte\f(CW\*(C'\fP.   支持 i386 和 x86_64。
.IP \fBcet\-report=none\fP 4
.IX Item cet\-report=none
.PD 0
.IP \fBcet\-report=warning\fP 4
.IX Item cet\-report=warning
.IP \fBcet\-report=error\fP 4
.IX Item cet\-report=error
.PD
指定如何在输入 .note.gnu.property 部分报告缺少的 \s-1GNU_PROPERTY_X86_FEATURE_1_IBT\s0 和
\&\s-1GNU_PROPERTY_X86_FEATURE_1_SHSTK\s0 属性。
\fBcet\-report=none\fP，这是默认值，将使链接器不报告输入文件中缺少的属性。 \&\fBcet\-report=warning\fP
将使链接器针对输入文件中缺少的属性发出警告。 \fBcet\-report=error\fP 将使链接器发出输入文件中缺少属性的错误。 请注意，\fBibt\fP
将关闭丢失的 \&\s-1GNU_PROPERTY_X86_FEATURE_1_IBT\s0 属性报告，\fBshstk\fP 将关闭丢失的
\s-1GNU_PROPERTY_X86_FEATURE_1_SHSTK\s0 属性报告。 支持 Linux/i386 和 Linux/x86_64。
.IP \fBcombreloc\fP 4
.IX Item combreloc
.PD 0
.IP \fBnocombreloc\fP 4
.IX Item nocombreloc
.PD
组合多个动态重定位部分并排序以改进动态符号查找缓存。 如果 \fBnocombreloc\fP，请不要这样做。
.IP \fBcommon\fP 4
.IX Item common
.PD 0
.IP \fBnocommon\fP 4
.IX Item nocommon
.PD
在可重定位链接期间生成具有 \s-1STT_COMMON\s0 类型的公共符号。 如果 \fBnocommon\fP，请使用
\s-1STT_OBJECT\s0 类型。
.IP \fBcommon\-page\-size=\fP\fIvalue\fP 4
.IX Item common\-page\-size=value
将最常用的页面大小设置为 \fIvalue\fP。 如果系统使用这种大小的页面，内存映像布局将被优化以最小化内存页面。
.IP \fBdefs\fP 4
.IX Item defs
报告来自常规目标文件的未解析符号引用。 即使链接器正在创建非符号共享库，也会这样做。 该选项与 \fB\-z undefs\fP 相反。
.IP \fBdynamic\-undefined\-weak\fP 4
.IX Item dynamic\-undefined\-weak
.PD 0
.IP \fBnodynamic\-undefined\-weak\fP 4
.IX Item nodynamic\-undefined\-weak
.PD
在构建动态对象时使未定义的弱符号动态化，如果它们是从常规目标文件中引用的，并且没有通过符号可见性或版本控制强制本地化。 如果
\&\fBnodynamic\-undefined\-weak\fP，不要让它们动态。
如果两个选项都没有给出，则目标可能默认为任一选项生效，或者使未定义的弱符号的一些其他选择成为动态的。 并非所有目标都支持这些选项。
.IP \fBexecstack\fP 4
.IX Item execstack
将对象标记为需要可执行栈。
.IP \fBglobal\fP 4
.IX Item global
此选项仅在构建共享对象时才有意义。 它使此共享对象定义的符号可用于随后加载的库的符号解析。
.IP \fBglobalaudit\fP 4
.IX Item globalaudit
此选项仅在构建动态可执行文件时才有意义。 此选项通过在 \f(CW\*(C`DT_FLAGS_1\*(C'\fP 动态标记中设置
\f(CW\*(C`DF_1_GLOBAUDIT\*(C'\fP 位来将可执行文件标记为需要全局审计。 全局审计要求为应用程序加载的所有动态对象运行通过
\fB\-\-depaudit\fP 或 \fB\-P\fP 命令行选项定义的任何审计库。
.IP \fBibtplt\fP 4
.IX Item ibtplt
生成启用英特尔间接分支跟踪 (\s-1IBT\s0) 的 \s-1PLT\s0 条目。 支持 Linux/i386 和 Linux/x86_64。
.IP \fBibt\fP 4
.IX Item ibt
在 .note.gnu.property 部分生成 \s-1GNU_PROPERTY_X86_FEATURE_1_IBT\s0 以指示与 \s-1IBT
的兼容性。\s0 这也意味着 \fBibtplt\fP。 支持 Linux/i386 和 Linux/x86_64。
.IP \fBindirect\-extern\-access\fP 4
.IX Item indirect\-extern\-access
.PD 0
.IP \fBnoindirect\-extern\-access\fP 4
.IX Item noindirect\-extern\-access
.PD
在 \&.note.gnu.property 部分生成
\s-1GNU_PROPERTY_1_NEEDED_INDIRECT_EXTERN_ACCESS\s0
以指示目标文件需要规范的函数指针并且不能与复制重定位一起使用。 此选项还暗示 \fBnoextern\-protected\-data\fP 和
\&\fBnocopyreloc\fP。 支持 i386 和 x86\-64。
.Sp
\&\fBnoindirect\-extern\-access\fP 从 .note.gnu.property 部分删除
\&\s-1GNU_PROPERTY_1_NEEDED_INDIRECT_EXTERN_ACCESS\s0。
.IP \fBinitfirst\fP 4
.IX Item initfirst
此选项仅在构建共享对象时才有意义。 它标记对象，以便其运行时初始化将发生在同时引入进程的任何其他对象的运行时初始化之前。
类似地，对象的运行时终结将发生在任何其他对象的运行时终结之后。
.IP \fBinterpose\fP 4
.IX Item interpose
指定动态加载程序应修改其符号搜索顺序，以便此共享库中的符号插入所有其他未如此标记的共享库。
.IP \fBunique\fP 4
.IX Item unique
.PD 0
.IP \fBnounique\fP 4
.IX Item nounique
.PD
在生成共享库或其他可动态加载的 \s-1ELF\s0 对象时，将其标记为应该 (默认情况下) 仅加载一次，并且仅在主命名空间中 (使用
\f(CW\*(C`dlmopen\*(C'\fP). 这主要用于标记基础库，如 libc、libpthread
等，除非它们是它们自己的唯一实例，否则它们通常不会正确赋值。这种行为可以被 \f(CW\*(C`dlmopen\*(C'\fP
调用者覆盖，并且不适用于某些加载机制 (例如审计库)。
.IP \fBlam\-u48\fP 4
.IX Item lam\-u48
在 .note.gnu.property 部分生成 \s-1GNU_PROPERTY_X86_FEATURE_1_LAM_U48\s0 以指示与
Intel\s-1LAM_U48 的兼容性。\s0 支持 Linux/x86_64。
.IP \fBlam\-u57\fP 4
.IX Item lam\-u57
在 .note.gnu.property 部分生成 \s-1GNU_PROPERTY_X86_FEATURE_1_LAM_U57\s0 以指示与
Intel\s-1LAM_U57 的兼容性。\s0 支持 Linux/x86_64。
.IP \fBlam\-u48\-report=none\fP 4
.IX Item lam\-u48\-report=none
.PD 0
.IP \fBlam\-u48\-report=warning\fP 4
.IX Item lam\-u48\-report=warning
.IP \fBlam\-u48\-report=error\fP 4
.IX Item lam\-u48\-report=error
.PD
指定如何在输入 .note.gnu.property 部分报告缺少的 \s-1GNU_PROPERTY_X86_FEATURE_1_LAM_U48\s0
属性。 \&\fBlam\-u48\-report=none\fP，这是默认值，将使链接器不报告输入文件中缺少的属性。
\&\fBlam\-u48\-report=warning\fP 将使链接器针对输入文件中缺少的属性发出警告。 \fBlam\-u48\-report=error\fP
将使链接器发出输入文件中缺少属性的错误。 支持 Linux/x86_64。
.IP \fBlam\-u57\-report=none\fP 4
.IX Item lam\-u57\-report=none
.PD 0
.IP \fBlam\-u57\-report=warning\fP 4
.IX Item lam\-u57\-report=warning
.IP \fBlam\-u57\-report=error\fP 4
.IX Item lam\-u57\-report=error
.PD
指定如何在输入 .note.gnu.property 部分报告缺少的 \s-1GNU_PROPERTY_X86_FEATURE_1_LAM_U57\s0
属性。 \&\fBlam\-u57\-report=none\fP，这是默认值，将使链接器不报告输入文件中缺少的属性。
\&\fBlam\-u57\-report=warning\fP 将使链接器针对输入文件中缺少的属性发出警告。 \fBlam\-u57\-report=error\fP
将使链接器发出输入文件中缺少属性的错误。 支持 Linux/x86_64。
.IP \fBlam\-report=none\fP 4
.IX Item lam\-report=none
.PD 0
.IP \fBlam\-report=warning\fP 4
.IX Item lam\-report=warning
.IP \fBlam\-report=error\fP 4
.IX Item lam\-report=error
.PD
指定如何在输入 .note.gnu.property 部分报告缺少的 \s-1GNU_PROPERTY_X86_FEATURE_1_LAM_U48\s0
和 \&\s-1GNU_PROPERTY_X86_FEATURE_1_LAM_U57\s0 属性。
\fBlam\-report=none\fP，这是默认值，将使链接器不报告输入文件中缺少的属性。 \&\fBlam\-report=warning\fP
将使链接器针对输入文件中缺少的属性发出警告。 \fBlam\-report=error\fP 将使链接器发出输入文件中缺少属性的错误。 支持
Linux/x86_64。
.IP \fBlazy\fP 4
.IX Item lazy
当生成可执行文件或共享库时，标记它以告诉动态链接器将函数调用延迟到调用函数时 (惰性绑定)，而不是加载时。 惰性绑定是默认设置。
.IP \fBloadfltr\fP 4
.IX Item loadfltr
指定在运行时立即处理对象的过滤器。
.IP \fBmax\-page\-size=\fP\fIvalue\fP 4
.IX Item max\-page\-size=value
将支持的最大内存页面大小设置为 \fIvalue\fP。
.IP \fBmuldefs\fP 4
.IX Item muldefs
允许多个定义。
.IP \fBnocopyreloc\fP 4
.IX Item nocopyreloc
禁用链接器生成的 .dynbss 变量用于代替共享库中定义的变量。 可能导致动态文本重定位。
.IP \fBnodefaultlib\fP 4
.IX Item nodefaultlib
指定动态加载程序搜索此对象的依赖项应忽略任何默认库搜索路径。
.IP \fBnodelete\fP 4
.IX Item nodelete
指定不应在运行时卸载该对象。
.IP \fBnodlopen\fP 4
.IX Item nodlopen
指定该对象对 \f(CW\*(C`dlopen\*(C'\fP 不可用。
.IP \fBnodump\fP 4
.IX Item nodump
指定对象不能被 \f(CW\*(C`dldump\*(C'\fP 转储。
.IP \fBnoexecstack\fP 4
.IX Item noexecstack
将对象标记为不需要可执行栈。
.IP \fBnoextern\-protected\-data\fP 4
.IX Item noextern\-protected\-data
构建共享库时，不要将受保护的数据符号视为外部符号。 此选项覆盖链接器后端默认值。 它可用于解决针对编译器生成的受保护数据符号的不正确重定位。
另一个模块对受保护数据符号的更新对生成的共享库不可见。 支持 i386 和 x86\-64。
.IP \fBnoreloc\-overflow\fP 4
.IX Item noreloc\-overflow
禁用重定位溢出检查。 如果在运行时没有动态重定位溢出，这可用于禁用重定位溢出检查。 支持 x86_64。
.IP \fBnow\fP 4
.IX Item now
生成可执行文件或共享库时，将其标记为告诉动态链接器在程序启动时解析所有符号，或者在 dlopen
加载共享库时解析所有符号，而不是将函数解析延迟到首次调用函数时.
.IP \fBorigin\fP 4
.IX Item origin
指定对象需要在路径中进行 \f (CB$ORIGIN\fR 处理。
.IP \fBpack\-relative\-relocs\fP 4
.IX Item pack\-relative\-relocs
.PD 0
.IP \fBnopack\-relative\-relocs\fP 4
.IX Item nopack\-relative\-relocs
.PD
在与位置无关的可执行文件和共享库中生成紧凑的相对重定位。 它将
\f(CW\*(C`DT_RELR\*(C'\fP、\f(CW\*(C`DT_RELRSZ\*(C'\fP 和 \&\f(CW\*(C`DT_RELRENT\*(C'\fP
条目添加到动态部分。 在构建依赖于位置的可执行文件和可重定位输出时，它会被忽略。 \&\fBnopack\-relative\-relocs\fP
是默认值，它禁用紧凑相对重定位。 当链接到 \s-1GNU C\s0 库时，将在输出中添加对共享 C 库的
\&\s-1GLIBC_ABI_DT_RELR\s0 符号版本依赖项。 支持 i386 和 x86\-64。
.IP \fBrelro\fP 4
.IX Item relro
.PD 0
.IP \fBnorelro\fP 4
.IX Item norelro
.PD
在对象中创建一个 \s-1ELF\s0 \f(CW\*(C`PT_GNU_RELRO\*(C'\fP 段头。
这指定了一个内存段，如果支持的话，在重定位后应该将其设为只读。 指定小于系统页面大小的 \fBcommon\-page\-size\fP 将使此保护无效。 如果
\fBnorelro\fP，则不要创建 \s-1ELF\s0 \f(CW\*(C`PT_GNU_RELRO\*(C'\fP 段。
.IP \fBreport\-relative\-reloc\fP 4
.IX Item report\-relative\-reloc
报告链接器生成的动态相对重定位。 支持 Linux/i386 和 Linux/x86_64。
.IP \fBseparate\-code\fP 4
.IX Item separate\-code
.PD 0
.IP \fBnoseparate\-code\fP 4
.IX Item noseparate\-code
.PD
在对象中创建单独的代码 \f(CW\*(C`PT_LOAD\*(C'\fP 段标头。
这指定了一个内存段，该内存段应仅包含指令，并且必须位于与任何其他数据完全不相交的页面中。 如果使用
\fBnoseparate\-code\fP，请不要创建单独的代码 \f(CW\*(C`PT_LOAD\*(C'\fP 段。
.IP \fBshstk\fP 4
.IX Item shstk
在 .note.gnu.property 部分生成 \s-1GNU_PROPERTY_X86_FEATURE_1_SHSTK\s0 以指示与 Intel
Shadow Stack 的兼容性。 支持 Linux/i386 和 Linux/x86_64。
.IP \fBstack\-size=\fP\fIvalue\fP 4
.IX Item stack\-size=value
指定 \s-1ELF\s0 \f(CW\*(C`PT_GNU_STACK\*(C'\fP 段的栈大小。 指定零将覆盖任何默认非零大小
\&\f(CW\*(C`PT_GNU_STACK\*(C'\fP 段创建。
.IP \fBstart\-stop\-gc\fP 4
.IX Item start\-stop\-gc
.PD 0
.IP \fBnostart\-stop\-gc\fP 4
.IX Item nostart\-stop\-gc
.PD
当 \fB\-\-gc\-sections\fP 有效时，如果 \&\f(CW\*(C`SECNAME\*(C'\fP 可表示为 C 标识符并且
\&\f(CW\*(C`_\|_start_SECNAME\*(C'\fP 或 \f(CW\*(C`_\|_stop_SECNAME\*(C'\fP
由链接器合成，则从保留部分到 \f(CW\*(C`_\|_start_SECNAME\*(C'\fP 或
\f(CW\*(C`_\|_stop_SECNAME\*(C'\fP 的引用会导致所有名为 \f(CW\*(C`SECNAME\*(C'\fP 的输入部分也被保留。
\fB\-z start\-stop\-gc\fP 禁用此效果，允许对部分进行垃圾收集，就好像未定义特殊合成符号一样。 \fB\-z start\-stop\-gc\fP
对目标文件或链接描述文件中 \f(CW\*(C`_\|_start_SECNAME\*(C'\fP 或
\f(CW\*(C`_\|_stop_SECNAME\*(C'\fP 的定义没有影响。 这样的定义将阻止链接器分别提供合成的
\f(CW\*(C`_\|_start_SECNAME\*(C'\fP 或
\&\f(CW\*(C`_\|_stop_SECNAME\*(C'\fP，因此垃圾集合对这些引用进行特殊处理。
.IP \fBstart\-stop\-visibility=\fP\fIvalue\fP 4
.IX Item start\-stop\-visibility=value
为合成的 \&\f(CW\*(C`_\|_start_SECNAME\*(C'\fP 和 \f(CW\*(C`_\|_stop_SECNAME\*(C'\fP 符号指定
\s-1ELF\s0 符号可见性。 \fIvalue\fP 必须正好是 \fBdefault\fP、\&\fBinternal\fP、\fBhidden\fP 或
\fBprotected\fP。 如果没有给出 \fB\-z start\-stop\-visibility\fP 选项，则使用 \fBprotected\fP
以与历史实践兼容。 但是，强烈建议在新程序和共享库中使用 \fB\-z start\-stop\-visibility=hidden\fP，这样这些符号就不会在共享对象之间导出，这通常不是预期的。
.IP \fBtext\fP 4
.IX Item text
.PD 0
.IP \fBnotext\fP 4
.IX Item notext
.IP \fBtextoff\fP 4
.IX Item textoff
.PD
如果设置了 \s-1DT_TEXTREL\s0，即如果位置无关或共享对象在只读部分中有动态重定位，则报告错误。 \fBnotext\fP 或
\fBtextoff\fP 不报错。
.IP \fBundefs\fP 4
.IX Item undefs
在创建可执行文件或创建共享库时，不要报告来自常规目标文件的未解析符号引用。 该选项与 \fB\-z defs\fP 相反。
.IP \fBunique\-symbol\fP 4
.IX Item unique\-symbol
.PD 0
.IP \fBnounique\-symbol\fP 4
.IX Item nounique\-symbol
.PD
避免在符号字符串表中出现重复的局部符号名称。 如果使用 \fBunique\-symbol\fP，则将 ".\f(CW\*(C`number\*(C'\fP"
追加到重复的局部符号名称。 \fBnounique\-symbol\fP 是默认值。
.IP \fBx86\-64\-baseline\fP 4
.IX Item x86\-64\-baseline
.PD 0
.IP \fBx86\-64\-v2\fP 4
.IX Item x86\-64\-v2
.IP \fBx86\-64\-v3\fP 4
.IX Item x86\-64\-v3
.IP \fBx86\-64\-v4\fP 4
.IX Item x86\-64\-v4
.PD
在 .note.gnu.property 部分指定所需的 x86\-64 \s-1ISA\s0 级别。 \&\fBx86\-64\-baseline\fP 生成
\f(CW\*(C`GNU_PROPERTY_X86_ISA_1_BASELINE\*(C'\fP。 \&\fBx86\-64\-v2\fP 生成
\f(CW\*(C`GNU_PROPERTY_X86_ISA_1_V2\*(C'\fP。 \&\fBx86\-64\-v3\fP 生成
\f(CW\*(C`GNU_PROPERTY_X86_ISA_1_V3\*(C'\fP。 \&\fBx86\-64\-v4\fP 生成
\f(CW\*(C`GNU_PROPERTY_X86_ISA_1_V4\*(C'\fP。 支持 Linux/i386 和 Linux/x86_64。
.RE
.RS 4
.Sp
为了与 Solaris 兼容，其他关键字将被忽略。
.RE
.IP "\fB\-(\fP \fIarchives\fP \fB\-)\fP" 4
.IX Item "\-( archives \-)"
.PD 0
.IP "\fB\-\-start\-group\fP \fIarchives\fP \fB\-\-end\-group\fP" 4
.IX Item "\-\-start\-group archives \-\-end\-group"
.PD
\fIarchives\fP 应该是一个归档文件列表。 它们可以是明确的文件名，也可以是 \fB\-l\fP 选项。
.Sp
重复搜索指定的档案，直到没有新的未定义引用被创建。 通常，只会按照在命令行中指定的顺序搜索一次存档。
如果需要该存档中的符号来解析稍后出现在命令行中的存档中的对象引用的未定义符号，则链接器将无法解析该引用。
通过对档案进行分组，它们将被反复搜索，直到所有可能的引用都被解决。
.Sp
使用此选项会产生显着的性能成本。 最好只在两个或多个档案之间有不可避免的循环引用时才使用。
.IP \fB\-\-accept\-unknown\-input\-arch\fP 4
.IX Item \-\-accept\-unknown\-input\-arch
.PD 0
.IP \fB\-\-no\-accept\-unknown\-input\-arch\fP 4
.IX Item \-\-no\-accept\-unknown\-input\-arch
.PD
告诉链接器接受其体系结构无法识别的输入文件。 假设用户知道他们在做什么，并且故意想链接这些未知的输入文件。 这是链接器的默认行为，在发布 2.14
之前。 从 2.14 版本开始的默认行为是拒绝此类输入文件，因此添加了 \fB\-\-accept\-unknown\-input\-arch\fP 选项以恢复旧行为。
.IP \fB\-\-as\-needed\fP 4
.IX Item \-\-as\-needed
.PD 0
.IP \fB\-\-no\-as\-needed\fP 4
.IX Item \-\-no\-as\-needed
.PD
此选项影响命令行中 \fB\-\-as\-needed\fP 选项后提到的动态库的 \s-1ELF DT_NEEDED\s0 标签。
通常，链接器会为命令行中提到的每个动态库添加一个 \s-1DT_NEEDED\s0 标记，而不管该库是否实际需要。 \fB\-\-as\-needed\fP 导致
\s-1DT_NEEDED\s0 标记仅针对 \fIat that point in the link\fP
满足来自常规对象文件的非弱未定义符号引用的库发出，或者如果在 \s-1DT_NEEDED\s0
列表中找不到该库其他需要的库，来自另一个需要的动态库的非弱未定义符号引用。 目标文件或库出现在命令行 \fIafter\fP
有问题的库不会影响是否按需要查看该库。 这类似于从档案中提取目标文件的规则。 \fB\-\-no\-as\-needed\fP 恢复默认行为。
.Sp
Note: 在基于 Linux 的系统上，\fB\-\-as\-needed\fP 选项也会影响 \fB\-\-rpath\fP 和 \&\fB\-\-rpath\-link\fP
选项的行为。 更多详细信息，请参见 \&\fB\-\-rpath\-link\fP 的说明。
.IP \fB\-\-add\-needed\fP 4
.IX Item \-\-add\-needed
.PD 0
.IP \fB\-\-no\-add\-needed\fP 4
.IX Item \-\-no\-add\-needed
.PD
这两个选项已被弃用，因为它们的名称与 \fB\-\-as\-needed\fP 和 \fB\-\-no\-as\-needed\fP 选项相似。 它们已被
\fB\-\-copy\-dt\-needed\-entries\fP 和 \fB\-\-no\-copy\-dt\-needed\-entries\fP 取代。
.IP "\fB\-assert\fP \fIkeyword\fP" 4
.IX Item "\-assert keyword"
为了 SunOS 兼容性，忽略此选项。
.IP \fB\-Bdynamic\fP 4
.IX Item \-Bdynamic
.PD 0
.IP \fB\-dy\fP 4
.IX Item \-dy
.IP \fB\-call_shared\fP 4
.IX Item \-call_shared
.PD
链接动态库。 这仅在支持共享库的平台上有意义。 此选项通常是此类平台上的默认选项。 此选项的不同变体是为了与各种系统兼容。
您可以在命令行中多次使用此选项: 它会影响库搜索其后的 \&\fB\-l\fP 选项。
.IP \fB\-Bgroup\fP 4
.IX Item \-Bgroup
在动态部分的 \f(CW\*(C`DT_FLAGS_1\*(C'\fP 条目中设置 \f(CW\*(C`DF_1_GROUP\*(C'\fP 标志。
这会导致运行时链接程序处理此对象中的查找及其依赖项，仅在组内执行。 \&\fB\-\-unresolved\-symbols=report\-all\fP 是隐含的。
此选项仅在支持共享库的 \s-1ELF\s0 平台上有意义。
.IP \fB\-Bstatic\fP 4
.IX Item \-Bstatic
.PD 0
.IP \fB\-dn\fP 4
.IX Item \-dn
.IP \fB\-non_shared\fP 4
.IX Item \-non_shared
.IP \fB\-static\fP 4
.IX Item \-static
.PD
不要链接共享库。 这仅在支持共享库的平台上有意义。 此选项的不同变体是为了与各种系统兼容。 您可以在命令行中多次使用此选项: 它会影响库搜索其后的
\fB\-l\fP 选项。 此选项还暗示 \fB\-\-unresolved\-symbols=report\-all\fP。 该选项可与 \fB\-shared\fP 一起使用。
这样做意味着正在创建一个共享库，但必须通过从静态库中拉入条目来解决该库的所有外部引用。
.IP \fB\-Bsymbolic\fP 4
.IX Item \-Bsymbolic
创建共享库时，将引用绑定到全局符号到共享库中的定义 (如果有)。 通常，链接到共享库的程序可能会覆盖共享库中的定义。 此选项仅在支持共享库的
\s-1ELF\s0 平台上有意义。
.IP \fB\-Bsymbolic\-functions\fP 4
.IX Item \-Bsymbolic\-functions
创建共享库时，将引用绑定到全局函数符号到共享库中的定义 (如果有)。 此选项仅在支持共享库的 \s-1ELF\s0 平台上有意义。
.IP \fB\-Bno\-symbolic\fP 4
.IX Item \-Bno\-symbolic
该选项可以取消之前指定的 \fB\-Bsymbolic\fP 和 \&\fB\-Bsymbolic\-functions\fP。
.IP \fB\-\-dynamic\-list=\fP\fIdynamic\-list\-file\fP 4
.IX Item \-\-dynamic\-list=dynamic\-list\-file
为链接器指定动态列表文件的名称。
这通常用于创建共享库以指定全局符号列表，其引用不应绑定到共享库中的定义，或创建动态链接的可执行文件以指定应添加到符号表中的符号列表可执行文件。
此选项仅在支持共享库的 \s-1ELF\s0 平台上有意义。
.Sp
动态列表的格式和版本节点一样，没有使用域和节点名。 有关更多信息，请参见 \fB\s-1VERSION\s0\fP。
.IP \fB\-\-dynamic\-list\-data\fP 4
.IX Item \-\-dynamic\-list\-data
将所有全局数据符号包含到动态列表中。
.IP \fB\-\-dynamic\-list\-cpp\-new\fP 4
.IX Item \-\-dynamic\-list\-cpp\-new
为 \*(C+ operator new 和 delete 提供内置动态列表。 它主要用于构建共享 libstdc++。
.IP \fB\-\-dynamic\-list\-cpp\-typeinfo\fP 4
.IX Item \-\-dynamic\-list\-cpp\-typeinfo
为 \*(C + 运行时类型识别提供内置动态列表。
.IP \fB\-\-check\-sections\fP 4
.IX Item \-\-check\-sections
.PD 0
.IP \fB\-\-no\-check\-sections\fP 4
.IX Item \-\-no\-check\-sections
.PD
要求链接器 \fInot\fP 在分配节地址后检查节地址，看是否有任何重叠。 通常链接器将执行此检查，如果发现任何重叠，它将产生适当的错误消息。
链接器确实知道，并且确实允许覆盖中的部分。 可以使用命令行开关 \fB\-\-check\-sections\fP 恢复默认行为。
通常不检查可重定位链接的部分重叠。 在这种情况下，您可以使用 \fB\-\-check\-sections\fP 选项强制检查。
.IP \fB\-\-copy\-dt\-needed\-entries\fP 4
.IX Item \-\-copy\-dt\-needed\-entries
.PD 0
.IP \fB\-\-no\-copy\-dt\-needed\-entries\fP 4
.IX Item \-\-no\-copy\-dt\-needed\-entries
.PD
该选项影响对命令行中提到的 \s-1DT_NEEDED\s0 标签 \fIinside\fP \s-1ELF\s0 动态库引用的动态库的处理。
通常，链接器不会将 \s-1DT_NEEDED\s0 标记添加到输入动态库中 \s-1DT_NEEDED\s0 标记中提到的每个库的输出二进制文件。
在命令行上指定 \fB\-\-copy\-dt\-needed\-entries\fP 后，它后面的任何动态库都将添加其 \s-1DT_NEEDED\s0 条目。
可以使用 \fB\-\-no\-copy\-dt\-needed\-entries\fP 恢复默认行为。
.Sp
此选项还对动态库中符号的解析有影响。 对于命令行中提到的 \fB\-\-copy\-dt\-needed\-entries\fP 动态库，将递归搜索，跟随它们的
\s-1DT_NEEDED\s0 标签到其他库，以解析输出二进制文件所需的符号。 然而，在默认设置下，对动态库的搜索将随着动态库本身停止。 不会遍历
\s-1DT_NEEDED\s0 链接来解析符号。
.IP \fB\-\-cref\fP 4
.IX Item \-\-cref
输出一个交叉引用表。 如果正在生成链接器 map 文件，则交叉引用表将打印到 map 文件。 否则，它被打印在标准输出上。
.Sp
表的格式特意简单，以便在必要时可以很容易地由脚本处理。 符号被打印出来，按名称排序。 对于每个符号，都会给出一个文件名列表。
如果定义了符号，则列出的第一个文件是定义的位置。 如果该符号被定义为一个公共值，那么接下来会出现任何发生这种情况的文件。 最后列出任何引用该符号的文件。
.IP \fB\-\-ctf\-variables\fP 4
.IX Item \-\-ctf\-variables
.PD 0
.IP \fB\-\-no\-ctf\-variables\fP 4
.IX Item \-\-no\-ctf\-variables
.PD
\s-1CTF\s0 debuginfo
格式支持一个部分，该部分对程序中发现的变量的名称和类型进行编码，这些变量未出现在任何符号表中。这些变量显然不能通过常规调试器通过地址查找，因此用于它们的类型和名称的空间通常被浪费:
类型通常很小但名称通常很小。 \&\fB\-\-ctf\-variables\fP 导致生成这样的部分。 可以使用 \fB\-\-no\-ctf\-variables\fP
恢复默认行为。
.IP \fB\-\-ctf\-share\-types=\fP\fImethod\fP 4
.IX Item \-\-ctf\-share\-types=method
调整用于在 \s-1CTF 中的翻译单元之间共享类型的方法。\s0
.RS 4
.IP \fBshare\-unconflicted\fP 4
.IX Item share\-unconflicted
将所有没有歧义定义的类型放入共享字典中，调试器可以在其中轻松访问它们，即使它们只出现在一个翻译元中。 这是默认设置。
.IP \fBshare\-duplicated\fP 4
.IX Item share\-duplicated
仅将出现在多个翻译单元中的类型放入共享字典: 只有一个定义的类型进入每个翻译单元字典。 在多个翻译单元中定义不明确的类型总是进入每个翻译单元字典。
这往往会使 \s-1CTF\s0 变大，但可能会减少共享字典中 \s-1CTF\s0 的数量。 对于非常大的项目，这可能会加快打开 \s-1CTF\s0
的速度并在运行时节省 \s-1CTF\s0 消费者中的内存。
.RE
.RS 4
.RE
.IP \fB\-\-no\-define\-common\fP 4
.IX Item \-\-no\-define\-common
此选项禁止将地址分配给公共符号。 脚本命令 \f(CW\*(C`INHIBIT_COMMON_ALLOCATION\*(C'\fP 具有相同的效果。
.Sp
\fB\-\-no\-define\-common\fP 选项允许将地址分配给 Common 符号的决定与输出文件类型的选择分开;
否则，不可重定位的输出类型强制将地址分配给通用符号。 使用 \fB\-\-no\-define\-common\fP 允许从共享库引用的公共符号仅在主程序中分配地址。
这消除了共享库中未使用的重复空间，并且当有许多动态模块具有用于运行时符号解析的专用搜索路径时，还可以防止因解析错误的重复项而造成的任何可能的混淆。
.IP \fB\-\-force\-group\-allocation\fP 4
.IX Item \-\-force\-group\-allocation
此选项使链接器像普通输入节一样放置节组成员，并删除节组。 这是最终链接的默认行为，但此选项可用于更改可重定位链接 (\fB\-r\fP) 的行为。 脚本命令
\f(CW\*(C`FORCE_GROUP_ALLOCATION\*(C'\fP 具有相同的效果。
.IP \fB\-\-defsym=\fP\fIsymbol\fP\fB=\fP\fIexpression\fP 4
.IX Item \-\-defsym=symbol=expression
在输出文件中创建一个全局符号，包含 \fIexpression\fP 给出的绝对地址。 您可以根据需要多次使用此选项以在命令行中定义多个符号。
在此上下文中，\fIexpression\fP 支持有限形式的算术: 您可以给出十六进制常量或现有符号的名称，或使用 \f(CW\*(C`+\*(C'\fP 和
\f(CW\*(C`\-\*(C'\fP 来添加或减去十六进制常量或符号。 如果您需要更详细的表达式，请考虑使用脚本中的链接器命令语言。 \&\fINote:\fP
\fIsymbol\fP、等号 ("\fB=\fP") 和 \fIexpression\fP 之间不应有空格。
.Sp
链接器按顺序处理 \fB\-\-defsym\fP 参数和 \fB\-T\fP 参数，将 \fB\-\-defsym\fP 放在 \fB\-T\fP 之前将在处理 \fB\-T\fP
的链接描述文件之前定义符号，而将 \fB\-\-defsym\fP 放在 \fB\-T\fP 之后将在处理链接描述文件后定义符号。 这种差异对链接描述文件中使用
\&\fB\-\-defsym\fP 符号的表达式有影响，正确的顺序取决于您要实现的目标。
.IP \fB\-\-demangle[=\fP\fIstyle\fP\fB]\fP 4
.IX Item \-\-demangle[=style]
.PD 0
.IP \fB\-\-no\-demangle\fP 4
.IX Item \-\-no\-demangle
.PD
这些选项控制是否在错误消息和其他输出中分解符号名称。 当链接器被告知 demangle 时，它会尝试以可读的方式呈现符号名称:
如果目标文件格式使用前导下划线，它会去除它们，并将 \*(C + 修饰的符号名称转换为用户可读的名称。 不同的编译器有不同的修饰风格。 可选的
demangling style 参数可用于为您的编译器选择合适的 demangling 样式。 除非设置了环境变量
\fB\s-1COLLECT_NO_DEMANGLE\s0\fP，否则链接器将默认进行 demangle。 这些选项可用于覆盖默认值。
.IP \fB\-I\fP\fIfile\fP 4
.IX Item \-Ifile
.PD 0
.IP \fB\-\-dynamic\-linker=\fP\fIfile\fP 4
.IX Item \-\-dynamic\-linker=file
.PD
设置动态链接器的名称。 这仅在生成动态链接的 \s-1ELF\s0 可执行文件时才有意义。 默认的动态链接器通常是正确的;
除非您知道自己在做什么，否则不要使用它。
.IP \fB\-\-no\-dynamic\-linker\fP 4
.IX Item \-\-no\-dynamic\-linker
生成可执行文件时，忽略在加载时使用动态链接器的请求。 这仅对包含动态重定位的 \s-1ELF\s0
可执行文件有意义，并且通常需要能够处理这些重定位的入口点代码。
.IP \fB\-\-embedded\-relocs\fP 4
.IX Item \-\-embedded\-relocs
此选项类似于 \fB\-\-emit\-relocs\fP 选项，只是重定位存储在特定于目标的部分中。 只有
\fB\s-1BFIN\s0\fP、\fB\s-1CR16\s0\fP 和 \fIM68K\fP 目标支持此选项。
.IP \fB\-\-disable\-multiple\-abs\-defs\fP 4
.IX Item \-\-disable\-multiple\-abs\-defs
不允许 \-R 或 \-\-just\-symbols 调用的文件名中包含符号的多个定义
.IP \fB\-\-fatal\-warnings\fP 4
.IX Item \-\-fatal\-warnings
.PD 0
.IP \fB\-\-no\-fatal\-warnings\fP 4
.IX Item \-\-no\-fatal\-warnings
.PD
将所有警告视为错误。 可以使用选项 \fB\-\-no\-fatal\-warnings\fP 恢复默认行为。
.IP \fB\-w\fP 4
.IX Item \-w
.PD 0
.IP \fB\-\-no\-warnings\fP 4
.IX Item \-\-no\-warnings
.PD
不要显示任何警告或错误消息。 如果已启用，这将覆盖 \&\fB\-\-fatal\-warnings\fP。
当已知输出二进制文件将无法工作，但仍然需要创建它时，可以使用此选项。
.IP \fB\-\-force\-exe\-suffix\fP 4
.IX Item \-\-force\-exe\-suffix
确保输出文件具有 .exe 后缀。
.Sp
如果成功构建的完全链接输出文件没有 \&\f(CW\*(C`.exe\*(C'\fP 或 \f(CW\*(C`.dll\*(C'\fP
后缀，则此选项会强制链接器将输出文件复制到具有 \f(CW\*(C`.exe\*(C'\fP 后缀的同名文件中。当在 Microsoft Windows
主机上使用未修改的 Unix makefile 时，此选项很有用，因为某些版本的 Windows 不会运行映像，除非它以
\f(CW\*(C`.exe\*(C'\fP 后缀结尾。
.IP \fB\-\-gc\-sections\fP 4
.IX Item \-\-gc\-sections
.PD 0
.IP \fB\-\-no\-gc\-sections\fP 4
.IX Item \-\-no\-gc\-sections
.PD
启用未使用输入部分的垃圾集合。 它在不支持此选项的目标上被忽略。 可以通过在命令行上指定 \&\fB\-\-no\-gc\-sections\fP 来恢复默认行为
(不执行此垃圾集合)。 请注意，支持 \s-1COFF\s0 和 \s-1PE\s0 格式目标的垃圾集合，但该实现目前被认为是实验性的。
.Sp
\&\fB\-\-gc\-sections\fP 通过检查符号和重定位来决定使用哪些输入节。
包含入口符号的部分和所有包含命令行上未定义符号的部分将被保留，包含动态对象引用的符号的部分也会保留。
请注意，在构建共享库时，链接器必须假定引用了任何可见符号。 一旦确定了这组初始部分，链接器就会递归地将其重定位引用的任何部分标记为已使用。 请参见
\fB\-\-entry\fP、\fB\-\-undefined\fP 和 \&\fB\-\-gc\-keep\-exported\fP.
.Sp
进行部分链接时可以设置此选项 (使用选项 \&\fB\-r\fP).  在这种情况下，保留的符号的根必须通过选项
\fB\-\-entry\fP、\&\fB\-\-undefined\fP 或 \fB\-\-gc\-keep\-exported\fP 之一或通过链接描述文件中的
\f(CW\*(C`ENTRY\*(C'\fP 命令明确指定。
.Sp
作为 \s-1GNU\s0 扩展，标有 \&\f(CW\*(C`SHF_GNU_RETAIN\*(C'\fP 标志的 \s-1ELF\s0
输入部分不会被垃圾回收。
.IP \fB\-\-print\-gc\-sections\fP 4
.IX Item \-\-print\-gc\-sections
.PD 0
.IP \fB\-\-no\-print\-gc\-sections\fP 4
.IX Item \-\-no\-print\-gc\-sections
.PD
列出所有被垃圾集合删除的部分。 列表打印在标准错误上。 此选项仅在通过 \fB\-\-gc\-sections\fP) 选项启用垃圾集合时才有效。
可以通过在命令行上指定 \fB\-\-no\-print\-gc\-sections\fP 来恢复默认行为 (不列出已删除的部分)。
.IP \fB\-\-gc\-keep\-exported\fP 4
.IX Item \-\-gc\-keep\-exported
启用 \fB\-\-gc\-sections\fP 时，此选项可防止包含具有默认或受保护可见性的全局符号的未使用输入部分的垃圾集合。
此选项旨在用于可执行文件，其中未引用的部分将被垃圾收集，而不管包含的符号的外部可见性如何。 请注意，此选项在链接共享对象时无效，因为它已经是默认行为。
此选项仅支持 \&\s-1ELF\s0 格式目标。
.IP \fB\-\-print\-output\-format\fP 4
.IX Item \-\-print\-output\-format
打印默认输出格式的名称 (可能受其他命令行选项的影响)。 这是将出现在 \f(CW\*(C`OUTPUT_FORMAT\*(C'\fP
链接描述文件命令中的字符串。
.IP \fB\-\-print\-memory\-usage\fP 4
.IX Item \-\-print\-memory\-usage
打印使用 \fB\s-1MEMORY\s0\fP 命令创建的内存区域的已用大小、总大小和已用大小。 这对于嵌入式目标非常有用，可以快速查看可用内存量。
输出格式为每个区域一个标题和一行。 它既是人类可读的，也很容易被工具解析。 这是一个输出示例:
.Sp
.Vb 3
\& 已用内存区域大小已用区域大小 %age\&ROM: 256 KB 1 MB 25.00%\&RAM: 32 B 2 GB 0.00%
.Ve
.IP \fB\-\-help\fP 4
.IX Item \-\-help
在标准输出上打印命令行选项的总结并退出。
.IP \fB\-\-target\-help\fP 4
.IX Item \-\-target\-help
在标准输出上打印所有目标特定选项的总结并退出。
.IP \fB\-Map=\fP\fImapfile\fP 4
.IX Item \-Map=mapfile
打印指向文件 \fImapfile\fP 的链接 map。 请参见上面 \&\fB\-M\fP 选项的说明。 如果 \fImapfile\fP 只是字符
\&\f(CW\*(C`\-\*(C'\fP，则 map 将写入 stdout。
.Sp
将目录指定为 \fImapfile\fP 会导致链接器 map 被写入目录内的文件。 通常，目录中文件的名称计算为，追加 \f(CW\*(C`.map\*(C'\fP
的 \fIoutput\fP 文件的基本名称。 但是，如果使用特殊字符 \&\f(CW\*(C`%\*(C'\fP，则它将被输出文件的完整路径替换。 此外，如果
\&\fI%\fP 符号后有任何字符，则将不再，追加 \f(CW\*(C`.map\*(C'\fP。
.Sp
.Vb 10
\& \-o foo.exe \-Map=bar [Creates ./bar] \& \-o ../dir/foo.exe \-Map=bar
[Creates ./bar] \& \-o foo.exe \-Map=../dir [Creates ../dir/foo.exe.map] \& \-o
\&../dir2/foo.exe \-Map=../dir [Creates ../dir/foo.exe.map] \& \-o foo.exe
\-Map=% [Creates ./foo.exe.map] \& \-o ../dir/foo.exe \-Map=% [Creates
\&../dir/foo.exe.map] \& \-o foo.exe \-Map=%.bar [Creates ./foo.exe.bar] \& \-o
\&../dir/foo.exe \-Map=%.bar [Creates ../dir/foo.exe.bar] \& \-o ../dir2/foo.exe
\-Map=../dir/% [Creates ../dir/../dir2/foo.exe.map] \& \-o ../dir2/foo.exe
\-Map=../dir/%.bar [Creates ../dir/../dir2/foo.exe.bar]
.Ve
.Sp
指定多个 \f(CW\*(C`%\*(C'\fP 字符是错误的。
.Sp
如果 map 文件已经存在，那么它将被这个操作覆盖。
.IP \fB\-\-no\-keep\-memory\fP 4
.IX Item \-\-no\-keep\-memory
\&\fBld\fP 通常通过在内存中缓存输入文件的符号表来优化内存使用速度。 此选项告诉 \fBld\fP 通过在必要时重新读取符号表来优化内存使用。 如果
\fBld\fP 在链接大型可执行文件时内存空间不足，则可能需要这样做。
.IP \fB\-\-no\-undefined\fP 4
.IX Item \-\-no\-undefined
.PD 0
.IP "\fB\-z defs\fP" 4
.IX Item "\-z defs"
.PD
报告来自常规目标文件的未解析符号引用。 即使链接器正在创建非符号共享库，也会这样做。 开关
\fB\-\-[no\-]allow\-shlib\-undefined\fP 控制报告在链接的共享库中发现的未解析引用的行为。
.Sp
使用 \f(CW\*(C`\-z undefs\*(C'\fP 可以恢复此选项的效果。
.IP \fB\-\-allow\-multiple\-definition\fP 4
.IX Item \-\-allow\-multiple\-definition
.PD 0
.IP "\fB\-z muldefs\fP" 4
.IX Item "\-z muldefs"
.PD
通常当一个符号被定义多次时，链接器会报致命错误。这些选项允许多个定义，将使用第一个定义。
.IP \fB\-\-allow\-shlib\-undefined\fP 4
.IX Item \-\-allow\-shlib\-undefined
.PD 0
.IP \fB\-\-no\-allow\-shlib\-undefined\fP 4
.IX Item \-\-no\-allow\-shlib\-undefined
.PD
允许或禁止共享库中的未定义符号。 此开关类似于 \fB\-\-no\-undefined\fP，不同之处在于它确定未定义符号位于共享库而不是常规对象文件中时的行为。
它不影响常规目标文件中未定义符号的处理方式。
.Sp
如果链接器用于创建可执行文件，默认行为是报告共享库中引用的任何未定义符号的错误，但如果链接器用于创建共享库，则允许它们。
.Sp
在链接时指定的共享库中允许未定义符号引用的原因是:
.RS 4
.IP \(bu 4
链接时指定的共享库可能与加载时可用的共享库不同，因此该符号实际上可能在加载时可解析。
.IP \(bu 4
有一些操作系统，例如 BeOS 和 \s-1HPPA，\s0 共享库中的未定义符号是正常的。
.Sp
例如，BeOS 内核在加载时修补共享库，以选择最适合当前体系结构的任数。 例如，这用于动态选择合适的 memset 函数。
.RE
.RS 4
.RE
.IP \fB\-\-error\-handling\-script=\fP\fIscriptname\fP 4
.IX Item \-\-error\-handling\-script=scriptname
如果提供此选项，则链接器将在遇到错误时调用 \&\fIscriptname\fP。 但是目前只支持两种错误: 缺少符号和缺少库。 两个参数将传递给脚本:
关键字 \&\*(L"undefined\-symbol\*(R" or `missing\-lib" 和未定义符号或缺失库的 \fIname\fP。
目的是脚本将向用户提供关于在哪里可以找到符号或库的建议。 脚本完成后，将显示正常的链接器错误消息。
.Sp
此选项的可用性由配置时间开关控制，因此它可能不会出现在特定的实现中。
.IP \fB\-\-no\-undefined\-version\fP 4
.IX Item \-\-no\-undefined\-version
通常当一个符号有一个未定义的版本时，链接器会忽略它。此选项不允许使用未定义版本的符号，而是会发出致命错误。
.IP \fB\-\-default\-symver\fP 4
.IX Item \-\-default\-symver
为未版本化的导出符号创建并使用默认符号版本 (soname)。
.IP \fB\-\-default\-imported\-symver\fP 4
.IX Item \-\-default\-imported\-symver
为未版本化的导入符号创建并使用默认符号版本 (soname)。
.IP \fB\-\-no\-warn\-mismatch\fP 4
.IX Item \-\-no\-warn\-mismatch
通常，如果您尝试将由于某种原因不匹配的输入文件链接在一起，\fBld\fP 会报错，这可能是因为它们是为不同的处理器或不同的字节顺序编译的。 该选项告诉
\fBld\fP 它应该默默地允许此类可能的错误。 仅当您采取了一些特殊措施以确保链接器错误不合适时，才应谨慎使用此选项。
.IP \fB\-\-no\-warn\-search\-mismatch\fP 4
.IX Item \-\-no\-warn\-search\-mismatch
如果在库搜索过程中发现不兼容的库，\fBld\fP 通常会发出警告。 此选项使警告静音。
.IP \fB\-\-no\-whole\-archive\fP 4
.IX Item \-\-no\-whole\-archive
关闭 \fB\-\-whole\-archive\fP 选项对后续归档文件的影响。
.IP \fB\-\-noinhibit\-exec\fP 4
.IX Item \-\-noinhibit\-exec
保留可执行输出文件，只要它仍然可用。 通常，如果在链接过程中遇到错误，链接器不会产生输出文件; 当它发出任何错误时，它会在不写入输出文件的情况下退出。
.IP \fB\-nostdlib\fP 4
.IX Item \-nostdlib
仅搜索在命令行中明确指定的库目录。 链接描述文件中指定的库目录 (包括在命令行中指定的链接描述文件) 将被忽略。
.IP \fB\-\-oformat=\fP\fIoutput\-format\fP 4
.IX Item \-\-oformat=output\-format
\&\fBld\fP 可以配置为支持多种目标文件。 如果您的 \fBld\fP 是这样配置的，您可以使用 \&\fB\-\-oformat\fP
选项指定输出目标文件的二进制格式。 即使 \fBld\fP 配置为支持替代对象格式，您通常也不需要指定它，因为 \fBld\fP
应该配置为生成每台机器上最常用格式的默认输出格式。 \fIoutput\-format\fP 是一个文本字符串，是 \s-1BFD\s0
库支持的特定格式的名称。 (您可以使用 \fBobjdump \-i\fP.) 列出可用的二进制格式。脚本命令
\f(CW\*(C`OUTPUT_FORMAT\*(C'\fP 也可以指定输出格式，但此选项会覆盖它。
.IP "\fB\-\-out\-implib\fP \fIfile\fP" 4
.IX Item "\-\-out\-implib file"
在 \fIfile\fP 中创建与链接器生成的可执行文件对应的导入库 (例如 \s-1DLL\s0 或 \s-1ELF\s0 程序)。 此导入库 (对于
DLL 应称为 \f(CW\*(C`*.dll.a\*(C'\fP 或 \f(CW\*(C`*.a\*(C'\fP) 可用于将客户端链接到生成的可执行文件;
此行为可以跳过单独的导入库创建步骤 (例如 \f(CW\*(C`dlltool\*(C'\fP 用于 DLL)。 此选项仅适用于链接器的 i386
\s-1PE\s0 和 \s-1ELF\s0 目标端口。
.IP \fB\-pie\fP 4
.IX Item \-pie
.PD 0
.IP \fB\-\-pic\-executable\fP 4
.IX Item \-\-pic\-executable
.PD
创建一个与位置无关的可执行文件。 目前仅在 \&\s-1ELF\s0 平台上受支持。 与位置无关的可执行文件类似于共享库，因为它们由动态链接器重定位到
\s-1OS\s0 为它们选择的虚拟地址 (调用之间可能会有所不同)。
与普通的动态链接可执行文件一样，它们可以被执行，并且可执行文件中定义的符号不能被共享库覆盖。
.IP \fB\-no\-pie\fP 4
.IX Item \-no\-pie
创建位置相关的可执行文件。 这是默认设置。
.IP \fB\-qmagic\fP 4
.IX Item \-qmagic
为了 Linux 兼容性，忽略此选项。
.IP \fB\-Qy\fP 4
.IX Item \-Qy
为了 \s-1SVR4\s0 兼容性，忽略此选项。
.IP \fB\-\-relax\fP 4
.IX Item \-\-relax
.PD 0
.IP \fB\-\-no\-relax\fP 4
.IX Item \-\-no\-relax
.PD
具有机器相关效果的选项。 此选项仅在少数目标上受支持。
.Sp
在某些平台上，\fB\-\-relax\fP
选项执行目标特定的全局优化，当链接器解析程序中的寻址时，这些优化成为可能，例如放宽地址模式、合成新指令、选择当前指令的较短版本以及组合常量值。
.Sp
在某些平台上，这些链接时间优化可能导致无法对生成的可执行文件进行符号调试。 众所周知，松下 \s-1MN10200\s0 和
\s-1MN10300\s0 系列处理器就是这种情况。
.Sp
在支持该特性的平台上，选项 \&\fB\-\-no\-relax\fP 将禁用它。
.Sp
在不支持该特性的平台上，\fB\-\-relax\fP 和 \fB\-\-no\-relax\fP 都被接受，但被忽略。
.IP \fB\-\-retain\-symbols\-file=\fP\fIfilename\fP 4
.IX Item \-\-retain\-symbols\-file=filename
保留文件 \fIfilename\fP 中列出的 \fIonly\fP 符号，丢弃所有其他符号。 \fIfilename\fP 只是一个平面文件，每行一个符号名称。
此选项在逐渐积累大量全局符号表的环境 (例如 VxWorks) 中特别有用，以节省运行时内存。
.Sp
\&\fB\-\-retain\-symbols\-file\fP 确实 \fInot\fP 丢弃未定义的符号或重定位所需的符号。
.Sp
您只能在命令行中指定一次 \fB\-\-retain\-symbols\-file\fP。 它覆盖 \fB\-s\fP 和 \fB\-S\fP。
.IP \fB\-rpath=\fP\fIdir\fP 4
.IX Item \-rpath=dir
将目录添加到运行时库搜索路径。 这在将 \s-1ELF\s0 可执行文件与共享对象链接时使用。 所有 \fB\-rpath\fP
参数都被连接起来并传递给运行时链接器，该链接器使用它们在运行时定位共享对象。
.Sp
\fB\-rpath\fP 选项也用于定位明确包含在链接中的共享对象所需的共享对象; 请参见 \fB\-rpath\-link\fP 选项的说明。 只有配置了
\fB\-\-with\-sysroot\fP 选项的原生链接器和交叉链接器才支持以这种方式搜索 \fB\-rpath\fP。
.Sp
如果在链接 \s-1ELF\s0 可执行文件时未使用 \fB\-rpath\fP，则将使用定义了环境变量 \f(CW\*(C`LD_RUN_PATH\*(C'\fP
的内容。
.Sp
\fB\-rpath\fP 选项也可用于 SunOS。 默认情况下，在 SunOS 上，链接器将根据给定的所有 \&\fB\-L\fP 选项形成一个运行时搜索路径。
如果使用 \fB\-rpath\fP 选项，运行时搜索路径将专门使用 \fB\-rpath\fP 选项形成，忽略 \fB\-L\fP 选项。 这在使用 gcc
时很有用，它添加了许多 \fB\-L\fP 选项，这些选项可能位于 \s-1NFS\s0 安装的文件系统上。
.Sp
为了与其他 \s-1ELF\s0 链接器兼容，如果 \fB\-R\fP 选项后跟目录名而不是文件名，则将其视为 \fB\-rpath\fP 选项。
.IP \fB\-rpath\-link=\fP\fIdir\fP 4
.IX Item \-rpath\-link=dir
使用 \s-1ELF\s0 或 SunOS 时，一个共享库可能需要另一个。 当 \f(CW\*(C`ld \-shared\*(C'\fP
链接包含一个共享库作为输入文件之一时，就会发生这种情况。
.Sp
当链接器在做非共享、不可重定位的链接时遇到这样的依赖，它会自动尝试定位所需的共享库并将其包含在链接中，如果没有明确包含的话。
在这种情况下，\fB\-rpath\-link\fP 选项指定要搜索的第一组目录。 \&\fB\-rpath\-link\fP
选项可以通过指定以冒号分隔的名称列表或通过多次出现来指定一系列目录名称。
.Sp
tokens\f (CI$ORIGIN\fR 和 \f (CI$LIB\fR 可以出现在这些搜索目录中。 在 \f
的情况下，它们将被包含程序或共享对象的目录的完整路径替换 (\fBlib\fP \- 对于 32 位二进制文件 \- 或 \fBlib64\fP \- 对于 64
位二进制文件 \- 在 \f 的情况下 (CI$LIB\fR.
.Sp
这些 tokens 的替代形式 \- \fI${\s-1ORIGIN\s0}\fP 和 \&\fI${\s-1LIB\s0}\fP 也可以使用。 不支持
token\f (CI$PLATFORM\fR。
.Sp
应谨慎使用此选项，因为它会覆盖可能已硬编译到共享库中的搜索路径。在这种情况下，可能会无意中使用与运行时链接程序不同的搜索路径。
.Sp
链接器使用以下搜索路径来查找所需的共享库:
.RS 4
.IP 1. 4
\fB\-rpath\-link\fP 选项指定的任何目录。
.IP 2. 4
\fB\-rpath\fP 选项指定的任何目录。 \fB\-rpath\fP 和 \fB\-rpath\-link\fP 的区别在于 \fB\-rpath\fP
选项指定的目录包含在可执行文件中并在运行时使用，而 \fB\-rpath\-link\fP 选项仅在链接时有效。只有配置了 \fB\-\-with\-sysroot\fP
选项的原生链接器和交叉链接器才支持以这种方式搜索 \fB\-rpath\fP。
.IP 3. 4
在 \s-1ELF\s0 系统上，对于原生链接器，如果未使用 \fB\-rpath\fP 和 \&\fB\-rpath\-link\fP 选项，则搜索环境变量
\f(CW\*(C`LD_RUN_PATH\*(C'\fP 的内容。
.IP 4. 4
在 SunOS 上，如果未使用 \fB\-rpath\fP 选项，则搜索使用 \fB\-L\fP 选项指定的任何目录。
.IP 5. 4
对于原生链接器，搜索环境变量 \f(CW\*(C`LD_LIBRARY_PATH\*(C'\fP 的内容。
.IP 6. 4
对于原生 \s-1ELF\s0 链接器，会在共享库的 \f(CW\*(C`DT_RUNPATH\*(C'\fP 或
\&\f(CW\*(C`DT_RPATH\*(C'\fP 中的目录中搜索它需要的共享库。如果存在 \&\f(CW\*(C`DT_RUNPATH\*(C'\fP
条目，则忽略 \f(CW\*(C`DT_RPATH\*(C'\fP 条目。
.IP 7. 4
对于 Linux 系统的链接器，如果文件 \fI/etc/ld.so.conf\fP 存在，则为在该文件中找到的目录列表。 注意: 此文件的路径以
\f(CW\*(C`sysroot\*(C'\fP 值作为前缀 (如果已定义)，然后是任何 \f(CW\*(C`prefix\*(C'\fP 字符串 (如果链接器配置了
\fB\-\-prefix=<path>\fP 选项)。
.IP 8. 4
对于 FreeBSD 系统上的原生链接器，\fIelf\-hints.h\fP 头文件中定义的 \f(CW\*(C`_PATH_ELF_HINTS\*(C'\fP
宏指定的任何目录。
.IP 9. 4
在命令行给出的链接描述文件中由 \f(CW\*(C`SEARCH_DIR\*(C'\fP 命令指定的任何目录，包括由 \fB\-T\fP 指定的脚本 (但不包括
\fB\-dT\fP).
.IP 10. 4
默认目录，通常为 \fI/lib\fP 和 \fI/usr/lib\fP。
.IP 11. 4
插件指定的任何目录 \s-1LDPT_SET_EXTRA_LIBRARY_PATH.\s0
.IP 12. 4
默认链接描述文件中 \f(CW\*(C`SEARCH_DIR\*(C'\fP 命令指定的任何目录。
.RE
.RS 4
.Sp
但是请注意，在基于 Linux 的系统上还有一个额外的警告: 如果 \fB\-\-as\-needed\fP 选项处于活动状态 \fIand\fP 位于通常满足搜索
\fIand\fP 该库没有 \s-1DT_NEEDED\s0 标签的 \fIlibc.so\fP \&\fIand\fP 有一个共享稍后在也满足搜索 \fIand\fP
的搜索目录集中的库，此第二个共享库确实具有 \&\fIlibc.so\fP \fIthen\fP 的 \s-1DT_NEEDED\s0
标记，将选择第二个库而不是第一个库。
.Sp
如果未找到所需的共享库，链接器将发出警告并继续链接。
.RE
.IP \fB\-shared\fP 4
.IX Item \-shared
.PD 0
.IP \fB\-Bshareable\fP 4
.IX Item \-Bshareable
.PD
创建共享库。 目前仅在 \s-1ELF、XCOFF\s0 和 SunOS 平台上受支持。 在 SunOS 上，如果没有使用 \fB\-e\fP
选项并且链接中有未定义的符号，链接器将自动创建一个共享库。
.IP \fB\-\-sort\-common\fP 4
.IX Item \-\-sort\-common
.PD 0
.IP \fB\-\-sort\-common=ascending\fP 4
.IX Item \-\-sort\-common=ascending
.IP \fB\-\-sort\-common=descending\fP 4
.IX Item \-\-sort\-common=descending
.PD
此选项告诉 \fBld\fP 在将公共符号放置在适当的输出部分时，按升序或降序排列对公共符号进行排序。
所考虑的符号对齐是十六字节或更大、八字节、四字节、两字节和一字节。这是为了防止由于对齐约束导致的符号之间的间隙。 如果未指定排序顺序，则假定为降序。
.IP \fB\-\-sort\-section=name\fP 4
.IX Item \-\-sort\-section=name
该选项会将 \f(CW\*(C`SORT_BY_NAME\*(C'\fP 应用于链接描述文件中的所有通配符部分模式。
.IP \fB\-\-sort\-section=alignment\fP 4
.IX Item \-\-sort\-section=alignment
该选项会将 \f(CW\*(C`SORT_BY_ALIGNMENT\*(C'\fP 应用于链接描述文件中的所有通配符部分模式。
.IP \fB\-\-spare\-dynamic\-tags=\fP\fIcount\fP 4
.IX Item \-\-spare\-dynamic\-tags=count
此选项指定要留在 \s-1ELF\s0 共享对象的 \&.dynamic 部分中的空槽数。 后处理工具 (例如预链接器) 可能需要空插槽。 默认是 5.
.IP \fB\-\-split\-by\-file[=\fP\fIsize\fP\fB]\fP 4
.IX Item \-\-split\-by\-file[=size]
与 \fB\-\-split\-by\-reloc\fP 类似，但在到达 \fIsize\fP 时为每个输入文件创建一个新的输出部分。 如果没有给出，\fIsize\fP
默认大小为 1。
.IP \fB\-\-split\-by\-reloc[=\fP\fIcount\fP\fB]\fP 4
.IX Item \-\-split\-by\-reloc[=count]
尝试在输出文件中创建额外的部分，以便文件中没有单个输出部分包含超过 \fIcount\fP 的重定位。 这在生成巨大的可重定位文件以下载到具有
\s-1COFF\s0 目标文件格式的某些实时内核时很有用; 因为 \s-1COFF\s0 不能在单个部分中表示超过 65535 个重定位。
请注意，这将无法处理不支持任意部分的目标文件格式。 链接器不会拆分单独的输入部分进行重新分配，因此如果单个输入部分包含多个 \fIcount\fP
重定位，则一个输出部分将包含那么多重定位。 \fIcount\fP 默认值为 32768。
.IP \fB\-\-stats\fP 4
.IX Item \-\-stats
计算并显示有关链接器操作的统计信息，例如执行时间和内存使用情况。
.IP \fB\-\-sysroot=\fP\fIdirectory\fP 4
.IX Item \-\-sysroot=directory
使用 \fIdirectory\fP 作为 sysroot 的位置，覆盖配置时的默认值。 只有使用 \fB\-\-with\-sysroot\fP
配置的链接器才支持此选项。
.IP \fB\-\-task\-link\fP 4
.IX Item \-\-task\-link
这被基于 \s-1COFF/PE\s0 的目标用来创建一个任务链接的目标文件，其中所有全局符号都已转换为静态。
.IP \fB\-\-traditional\-format\fP 4
.IX Item \-\-traditional\-format
对于某些目标，\fBld\fP 的输出在某些方面与某些现有链接器的输出不同。 此开关请求 \fBld\fP 使用传统格式。
.Sp
例如，在 SunOS 上，\fBld\fP 合并了符号字符串表中的重复条目。 这可以将包含完整调试信息的输出文件的大小减少 30% 以上。
不幸的是，SunOS \&\f(CW\*(C`dbx\*(C'\fP 程序无法读取生成的程序 (\f(CW\*(C`gdb\*(C'\fP 没有问题)。
\fB\-\-traditional\-format\fP 开关告诉 \fBld\fP 不要合并重复的条目。
.IP \fB\-\-section\-start=\fP\fIsectionname\fP\fB=\fP\fIorg\fP 4
.IX Item \-\-section\-start=sectionname=org
在 \fIorg\fP 给定的绝对地址处定位输出文件中的一个部分。 您可以根据需要多次使用此选项来定位命令行中的多个部分。 \&\fIorg\fP
必须是单个十六进制整数; 为了与其他链接器兼容，您可以省略通常与十六进制值关联的前导 \&\fB0x\fP。 \fINote:\fP
\fIsectionname\fP、等号 ("\fB=\fP") 和 \fIorg\fP 之间不应有空格。
.IP \fB\-Tbss=\fP\fIorg\fP 4
.IX Item \-Tbss=org
.PD 0
.IP \fB\-Tdata=\fP\fIorg\fP 4
.IX Item \-Tdata=org
.IP \fB\-Ttext=\fP\fIorg\fP 4
.IX Item \-Ttext=org
.PD
与 \fB\-\-section\-start\fP 相同，\f(CW\*(C`.bss\*(C'\fP、\f(CW\*(C`.data\*(C'\fP 或
\&\f(CW\*(C`.text\*(C'\fP 与 \fIsectionname\fP 相同。
.IP \fB\-Ttext\-segment=\fP\fIorg\fP 4
.IX Item \-Ttext\-segment=org
创建 \s-1ELF\s0 可执行文件时，它会设置文本段第一个字节的地址。
.IP \fB\-Trodata\-segment=\fP\fIorg\fP 4
.IX Item \-Trodata\-segment=org
当只读数据在其自己的段中与可执行文本分开的目标创建 \s-1ELF\s0 可执行文件或共享对象时，它将设置只读字段的第一个字节的地址。
.IP \fB\-Tldata\-segment=\fP\fIorg\fP 4
.IX Item \-Tldata\-segment=org
在为 x86\-64 中等内存模型创建 \s-1ELF\s0 可执行文件或共享对象时，它会设置 ldata 段的第一个字节的地址。
.IP \fB\-\-unresolved\-symbols=\fP\fImethod\fP 4
.IX Item \-\-unresolved\-symbols=method
确定如何处理未解析的符号。 \fBmethod\fP: 有四种可能的值
.RS 4
.IP \fBignore\-all\fP 4
.IX Item ignore\-all
不要报告任何未解析的符号。
.IP \fBreport\-all\fP 4
.IX Item report\-all
报告所有未解析的符号。 这是默认设置。
.IP \fBignore\-in\-object\-files\fP 4
.IX Item ignore\-in\-object\-files
报告共享库中包含的未解析符号，但如果它们来自常规目标文件，则忽略它们。
.IP \fBignore\-in\-shared\-libs\fP 4
.IX Item ignore\-in\-shared\-libs
报告来自常规目标文件的未解析符号，但如果它们来自共享库则忽略它们。
这在创建动态二进制文件时很有用，并且众所周知，它应该引用的所有共享库都包含在链接器的命令行中。
.RE
.RS 4
.Sp
共享库自身的行为也可以由 \fB\-\-[no\-]allow\-shlib\-undefined\fP 选项控制。
.Sp
通常，链接器会为每个报告的未解析符号生成错误消息，但选项 \fB\-\-warn\-unresolved\-symbols\fP 可以将其更改为警告。
.RE
.IP \fB\-\-dll\-verbose\fP 4
.IX Item \-\-dll\-verbose
.PD 0
.IP \fB\-\-verbose[=\fP\fI\s-1NUMBER\s0\fP\fB]\fP 4
.IX Item \-\-verbose[=NUMBER]
.PD
显示 \fBld\fP 的版本号并列出支持的链接器仿真。 显示哪些输入文件可以打开，哪些不能打开。 显示链接器正在使用的链接描述文件。如果可选
\fI\s-1NUMBER\s0\fP 参数 > 1，也会显示插件符号状态。
.IP \fB\-\-version\-script=\fP\fIversion\-scriptfile\fP 4
.IX Item \-\-version\-script=version\-scriptfile
为链接器指定版本脚本的名称。 这通常在创建共享库时使用，以指定有关正在创建的库的版本层次结构的附加信息。 只有支持共享库的 \s-1ELF\s0
平台才完全支持此选项; 请参见 \fB\s-1VERSION\s0\fP。 它在 \s-1PE\s0
平台上得到部分支持，它可以使用版本脚本来过滤自动导出模式下的符号可见性: 版本脚本中标记为 \fBlocal\fP 的任何符号都不会被导出。
.IP \fB\-\-warn\-common\fP 4
.IX Item \-\-warn\-common
当公共符号与另一个公共符号或符号定义组合时发出警告。 Unix 链接器允许这种有点草率的做法，但某些其他操作系统上的链接器则不允许。
此选项允许您从组合全局符号中发现潜在问题。 不幸的是，一些 C 库使用这种做法，因此您可能会在库和程序中收到一些关于符号的警告。
.Sp
全局符号一共有三种，这里用 C 语言举例说明:
.RS 4
.IP "\fBint i = 1;\fP" 4
.IX Item "int i = 1;"
一个定义，它进入输出文件的初始化数据部分。
.IP "\fBextern int i;\fP" 4
.IX Item "extern int i;"
未定义的引用，不分配空间。 某个地方必须有变量的定义或公共符号。
.IP "\fBint i;\fP" 4
.IX Item "int i;"
一个常见的符号。 如果变量只有 (一个或多个) 公共符号，则它进入输出文件的未初始化数据区域。 链接器将同一变量的多个公共符号合并为一个符号。
如果它们的尺寸不同，它会选择最大的尺寸。 如果存在相同变量的定义，链接器会将公共符号转换为声明。
.RE
.RS 4
.Sp
\fB\-\-warn\-common\fP 选项可以产生五种警告。 每个警告由一对行组成: 第一行描述刚刚遇到的符号，第二行描述以前遇到的同名符号。
两个符号中的一个或两个将是一个公共符号。
.IP 1. 4
把一个普通的符号变成一个引用，因为这个符号已经有了一个定义。
.Sp
.Vb 3
\&<file>(<section>): 警告: \`<symbol>\*(Aq 的通用 \&
被定义覆盖 \&<file>(<section>): 警告: 在这里定义
.Ve
.IP 2. 4
将一个普通符号变成一个引用，因为遇到了该符号的后续定义。 这与前面的情况相同，只是遇到符号的顺序不同。
.Sp
.Vb 3
\&<file>(<section>): warning: \`<symbol>\*(Aq 的定义
\&overriding common\&<file>(<section>): warning: common is
here
.Ve
.IP 3. 4
将一个公共符号与先前相同大小的公共符号合并。
.Sp
.Vb 3
\&<file>(<section>): 警告: \`<symbol>\*(Aq 的多个
common\&\&<file>(<section>): 警告: 以前的 common 在这里
.Ve
.IP 4. 4
将一个公共符号与先前较大的公共符号合并。
.Sp
.Vb 3
\&<file>(<section>): 警告: \`<symbol>\*(Aq 的共同点 \&
被更大的共同点覆盖 \&<file>(<section>): 警告: 更大的共同点在这里
.Ve
.IP 5. 4
将一个公共符号与先前较小的公共符号合并。 这与前面的情况相同，只是遇到符号的顺序不同。
.Sp
.Vb 3
\&<file>(<section>): 警告: \`<symbol>\*(Aq 的共同点 \&
覆盖较小的共同点 \&<file>(<section>): 警告: 较小的共同点在这里
.Ve
.RE
.RS 4
.RE
.IP \fB\-\-warn\-constructors\fP 4
.IX Item \-\-warn\-constructors
如果使用了任何全局构造函数，则发出警告。 这仅对少数目标文件格式有用。 对于 \s-1COFF\s0 或 \s-1ELF、\s0
等格式，链接器无法检测全局构造函数的使用。
.IP \fB\-\-warn\-execstack\fP 4
.IX Item \-\-warn\-execstack
.PD 0
.IP \fB\-\-no\-warn\-execstack\fP 4
.IX Item \-\-no\-warn\-execstack
.PD
在 \s-1ELF\s0 平台上，此选项控制链接器在创建带有可执行栈的输出文件时如何生成警告消息。 默认情况下，如果使用了 \fB\-z execstack\fP 命令行选项，链接器将不会发出警告，但可以通过 \&\fB\-\-warn\-execstack\fP 选项覆盖此行为。
.Sp
另一方面，如果栈可执行，链接器通常会发出警告，因为一个或多个输入文件需要可执行栈，并且 \fB\-z execstack\fP 或 \fB\-z noexecstack\fP 命令行选项均未指定。 可以通过 \fB\-\-no\-warn\-execstack\fP 选项禁用此警告。
.Sp
Note: \s-1ELF\s0 格式输入文件指定它们需要一个可执行栈，方法是在 \fI.note.GNU\-stack\fP
节中设置可执行位，并在其节标志中设置。 他们可以通过拥有该部分但不设置可执行标志位来指定他们不需要可执行栈。 如果输入文件不存在
\&\fI.note.GNU\-stack\fP 部分，则默认行为是特定于目标的。 对于某些目标，缺少这样的部分意味着需要可执行栈 \fIis\fP。
这通常是手工制作的汇编程序文件的问题。
.IP \fB\-\-warn\-multiple\-gp\fP 4
.IX Item \-\-warn\-multiple\-gp
如果输出文件中需要多个全局指针值，则发出警告。 这仅对某些处理器有意义，例如 Alpha。 具体来说，一些处理器将大值常量放在一个特殊的部分中。
一个特殊的寄存器 (全局指针) 指向该段的中间，因此可以通过基址寄存器相对寻址方式高效地加载常量。 由于基址寄存器相对模式下的偏移量是固定的并且相对较小
(例如，16 位)，这限制了常量池的最大大小。 因此，在大型程序中，通常需要使用多个全局指针值，以便能够寻址所有可能的常量。
每当发生这种情况时，此选项都会发出警告。
.IP \fB\-\-warn\-once\fP 4
.IX Item \-\-warn\-once
只对每个未定义的符号警告一次，而不是每个引用它的模块警告一次。
.IP \fB\-\-warn\-rwx\-segments\fP 4
.IX Item \-\-warn\-rwx\-segments
.PD 0
.IP \fB\-\-no\-warn\-rwx\-segments\fP 4
.IX Item \-\-no\-warn\-rwx\-segments
.PD
如果链接器创建了一个可加载的、非零大的段，并且设置了所有三个读、写和执行权限标志，则发出警告。 这样的段表示潜在的安全漏洞。
此外，如果在设置了执行权限标志的情况下创建线程本地存储段，则将生成警告，无论它是否设置了读取或者写入标志。
.Sp
默认情况下启用这些警告。 它们可以通过 \&\fB\-\-no\-warn\-rwx\-segments\fP 选项禁用并通过
\&\fB\-\-warn\-rwx\-segments\fP 选项重新启用。
.IP \fB\-\-warn\-section\-align\fP 4
.IX Item \-\-warn\-section\-align
如果由于对齐而更改了输出部分的地址，则发出警告。 通常，对齐将由输入部分设置。 地址只有在没有明确指定的情况下才会改变; 也就是说，如果
\f(CW\*(C`SECTIONS\*(C'\fP 命令没有指定段的起始地址。
.IP \fB\-\-warn\-textrel\fP 4
.IX Item \-\-warn\-textrel
如果链接器将 \s-1DT_TEXTREL\s0 添加到与位置无关的可执行文件或共享对象，则发出警告。
.IP \fB\-\-warn\-alternate\-em\fP 4
.IX Item \-\-warn\-alternate\-em
如果对象具有备用 \s-1ELF\s0 机器代码，则发出警告。
.IP \fB\-\-warn\-unresolved\-symbols\fP 4
.IX Item \-\-warn\-unresolved\-symbols
如果链接器要报告未解析的符号 (请参见选项 \&\fB\-\-unresolved\-symbols\fP)，它通常会生成错误。 此选项使其生成警告。
.IP \fB\-\-error\-unresolved\-symbols\fP 4
.IX Item \-\-error\-unresolved\-symbols
这将恢复链接器在报告未解析符号时生成错误的默认行为。
.IP \fB\-\-whole\-archive\fP 4
.IX Item \-\-whole\-archive
对于 \&\fB\-\-whole\-archive\fP 选项后命令行中提到的每个存档，在链接中包含存档中的每个目标文件，而不是在存档中搜索所需的目标文件。
这通常用于将存档文件转换为共享库，强制每个对象都包含在生成的共享库中。 该选项可以多次使用。
.Sp
从 gcc 使用这个选项时有两个注意事项: 首先，gcc 不知道这个选项，所以您必须使用 \fB\-Wl,\-whole\-archive\fP。
其次，不要忘记在您的档案列表之后使用 \fB\-Wl,\-no\-whole\-archive\fP，因为 gcc
会将其自己的档案列表添加到您的链接中，您可能不希望此标志也影响那些。
.IP \fB\-\-wrap=\fP\fIsymbol\fP 4
.IX Item \-\-wrap=symbol
为 \fIsymbol\fP 使用包装器函数。 任何未定义的对 \&\fIsymbol\fP 的引用都将被解析为
\f(CW\*(C`_\|_wrap_\fP\f(CIsymbol\f(CW\*(C'\fP。任何未定义的对
\f(CW\*(C`_\|_real_\fP\f(CIsymbol\f(CW\*(C'\fP 的引用都将被解析为 \&\fIsymbol\fP。
.Sp
这可用于为系统函数提供包装器。 包装器函数应该叫做
\f(CW\*(C`_\|_wrap_\fP\f(CIsymbol\f(CW\*(C'\fP。如果要调用系统函数，应该调用
\&\f(CW\*(C`_\|_real_\fP\f(CIsymbol\f(CW\*(C'\fP。
.Sp
这是一个简单的例子:
.Sp
.Vb 6
\& void * \& _\|_wrap_malloc (size_t c)  \& { \& printf ("malloc called with
%zu\en", c); \& return _\|_real_malloc (c); \& }
.Ve
.Sp
如果您使用 \fB\-\-wrap malloc\fP 将其他代码与此文件链接，则所有对 \f(CW\*(C`malloc\*(C'\fP 的调用都将调用函数
\f(CW\*(C`_\|_wrap_malloc\*(C'\fP。 \f(CW\*(C`_\|_wrap_malloc\*(C'\fP 中对
\f(CW\*(C`_\|_real_malloc\*(C'\fP 的调用将调用真正的 \f(CW\*(C`malloc\*(C'\fP 函数。
.Sp
您可能还希望提供 \f(CW\*(C`_\|_real_malloc\*(C'\fP 函数，这样没有 \fB\-\-wrap\fP 选项的链接就会成功。
如果这样做，则不应将 \f(CW\*(C`_\|_real_malloc\*(C'\fP 的定义与 \f(CW\*(C`_\|_wrap_malloc\*(C'\fP
放在同一个文件中; 如果这样做，汇编器可能会在链接器有机会将其包装到 \f(CW\*(C`malloc\*(C'\fP 之前解析调用。
.Sp
只有未定义的引用被链接器替换。 所以，翻译元内部引用到 \fIsymbol\fP 没有解析到
\&\f(CW\*(C`_\|_wrap_\fP\f(CIsymbol\f(CW\*(C'\fP。在下一个示例中，\&\f(CW\*(C`g\*(C'\fP 中对
\f(CW\*(C`f\*(C'\fP 的调用未解析为 \f(CW\*(C`_\|_wrap_f\*(C'\fP。
.Sp
.Vb 5
\& int \& f (void)  \& { \& return 123; \& } \& \& int \& g (void)  \& { \&
return f(); \& }
.Ve
.IP \fB\-\-eh\-frame\-hdr\fP 4
.IX Item \-\-eh\-frame\-hdr
.PD 0
.IP \fB\-\-no\-eh\-frame\-hdr\fP 4
.IX Item \-\-no\-eh\-frame\-hdr
.PD
请求 (\fB\-\-eh\-frame\-hdr\fP) 或禁止 (\fB\-\-no\-eh\-frame\-hdr\fP) 创建
\f(CW\*(C`.eh_frame_hdr\*(C'\fP 节和 \s-1ELF\s0 \f(CW\*(C`PT_GNU_EH_FRAME\*(C'\fP 段头。
.IP \fB\-\-no\-ld\-generated\-unwind\-info\fP 4
.IX Item \-\-no\-ld\-generated\-unwind\-info
请求为链接器生成的代码段 (如 \s-1PLT.\s0) 创建 \f(CW\*(C`.eh_frame\*(C'\fP
展开信息如果支持链接器生成的展开信息，则此选项默认处于启用状态。 此选项还控制链接器生成的代码部分 (如 \s-1PLT.\s0) 的
\f(CW\*(C`.sframe\*(C'\fP 展开信息的生成
.IP \fB\-\-enable\-new\-dtags\fP 4
.IX Item \-\-enable\-new\-dtags
.PD 0
.IP \fB\-\-disable\-new\-dtags\fP 4
.IX Item \-\-disable\-new\-dtags
.PD
此链接器可以在 \s-1ELF.\s0 中创建新的动态标签，但较旧的 \s-1ELF\s0 系统可能无法理解它们。如果您指定
\&\fB\-\-enable\-new\-dtags\fP，将根据需要创建新的动态标签，而将忽略旧的动态标签。 如果您指定
\fB\-\-disable\-new\-dtags\fP，则不会创建新的动态标签。默认情况下，不会创建新的动态标签。请注意，这些选项仅适用于 \s-1ELF\s0
系统。
.IP \fB\-\-hash\-size=\fP\fInumber\fP 4
.IX Item \-\-hash\-size=number
将链接器哈希表的默认大小设置为接近 \fInumber\fP 的质数。 增加此值可以减少链接器执行其任务所需的时间长度，但会增加链接器的内存需求。
同样，减小此值可以以牺牲速度为代价来降低内存需求。
.IP \fB\-\-hash\-style=\fP\fIstyle\fP 4
.IX Item \-\-hash\-style=style
设置链接器的哈希类型 table(s)。 \fIstyle\fP 可以是经典 \s-1ELF\s0 \f(CW\*(C`.hash\*(C'\fP 部分的
\&\f(CW\*(C`sysv\*(C'\fP、新型 \s-1GNU\s0 \f(CW\*(C`.gnu.hash\*(C'\fP 部分的
\f(CW\*(C`gnu\*(C'\fP 或经典 \s-1ELF\s0 \f(CW\*(C`.hash\*(C'\fP 和新型 \s-1GNU\s0
\f(CW\*(C`.gnu.hash\*(C'\fP 哈希表的 \f(CW\*(C`both\*(C'\fP。 默认值取决于链接器的配置方式，但对于大多数基于
Linux 的系统，它将是 \f(CW\*(C`both\*(C'\fP。
.IP \fB\-\-compress\-debug\-sections=none\fP 4
.IX Item \-\-compress\-debug\-sections=none
.PD 0
.IP \fB\-\-compress\-debug\-sections=zlib\fP 4
.IX Item \-\-compress\-debug\-sections=zlib
.IP \fB\-\-compress\-debug\-sections=zlib\-gnu\fP 4
.IX Item \-\-compress\-debug\-sections=zlib\-gnu
.IP \fB\-\-compress\-debug\-sections=zlib\-gabi\fP 4
.IX Item \-\-compress\-debug\-sections=zlib\-gabi
.IP \fB\-\-compress\-debug\-sections=zstd\fP 4
.IX Item \-\-compress\-debug\-sections=zstd
.PD
在 \s-1ELF\s0 平台上，这些选项控制如何使用 zlib 压缩 \s-1DWARF\s0 调试部分。
.Sp
\&\fB\-\-compress\-debug\-sections=none\fP 不压缩 \s-1DWARF\s0 调试部分。
\fB\-\-compress\-debug\-sections=zlib\-gnu\fP 压缩 \&\s-1DWARF\s0 调试部分并将它们重命名为以
\&\fB.zdebug\fP 而不是 \fB.debug\fP 开头。 \fB\-\-compress\-debug\-sections=zlib\-gabi\fP 还压缩
\s-1DWARF\s0 调试部分，但不是重命名它们，而是在部分的标题中设置 \s-1SHF_COMPRESSED\s0 标志。
.Sp
\fB\-\-compress\-debug\-sections=zlib\fP 选项是
\&\fB\-\-compress\-debug\-sections=zlib\-gabi\fP 的别名。
.Sp
\&\fB\-\-compress\-debug\-sections=zstd\fP 使用 zstd 压缩 \s-1DWARF\s0 调试部分。
.Sp
请注意，此选项会覆盖输入调试部分中的任何压缩，因此如果二进制文件与 \fB\-\-compress\-debug\-sections=none\fP
链接，则输入文件中的任何压缩调试部分将在复制到输出二进制文件之前解压缩。
.Sp
默认压缩行为因所涉及的目标和用于构建工具链的配置选项而异。 可以通过检查链接器的 \&\fB\-\-help\fP 选项的输出来确定默认值。
.IP \fB\-\-reduce\-memory\-overheads\fP 4
.IX Item \-\-reduce\-memory\-overheads
此选项以链接速度为代价降低了 ld 运行时的内存需求。 这是为了选择旧的 O(n^2) 算法来生成链接 map 文件，而不是新的 O(n)
算法，后者使用大约 40% 的内存来存储符号。
.Sp
该开关的另一个作用是将默认哈希表大小设置为 1021，这再次以延长链接器的运行时间为代价节省了内存。 但是，如果使用了 \fB\-\-hash\-size\fP
开关，则不会这样做。
.Sp
\fB\-\-reduce\-memory\-overheads\fP 开关也可用于在 future 版本的链接器中启用其他权衡。
.IP \fB\-\-max\-cache\-size=\fP\fIsize\fP 4
.IX Item \-\-max\-cache\-size=size
\&\fBld\fP 通常在内存中缓存输入文件的重定位信息和符号表，大小不限。 此选项将最大缓存大小设置为 \fIsize\fP.
.IP \fB\-\-build\-id\fP 4
.IX Item \-\-build\-id
.PD 0
.IP \fB\-\-build\-id=\fP\fIstyle\fP 4
.IX Item \-\-build\-id=style
.PD
请求创建 \f(CW\*(C`.note.gnu.build\-id\*(C'\fP \s-1ELF\s0 注释部分或
\f(CW\*(C`.buildid\*(C'\fP \s-1COFF\s0 部分。 注释的内容是标识此链接文件的唯一位。 \fIstyle\fP 可以是
\&\f(CW\*(C`uuid\*(C'\fP 使用 128 个随机位，\f(CW\*(C`sha1\*(C'\fP 在输出内容的规范部分使用 160 位
\&\s-1SHA1\s0 哈希，\&\f(CW\*(C`md5\*(C'\fP 在输出内容的规范部分使用 128 位 \s-1MD5\s0 哈希输出内容，或
\f(CW\*(C`0x\fP\f(CIhexstring\f(CW\*(C'\fP 使用指定为偶数个十六进制数字的所选位串 (\f(CW\*(C`\-\*(C'\fP 和
\&\f(CW\*(C`:\*(C'\fP 数字对之间的字符将被忽略)。 如果省略 \fIstyle\fP，则使用 \f(CW\*(C`sha1\*(C'\fP。
.Sp
\f(CW\*(C`md5\*(C'\fP 和 \f(CW\*(C`sha1\*(C'\fP
样式生成的标识符在相同的输出文件中始终相同，但在所有不同的输出文件中都是唯一的。 它不打算作为文件内容的校验和进行比较。
链接文件稍后可能会被其他工具更改，但标识原始链接文件的构建 \s-1ID\s0 位字符串不会更改。
.Sp
为 \fIstyle\fP 传递 \f(CW\*(C`none\*(C'\fP 会禁用命令行前面任何 \&\f(CW\*(C`\-\-build\-id\*(C'\fP
选项的设置。
.IP \fB\-\-package\-metadata=\fP\fI\s-1JSON\s0\fP 4
.IX Item \-\-package\-metadata=JSON
请求创建 \f(CW\*(C`.note.package\*(C'\fP \s-1ELF\s0 注释部分。 根据包元数据规范，注释的内容采用
\s-1JSON\s0 格式。 有关详细信息，请参见: https://systemd.io/ELF_PACKAGE_METADATA/ 如果
\s-1JSON\s0 参数是 missing/empty，那么这将禁用元数据注释的创建，前提是之前出现的 \-\-package\-metdata
选项已启用元数据注释。 如果链接器是用 libjansson 构建的，那么 \s-1JSON\s0 字符串将被验证。
.PP
i386 \s-1PE\s0 链接器支持 \fB\-shared\fP 选项，这会导致输出为动态链接库 (\s-1DLL\s0) 而不是普通的可执行文件。
使用此选项时，应将输出命名为 \f(CW\*(C`*.dll\*(C'\fP。 此外，链接器完全支持标准的 \&\f(CW\*(C`*.def\*(C'\fP
文件，这些文件可以像目标文件一样在链接器命令行上指定 (实际上，它应该先于它从中导出符号的档案，以确保它们像普通文件一样被链接进来目标文件)。
.PP
除了所有目标通用的选项外，i386 \s-1PE\s0 链接器还支持特定于 i386\&\s-1PE\s0 目标的其他命令行选项。
取值的选项可以用空格或等号与其值分开。
.IP \fB\-\-add\-stdcall\-alias\fP 4
.IX Item \-\-add\-stdcall\-alias
如果给定，带有 stdcall 后缀 (@\fInn\fP) 的符号将按原样导出，并且后缀也会被剥离。 [This option is specific to
the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-base\-file\fP \fIfile\fP" 4
.IX Item "\-\-base\-file file"
使用 \fIfile\fP 作为文件名，其中保存使用 \&\fIdlltool\fP 生成 DLL 所需的所有重定位的基址。 [This is an i386
\s-1PE\s0 specific option]
.IP \fB\-\-dll\fP 4
.IX Item \-\-dll
创建 \s-1DLL\s0 而不是常规可执行文件。 您还可以使用 \&\fB\-shared\fP 或在给定的 \f(CW\*(C`.def\*(C'\fP 文件中指定
\f(CW\*(C`LIBRARY\*(C'\fP。 [This option is specific to the i386 \s-1PE\s0
targeted port of the linker]
.IP \fB\-\-enable\-long\-section\-names\fP 4
.IX Item \-\-enable\-long\-section\-names
.PD 0
.IP \fB\-\-disable\-long\-section\-names\fP 4
.IX Item \-\-disable\-long\-section\-names
.PD
\s-1COFF\s0 对象格式的 \s-1PE\s0 变体添加了一个扩展，允许使用超过八个字符的节名称，这是 \s-1COFF 的正常限制。\s0
默认情况下，这些名称只允许在目标文件中使用，因为完全链接可执行映像不携带支持较长名称所需的 \s-1COFF\s0 字符串表。 作为
\s-1GNU\s0 扩展，也可以允许它们在可执行映像中使用，或者 (可能毫无意义! ) 通过使用这两个选项禁止它在目标文件中使用。
使用这些长节名称生成的可执行映像略微不标准，带有字符串表，并且在使用非 GNU PE 感知工具 (例如文件查看器和转储程序)
检查时可能会生成令人困惑的输出。 但是，\&\s-1GDB\s0 依赖于使用 \s-1PE\s0 长节名称在运行时在可执行映像中查找 Dwarf\-2
调试信息节，因此如果在命令行上未指定任何选项，\fBld\fP
将启用长节名称，覆盖默认和技术上正确的行为，当它在链接可执行映像而不是剥离符号时发现存在调试信息时。 [This option is valid for
all \s-1PE\s0 targeted ports of the linker]
.IP \fB\-\-enable\-stdcall\-fixup\fP 4
.IX Item \-\-enable\-stdcall\-fixup
.PD 0
.IP \fB\-\-disable\-stdcall\-fixup\fP 4
.IX Item \-\-disable\-stdcall\-fixup
.PD
如果链接找到它无法解析的符号，它将尝试通过查找另一个仅在符号名称格式 (cdecl 与 stdcall) 上不同的已定义符号来执行 \*(L"模糊链接
\*(R") 和将通过链接到匹配项来解析该符号。 例如，未定义的符号 \f(CW\*(C`_foo\*(C'\fP 可能链接到函数
\&\f(CW\*(C`_foo@12\*(C'\fP，或者未定义的符号 \f(CW\*(C`_bar@16\*(C'\fP 可能链接到函数
\f(CW\*(C`_bar\*(C'\fP。 当链接器执行此操作时，它会打印一条警告，因为它通常应该链接失败，但有时从第三方 dll
生成的导入库可能需要此特性才能使用。 如果指定 \fB\-\-enable\-stdcall\-fixup\fP，则完全启用此特性并且不会打印警告。 如果您指定
\&\fB\-\-disable\-stdcall\-fixup\fP，则此特性被禁用并且此类不匹配被视为错误。 [This option is specific
to the i386 \s-1PE\s0 targeted port of the linker]
.IP \fB\-\-leading\-underscore\fP 4
.IX Item \-\-leading\-underscore
.PD 0
.IP \fB\-\-no\-leading\-underscore\fP 4
.IX Item \-\-no\-leading\-underscore
.PD
对于大多数目标，默认符号前缀是下划线，并在目标的描述中定义。通过此选项，可以将默认的下划线符号前缀 disable/enable。
.IP \fB\-\-export\-all\-symbols\fP 4
.IX Item \-\-export\-all\-symbols
如果给定，用于构建 \s-1DLL\s0 的对象中的所有全局符号将由 \s-1DLL 导出。\s0 请注意，如果没有任何导出符号，则这是默认设置。
当符号通过 \s-1DEF\s0 文件显式导出或通过函数属性隐式导出时，默认情况下不导出任何其他内容，除非给出此选项。 请注意，不会自动导出符号
\f(CW\*(C`DllMain@12\*(C'\fP、\&\f(CW\*(C`DllEntryPoint@0\*(C'\fP、\f(CW\*(C`DllMainCRTStartup@12\*(C'\fP
和 \&\f(CW\*(C`impure_ptr\*(C'\fP。 此外，不会重新导出从其他 DLL 导入的符号，也不会重新导出指定 \s-1DLL\s0
内部布局的符号，例如那些以 \f(CW\*(C`_head_\*(C'\fP 开头或以 \&\f(CW\*(C`_iname\*(C'\fP 结尾的符号。
此外，不会导出来自
\f(CW\*(C`libgcc\*(C'\fP、\&\f(CW\*(C`libstd++\*(C'\fP、\f(CW\*(C`libmingw32\*(C'\fP 或
\f(CW\*(C`crtX.o\*(C'\fP 的符号。 名称以 \f(CW\*(C`_\|_rtti_\*(C'\fP 或
\f(CW\*(C`_\|_builtin_\*(C'\fP 开头的符号将不会被导出，以帮助 \*(C+ DLL。 最后，还有大量未导出的
cygwin\-private 符号 (显然，这适用于为 cygwin 目标构建 DLL 时)。 这些 cygwin 排除项是:
\f(CW\*(C`_cygwin_dll_entry@12\*(C'\fP、\&\f(CW\*(C`_cygwin_crt0_common@8\*(C'\fP、\f(CW\*(C`_cygwin_noncygwin_dll_entry@12\*(C'\fP、\&\f(CW\*(C`_fmode\*(C'\fP、\f(CW\*(C`_impure_ptr\*(C'\fP、\f(CW\*(C`cygwin_attach_dll\*(C'\fP、\&\f(CW\*(C`cygwin_premain0\*(C'\fP、\f(CW\*(C`cygwin_premain1\*(C'\fP、\f(CW\*(C`cygwin_premain2\*(C'\fP、\&\f(CW\*(C`cygwin_premain3\*(C'\fP
和 \f(CW\*(C`environ\*(C'\fP。 [This option is specific to the i386 \s-1PE\s0
targeted port of the linker]
.IP "\fB\-\-exclude\-symbols\fP \fIsymbol\fP\fB,\fP\fIsymbol\fP\fB,...\fP" 4
.IX Item "\-\-exclude\-symbols symbol,symbol,..."
指定不应自动导出的符号列表。 符号名称可以用逗号或冒号分隔。 [This option is specific to the i386
\s-1PE\s0 targeted port of the linker]
.IP \fB\-\-exclude\-all\-symbols\fP 4
.IX Item \-\-exclude\-all\-symbols
指定不应自动导出任何符号。 [This option is specific to the i386 \s-1PE\s0 targeted port
of the linker]
.IP \fB\-\-file\-alignment\fP 4
.IX Item \-\-file\-alignment
指定文件对齐方式。 文件中的部分将始终从文件偏移量开始，该文件偏移量是该数字的倍数。 默认为 512。 [This option is specific
to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-heap\fP \fIreserve\fP" 4
.IX Item "\-\-heap reserve"
.PD 0
.IP "\fB\-\-heap\fP \fIreserve\fP\fB,\fP\fIcommit\fP" 4
.IX Item "\-\-heap reserve,commit"
.PD
指定要保留 (并可选地提交) 用作此程序堆的内存字节数。 默认为保留 1MB，提交 4K。 [This option is specific to
the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-image\-base\fP \fIvalue\fP" 4
.IX Item "\-\-image\-base value"
使用 \fIvalue\fP 作为程序或 dll 的基地址。 这是加载程序或 dll 时将使用的最低内存位置。 为了减少重新定位和提高 dll
性能的需要，每个 dll 都应该有一个唯一的基址并且不与任何其他 dll 重叠。 可执行文件的默认值为 0x400000，dll 的默认值为
0x10000000。 [This option is specific to the i386 \s-1PE\s0 targeted port of
the linker]
.IP \fB\-\-kill\-at\fP 4
.IX Item \-\-kill\-at
如果给定，stdcall 后缀 (@\fInn\fP) 将在导出之前从符号中去除。 [This option is specific to the i386
\s-1PE\s0 targeted port of the linker]
.IP \fB\-\-large\-address\-aware\fP 4
.IX Item \-\-large\-address\-aware
如果给定，\s-1COFF\s0 标头的 \*(L"Characteristics\*(R" 字段中的相应位将设置为指示此可执行文件支持大于 2 GB
的虚拟地址。 这应该与 \*(L [操作系统]\*(R"\s-1BOOT.INI 部分中的 / 3GB 或 /USERVA=\fIvalue\fP
兆字节开关一起使用。\s0 否则，该位无效。 [This option is specific to \s-1PE\s0 targeted ports
of the linker]
.IP \fB\-\-disable\-large\-address\-aware\fP 4
.IX Item \-\-disable\-large\-address\-aware
恢复先前 \fB\-\-large\-address\-aware\fP 选项的效果。 如果 \fB\-\-large\-address\-aware\fP 始终由编译器驱动程序
(例如 Cygwin gcc) 设置并且可执行文件不支持大于 2 GB 的虚拟地址，这将很有用。 [This option is specific to
\s-1PE\s0 targeted ports of the linker]
.IP "\fB\-\-major\-image\-version\fP \fIvalue\fP" 4
.IX Item "\-\-major\-image\-version value"
设置 \*(L"image version\*(R".  默认为 1。 [This option is specific to the i386
\s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-major\-os\-version\fP \fIvalue\fP" 4
.IX Item "\-\-major\-os\-version value"
设置 \*(L"os version\*(R".  默认为 4。 [This option is specific to the i386
\s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-major\-subsystem\-version\fP \fIvalue\fP" 4
.IX Item "\-\-major\-subsystem\-version value"
设置 \*(L"子系统版本 \*(R".  默认为 4。 [This option is specific to the i386 \s-1PE\s0
targeted port of the linker]
.IP "\fB\-\-minor\-image\-version\fP \fIvalue\fP" 4
.IX Item "\-\-minor\-image\-version value"
设置 \*(L"image version\*(R".  默认为 0。 [This option is specific to the i386
\s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-minor\-os\-version\fP \fIvalue\fP" 4
.IX Item "\-\-minor\-os\-version value"
设置 \*(L"os version\*(R".  默认为 0。 [This option is specific to the i386
\s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-minor\-subsystem\-version\fP \fIvalue\fP" 4
.IX Item "\-\-minor\-subsystem\-version value"
设置 \*(L"子系统版本 \*(R".  默认为 0。 [This option is specific to the i386 \s-1PE\s0
targeted port of the linker]
.IP "\fB\-\-output\-def\fP \fIfile\fP" 4
.IX Item "\-\-output\-def file"
链接器将创建文件 \fIfile\fP，其中将包含与链接器生成的 \s-1DLL\s0 相对应的 \s-1DEF\s0 文件。 此 \s-1DEF\s0 文件
(应称为 \f(CW\*(C`*.def\*(C'\fP) 可用于创建带有 \f(CW\*(C`dlltool\*(C'\fP
的导入库，或可用作自动或隐式导出符号的引用。 [This option is specific to the i386 \s-1PE\s0
targeted port of the linker]
.IP \fB\-\-enable\-auto\-image\-base\fP 4
.IX Item \-\-enable\-auto\-image\-base
.PD 0
.IP \fB\-\-enable\-auto\-image\-base=\fP\fIvalue\fP 4
.IX Item \-\-enable\-auto\-image\-base=value
.PD
自动选择 DLL 的映像库，可选地从库 \&\fIvalue\fP 开始，除非使用 \f(CW\*(C`\-\-image\-base\*(C'\fP 参数指定一个。
通过使用从 dll 名称生成的哈希为每个 \s-1DLL 创建唯一的映像库，\s0 可以避免可能延迟程序执行的内存冲突和重定位。 [This
option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP \fB\-\-disable\-auto\-image\-base\fP 4
.IX Item \-\-disable\-auto\-image\-base
不要自动生成唯一的图像库。 如果没有用户指定的图像基 (\f(CW\*(C`\-\-image\-base\*(C'\fP)，则使用平台默认值。 [This
option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-dll\-search\-prefix\fP \fIstring\fP" 4
.IX Item "\-\-dll\-search\-prefix string"
在没有导入库的情况下动态链接到 dll 时，搜索
\f(CW\*(C`<string><basename>.dll\*(C'\fP 而不是
\&\f(CW\*(C`lib<basename>.dll\*(C'\fP。此行为允许轻松区分为各种 \*(L"子平台 \*(R":
native、cygwin、uwin、pw 等构建的 DLL。例如，cygwin DLL 通常使用
\&\f(CW\*(C`\-\-dll\-search\-prefix=cyg\*(C'\fP。 [This option is specific to the
i386 \s-1PE\s0 targeted port of the linker]
.IP \fB\-\-enable\-auto\-import\fP 4
.IX Item \-\-enable\-auto\-import
对从 DLL 导入的 \&\s-1DATA\s0 进行 \f(CW\*(C`_symbol\*(C'\fP 到
\f(CW\*(C`_\|_imp_\|_symbol\*(C'\fP 的复杂链接，从而可以绕过用户端的 dllimport 机制并引用未损坏的符号名称。
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.Sp
以下评论与该特性的原始实现有关，现在对于 Cygwin 和 MinGW 目标已过时。
.Sp
Note: 使用 'auto\-import' 扩展名将使图像文件的文本部分变为可写。这不符合 Microsoft 发布的 PE\-COFF 格式规范。
.Sp
注意 \- 使用 'auto\-import' 扩展名也会导致只读数据通常被放置到 .rdata 部分，而不是被放置到 .data 部分。
这是为了解决此处描述的常量问题: http://www.cygwin.com/ml/cygwin/2004\-09/msg01101.html
.Sp
使用 'auto\-import' 通常会 `正常工作`\*(-- 但有时您可能会看到此消息:
.Sp
"无法自动导入变量 '<var>'。有关详细信息，请阅读 ld 的 \f(CW\*(C`\-\-enable\-auto\-import\*(C'\fP
的文档。"
.Sp
当某些 (子) 表达式访问最终由两个常量之和给出的地址时会出现此消息 (Win32 导入表只允许一个)。 可能发生这种情况的实例包括访问从
\s-1DLL 导入的结构变量的成员字段，\s0 以及使用常量索引到从 \s-1DLL 导入的数组变量中。\s0 任何多字变量 (数组、结构体、long
long 等) 可能会触发此错误条件。 然而，不管有问题的导出变量的确切数据类型如何，ld 总是会检测到它，发出警告，然后退出。
.Sp
有几种方法可以解决这个困难，不管导出变量的数据类型如何:
.Sp
一种方法是使用 \-\-enable\-runtime\-pseudo\-reloc
开关。这留下了在您的客户端代码中为运行时环境调整引用的任务，因此该方法仅在运行时环境支持此特性时才有效。
.Sp
第二种解决方案是强制其中一个 'constants' 成为变量 \*(-- 也就是说，在编译时未知且不可优化。对于数组，有两种可能性: a) 使索引对象
(数组的地址) 成为变量，或 b) 使 'constant' 索引成为变量。 Thus:
.Sp
.Vb 3
\& 外部类型 extern_array []; \& extern_array[1] \-\-> \& { volatile type
*t=extern_array; t[1] }
.Ve
.Sp
or
.Sp
.Vb 3
\& 外部类型 extern_array []; \& extern_array[1] \-\-> \& { volatile int t=1;
extern_array[t] }
.Ve
.Sp
对于结构体 (以及大多数其他多词数据类型)，唯一的选择是使结构体本身 (或 long long，或...) 变量:
.Sp
.Vb 3
\&extern 结构体 s extern_struct; \& extern_struct.field \-\-> \& { volatile
struct s *t=&extern_struct; t\->field }
.Ve
.Sp
or
.Sp
.Vb 3
\& extern long long extern_ll; \& extern_ll \-\-> \& { volatile long long
* local_ll=&extern_ll; *local_ll }
.Ve
.Sp
处理这个困难的第三种方法是放弃 \&'auto\-import' 的违规符号并用
\&\f(CW\*(C`_\|_declspec(dllimport)\*(C'\fP 标记它。 但是，在实践中，这需要使用编译时 #defines
来指示您是在构建 \s-1DLL、\s0 构建将链接到 \s-1DLL、\s0 的客户端代码还是仅 building/linking 到静态库。 在解决
`具有常量偏移量的直接地址` 问题的各种方法之间做出选择时，您应该考虑典型的现实世界用法:
.Sp
Original:
.Sp
.Vb 7
\& \-\-foo.h \& extern int arr[]; \& \-\-foo.c \& #include "foo.h" \& void
main(int argc, char **argv){ \& printf("%d\en",arr[1]); \& }
.Ve
.Sp
解决方案 1:
.Sp
.Vb 9
\& \-\-foo.h \& extern int arr[]; \& \-\-foo.c \& #include "foo.h" \& void
main(int argc, char **argv){ \& /* This workaround is for win32 and cygwin;
do not "optimize" */ \& volatile int *parr = arr; \&
printf("%d\en",parr[1]); \& }
.Ve
.Sp
解决方案 2:
.Sp
.Vb 10
\& \-\-foo.h \& /* Note: auto\-export is assumed (no _\|_declspec(dllexport))
*/ \& #if (defined(_WIN32) || defined(_\|_CYGWIN_\|_)) && \e \&
!(defined(FOO_BUILD_DLL) || defined(FOO_STATIC))  \& #define FOO_IMPORT
_\|_declspec(dllimport)  \& #else \& #define FOO_IMPORT \& #endif \& extern
FOO_IMPORT int arr[]; \& \-\-foo.c \& #include "foo.h" \& void main(int argc,
char **argv){ \& printf("%d\en",arr[1]); \& }
.Ve
.Sp
避免此问题的第四种方法是重新编码您的库以使用功能接口而不是数据接口来处理有问题的变量 (例如 \fBset_foo()\fP 和 \fBget_foo()\fP
访问器函数)。
.IP \fB\-\-disable\-auto\-import\fP 4
.IX Item \-\-disable\-auto\-import
对于从 DLL 导入的 \s-1DATA\s0，不要尝试将 \f(CW\*(C`_symbol\*(C'\fP 复杂地链接到
\&\f(CW\*(C`_\|_imp_\|_symbol\*(C'\fP。 [This option is specific to the i386
\s-1PE\s0 targeted port of the linker]
.IP \fB\-\-enable\-runtime\-pseudo\-reloc\fP 4
.IX Item \-\-enable\-runtime\-pseudo\-reloc
如果您的代码包含 \-\-enable\-auto\-import 部分中描述的表达式，即 \s-1DATA\s0 从具有非零偏移量的 \s-1DLL\s0
导入，则此开关将创建一个 vector 的 `运行时伪重定位`，运行时环境可以使用它来调整在您的客户端代码中引用此类数据。 [This option
is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP \fB\-\-disable\-runtime\-pseudo\-reloc\fP 4
.IX Item \-\-disable\-runtime\-pseudo\-reloc
不要为从 DLL 导入的非零偏移 \s-1DATA\s0 创建伪重定位。 [This option is specific to the i386
\s-1PE\s0 targeted port of the linker]
.IP \fB\-\-enable\-extra\-pe\-debug\fP 4
.IX Item \-\-enable\-extra\-pe\-debug
显示与自动导入符号转换相关的其他调试信息。 [This option is specific to the i386 \s-1PE\s0
targeted port of the linker]
.IP \fB\-\-section\-alignment\fP 4
.IX Item \-\-section\-alignment
设置部分对齐方式。 内存中的段总是从这个数字的倍数的地址开始。 默认为 0x1000。 [This option is specific to the
i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-stack\fP \fIreserve\fP" 4
.IX Item "\-\-stack reserve"
.PD 0
.IP "\fB\-\-stack\fP \fIreserve\fP\fB,\fP\fIcommit\fP" 4
.IX Item "\-\-stack reserve,commit"
.PD
指定要保留 (并可选地提交) 用作此程序栈的内存字节数。 默认为保留 2MB，提交 4K。 [This option is specific to
the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-subsystem\fP \fIwhich\fP" 4
.IX Item "\-\-subsystem which"
.PD 0
.IP "\fB\-\-subsystem\fP \fIwhich\fP\fB:\fP\fImajor\fP" 4
.IX Item "\-\-subsystem which:major"
.IP "\fB\-\-subsystem\fP \fIwhich\fP\fB:\fP\fImajor\fP\fB.\fP\fIminor\fP" 4
.IX Item "\-\-subsystem which:major.minor"
.PD
指定您的程序将在其下执行的子系统。 \fIwhich\fP 的合法值为
\f(CW\*(C`native\*(C'\fP、\f(CW\*(C`windows\*(C'\fP、\&\f(CW\*(C`console\*(C'\fP、\f(CW\*(C`posix\*(C'\fP
和 \f(CW\*(C`xbox\*(C'\fP。 您也可以选择设置子系统版本。 \&\fIwhich\fP 也接受数值。 [This option is
specific to the i386 \s-1PE\s0 targeted port of the linker]
.Sp
以下选项在 \s-1PE\s0 文件头的 \f(CW\*(C`DllCharacteristics\*(C'\fP 字段中设置标志: [These
options are specific to \s-1PE\s0 targeted ports of the linker]
.IP \fB\-\-high\-entropy\-va\fP 4
.IX Item \-\-high\-entropy\-va
.PD 0
.IP \fB\-\-disable\-high\-entropy\-va\fP 4
.IX Item \-\-disable\-high\-entropy\-va
.PD
图像与 64 位地址空间布局随机化 (\s-1ASLR\s0) 兼容。 对于 64 位 \s-1PE\s0 图像，此选项默认启用。
.Sp
此选项还暗示 \fB\-\-dynamicbase\fP 和 \&\fB\-\-enable\-reloc\-section\fP。
.IP \fB\-\-dynamicbase\fP 4
.IX Item \-\-dynamicbase
.PD 0
.IP \fB\-\-disable\-dynamicbase\fP 4
.IX Item \-\-disable\-dynamicbase
.PD
可以使用地址空间布局随机化 (\s-1ASLR\s0) 重新定位映像基地址。 此特性是在 i386 \s-1PE\s0 目标的 \s-1MS\s0
Windows Vista 中引入的。 默认情况下启用此选项，但可以通过 \fB\-\-disable\-dynamicbase\fP 选项禁用。 此选项还暗示
\fB\-\-enable\-reloc\-section\fP。
.IP \fB\-\-forceinteg\fP 4
.IX Item \-\-forceinteg
.PD 0
.IP \fB\-\-disable\-forceinteg\fP 4
.IX Item \-\-disable\-forceinteg
.PD
强制执行代码完整性检查。 默认情况下禁用此选项。
.IP \fB\-\-nxcompat\fP 4
.IX Item \-\-nxcompat
.PD 0
.IP \fB\-\-disable\-nxcompat\fP 4
.IX Item \-\-disable\-nxcompat
.PD
该图像与数据执行保护兼容。 此特性是在 i386 \s-1PE\s0 目标的 \s-1MS\s0 Windows\s-1XP SP2\s0 中引入的。
默认情况下启用该选项。
.IP \fB\-\-no\-isolation\fP 4
.IX Item \-\-no\-isolation
.PD 0
.IP \fB\-\-disable\-no\-isolation\fP 4
.IX Item \-\-disable\-no\-isolation
.PD
图像虽懂孤立，但不要孤立图像。 默认情况下禁用此选项。
.IP \fB\-\-no\-seh\fP 4
.IX Item \-\-no\-seh
.PD 0
.IP \fB\-\-disable\-no\-seh\fP 4
.IX Item \-\-disable\-no\-seh
.PD
该图像不使用 \s-1SEH。\s0 不能从此图像调用 \s-1SE\s0 处理程序。 默认情况下禁用此选项。
.IP \fB\-\-no\-bind\fP 4
.IX Item \-\-no\-bind
.PD 0
.IP \fB\-\-disable\-no\-bind\fP 4
.IX Item \-\-disable\-no\-bind
.PD
不要绑定此图像。 默认情况下禁用此选项。
.IP \fB\-\-wdmdriver\fP 4
.IX Item \-\-wdmdriver
.PD 0
.IP \fB\-\-disable\-wdmdriver\fP 4
.IX Item \-\-disable\-wdmdriver
.PD
该驱动程序使用 \s-1MS\s0 Windows 驱动程序模型。 默认情况下禁用此选项。
.IP \fB\-\-tsaware\fP 4
.IX Item \-\-tsaware
.PD 0
.IP \fB\-\-disable\-tsaware\fP 4
.IX Item \-\-disable\-tsaware
.PD
图像是终端服务器感知的。 默认情况下禁用此选项。
.IP \fB\-\-insert\-timestamp\fP 4
.IX Item \-\-insert\-timestamp
.PD 0
.IP \fB\-\-no\-insert\-timestamp\fP 4
.IX Item \-\-no\-insert\-timestamp
.PD
在图像中插入一个真实的时间戳。 这是默认行为，因为它匹配遗留代码，这意味着该图像将与其他专有工具一起使用。
此默认设置的问题在于，每次链接相同的源时，它会导致生成略有不同的图像。 选项 \fB\-\-no\-insert\-timestamp\fP
可用于为时间戳插入零值，这确保从相同来源生成的二进制文件将进行相同比较。
.IP \fB\-\-enable\-reloc\-section\fP 4
.IX Item \-\-enable\-reloc\-section
.PD 0
.IP \fB\-\-disable\-reloc\-section\fP 4
.IX Item \-\-disable\-reloc\-section
.PD
创建基本重定位表，如果图像加载到与 \s-1PE\s0 标头中指定的图像基不同的图像基，则这是必需的。 默认情况下启用此选项。
.PP
C6X uClinux 目标使用称为 \s-1DSBT\s0 的二进制格式来支持共享库。 系统中的每个共享库都需要有唯一的索引;
所有可执行文件都使用索引 0.
.IP "\fB\-\-dsbt\-size\fP \fIsize\fP" 4
.IX Item "\-\-dsbt\-size size"
该选项将当前可执行文件或共享库的 \s-1DSBT\s0 中的条目数设置为 \fIsize\fP。 默认是创建一个包含 64 个条目的表。
.IP "\fB\-\-dsbt\-index\fP \fIindex\fP" 4
.IX Item "\-\-dsbt\-index index"
该选项将当前可执行文件或共享库的 \s-1DSBT\s0 索引设置为 \fIindex\fP。 默认值为 0，适合生成可执行文件。 如果生成的共享库的
\s-1DSBT\s0 索引为 0，则 \&\f(CW\*(C`R_C6000_DSBT_INDEX\*(C'\fP 重定位被复制到输出文件中。
.Sp
\fB\-\-no\-merge\-exidx\-entries\fP 开关禁用帧展开信息中相邻 exidx 条目的合并。
.IP \fB\-\-branch\-stub\fP 4
.IX Item \-\-branch\-stub
此选项通过在需要扩展分支范围时插入分支存根部分来启用链接器分支放宽。 通常不需要此选项，因为 C\-SKY
支持可以访问完整内存范围的分支和调用指令，并且分支放宽通常由编译器或汇编器处理。
.IP \fB\-\-stub\-group\-size=\fP\fIN\fP 4
.IX Item \-\-stub\-group\-size=N
此选项允许更好地控制链接器分支存根的创建。 它设置了一个存根部分可以处理的一组输入部分的最大大小。 \fIN\fP 的 negative
值将存根部分定位在其分支之后，而正值允许存根部分出现在分支之前或之后。 \&\fB1\fP 或 \fB\-1\fP 的值指示链接器应选择合适的默认值。
.PP
68HC11 和 68HC12 链接器支持特定的选项来控制存储库切换映射和蹦床代码生成。
.IP \fB\-\-no\-trampoline\fP 4
.IX Item \-\-no\-trampoline
此选项禁用蹦床的生成。默认情况下，为每个使用 \f(CW\*(C`jsr\*(C'\fP 指令调用的远数生成一个蹦床 (当采用指向远数的指针时会发生这种情况)。
.IP "\fB\-\-bank\-window\fP \fIname\fP" 4
.IX Item "\-\-bank\-window name"
该选项向链接器指示 \fB\s-1MEMORY\s0\fP 规范中描述内存库窗口的内存区域的名称。 然后链接器使用此类区域的定义来计算内存窗口内的分页和地址。
.PP
支持以下选项以控制链接 68K 目标时 \s-1GOT\s0 生成的处理。
.IP \fB\-\-got=\fP\fItype\fP 4
.IX Item \-\-got=type
该选项告诉链接器使用哪个 \s-1GOT\s0 生成方案。 \&\fItype\fP 应为
\fBsingle\fP、\fBnegative\fP、\&\fBmultigot\fP 或 \fBtarget\fP 之一。 有关详细信息，请参见 \fIld\fP 的信息条目。
.PP
在链接 \s-1MIPS\s0 目标时，支持以下选项来控制 microMIPS 指令生成和 \s-1ISA\s0 模式转换的分支重定位检查。
.IP \fB\-\-insn32\fP 4
.IX Item \-\-insn32
.PD 0
.IP \fB\-\-no\-insn32\fP 4
.IX Item \-\-no\-insn32
.PD
这些选项控制链接器生成的代码中使用的 microMIPS 指令的选择，例如 \s-1PLT\s0 或惰性绑定存根中的指令，或松弛中的指令。 如果使用
\fB\-\-insn32\fP，则链接器仅使用 32 位指令编码。 默认情况下或如果使用 \fB\-\-no\-insn32\fP，则使用所有指令编码，包括可能的 16
位编码。
.IP \fB\-\-ignore\-branch\-isa\fP 4
.IX Item \-\-ignore\-branch\-isa
.PD 0
.IP \fB\-\-no\-ignore\-branch\-isa\fP 4
.IX Item \-\-no\-ignore\-branch\-isa
.PD
这些选项控制无效 \s-1ISA\s0 模式转换的分支重定位检查。 如果使用
\fB\-\-ignore\-branch\-isa\fP，则链接器会接受任何分支重定位，并且在重定位计算中会丢失所需的任何 \s-1ISA\s0 模式转换，但某些
\f(CW\*(C`BAL\*(C'\fP 指令满足放宽条件并在计算相关重定位时转换为等效的 \f(CW\*(C`JALX\*(C'\fP 指令的情况除外。
默认情况下，或者如果使用 \fB\-\-no\-ignore\-branch\-isa\fP，则会进行检查，导致丢失 \s-1ISA\s0 模式转换以产生错误。
.IP \fB\-\-compact\-branches\fP 4
.IX Item \-\-compact\-branches
.PD 0
.IP \fB\-\-no\-compact\-branches\fP 4
.IX Item \-\-no\-compact\-branches
.PD
这些选项控制链接器在 \s-1MIPS R6.\s0 的 \s-1PLT\s0 条目中生成紧凑指令
.PP
对于 pdp11\-aout 目标，可以通过以下选项生成三种输出格式的变体。 pdp11\-aout 的默认变体是 \fB\-\-omagic\fP
选项，而对于其他目标，\fB\-\-nmagic\fP 是默认选项。 \fB\-\-imagic\fP 选项仅为 pdp11\-aout
目标定义，而其他选项在此处描述，因为它们适用于 pdp11\-aout 目标。
.IP \fB\-N\fP 4
.IX Item \-N
.PD 0
.IP \fB\-\-omagic\fP 4
.IX Item \-\-omagic
.PD
在 \fIa.out\fP header 中将输出标记为 \f(CW\*(C`OMAGIC\*(C'\fP (0407) 以指示文本段不被写保护和共享。
由于文本和字段都是可读和可写的，因此字段分配在文本段之后紧邻。 这是 \s-1PDP11\s0 可执行程序最古老的格式，从一开始到 2.11BSD 都是
\s-1PDP11\s0 Unix 系统上 \fBld\fP 的默认格式。
.IP \fB\-n\fP 4
.IX Item \-n
.PD 0
.IP \fB\-\-nmagic\fP 4
.IX Item \-\-nmagic
.PD
在 \fIa.out\fP 标头中将输出标记为 \f(CW\*(C`NMAGIC\*(C'\fP
(0410)，以指示在执行输出文件时，文本部分将是只读的，并且可在执行同一文件的所有进程之间共享。 这涉及将数据区域向上移动到文本末尾之后的第一个可能的
8K 字节页面边界。 此选项创建 \fIpure executable\fP 格式。
.IP \fB\-z\fP 4
.IX Item \-z
.PD 0
.IP \fB\-\-imagic\fP 4
.IX Item \-\-imagic
.PD
在 \fIa.out\fP 头中将输出标记为 \f(CW\*(C`IMAGIC\*(C'\fP
(0411)，表示在执行输出文件时，程序文本区和数据区将被加载到单独的地址空间中，使用较大型号的内存管理单元的拆分指令和数据空间特性
\s-1PDP11.\s0 这使程序可用的地址空间加倍。 文本段再次是纯净的、写保护的和可共享的。
除了幻数之外，此选项与其他选项输出格式的唯一区别在于文本和数据部分均从位置 0 开始。 \fB\-z\fP 选项在 2.11BSD 中选择了这种格式。
此选项创建 \fIseparate executable\fP 格式。
.IP \fB\-\-no\-omagic\fP 4
.IX Item \-\-no\-omagic
相当于 pdp11\-aout 的 \fB\-\-nmagic\fP。
.SH ENVIRONMENT
.IX Header ENVIRONMENT
您可以使用环境变量 \&\f(CW\*(C`GNUTARGET\*(C'\fP、\&\f(CW\*(C`LDEMULATION\*(C'\fP 和
\f(CW\*(C`COLLECT_NO_DEMANGLE\*(C'\fP 更改 \fBld\fP 的行为。
.PP
如果您不使用 \fB\-b\fP (或其同义词 \fB\-\-format\fP))，则 \&\f(CW\*(C`GNUTARGET\*(C'\fP 确定输入文件对象格式。
它的值应该是输入格式的 \s-1BFD\s0 名称之一。 如果环境中没有 \&\f(CW\*(C`GNUTARGET\*(C'\fP，\fBld\fP
使用目标的自然格式。如果 \f(CW\*(C`GNUTARGET\*(C'\fP 设置为 \f(CW\*(C`default\*(C'\fP，则 \s-1BFD\s0
会尝试通过检查二进制输入文件来发现输入格式; 这种方法通常会成功，但存在潜在的歧义，因为没有方法可以确保用于指定目标文件格式的幻数是唯一的。
然而，每个系统上 \&\s-1BFD\s0 的配置过程将该系统的常规格式放在搜索列表的第一位，因此歧义得到解决，有利于约定。
.PP
如果您不使用 \&\fB\-m\fP 选项，则 \&\f(CW\*(C`LDEMULATION\*(C'\fP 确定默认仿真。
仿真会影响链接器行为的各个方面，尤其是默认链接器脚本。 您可以使用 \fB\-\-verbose\fP 或 \fB\-V\fP 选项列出可用的仿真。 如果未使用
\fB\-m\fP 选项且未定义 \f(CW\*(C`LDEMULATION\*(C'\fP 环境变量，则默认仿真取决于链接器的配置方式。
.PP
通常，链接器将默认为 demangling 符号。 但是，如果在环境中设置了
\&\f(CW\*(C`COLLECT_NO_DEMANGLE\*(C'\fP，那么它将默认不对符号进行分解。 \f(CW\*(C`gcc\*(C'\fP
链接器包装程序以类似的方式使用此环境变量。 默认值可能会被 \fB\-\-demangle\fP 和 \fB\-\-no\-demangle\fP 选项覆盖。
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBar\fP\|(1)、\fBnm\fP\|(1)、\fBobjcopy\fP\|(1)、\fBobjdump\fP\|(1)、\fBreadelf\fP\|(1) 以及
\fIbinutils\fP 和 \fIbinutils\fP 的信息条目 \&\fIld\fP.
.SH COPYRIGHT
.IX Header COPYRIGHT
Copyright (c) 1991\-2023 Free Software Foundation, Inc.
.PP
根据 \s-1GNU\s0 自由文档许可证版本 1.3 或自由软件基金会发布的任何更高版本的条款，授予复制、分发或者修改本文档的权限;
没有不变的部分，没有封面文本，也没有封底文本。 该许可证的副本包含在标题为 \*(L"\s-1GNU\s0 Free Documentation
License\*(R") 的部分中。
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
