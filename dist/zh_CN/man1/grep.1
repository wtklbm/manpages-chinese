.\" -*- coding: UTF-8 -*-
.de  dT
.ds Dt \\$2
..
.\" GNU grep man page
.dT Time-stamp: 2019-12-29
.\" Update the above date whenever a change to either this file or
.\" grep.c's 'usage' function results in a nontrivial change to the man page.
.\" In Emacs, you can update the date by running 'M-x time-stamp'
.\" after you make a change that you decide is nontrivial.
.\" It is no big deal to forget to update the date.
.
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH GREP 1 \*(Dt "GNU grep 3.8" "User Commands"
.
.if  !\w|\*(lq| \{\
.\" groff an-old.tmac does not seem to be in use, so define lq and rq.
.	ie \n(.g \{\
.		ds lq \(lq\"
.		ds rq \(rq\"
.	\}
.	el \{\
.		ds lq ``
.		ds rq ''
.	\}
.\}
.
.if  !\w|\*(la| \{\
.\" groff an-ext.tmac does not seem to be in use, so define the parts of
.\" it that are used below.  For a copy of groff an-ext.tmac, please see:
.\" https://git.savannah.gnu.org/cgit/groff.git/plain/tmac/an-ext.tmac
.\" --- Start of lines taken from groff an-ext.tmac
.
.\" Check whether we are using grohtml.
.nr mH 0
.if \n(.g \
.  if '\*(.T'html' \
.    nr mH 1
.
.
.\" Map mono-width fonts to standard fonts for groff's TTY device.
.if n \{\
.  do ftr CR R
.  do ftr CI I
.  do ftr CB B
.\}
.
.\" groff has glyph entities for angle brackets.
.ie \n(.g \{\
.  ds la \(la\"
.  ds ra \(ra\"
.\}
.el \{\
.  ds la <\"
.  ds ra >\"
.  \" groff's man macros control hyphenation with this register.
.  nr HY 1
.\}
.
.\" Start URL.
.de UR
.  ds m1 \\$1\"
.  nh
.  if \\n(mH \{\
.    \" Start diversion in a new environment.
.    do ev URL-div
.    do di URL-div
.  \}
..
.
.
.\" End URL.
.de UE
.  ie \\n(mH \{\
.    br
.    di
.    ev
.
.    \" Has there been one or more input lines for the link text?
.    ie \\n(dn \{\
.      do HTML-NS "<a href=""\\*(m1"">"
.      \" Yes, strip off final newline of diversion and emit it.
.      do chop URL-div
.      do URL-div
\c
.      do HTML-NS </a>
.    \}
.    el \
.      do HTML-NS "<a href=""\\*(m1"">\\*(m1</a>"
\&\\$*\"
.  \}
.  el \
\\*(la\\*(m1\\*(ra\\$*\"
.
.  hy \\n(HY
..
.
.
.\" Start email address.
.de MT
.  ds m1 \\$1\"
.  nh
.  if \\n(mH \{\
.    \" Start diversion in a new environment.
.    do ev URL-div
.    do di URL-div
.  \}
..
.
.
.\" End email address.
.de ME
.  ie \\n(mH \{\
.    br
.    di
.    ev
.
.    \" Has there been one or more input lines for the link text?
.    ie \\n(dn \{\
.      do HTML-NS "<a href=""mailto:\\*(m1"">"
.      \" Yes, strip off final newline of diversion and emit it.
.      do chop URL-div
.      do URL-div
\c
.      do HTML-NS </a>
.    \}
.    el \
.      do HTML-NS "<a href=""mailto:\\*(m1"">\\*(m1</a>"
\&\\$*\"
.  \}
.  el \
\\*(la\\*(m1\\*(ra\\$*\"
.
.  hy \\n(HY
..
.\" --- End of lines taken from groff an-ext.tmac
.\}
.
.hy 0
.
.SH NAME
grep \- 打印匹配模式的行
.
.SH SYNOPSIS
\fBgrep\fP [\fIOPTION\fP.\|.\|.]\& \fIPATTERNS\fP [\fIFILE\fP.\|.\|.]
.br
\fBgrep\fP [\fIOPTION\fP.\|.\|.]\& \fB\-e\fP \fIPATTERNS\fP \&.\|.\|.\& [\fIFILE\fP.\|.\|.]
.br
\fBgrep\fP [\fIOPTION\fP.\|.\|.]\& \fB\-f\fP \fIPATTERN_FILE\fP \&.\|.\|.\&
[\fIFILE\fP.\|.\|.]
.
.SH DESCRIPTION
\fBgrep\fP 在每个 \fIFILE\fP 中搜索 \fIPATTERNS\fP。 \fIPATTERNS\fP 是由换行符分隔的一个或多个模式，\fBgrep\fP
打印与模式匹配的每一行。 当在 shell 命令中使用 \fBgrep\fP 时，通常应引用 \fIPATTERNS\fP。
.PP
\*(lq\fB\-\fP\*(rq 的 \fIFILE\fP 代表标准输入。 如果没有给出 \fIFILE\fP，递归搜索检查工作目录，非递归搜索读取标准输入。
.
.SH OPTIONS
.SS "Generic Program Information"
.TP 
\fB\-\^\-help\fP
输出使用信息并退出。
.TP 
\fB\-V\fP, \fB\-\^\-version\fP
输出 \fBgrep\fP 的版本号并退出。
.SS "Pattern Syntax"
.TP 
\fB\-E\fP, \fB\-\^\-extended\-regexp\fP
将 \fIPATTERNS\fP 解释为扩展的正则表达式 (ERE，见下文)。
.TP 
\fB\-F\fP, \fB\-\^\-fixed\-strings\fP
将 \fIPATTERNS\fP 解释为固定字符串，而不是正则表达式。
.TP 
\fB\-G\fP, \fB\-\^\-basic\-regexp\fP
将 \fIPATTERNS\fP 解释为基本正则表达式 (BRE，见下文)。 这是默认设置。
.TP 
\fB\-P\fP, \fB\-\^\-perl\-regexp\fP
将 \fIPATTERNS\fP 解释为与 Perl 兼容的正则表达式 (PCREs)。 当与 \fB\-z\fP (\fB\-\^\-null\-data\fP)
选项结合使用时，此选项是实验性的，\fBgrep \-P\fP 可能会警告未实现的，特性。
.SS "Matching Control"
.TP 
\fB\-e\fP\fI PATTERNS\fP,\fB \-\^\-regexp=\fP\fIPATTERNS\fP
使用 \fIPATTERNS\fP 作为模式。 如果此选项被多次使用或与 \fB\-f\fP (\fB\-\^\-file\fP) 选项结合使用，则搜索所有给定的模式。
此选项可用于保护以 `\-` 开头的模式。
.TP 
\fB\-f\fP\fI FILE\fP,\fB \-\^\-file=\fP\fIFILE\fP
从 \fIFILE\fP 获取模式，每行一个。 如果此选项被多次使用或与 \fB\-e\fP (\fB\-\^\-regexp\fP) 选项结合使用，则搜索所有给定的模式。
空文件包含零个模式，因此不匹配任何内容。
.TP 
\fB\-i\fP, \fB\-\^\-ignore\-case\fP
忽略模式和输入数据中的大小写区别，以便仅大小写不同的字符相互匹配。
.TP 
\fB\-\^\-no\-ignore\-case\fP
不要忽略模式和输入数据中的大小写区别。 这是默认设置。 此选项可用于传递给已使用 \fB\-i\fP 的 shell
脚本，以取消其效果，因为这两个选项会相互覆盖。
.TP 
\fB\-v\fP, \fB\-\^\-invert\-match\fP
反转匹配意义，选择非匹配行。
.TP 
\fB\-w\fP, \fB\-\^\-word\-regexp\fP
仅选择那些包含构成整个单词的匹配项的行。 测试是匹配的子字符串必须在行的开头，或者前面有一个非单词组成字符。
同样，它必须位于行尾或后跟一个非单词组成字符。 单词组成字符是字母、数字和下划线。 如果还指定了 \fB\-x\fP，则此选项无效。
.TP 
\fB\-x\fP, \fB\-\^\-line\-regexp\fP
只选择那些与整行完全匹配的匹配项。 对于正则表达式模式，这就像给模式加上括号，然后用 \fB^\fP 和 \fB$\fP 将其包围起来。
.SS "General Output Control"
.TP 
\fB\-c\fP, \fB\-\^\-count\fP
抑制正常输出; 而是为每个输入文件打印匹配行数。 使用 \fB\-v\fP、\fB\-\^\-invert\-match\fP 选项 (见上文)，计算不匹配的行数。
.TP 
\fB\-\^\-color\fP[\fB=\fP\fIWHEN\fP], \fB\-\^\-colour\fP[\fB=\fP\fIWHEN\fP]
用转义序列包围匹配的 (non\-empty) 字符串、匹配行、上下文行、文件名、行号、字节偏移量和分隔符
(用于字段和上下文行组)，以在最终端以颜色显示它们。 颜色由环境变量 \fBGREP_COLORS\fP 定义。 \fIWHEN\fP 是
\fBnever\fP、\fBalways\fP 或 \fBauto\fP。
.TP 
\fB\-L\fP, \fB\-\^\-files\-without\-match\fP
抑制正常输出; 而是打印每个通常不会打印输出的输入文件的名称。
.TP 
\fB\-l\fP, \fB\-\^\-files\-with\-matches\fP
抑制正常输出; 而是打印通常打印输出的每个输入文件的名称。 扫描每个输入文件在第一次匹配时停止。
.TP 
\fB\-m\fP\fI NUM\fP,\fB \-\^\-max\-count=\fP\fINUM\fP
在 \fINUM\fP 匹配行后停止读取文件。 如果 \fINUM\fP 为零，则 \fBgrep\fP 立即停止而不读取输入。 \-1 的 \fINUM\fP
视为无穷大，\fBgrep\fP 不停止; 这是默认设置。 如果输入是来自常规文件的标准输入，并且输出 \fINUM\fP 匹配行，则 \fBgrep\fP
确保标准输入在退出前定位到最后一个匹配行之后，无论是否存在尾随上下文行。 这使调用进程能够恢复搜索。 当 \fBgrep\fP 在 \fINUM\fP
匹配行之后停止时，它会输出任何尾随的上下文行。 当同时使用 \fB\-c\fP 或 \fB\-\^\-count\fP 选项时，\fBgrep\fP 不会输出大于 \fINUM\fP
的计数。 当同时使用 \fB\-v\fP 或 \fB\-\^\-invert\-match\fP 选项时，\fBgrep\fP 在输出 \fINUM\fP 不匹配行后停止。
.TP 
\fB\-o\fP, \fB\-\^\-only\-matching\fP
仅打印匹配行的匹配 (non\-empty) 部分，每个这样的部分在单独的输出行上。
.TP 
\fB\-q\fP, \fB\-\^\-quiet\fP, \fB\-\^\-silent\fP
安静的; 不要向标准输出写入任何内容。 如果找到任何匹配项，即使检测到错误，也会立即以零状态退出。 另请参见 \fB\-s\fP 或
\fB\-\^\-no\-messages\fP 选项。
.TP 
\fB\-s\fP, \fB\-\^\-no\-messages\fP
抑制有关不存在或不可读文件的错误消息。
.SS "Output Line Prefix Control"
.TP 
\fB\-b\fP, \fB\-\^\-byte\-offset\fP
在每行输出之前打印输入文件中从 0 开始的字节偏移量。 如果指定了 \fB\-o\fP
(\fB\-\^\-only\-matching\fP)，则打印匹配部分本身的偏移量。
.TP 
\fB\-H\fP, \fB\-\^\-with\-filename\fP
打印每个匹配项的文件名。 当要搜索多个文件时，这是默认设置。 这是一个 GNU 扩展。
.TP 
\fB\-h\fP, \fB\-\^\-no\-filename\fP
禁止输出文件名的前缀。 当只有一个文件 (或只有标准输入) 要搜索时，这是默认设置。
.TP 
\fB\-\^\-label=\fP\fILABEL\fP
将实际来自标准输入的输入显示为来自文件 \fILABEL\fP 的输入。 这对于在搜索之前转换文件内容的命令很有用，例如 \fBgzip \-cd foo.gz | grep \-\^\-label=foo \-H 'some pattern'\fP。 另请参见 \fB\-H\fP 选项。
.TP 
\fB\-n\fP, \fB\-\^\-line\-number\fP
在其输入文件中用基于 1 的行号作为每行输出的前缀。
.TP 
\fB\-T\fP, \fB\-\^\-initial\-tab\fP
确保实际行内容的第一个字符位于制表位上，以便制表符对齐看起来正常。 这对于将其输出作为实际内容前缀的选项很有用: \fB\-H\fP,\fB\-n\fP 和
\fB\-b\fP。 为了提高单个文件中的行都从同一列开始的可能性，这也会导致行号和字节偏移量 (如果存在) 以最小尺寸字段宽度打印。
.TP 
\fB\-Z\fP, \fB\-\^\-null\fP
输出一个零字节 (ASCII \fBNUL\fP 字符) 而不是通常跟在文件名后面的字符。 例如，\fBgrep \-lZ\fP
在每个文件名后输出一个零字节，而不是通常的换行符。 此选项使输出明确，即使存在包含换行符等不常见字符的文件名。 此选项可与 \fBfind \-print0\fP、\fBperl \-0\fP、\fBsort \-z\fP 和 \fBxargs \-0\fP
等命令一起使用，以处理任意文件名，甚至是那些包含换行符的文件名。
.SS "Context Line Control"
.TP 
\fB\-A\fP\fI NUM\fP,\fB \-\^\-after\-context=\fP\fINUM\fP
在匹配行后打印 \fINUM\fP 行尾随上下文。 在连续的匹配组之间放置包含组分隔符 (\fB\-\^\-\fP) 的行。 对于 \fB\-o\fP 或
\fB\-\^\-only\-matching\fP 选项，这没有任何效果并会发出警告。
.TP 
\fB\-B\fP\fI NUM\fP,\fB \-\^\-before\-context=\fP\fINUM\fP
在匹配行之前打印前导上下文的 \fINUM\fP 行。 在连续的匹配组之间放置包含组分隔符 (\fB\-\^\-\fP) 的行。 对于 \fB\-o\fP 或
\fB\-\^\-only\-matching\fP 选项，这没有任何效果并会发出警告。
.TP 
\fB\-C\fP\fI NUM\fP,\fB \-\fP\fINUM\fP,\fB \-\^\-context=\fP\fINUM\fP
打印 \fINUM\fP 行输出上下文。 在连续的匹配组之间放置包含组分隔符 (\fB\-\^\-\fP) 的行。 对于 \fB\-o\fP 或
\fB\-\^\-only\-matching\fP 选项，这没有任何效果并会发出警告。
.TP 
\fB\-\^\-group\-separator=\fP\fISEP\fP
当使用 \fB\-A\fP、\fB\-B\fP 或 \fB\-C\fP 时，在各行组之间打印 \fISEP\fP 而不是 \fB\-\^\-\fP。
.TP 
\fB\-\^\-no\-group\-separator\fP
使用 \fB\-A\fP、\fB\-B\fP 或 \fB\-C\fP 时，不要在行组之间打印分隔符。
.SS "File and Directory Selection"
.TP 
\fB\-a\fP, \fB\-\^\-text\fP
像处理文本一样处理二进制文件; 这相当于 \fB\-\^\-binary\-files=text\fP 选项。
.TP 
\fB\-\^\-binary\-files=\fP\fITYPE\fP
如果文件的数据或元数据表明该文件包含二进制数据，则假定该文件的类型为 \fITYPE\fP。 非文本字节表示二进制数据;
这些要么是针对当前区域设置不正确编码的输出字节，要么是未给出 \fB\-z\fP 选项时的空输入字节。
.IP
默认情况下，\fITYPE\fP 为 \fBbinary\fP，\fBgrep\fP 在发现空输入二进制数据后抑制输出，并抑制包含不正确编码数据的输出行。
当某些输出被抑制时，\fBgrep\fP 会在任何输出后跟一个标准错误消息，说明二进制文件匹配。
.IP
如果 \fITYPE\fP 是 \fBwithout\-match\fP，当 \fBgrep\fP 发现空输入二进制数据时，它假定文件的其余部分不匹配; 这相当于
\fB\-I\fP 选项。
.IP
如果 \fITYPE\fP 为 \fBtext\fP，则 \fBgrep\fP 将二进制文件作为文本处理; 这相当于 \fB\-a\fP 选项。
.IP
当 \fItype\fP 为 \fBbinary\fP 时，即使没有 \fB\-z\fP 选项，\fBgrep\fP 也可能将非文本字节视为行终止符。 这意味着选择
\fBbinary\fP 还是 \fBtext\fP 会影响模式是否与文件匹配。 例如，当 \fItype\fP 为 \fBbinary\fP 时，模式 \fBq$ might\fP
匹配 \fBq\fP 后紧跟着一个空字节，即使当 \fItype\fP 为 \fBtext\fP 时这不匹配。 相反，当 \fItype\fP 为 \fBbinary\fP 时，模式
\&\fB.\&\fP (period) 可能不匹配空字节。
.IP
\fIWarning:\fP \fB\-a\fP 选项可能会输出二进制垃圾，如果输出是最终端并且如果最终端驱动程序将其中一些解释为命令，则可能会产生严重的副作用。
另一方面，当读取文本编码未知的文件时，使用 \fB\-a\fP 或在环境中设置 \fBLC_ALL='C'\fP
可能会有所帮助，以便找到更多匹配项，即使这些匹配项对于直接显示是不安全的。
.TP 
\fB\-D\fP\fI ACTION\fP,\fB \-\^\-devices=\fP\fIACTION\fP
如果输入文件是设备、FIFO 或套接字，则使用 \fIACTION\fP 来处理它。 默认情况下，\fIACTION\fP 为
\fBread\fP，这意味着读取设备就像读取普通文件一样。 如果 \fIACTION\fP 是 \fBskip\fP，设备将被静默跳过。
.TP 
\fB\-d\fP\fI ACTION\fP,\fB \-\^\-directories=\fP\fIACTION\fP
如果输入文件是目录，则使用 \fIACTION\fP 来处理它。 默认情况下，\fIACTION\fP 为 \fBread\fP，即像读取普通文件一样读取目录。 如果
\fIACTION\fP 是 \fBskip\fP，则静默跳过目录。 如果 \fIACTION\fP 是
\fBrecurse\fP，递归地读取每个目录下的所有文件，仅当它们在命令行上时才遵循符号链接。 这相当于 \fB\-r\fP 选项。
.TP 
\fB\-\^\-exclude=\fP\fIGLOB\fP
使用通配符匹配跳过任何名称后缀与模式 \fIGLOB\fP 匹配的命令行文件; 名称后缀可以是整个名称，也可以是名称中斜线 (\fB/\fP)
之后紧跟的以非斜线字符开头的尾部部分。 递归搜索时，跳过任何基本名称与 \fIGLOB\fP 匹配的子文件; 基本名称是最后一个斜线之后的部分。 模式可以使用
\fB*\fP、\fB?\fP 和 \fB[\fP.\|.\|.\fB]\&\fP 作为通配符，使用 \fB\e\fP 按字面意义引用通配符或反斜杠字符。
.TP 
\fB\-\^\-exclude\-from=\fP\fIFILE\fP
跳过基本名称与从 \fIFILE\fP 读取的任何文件名 glob 匹配的文件 (使用 \fB\-\^\-exclude\fP) 下所述的通配符匹配)。
.TP 
\fB\-\^\-exclude\-dir=\fP\fIGLOB\fP
跳过名称后缀与模式 \fIGLOB\fP 匹配的任何命令行目录。 递归搜索时，跳过基本名称与 \fIGLOB\fP 匹配的任何子目录。 忽略 \fIGLOB\fP
中任何多余的尾部斜杠。
.TP 
\fB\-I\fP
处理二进制文件，就好像它不包含匹配数据一样; 这相当于 \fB\-\^\-binary\-files=without\-match\fP 选项。
.TP 
\fB\-\^\-include=\fP\fIGLOB\fP
仅搜索基本名称与 \fIGLOB\fP 匹配的文件 (使用 \fB\-\^\-exclude\fP) 中所述的通配符匹配)。 如果给出了相互矛盾的
\fB\-\^\-include\fP 和 \fB\-\^\-exclude\fP 选项，则最后一个匹配的选项获胜。 如果没有 \fB\-\^\-include\fP 或
\fB\-\^\-exclude\fP 选项匹配，则包含一个文件，除非第一个这样的选项是 \fB\-\^\-include\fP。
.TP 
\fB\-r\fP, \fB\-\^\-recursive\fP
递归地读取每个目录下的所有文件，仅当它们在命令行上时才遵循符号链接。 请注意，如果没有给出文件操作数，\fBgrep\fP 将搜索工作目录。 这相当于
\fB\-d recurse\fP 选项。
.TP 
\fB\-R\fP, \fB\-\^\-dereference\-recursive\fP
递归读取每个目录下的所有文件。 与 \fB\-r\fP 不同，遵循所有符号链接。
.SS "Other Options"
.TP 
\fB\-\^\-line\-buffered\fP
在输出上使用行缓冲。 这可能会导致性能下降。
.TP 
\fB\-U\fP, \fB\-\^\-binary\fP
将 file(s) 视为二进制。 默认情况下，在 MS\-DOS 和 MS\-Windows 下，\fBgrep\fP 会猜测文件是文本文件还是二进制文件，如
\fB\-\^\-binary\-files\fP 选项所述。 如果 \fBgrep\fP 确定该文件是文本文件，它会从原始文件内容中去除 CR 字符 (以使 \fB^\fP
和 \fB$\fP 的正则表达式正常工作)。 指定 \fB\-U\fP 否决了这种猜测，导致所有文件被读取并逐字传递给匹配机制; 如果文件是每行末尾都有 CR/LF
对的文本文件，这将导致某些正则表达式失败。 此选项对 MS\-DOS 和 MS\-Windows 以外的平台没有影响。
.TP 
\fB\-z\fP, \fB\-\^\-null\-data\fP
将输入和输出数据视为行序列，每行以零字节 (ASCII NUL 字符) 而不是换行符终止。 与 \fB\-Z\fP 或 \fB\-\^\-null\fP
选项一样，此选项可与 \fBsort \-z\fP 等命令一起使用以处理任意文件名。
.
.SH "REGULAR EXPRESSIONS"
正则表达式是描述一组字符串的模式。 正则表达式的构造类似于算术表达式，通过使用各种运算符来组合较小的表达式。
.PP
\fBgrep\fP 理解三种不同版本的正则表达式语法: `基本 (BRE)、`扩展 (ERE) 和 `perl (PCRE)。 在 GNU \fBgrep\fP
中，基本语法和扩展语法之间的可用功能没有区别。 在其他实现中，基本的正则表达式没有那么强大。 以下描述适用于扩展正则表达式;
后面总结了基本正则表达式的差异。 Perl 兼容的正则表达式提供了额外的功能，并记录在 \fBpcre2syntax\fP(3) 和
\fBpcre2pattern\fP(3) 中，但只有在启用 PCRE 支持时才有效。
.PP
基本构建块是匹配单个字符的正则表达式。 大多数字符，包括所有字母和数字，都是匹配自身的正则表达式。
任何具有特殊含义的元字符都可以通过在其前面加上反斜杠来引用。
.PP
句点 \fB.\&\fP 匹配任何单个字符。 未指定它是否匹配编码错误。
.SS "Character Classes and Bracket Expressions"
\fIbracket expression\fP 是由 \fB[\fP 和 \fB]\fP 括起来的字符列表。 它匹配该列表中的任何单个字符。
如果列表的第一个字符是插入符号 \fB^\fP，则它匹配列表中的任何字符 \fInot\fP; 未指定它是否匹配编码错误。 例如，正则表达式
\fB[0123456789]\fP 匹配任何单个数字。
.PP
在括号表达式中，\fIrange expression\fP 由两个用连字符分隔的字符组成。 它使用区域设置的整理顺序和字符集匹配在两个字符 (含)
之间排序的任何单个字符。 例如，在默认的 C 语言环境中，\fB[a\-d]\fP 等同于 \fB[abcd]\fP。
许多语言环境按字典顺序对字符进行排序，在这些语言环境中，\fB[a\-d]\fP 通常不等同于 \fB[abcd]\fP; 例如，它可能等同于
\fB[aBbCcDd]\fP。 要获得括号表达式的传统解释，您可以通过将 \fBLC_ALL\fP 环境变量设置为值 \fBC\fP 来使用 C 语言环境。
.PP
最后，某些命名的字符类在括号表达式中预定义，如下所示。 它们的名称是不言自明的，它们是
\fB[:alnum:]\fP、\fB[:alpha:]\fP、\fB[:blank:]\fP、\fB[:cntrl:]\fP、\fB[:digit:]\fP、\fB[:graph:]\fP、\fB[:lower:]\fP、\fB[:print:]\fP、\fB[:punct:]\fP、\fB[:space:]\fP、\fB[:upper:]\fP
和 \fB[:xdigit:]\fP。 例如，\fB[[:alnum:]]\fP 表示当前语言环境中数字和字母的字符类。 在 C 语言环境和 ASCII
字符集编码中，这与 \fB[0\-9A\-Za\-z]\fP 相同。 (请注意，这些类名中的方括号是符号名称的一部分，并且必须包含在分隔方括号表达式的方括号之外。)
大多数元字符在方括号表达式中失去了它们的特殊含义。 要包含字面量 \fB]\fP，请将其放在列表的第一位。 同样，要包含一个字面量
\fB^\fP，请将它放在任何地方，但不要放在最前面。 最后，包括一个字面量 \fB\-\fP 放在最后。
.SS Anchoring
插入符号 \fB^\fP 和美元符号 \fB$\fP 是元字符，分别匹配行首和行尾的空字符串。
.SS "The Backslash Character and Special Expressions"
符号 \fB\e<\fP 和 \fB\e>\fP 分别匹配单词开头和结尾的空字符串。 符号 \fB\eb\fP 匹配单词 edge
处的空字符串，\fB\eB\fP 匹配空字符串，前提是它是单词 edge 处的 \fInot\fP。 符号 \fB\ew\fP 是 \fB[_[:alnum:]]\fP
的同义词，\fB\eW\fP 是 \fB[^_[:alnum:]]\fP 的同义词。
.SS Repetition
正则表达式后面可以跟几个重复运算符之一:
.PD 0
.TP 
\fB?\fP
前面的项是可选的，最多匹配一次。
.TP 
\fB*\fP
前面的项将匹配零次或多次。
.TP 
\fB+\fP
前面的项将被匹配一次或多次。
.TP 
\fB{\fP\fIn\fP\fB}\fP
前面的项恰好匹配了 \fIn\fP 次。
.TP 
\fB{\fP\fIn\fP\fB,}\fP
前面的项匹配了 \fIn\fP 次或更多次。
.TP 
\fB{,\fP\fIm\fP\fB}\fP
前面的项最多匹配 \fIm\fP 次。 这是一个 GNU 扩展。
.TP 
\fB{\fP\fIn\fP\fB,\fP\fIm\fP\fB}\fP
前面的项最少匹配 \fIn\fP 次，但不超过 \fIm\fP 次。
.PD
.SS Concatenation
两个正则表达式可以连接起来; 生成的正则表达式匹配通过连接分别匹配连接表达式的两个子字符串形成的任何字符串。
.SS Alternation
两个正则表达式可以通过中缀运算符 \fB|\fP 连接; 生成的正则表达式匹配任何匹配任一替代表达式的字符串。
.SS Precedence
重复优先于串联，而串联又优先于交替。 可以将整个表达式括在括号中以覆盖这些优先级规则并形成子表达式。
.SS "Back\-references and Subexpressions"
反向引用 \fB\e\fP\fIn\fP\&，其中 \fIn\fP 是单个数字，匹配先前由正则表达式的 \fIn\fPth 括号子表达式匹配的子字符串。
.SS "Basic vs Extended Regular Expressions"
在基本正则表达式中，元字符 \fB?\fP、\fB+\fP、\fB{\fP、\fB|\fP、\fB(\fP 和 \fB)\fP 失去了它们的特殊含义; 而是使用反斜杠版本
\fB\e?\fP、\fB\e+\fP、\fB\e{\fP、\fB\e|\fP、\fB\e(\fP 和 \fB\e)\fP。
.
.SH "EXIT STATUS"
通常，如果选择了一行，退出状态为 0，如果未选择任何行，则为 1，如果发生错误，则为 2。 但是，如果使用 \fB\-q\fP 或 \fB\-\^\-quiet\fP 或
\fB\-\^\-silent\fP 并选择了一行，即使发生错误，退出状态也是 0。
.
.SH ENVIRONMENT
\fBgrep\fP 的行为受以下环境影响变量。
.PP
类别 \fBLC_\fP\fIfoo\fP 的语言环境是通过依次检查三个环境变量 \fBLC_ALL\fP、\fBLC_\fP\fIfoo\fP、\fBLANG\fP 来指定的。
这些设置中的第一个变量指定区域设置。 例如，如果未设置 \fBLC_ALL\fP，但将 \fBLC_MESSAGES\fP 设置为
\fBpt_BR\fP，则巴西葡萄牙语区域设置将用于 \fBLC_MESSAGES\fP 类别。 如果没有设置这些环境变量，如果没有安装区域目录，或者如果
\fBgrep\fP 没有用本地语言支持 (NLS) 编译，则使用 C 语言环境。 shell 命令 \fBlocale \-a\fP 列出当前可用的语言环境。
.TP 
\fBGREP_COLORS\fP
指定用于突出显示输出的各个部分的颜色和其他属性。 它的值是一个以冒号分隔的功能列表，默认为
\fBms=01;31:mc=01;31:sl=:cx=:fn=35:ln=32:bn=32:se=36\fP，省略了 \fBrv\fP 和 \fBne\fP 布尔功能
(即 false)。 支持的功能如下。
.RS
.TP 
\fBsl=\fP
整个选定行的 SGR 子字符串 (即，省略 \fB\-v\fP 命令行选项时的匹配行，或指定 \fB\-v\fP 时的非匹配行)。 但是，如果同时指定了布尔 \fBrv\fP
功能和 \fB\-v\fP 命令行选项，则它适用于上下文匹配行。 默认为空 (即最终端的默认颜色对)。
.TP 
\fBcx=\fP
整个上下文行的 SGR 子字符串 (即，省略 \fB\-v\fP 命令行选项时的非匹配行，或指定 \fB\-v\fP 时的匹配行)。 但是，如果同时指定了布尔
\fBrv\fP 功能和 \fB\-v\fP 命令行选项，则它适用于选定的非匹配行。 默认为空 (即最终端的默认颜色对)。
.TP 
\fBrv\fP
指定 \fB\-v\fP 命令行选项时，反转 (swaps) 与 \fBsl=\fP 和 \fBcx=\fP 功能含义的布尔值。 默认值为 false (即，能力被省略)。
.TP 
\fBmt=01;31\fP
SGR 子字符串，用于匹配任何匹配行中的非空文本 (即，省略 \fB\-v\fP 命令行选项时的选定行，或指定 \fB\-v\fP 时的上下文行)。 设置它等同于同时将
\fBms=\fP 和 \fBmc=\fP 设置为相同的值。 默认是当前行背景上的粗体红色文本前景。
.TP 
\fBms=01;31\fP
SGR 子字符串，用于匹配选定行中的非空文本。 (这仅在省略 \fB\-v\fP 命令行选项时使用。) \fBsl=\fP (或 \fBcx=\fP，如果 \fBrv\fP)
功能在启动时保持活动状态) 的效果。 默认是当前行背景上的粗体红色文本前景。
.TP 
\fBmc=01;31\fP
SGR 子字符串，用于匹配上下文行中的非空文本。 (这仅在指定 \fB\-v\fP 命令行选项时使用。) \fBcx=\fP (或 \fBsl=\fP，如果 \fBrv\fP)
功能在启动时保持活动状态) 的效果。 默认是当前行背景上的粗体红色文本前景。
.TP 
\fBfn=35\fP
文件名的 SGR 子字符串作为任何内容行的前缀。 默认是最终端默认背景上的洋红色文本前景。
.TP 
\fBln=32\fP
行号的 SGR 子字符串作为任何内容行的前缀。 默认是最终端默认背景上的绿色文本前景。
.TP 
\fBbn=32\fP
字节偏移量的 SGR 子字符串作为任何内容行的前缀。 默认是最终端默认背景上的绿色文本前景。
.TP 
\fBse=36\fP
分隔符的 SGR 子字符串，在选定的行字段 (\fB:\fP) 之间、上下文行字段之间、(\fB\-\fP) 之间以及当指定非零上下文时在相邻行组之间插入
(\fB\-\^\-\fP)。 默认是最终端默认背景上的青色文本前景。
.TP 
\fBne\fP
布尔值，每次彩色项结束时，防止使用 Erase in Line (EL) to Right (\fB\e33[K\fP) 清除到行尾。 这在不支持 EL
的终端上是必需的。 It is otherwise useful on terminals for which the
\fBback_color_erase\fP (\fBbce\fP)  boolean terminfo capability does not apply,
when the chosen highlight colors do not affect the background, or when EL is
too slow or causes too much flicker.  默认值为 false (即，能力被省略)。
.PP
请注意，布尔功能没有 \fB=\fP.\|.\|.\& 部分。 它们在默认情况下被省略 (即 false)，并在指定时变为 true。
.PP
请参见文本终端文档中的选择图形再现 (SGR) 部分，该文本终端用于允许的值及其作为字符属性的含义。 这些子字符串值是十进制表示的整数，可以用分号连接。
\fBgrep\fP 负责将结果组装成完整的 SGR 序列 (\fB\e33[\fP.\|.\|.\fBm\fP)。 连接的常用值包括粗体 \fB1\fP、下划线
\fB4\fP、闪烁 \fB5\fP、反色 \fB7\fP、默认前景色 \fB39\fP、前景色 \fB30\fP 到 \fB37\fP、16 色模式前景色 \fB90\fP 到
\fB97\fP、88 色 \fB38;5;0\fP 到 \fB38;5;255\fP \- 颜色和 256 色模式前景色，\fB49\fP 用于默认背景色，\fB40\fP 至
\fB47\fP 用于背景色，\fB100\fP 至 \fB107\fP 用于 16 色模式背景色，\fB48;5;0\fP 至 \fB48;5;255\fP 用于 88 色和
256 色模式背景色。
.RE
.TP 
\fBLC_ALL\fP, \fBLC_COLLATE\fP, \fBLANG\fP
这些变量指定 \fBLC_COLLATE\fP 类别的语言环境，它确定用于解释范围表达式 (如 \fB[a\-z]\fP) 的整理顺序。
.TP 
\fBLC_ALL\fP, \fBLC_CTYPE\fP, \fBLANG\fP
这些变量指定 \fBLC_CTYPE\fP 类别的语言环境，它确定字符的类型，例如，哪些字符是空白字符。 此类别还确定字符编码，即文本是以
UTF\-8、ASCII 还是其他某种编码编码的。 在 C 或 POSIX 语言环境中，所有字符都被编码为单个字节，并且每个字节都是有效字符。
.TP 
\fBLC_ALL\fP, \fBLC_MESSAGES\fP, \fBLANG\fP
这些变量指定 \fBLC_MESSAGES\fP 类别的语言环境，这决定了 \fBgrep\fP 用于消息的语言。 默认的 C 语言环境使用美国英语消息。
.TP 
\fBPOSIXLY_CORRECT\fP
如果设置，\fBgrep\fP 将按照 POSIX 的要求运行; 否则，\fBgrep\fP 的行为更像其他 GNU 程序。 POSIX
要求跟在文件名后面的选项必须被视为文件名; 默认情况下，此类选项排列在操作数列表的前面，并被视为选项。 此外，POSIX 要求将无法识别的选项诊断为
`非法`，但由于它们并非真正违法，因此默认将它们诊断为 `无效`。 \fBPOSIXLY_CORRECT\fP 还禁用
\fB_\fP\fIN\fP\fB_GNU_nonoption_argv_flags_\fP，如下所述。
.TP 
\fB_\fP\fIN\fP\fB_GNU_nonoption_argv_flags_\fP
(此处 \fIN\fP 是 \fBgrep\fP's 数字进程 ID。) 如果此环境变量值的 \fIi\fPth 字符是 \fB1\fP，则不要将 \fBgrep\fP 的
\fIi\fPth 操作数视为一个选项，即使它看起来是一个。 shell
可以将这个变量放在它运行的每个命令的环境中，指定哪些操作数是文件名通配符扩展的结果，因此不应被视为选项。 此行为仅适用于 GNU C 库，并且仅在未设置
\fBPOSIXLY_CORRECT\fP 时可用。
.
.SH NOTES
这个手册页只是断断续续地维护着; 完整的文档通常是最新的。
.
.SH COPYRIGHT
Copyright 1998\-2000, 2002, 2005\-2022 Free Software Foundation, Inc.
.PP
This is free software;  see the source for copying conditions.   There is NO
warranty;  not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE.
.
.SH BUGS
.SS "Reporting Bugs"
通过电子邮件向
.MT bug\-grep@gnu.org
报告错误报告地址
.ME .
.UR https://lists.gnu.org/mailman/listinfo/bug\-grep
电子邮件存档
.UE
和
.UR https://debbugs.gnu.org/cgi/pkgreport.cgi?package=grep
错误跟踪器
.UE
可用。
.SS "Known Bugs"
\fB{\fP\fIn\fP\fB,\fP\fIm\fP\fB}\fP 构造中的大量重复计数可能会导致 \fBgrep\fP 使用大量内存。
此外，某些其他晦涩的正则表达式需要指数时间和空间，并可能导致 \fBgrep\fP 耗尽内存。
.PP
返回引用非常慢，可能需要指数时间。
.
.SH EXAMPLE
以下示例输出当前目录中名称包含 `g` 并以 `.h` 结尾的所有文件中包含 `f` 并以 `.c` 结尾的任何行的位置和内容 '.  \fB\-n\fP
选项输出行号，\fB\-\-\fP 参数将以 \*(lq\-\*(rq 开头的\*(lq*g*.h\*(rq 的扩展视为文件名而不是选项，而空文件 /dev/null
导致输出文件名，即使只有一个文件名恰好是 `*g*.h` 的形式。
.PP
.in +2n
.EX
$ \fBgrep\fP \-n \-\- 'f.*\e.c$' *g*.h /dev/null
argmatch.h:1:/* argmatch.c 的定义和原型
.EE
.in
.PP
唯一匹配的行是 argmatch.h 的第 1 行。 请注意，模式中使用的正则表达式语法不同于 shell 用于匹配文件名的通配符语法。
.
.SH "SEE ALSO"
.SS "Regular Manual Pages"
\fBawk\fP(1), \fBcmp\fP(1), \fBdiff\fP(1), \fBfind\fP(1), \fBperl\fP(1), \fBsed\fP(1),
\fBsort\fP(1), \fBxargs\fP(1), \fBread\fP(2), \fBpcre2\fP(3), \fBpcre2syntax\fP(3),
\fBpcre2pattern\fP(3), \fBterminfo\fP(5), \fBglob\fP(7), \fBregex\fP(7)
.SS "Full Documentation"
.UR https://www.gnu.org/software/grep/manual/
完整手册
.UE
可用。 如果 \fBinfo\fP
和 \fBgrep\fP 程序在您的站点上正确安装，则命令
.IP
\fBinfo grep\fP
.PP
应该可以让您访问完整的手册。
.
.\" Work around problems with some troff -man implementations.
.br
.
.\" Format for Emacs-maintained Dt string defined at this file's start.
.\" Local variables:
.\" time-stamp-format: "%:y-%02m-%02d"
.\" End:
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
