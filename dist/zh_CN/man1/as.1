.\" -*- coding: UTF-8 -*-
.de  Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de  Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de  Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie  n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.ie  \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.de  IX
..
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.nr rF 0
.if  \n(.g .if rF .nr rF 1
.if  (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" fudge factors for nroff and troff
.    
.if  n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.if  t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.\" simple accents for nroff and troff
.    
.if  n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if  t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.\" troff and (daisy-wheel) nroff accents
.    
.ds : \k:\h'-(\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \k:\h'-(\n(.wu+\w'\(de'u\-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\fI\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.\" corrections for vroff
.    
.if  v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if  v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.\" for low resolution devices (crt and lpr)
.    
.if  \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "AS 1"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH AS 1 2023\-02\-03 binutils\-2.40 "GNU Development Tools"
.if  n .ad l
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.nh
.SH NAME
AS \- 便携式 GNU 汇编程序。
.SH SYNOPSIS
.IX Header SYNOPSIS
作为 [\fB\-a\fP[\fBcdghlns\fP][=\fIfile\fP]]
 [\fB\-\-alternate\fP]
 [\fB\-\-compress\-debug\-sections\fP] [\fB\-\-nocompress\-debug\-sections\fP]
 [\fB\-D\fP]
 [\fB\-\-dump\-config\fP]
 [\fB\-\-debug\-prefix\-map\fP \fIold\fP=\fInew\fP]
 [\fB\-\-defsym\fP \fIsym\fP=\fIval\fP]
 [\fB\-\-elf\-stt\-common=[no|yes]\fP]
 [\fB\-\-emulation\fP=\fIname\fP]
 [\fB\-f\fP]
 [\fB\-g\fP] [\fB\-\-gstabs\fP] [\fB\-\-gstabs+\fP]
 [\fB\-\-gdwarf\-<N>\fP] [\fB\-\-gdwarf\-sections\fP]
 [\fB\-\-gdwarf\-cie\-version\fP=\fI\s-1VERSION\s0\fP]
 [\fB\-\-generate\-missing\-build\-notes=[no|yes]\fP]
 [\fB\-\-gsframe\fP]
 [\fB\-\-hash\-size\fP=\fIN\fP]
 [\fB\-\-help\fP] [\fB\-\-target\-help\fP]
 [\fB\-I\fP \fIdir\fP]
 [\fB\-J\fP]
 [\fB\-K\fP]
 [\fB\-\-keep\-locals\fP]
 [\fB\-L\fP]
 [\fB\-\-listing\-lhs\-width\fP=\fI\s-1NUM\s0\fP]
 [\fB\-\-listing\-lhs\-width2\fP=\fI\s-1NUM\s0\fP]
 [\fB\-\-listing\-rhs\-width\fP=\fI\s-1NUM\s0\fP]
 [\fB\-\-listing\-cont\-lines\fP=\fI\s-1NUM\s0\fP]
 [\fB\-\-multibyte\-handling=[allow|warn|warn\-sym\-only]\fP]
 [\fB\-\-no\-pad\-sections\fP]
 [\fB\-o\fP \fIobjfile\fP] [\fB\-R\fP]
 [\fB\-\-sectname\-subst\fP]
 [\fB\-\-size\-check=[error|warning]\fP]
 [\fB\-\-statistics\fP]
 [\fB\-v\fP] [\fB\-version\fP] [\fB\-\-version\fP]
 [\fB\-W\fP] [\fB\-\-warn\fP] [\fB\-\-fatal\-warnings\fP] [\fB\-w\fP] [\fB\-x\fP]
 [\fB\-Z\fP] [\fB@\fP\fI\s-1FILE\s0\fP]
 [\fItarget\-options\fP]
 [\fB\-\-\fP|\fIfiles\fP ...]
.SH TARGET
.IX Header TARGET
\&\fITarget AArch64 options:\fP
   [\fB\-EB\fP|\fB\-EL\fP]
   [\fB\-mabi\fP=\fI\s-1ABI\s0\fP]
.PP
\&\fITarget Alpha options:\fP
   [\fB\-m\fP\fIcpu\fP]
   [\fB\-mdebug\fP | \fB\-no\-mdebug\fP]
   [\fB\-replace\fP | \fB\-noreplace\fP]
   [\fB\-relax\fP] [\fB\-g\fP] [\fB\-G\fP\fIsize\fP]
   [\fB\-F\fP] [\fB\-32addr\fP]
.PP
\&\fITarget \s-1ARC\s0 options:\fP
   [\fB\-mcpu=\fP\fIcpu\fP]
   [\fB\-mA6\fP|\fB\-mARC600\fP|\fB\-mARC601\fP|\fB\-mA7\fP|\fB\-mARC700\fP|\fB\-mEM\fP|\fB\-mHS\fP]
   [\fB\-mcode\-density\fP]
   [\fB\-mrelax\fP]
   [\fB\-EB\fP|\fB\-EL\fP]
.PP
\&\fITarget \s-1ARM\s0 options:\fP
   [\fB\-mcpu\fP=\fIprocessor\fP[+\fIextension\fP...]]
   [\fB\-march\fP=\fIarchitecture\fP[+\fIextension\fP...]]
   [\fB\-mfpu\fP=\fIfloating\-point\-format\fP]
   [\fB\-mfloat\-abi\fP=\fIabi\fP]
   [\fB\-meabi\fP=\fIver\fP]
   [\fB\-mthumb\fP]
   [\fB\-EB\fP|\fB\-EL\fP]
   [\fB\-mapcs\-32\fP|\fB\-mapcs\-26\fP|\fB\-mapcs\-float\fP|
    \fB\-mapcs\-reentrant\fP]
   [\fB\-mthumb\-interwork\fP] [\fB\-k\fP]
.PP
\&\fITarget Blackfin options:\fP
   [\fB\-mcpu\fP=\fIprocessor\fP[\-\fIsirevision\fP]]
   [\fB\-mfdpic\fP]
   [\fB\-mno\-fdpic\fP]
   [\fB\-mnopic\fP]
.PP
\&\fITarget \s-1BPF\s0 options:\fP
   [\fB\-EL\fP] [\fB\-EB\fP]
.PP
\&\fITarget \s-1CRIS\s0 options:\fP
   [\fB\-\-underscore\fP | \fB\-\-no\-underscore\fP]
   [\fB\-\-pic\fP] [\fB\-N\fP]
   [\fB\-\-emulation=criself\fP | \fB\-\-emulation=crisaout\fP]
   [\fB\-\-march=v0_v10\fP | \fB\-\-march=v10\fP | \fB\-\-march=v32\fP | \fB\-\-march=common_v10_v32\fP]
.PP
\&\fITarget C\-SKY options:\fP
   [\fB\-march=\fP\fIarch\fP] [\fB\-mcpu=\fP\fIcpu\fP]
   [\fB\-EL\fP] [\fB\-mlittle\-endian\fP] [\fB\-EB\fP] [\fB\-mbig\-endian\fP]
   [\fB\-fpic\fP] [\fB\-pic\fP]
   [\fB\-mljump\fP] [\fB\-mno\-ljump\fP]
   [\fB\-force2bsr\fP] [\fB\-mforce2bsr\fP] [\fB\-no\-force2bsr\fP] [\fB\-mno\-force2bsr\fP]
   [\fB\-jsri2bsr\fP] [\fB\-mjsri2bsr\fP] [\fB\-no\-jsri2bsr\fP ] [\fB\-mno\-jsri2bsr\fP]
   [\fB\-mnolrw\fP ] [\fB\-mno\-lrw\fP]
   [\fB\-melrw\fP] [\fB\-mno\-elrw\fP]
   [\fB\-mlaf\fP ] [\fB\-mliterals\-after\-func\fP]
   [\fB\-mno\-laf\fP] [\fB\-mno\-literals\-after\-func\fP]
   [\fB\-mlabr\fP] [\fB\-mliterals\-after\-br\fP]
   [\fB\-mno\-labr\fP] [\fB\-mnoliterals\-after\-br\fP]
   [\fB\-mistack\fP] [\fB\-mno\-istack\fP]
   [\fB\-mhard\-float\fP] [\fB\-mmp\fP] [\fB\-mcp\fP] [\fB\-mcache\fP]
   [\fB\-msecurity\fP] [\fB\-mtrust\fP]
   [\fB\-mdsp\fP] [\fB\-medsp\fP] [\fB\-mvdsp\fP]
.PP
\&\fITarget D10V options:\fP
   [\fB\-O\fP]
.PP
\&\fITarget D30V options:\fP
   [\fB\-O\fP|\fB\-n\fP|\fB\-N\fP]
.PP
\&\fITarget \s-1EPIPHANY\s0 options:\fP
   [\fB\-mepiphany\fP|\fB\-mepiphany16\fP]
.PP
\&\fITarget H8/300 options:\fP
   [\-h\-tick\-hex]
.PP
\&\fITarget i386 options:\fP
   [\fB\-\-32\fP|\fB\-\-x32\fP|\fB\-\-64\fP] [\fB\-n\fP]
   [\fB\-march\fP=\fI\s-1CPU\s0\fP[+\fI\s-1EXTENSION\s0\fP...]] [\fB\-mtune\fP=\fI\s-1CPU\s0\fP]
.PP
\&\fITarget \s-1IA\-64\s0 options:\fP
   [\fB\-mconstant\-gp\fP|\fB\-mauto\-pic\fP]
   [\fB\-milp32\fP|\fB\-milp64\fP|\fB\-mlp64\fP|\fB\-mp64\fP]
   [\fB\-mle\fP|\fBmbe\fP]
   [\fB\-mtune=itanium1\fP|\fB\-mtune=itanium2\fP]
   [\fB\-munwind\-check=warning\fP|\fB\-munwind\-check=error\fP]
   [\fB\-mhint.b=ok\fP|\fB\-mhint.b=warning\fP|\fB\-mhint.b=error\fP]
   [\fB\-x\fP|\fB\-xexplicit\fP] [\fB\-xauto\fP] [\fB\-xdebug\fP]
.PP
\&\fITarget \s-1IP2K\s0 options:\fP
   [\fB\-mip2022\fP|\fB\-mip2022ext\fP]
.PP
\&\fITarget M32C options:\fP
   [\fB\-m32c\fP|\fB\-m16c\fP] [\-relax] [\-h\-tick\-hex]
.PP
\&\fITarget M32R options:\fP
   [\fB\-\-m32rx\fP|\fB\-\-[no\-]warn\-explicit\-parallel\-conflicts\fP|
   \fB\-\-W[n]p\fP]
.PP
\&\fITarget M680X0 options:\fP
   [\fB\-l\fP] [\fB\-m68000\fP|\fB\-m68010\fP|\fB\-m68020\fP|...]
.PP
\&\fITarget M68HC11 options:\fP
   [\fB\-m68hc11\fP|\fB\-m68hc12\fP|\fB\-m68hcs12\fP|\fB\-mm9s12x\fP|\fB\-mm9s12xg\fP]
   [\fB\-mshort\fP|\fB\-mlong\fP]
   [\fB\-mshort\-double\fP|\fB\-mlong\-double\fP]
   [\fB\-\-force\-long\-branches\fP] [\fB\-\-short\-branches\fP]
   [\fB\-\-strict\-direct\-mode\fP] [\fB\-\-print\-insn\-syntax\fP]
   [\fB\-\-print\-opcodes\fP] [\fB\-\-generate\-example\fP]
.PP
\&\fITarget \s-1MCORE\s0 options:\fP
   [\fB\-jsri2bsr\fP] [\fB\-sifilter\fP] [\fB\-relax\fP]
   [\fB\-mcpu=[210|340]\fP]
.PP
\&\fITarget Meta options:\fP
   [\fB\-mcpu=\fP\fIcpu\fP] [\fB\-mfpu=\fP\fIcpu\fP] [\fB\-mdsp=\fP\fIcpu\fP]
\&\fITarget \s-1MICROBLAZE\s0 options:\fP
.PP
\&\fITarget \s-1MIPS\s0 options:\fP
   [\fB\-nocpp\fP] [\fB\-EL\fP] [\fB\-EB\fP] [\fB\-O\fP[\fIoptimization level\fP]]
   [\fB\-g\fP[\fIdebug level\fP]] [\fB\-G\fP \fInum\fP] [\fB\-KPIC\fP] [\fB\-call_shared\fP]
   [\fB\-non_shared\fP] [\fB\-xgot\fP [\fB\-mvxworks\-pic\fP]
   [\fB\-mabi\fP=\fI\s-1ABI\s0\fP] [\fB\-32\fP] [\fB\-n32\fP] [\fB\-64\fP] [\fB\-mfp32\fP] [\fB\-mgp32\fP]
   [\fB\-mfp64\fP] [\fB\-mgp64\fP] [\fB\-mfpxx\fP]
   [\fB\-modd\-spreg\fP] [\fB\-mno\-odd\-spreg\fP]
   [\fB\-march\fP=\fI\s-1CPU\s0\fP] [\fB\-mtune\fP=\fI\s-1CPU\s0\fP] [\fB\-mips1\fP] [\fB\-mips2\fP]
   [\fB\-mips3\fP] [\fB\-mips4\fP] [\fB\-mips5\fP] [\fB\-mips32\fP] [\fB\-mips32r2\fP]
   [\fB\-mips32r3\fP] [\fB\-mips32r5\fP] [\fB\-mips32r6\fP] [\fB\-mips64\fP] [\fB\-mips64r2\fP]
   [\fB\-mips64r3\fP] [\fB\-mips64r5\fP] [\fB\-mips64r6\fP]
   [\fB\-construct\-floats\fP] [\fB\-no\-construct\-floats\fP]
   [\fB\-mignore\-branch\-isa\fP] [\fB\-mno\-ignore\-branch\-isa\fP]
   [\fB\-mnan=\fP\fIencoding\fP]
   [\fB\-trap\fP] [\fB\-no\-break\fP] [\fB\-break\fP] [\fB\-no\-trap\fP]
   [\fB\-mips16\fP] [\fB\-no\-mips16\fP]
   [\fB\-mmips16e2\fP] [\fB\-mno\-mips16e2\fP]
   [\fB\-mmicromips\fP] [\fB\-mno\-micromips\fP]
   [\fB\-msmartmips\fP] [\fB\-mno\-smartmips\fP]
   [\fB\-mips3d\fP] [\fB\-no\-mips3d\fP]
   [\fB\-mdmx\fP] [\fB\-no\-mdmx\fP]
   [\fB\-mdsp\fP] [\fB\-mno\-dsp\fP]
   [\fB\-mdspr2\fP] [\fB\-mno\-dspr2\fP]
   [\fB\-mdspr3\fP] [\fB\-mno\-dspr3\fP]
   [\fB\-mmsa\fP] [\fB\-mno\-msa\fP]
   [\fB\-mxpa\fP] [\fB\-mno\-xpa\fP]
   [\fB\-mmt\fP] [\fB\-mno\-mt\fP]
   [\fB\-mmcu\fP] [\fB\-mno\-mcu\fP]
   [\fB\-mcrc\fP] [\fB\-mno\-crc\fP]
   [\fB\-mginv\fP] [\fB\-mno\-ginv\fP]
   [\fB\-mloongson\-mmi\fP] [\fB\-mno\-loongson\-mmi\fP]
   [\fB\-mloongson\-cam\fP] [\fB\-mno\-loongson\-cam\fP]
   [\fB\-mloongson\-ext\fP] [\fB\-mno\-loongson\-ext\fP]
   [\fB\-mloongson\-ext2\fP] [\fB\-mno\-loongson\-ext2\fP]
   [\fB\-minsn32\fP] [\fB\-mno\-insn32\fP]
   [\fB\-mfix7000\fP] [\fB\-mno\-fix7000\fP]
   [\fB\-mfix\-rm7000\fP] [\fB\-mno\-fix\-rm7000\fP]
   [\fB\-mfix\-vr4120\fP] [\fB\-mno\-fix\-vr4120\fP]
   [\fB\-mfix\-vr4130\fP] [\fB\-mno\-fix\-vr4130\fP]
   [\fB\-mfix\-r5900\fP] [\fB\-mno\-fix\-r5900\fP]
   [\fB\-mdebug\fP] [\fB\-no\-mdebug\fP]
   [\fB\-mpdr\fP] [\fB\-mno\-pdr\fP]
.PP
\&\fITarget \s-1MMIX\s0 options:\fP
   [\fB\-\-fixed\-special\-register\-names\fP] [\fB\-\-globalize\-symbols\fP]
   [\fB\-\-gnu\-syntax\fP] [\fB\-\-relax\fP] [\fB\-\-no\-predefined\-symbols\fP]
   [\fB\-\-no\-expand\fP] [\fB\-\-no\-merge\-gregs\fP] [\fB\-x\fP]
   [\fB\-\-linker\-allocated\-gregs\fP]
.PP
\&\fITarget Nios \s-1II\s0 options:\fP
   [\fB\-relax\-all\fP] [\fB\-relax\-section\fP] [\fB\-no\-relax\fP]
   [\fB\-EB\fP] [\fB\-EL\fP]
.PP
\&\fITarget \s-1NDS32\s0 options:\fP
    [\fB\-EL\fP] [\fB\-EB\fP] [\fB\-O\fP] [\fB\-Os\fP] [\fB\-mcpu=\fP\fIcpu\fP]
    [\fB\-misa=\fP\fIisa\fP] [\fB\-mabi=\fP\fIabi\fP] [\fB\-mall\-ext\fP]
    [\fB\-m[no\-]16\-bit\fP]  [\fB\-m[no\-]perf\-ext\fP] [\fB\-m[no\-]perf2\-ext\fP]
    [\fB\-m[no\-]string\-ext\fP] [\fB\-m[no\-]dsp\-ext\fP] [\fB\-m[no\-]mac\fP] [\fB\-m[no\-]div\fP]
    [\fB\-m[no\-]audio\-isa\-ext\fP] [\fB\-m[no\-]fpu\-sp\-ext\fP] [\fB\-m[no\-]fpu\-dp\-ext\fP]
    [\fB\-m[no\-]fpu\-fma\fP] [\fB\-mfpu\-freg=\fP\fI\s-1FREG\s0\fP] [\fB\-mreduced\-regs\fP]
    [\fB\-mfull\-regs\fP] [\fB\-m[no\-]dx\-regs\fP] [\fB\-mpic\fP] [\fB\-mno\-relax\fP]
    [\fB\-mb2bb\fP]
.PP
\&\fITarget \s-1PDP11\s0 options:\fP
   [\fB\-mpic\fP|\fB\-mno\-pic\fP] [\fB\-mall\fP] [\fB\-mno\-extensions\fP]
   [\fB\-m\fP\fIextension\fP|\fB\-mno\-\fP\fIextension\fP]
   [\fB\-m\fP\fIcpu\fP] [\fB\-m\fP\fImachine\fP]
.PP
\&\fITarget picoJava options:\fP
   [\fB\-mb\fP|\fB\-me\fP]
.PP
\&\fITarget PowerPC options:\fP
   [\fB\-a32\fP|\fB\-a64\fP]
   [\fB\-mpwrx\fP|\fB\-mpwr2\fP|\fB\-mpwr\fP|\fB\-m601\fP|\fB\-mppc\fP|\fB\-mppc32\fP|\fB\-m603\fP|\fB\-m604\fP|\fB\-m403\fP|\fB\-m405\fP|
    \fB\-m440\fP|\fB\-m464\fP|\fB\-m476\fP|\fB\-m7400\fP|\fB\-m7410\fP|\fB\-m7450\fP|\fB\-m7455\fP|\fB\-m750cl\fP|\fB\-mgekko\fP|
    \fB\-mbroadway\fP|\fB\-mppc64\fP|\fB\-m620\fP|\fB\-me500\fP|\fB\-e500x2\fP|\fB\-me500mc\fP|\fB\-me500mc64\fP|\fB\-me5500\fP|
    \fB\-me6500\fP|\fB\-mppc64bridge\fP|\fB\-mbooke\fP|\fB\-mpower4\fP|\fB\-mpwr4\fP|\fB\-mpower5\fP|\fB\-mpwr5\fP|\fB\-mpwr5x\fP|
    \fB\-mpower6\fP|\fB\-mpwr6\fP|\fB\-mpower7\fP|\fB\-mpwr7\fP|\fB\-mpower8\fP|\fB\-mpwr8\fP|\fB\-mpower9\fP|\fB\-mpwr9\fP\fB\-ma2\fP|
    \fB\-mcell\fP|\fB\-mspe\fP|\fB\-mspe2\fP|\fB\-mtitan\fP|\fB\-me300\fP|\fB\-mcom\fP]
   [\fB\-many\fP] [\fB\-maltivec\fP|\fB\-mvsx\fP|\fB\-mhtm\fP|\fB\-mvle\fP]
   [\fB\-mregnames\fP|\fB\-mno\-regnames\fP]
   [\fB\-mrelocatable\fP|\fB\-mrelocatable\-lib\fP|\fB\-K \s-1PIC\s0\fP] [\fB\-memb\fP]
   [\fB\-mlittle\fP|\fB\-mlittle\-endian\fP|\fB\-le\fP|\fB\-mbig\fP|\fB\-mbig\-endian\fP|\fB\-be\fP]
   [\fB\-msolaris\fP|\fB\-mno\-solaris\fP]
   [\fB\-nops=\fP\fIcount\fP]
.PP
\&\fITarget \s-1PRU\s0 options:\fP
   [\fB\-link\-relax\fP]
   [\fB\-mnolink\-relax\fP]
   [\fB\-mno\-warn\-regname\-label\fP]
.PP
\&\fITarget RISC\-V options:\fP
   [\fB\-fpic\fP|\fB\-fPIC\fP|\fB\-fno\-pic\fP]
   [\fB\-march\fP=\fI\s-1ISA\s0\fP]
   [\fB\-mabi\fP=\fI\s-1ABI\s0\fP]
   [\fB\-mlittle\-endian\fP|\fB\-mbig\-endian\fP]
.PP
\&\fITarget \s-1RL78\s0 options:\fP
   [\fB\-mg10\fP]
   [\fB\-m32bit\-doubles\fP|\fB\-m64bit\-doubles\fP]
.PP
\&\fITarget \s-1RX\s0 options:\fP
   [\fB\-mlittle\-endian\fP|\fB\-mbig\-endian\fP]
   [\fB\-m32bit\-doubles\fP|\fB\-m64bit\-doubles\fP]
   [\fB\-muse\-conventional\-section\-names\fP]
   [\fB\-msmall\-data\-limit\fP]
   [\fB\-mpid\fP]
   [\fB\-mrelax\fP]
   [\fB\-mint\-register=\fP\fInumber\fP]
   [\fB\-mgcc\-abi\fP|\fB\-mrx\-abi\fP]
.PP
\&\fITarget s390 options:\fP
   [\fB\-m31\fP|\fB\-m64\fP] [\fB\-mesa\fP|\fB\-mzarch\fP] [\fB\-march\fP=\fI\s-1CPU\s0\fP]
   [\fB\-mregnames\fP|\fB\-mno\-regnames\fP]
   [\fB\-mwarn\-areg\-zero\fP]
.PP
\&\fITarget \s-1SCORE\s0 options:\fP
   [\fB\-EB\fP][\fB\-EL\fP][\fB\-FIXDD\fP][\fB\-NWARN\fP]
   [\fB\-SCORE5\fP][\fB\-SCORE5U\fP][\fB\-SCORE7\fP][\fB\-SCORE3\fP]
   [\fB\-march=score7\fP][\fB\-march=score3\fP]
   [\fB\-USE_R1\fP][\fB\-KPIC\fP][\fB\-O0\fP][\fB\-G\fP \fInum\fP][\fB\-V\fP]
.PP
\&\fITarget \s-1SPARC\s0 options:\fP
   [\fB\-Av6\fP|\fB\-Av7\fP|\fB\-Av8\fP|\fB\-Aleon\fP|\fB\-Asparclet\fP|\fB\-Asparclite\fP
    \fB\-Av8plus\fP|\fB\-Av8plusa\fP|\fB\-Av8plusb\fP|\fB\-Av8plusc\fP|\fB\-Av8plusd\fP
    \fB\-Av8plusv\fP|\fB\-Av8plusm\fP|\fB\-Av9\fP|\fB\-Av9a\fP|\fB\-Av9b\fP|\fB\-Av9c\fP
    \fB\-Av9d\fP|\fB\-Av9e\fP|\fB\-Av9v\fP|\fB\-Av9m\fP|\fB\-Asparc\fP|\fB\-Asparcvis\fP
    \fB\-Asparcvis2\fP|\fB\-Asparcfmaf\fP|\fB\-Asparcima\fP|\fB\-Asparcvis3\fP
    \fB\-Asparcvisr\fP|\fB\-Asparc5\fP]
   [\fB\-xarch=v8plus\fP|\fB\-xarch=v8plusa\fP]|\fB\-xarch=v8plusb\fP|\fB\-xarch=v8plusc\fP
    \fB\-xarch=v8plusd\fP|\fB\-xarch=v8plusv\fP|\fB\-xarch=v8plusm\fP|\fB\-xarch=v9\fP
    \fB\-xarch=v9a\fP|\fB\-xarch=v9b\fP|\fB\-xarch=v9c\fP|\fB\-xarch=v9d\fP|\fB\-xarch=v9e\fP
    \fB\-xarch=v9v\fP|\fB\-xarch=v9m\fP|\fB\-xarch=sparc\fP|\fB\-xarch=sparcvis\fP
    \fB\-xarch=sparcvis2\fP|\fB\-xarch=sparcfmaf\fP|\fB\-xarch=sparcima\fP
    \fB\-xarch=sparcvis3\fP|\fB\-xarch=sparcvisr\fP|\fB\-xarch=sparc5\fP
    \fB\-bump\fP]
   [\fB\-32\fP|\fB\-64\fP]
   [\fB\-\-enforce\-aligned\-data\fP][\fB\-\-dcti\-couples\-detect\fP]
.PP
\&\fITarget \s-1TIC54X\s0 options:\fP
 [\fB\-mcpu=54[123589]\fP|\fB\-mcpu=54[56]lp\fP] [\fB\-mfar\-mode\fP|\fB\-mf\fP]
 [\fB\-merrors\-to\-file\fP \fI<filename>\fP|\fB\-me\fP \fI<filename>\fP]
.PP
\&\fITarget \s-1TIC6X\s0 options:\fP
   [\fB\-march=\fP\fIarch\fP] [\fB\-mbig\-endian\fP|\fB\-mlittle\-endian\fP]
   [\fB\-mdsbt\fP|\fB\-mno\-dsbt\fP] [\fB\-mpid=no\fP|\fB\-mpid=near\fP|\fB\-mpid=far\fP]
   [\fB\-mpic\fP|\fB\-mno\-pic\fP]
.PP
\&\fITarget TILE\-Gx options:\fP
   [\fB\-m32\fP|\fB\-m64\fP][\fB\-EB\fP][\fB\-EL\fP]
.PP
\&\fITarget Visium options:\fP
   [\fB\-mtune=\fP\fIarch\fP]
.PP
\&\fITarget Xtensa options:\fP
 [\fB\-\-[no\-]text\-section\-literals\fP] [\fB\-\-[no\-]auto\-litpools\fP]
 [\fB\-\-[no\-]absolute\-literals\fP]
 [\fB\-\-[no\-]target\-align\fP] [\fB\-\-[no\-]longcalls\fP]
 [\fB\-\-[no\-]transform\fP]
 [\fB\-\-rename\-section\fP \fIoldname\fP=\fInewname\fP]
 [\fB\-\-[no\-]trampolines\fP]
 [\fB\-\-abi\-windowed\fP|\fB\-\-abi\-call0\fP]
.PP
\&\fITarget Z80 options:\fP
  [\fB\-march=\fP\fI\s-1CPU\s0\fP\fI[\-EXT]\fP\fI[+EXT]\fP]
  [\fB\-local\-prefix=\fP\fI\s-1PREFIX\s0\fP]
  [\fB\-colonless\fP]
  [\fB\-sdcc\fP]
  [\fB\-fp\-s=\fP\fI\s-1FORMAT\s0\fP]
  [\fB\-fp\-d=\fP\fI\s-1FORMAT\s0\fP]
.SH DESCRIPTION
.IX Header DESCRIPTION
\&\s-1GNU\s0 \fBas\fP 实际上是一个汇编程序家族。 如果您在一种体系结构上使用 (或已经使用) \s-1GNU\s0
汇编程序，那么当您在另一种体系结构上使用它时，您应该会发现一个非常相似的环境。 每个版本与其他版本有很多共同之处，包括目标文件格式、大多数汇编程序指令
(通常称为 \&\fIpseudo\-ops\fP) 和汇编程序语法。
.PP
\&\fBas\fP 主要用于汇编 \&\s-1GNU C\s0 编译器 \f(CW\*(C`gcc\*(C'\fP 的输出，以供链接器
\&\f(CW\*(C`ld\*(C'\fP 使用。 尽管如此，我们已经尝试让 \fBas\fP 正确组装同一台机器的其他组装器可以组装的所有东西。
明确记录任何异常。 这并不意味着 \fBas\fP 总是使用与同一体系结构的另一个汇编器相同的语法; 例如，我们知道 680x0
汇编语言语法有几个不兼容的版本。
.PP
每次运行 \fBas\fP 时，它都会准确地汇编一个源程序。 源程序由一个或多个文件组成。 (标准输入也是一个文件。)
.PP
您为 \fBas\fP 提供了一个具有零个或多个输入文件名的命令行。 读取输入文件 (从左文件名到右)。 没有特殊含义的命令行参数 (在任何位置)
被认为是输入文件名。
.PP
如果您没有给 \fBas\fP 文件名，它会尝试从 \fBas\fP 标准输入读取一个输入文件，通常是您的终端。 您可能需要键入 \fBctl\-D\fP 来告诉
\fBas\fP 没有更多的程序要汇编。
.PP
如果需要在命令行中明确命名标准输入文件，请使用 \fB\-\-\fP。
.PP
如果源为空，则 \fBas\fP 生成一个小的空对象文件。
.PP
\&\fBas\fP 可能会将警告和错误消息写入标准错误文件 (通常是您的终端)。 当编译器自动运行 \fBas\fP 时，这不应该发生。 警告报告所做的假设，以便
\fBas\fP 可以继续组装有缺陷的程序; 错误报告一个严重的问题，导致程序集停止。
.PP
如果您通过 \s-1GNU C\s0 编译器调用 \fBas\fP，您可以使用 \fB\-Wa\fP 选项将参数传递给汇编器。 汇编器参数必须彼此分开 (和
\fB\-Wa\fP) 用逗号隔开。 例如:
.PP
.Vb 1
\& gcc \-c \-g \-O \-Wa,\-alh,\-L file.c
.Ve
.PP
这将两个选项传递给汇编程序: \fB\-alh\fP (使用高级汇编源代码将列表发送到标准输出) 和 \fB\-L\fP (在符号表中保留本地符号)。
.PP
通常您不需要使用此 \fB\-Wa\fP 机制，因为许多编译器命令行选项由编译器自动传递给汇编器。 (您可以使用 \fB\-v\fP 选项调用 \s-1GNU\s0
编译器驱动程序，以准确查看它传递给每个编译过程的选项，包括汇编程序。)
.SH OPTIONS
.IX Header OPTIONS
.IP \fB@\fP\fIfile\fP 4
.IX Item @file
从 \fIfile\fP 读取命令行选项。 读取的选项插入到原始 @\fIfile\fP 选项的位置。 如果 \fIfile\fP
不存在或无法读取，则该选项将按字面意思处理，而不是删除。
.Sp
\fIfile\fP 中的选项由空格分隔。 通过用单引号或双引号将整个选项括起来，可以将空白字符包含在选项中。 任何字符 (包括反斜杠)
都可以通过在要包含的字符前加上反斜杠来包含。 \fIfile\fP 本身可能包含额外的 @\fIfile\fP 选项; 任何此类选项都将递归处理。
.IP \fB\-a[cdghlmns]\fP 4
.IX Item \-a[cdghlmns]
以多种方式中的任何一种打开列表:
.RS 4
.IP \fB\-ac\fP 4
.IX Item \-ac
省略假条件
.IP \fB\-ad\fP 4
.IX Item \-ad
省略调试指令
.IP \fB\-ag\fP 4
.IX Item \-ag
包括一般信息，如版本和选项传递
.IP \fB\-ah\fP 4
.IX Item \-ah
包括高级源
.IP \fB\-al\fP 4
.IX Item \-al
包括组装
.IP \fB\-am\fP 4
.IX Item \-am
包括宏扩展
.IP \fB\-an\fP 4
.IX Item \-an
省略表格处理
.IP \fB\-as\fP 4
.IX Item \-as
包括符号
.IP \fB=file\fP 4
.IX Item =file
设置列表文件的名称
.RE
.RS 4
.Sp
您可以组合这些选项; 例如，将 \fB\-aln\fP 用于不进行表单处理的汇编列表。 \fB=file\fP 选项 (如果使用) 必须是最后一个。 \fB\-a\fP
本身默认为 \fB\-ahls\fP。
.RE
.IP \fB\-\-alternate\fP 4
.IX Item \-\-alternate
以备用宏模式开始。
.IP \fB\-\-compress\-debug\-sections\fP 4
.IX Item \-\-compress\-debug\-sections
使用 zlib 和 \&\s-1ELF ABI.\s0 中的 \s-1SHF_COMPRESSED\s0 压缩 \s-1DWARF\s0
调试部分生成的目标文件可能与旧的链接器和目标文件实用工具不兼容。 请注意，如果压缩会使给定的部分成为 \fIlarger\fP，则它不会被压缩。
.IP \fB\-\-compress\-debug\-sections=none\fP 4
.IX Item \-\-compress\-debug\-sections=none
.PD 0
.IP \fB\-\-compress\-debug\-sections=zlib\fP 4
.IX Item \-\-compress\-debug\-sections=zlib
.IP \fB\-\-compress\-debug\-sections=zlib\-gnu\fP 4
.IX Item \-\-compress\-debug\-sections=zlib\-gnu
.IP \fB\-\-compress\-debug\-sections=zlib\-gabi\fP 4
.IX Item \-\-compress\-debug\-sections=zlib\-gabi
.IP \fB\-\-compress\-debug\-sections=zstd\fP 4
.IX Item \-\-compress\-debug\-sections=zstd
.PD
这些选项控制 \s-1DWARF\s0 调试部分的压缩方式。 \&\fB\-\-compress\-debug\-sections=none\fP 等同于
\&\fB\-\-nocompress\-debug\-sections\fP。 \&\fB\-\-compress\-debug\-sections=zlib\fP 和
\&\fB\-\-compress\-debug\-sections=zlib\-gabi\fP 等同于 \&\fB\-\-compress\-debug\-sections\fP。
\&\fB\-\-compress\-debug\-sections=zlib\-gnu\fP 使用过时的 zlib\-gnu 格式压缩 \s-1DWARF\s0
调试部分。 调试部分重命名为以 \fB.zdebug\fP 开头。 \&\fB\-\-compress\-debug\-sections=zstd\fP 使用 zstd
压缩 \s-1DWARF\s0 调试部分。 注意 \- 如果压缩实际上会使一个部分成为 \&\fIlarger\fP，则它不会被压缩或重命名。
.IP \fB\-\-nocompress\-debug\-sections\fP 4
.IX Item \-\-nocompress\-debug\-sections
不要压缩 \s-1DWARF\s0 调试部分。 这通常是除 x86/x86_64 之外的所有目标的默认值，但是可以使用配置时间选项来覆盖它。
.IP \fB\-D\fP 4
.IX Item \-D
如果支持，在目标特定后端启用调试。 否则忽略。 即使被忽略，此选项也会被接受以实现脚本与其他汇编器调用的兼容性。
.IP "\fB\-\-debug\-prefix\-map\fP \fIold\fP\fB=\fP\fInew\fP" 4
.IX Item "\-\-debug\-prefix\-map old=new"
在目录 \fIold\fP 中汇编文件时，记录描述它们的调试信息，而不是在 \fInew\fP 中。
.IP "\fB\-\-defsym\fP \fIsym\fP\fB=\fP\fIvalue\fP" 4
.IX Item "\-\-defsym sym=value"
在汇编输入文件之前，将符号 \fIsym\fP 定义为 \fIvalue\fP。 \&\fIvalue\fP 必须是整数常量。 与 C 中一样，前导 \fB0x\fP
表示十六进制值，前导 \fB0\fP 表示八进制值。 可以通过使用 \f(CW\*(C`.set\*(C'\fP 伪操作在源文件中覆盖符号的值。
.IP \fB\-\-dump\-config\fP 4
.IX Item \-\-dump\-config
显示如何配置汇编程序然后退出。
.IP \fB\-\-elf\-stt\-common=no\fP 4
.IX Item \-\-elf\-stt\-common=no
.PD 0
.IP \fB\-\-elf\-stt\-common=yes\fP 4
.IX Item \-\-elf\-stt\-common=yes
.PD
这些选项控制 \s-1ELF\s0 汇编程序是否应生成具有 \f(CW\*(C`STT_COMMON\*(C'\fP 类型的通用符号。 默认值可以由配置选项
\fB\-\-enable\-elf\-stt\-common\fP 控制。
.IP \fB\-\-emulation=\fP\fIname\fP 4
.IX Item \-\-emulation=name
如果汇编器被配置为支持多种不同的目标配置，则可以使用此选项来选择所需的形式。
.IP \fB\-f\fP 4
.IX Item \-f
\&\*(L"fast\*(R"\-\-\- 跳过空格和注释预处理 (假设源是编译器输出)。
.IP \fB\-g\fP 4
.IX Item \-g
.PD 0
.IP \fB\-\-gen\-debug\fP 4
.IX Item \-\-gen\-debug
.PD
使用目标首选的调试格式为每个汇编程序源代码行生成调试信息。 这当前意味着 \s-1STABS、ECOFF\s0 或 \s-1DWARF2。\s0
当调试格式为 \s-1DWARF\s0 时，只有当程序集文件本身不生成时才会发出 \f(CW\*(C`.debug_info\*(C'\fP 和
\&\f(CW\*(C`.debug_line\*(C'\fP 部分。
.IP \fB\-\-gstabs\fP 4
.IX Item \-\-gstabs
为每个汇编器行生成 stabs 调试信息。 如果调试器可以处理它，这可能有助于调试汇编代码。
.IP \fB\-\-gstabs+\fP 4
.IX Item \-\-gstabs+
为每个汇编程序行生成 stabs 调试信息，\s-1GNU\s0 扩展可能只有 gdb 可以处理，这可能会使其他调试器崩溃或拒绝读取您的程序。
这可能有助于调试汇编程序代码。 当前唯一的 \s-1GNU\s0 扩展是汇编时当前工作目录的位置。
.IP \fB\-\-gdwarf\-2\fP 4
.IX Item \-\-gdwarf\-2
为每个汇编程序行生成 \s-1DWARF2\s0 调试信息。 如果调试器可以处理它，这可能有助于调试汇编代码。 注意 \-\-\-
此选项仅受某些目标支持，并非所有目标都支持。
.IP \fB\-\-gdwarf\-3\fP 4
.IX Item \-\-gdwarf\-3
此选项与 \fB\-\-gdwarf\-2\fP 选项相同，只是它允许根据 \s-1DWARF\s0 规范的版本 3 生成额外的调试信息。 注意 \-
启用此选项并不能保证生成任何额外信息，这样做的选择是基于每个目标的。
.IP \fB\-\-gdwarf\-4\fP 4
.IX Item \-\-gdwarf\-4
此选项与 \fB\-\-gdwarf\-2\fP 选项相同，只是它允许根据 \s-1DWARF\s0 规范的版本 4 生成额外的调试信息。 注意 \-
启用此选项并不能保证生成任何额外信息，这样做的选择是基于每个目标的。
.IP \fB\-\-gdwarf\-5\fP 4
.IX Item \-\-gdwarf\-5
此选项与 \fB\-\-gdwarf\-2\fP 选项相同，不同之处在于它允许根据 \s-1DWARF\s0 规范的版本 5 生成额外的调试信息。 注意 \-
启用此选项并不能保证生成任何额外信息，这样做的选择是基于每个目标的。
.IP \fB\-\-gdwarf\-sections\fP 4
.IX Item \-\-gdwarf\-sections
不要创建 .debug_line 部分，而是创建一系列 \&.debug_line.\fIfoo\fP 部分，其中 \fIfoo\fP 是相应代码部分的名称。
例如，一个名为 \fI.text.func\fP 的代码段会将其矮小的行号信息放入一个名为 \&\fI.debug_line.text.func\fP 的段中。
如果代码部分只是称为 \fI.text\fP，那么调试行部分仍将被称为 \fI.debug_line\fP，没有任何后缀。
.IP \fB\-\-gdwarf\-cie\-version=\fP\fIversion\fP 4
.IX Item \-\-gdwarf\-cie\-version=version
控制生成哪个版本的 \s-1DWARF\s0 Common Information Entries (CIEs)。 如果未指定此标志，则默认为版本
1，但某些目标可以修改此默认值。 \fIversion\fP 的其他可能值为 3 或 4.
.IP \fB\-\-generate\-missing\-build\-notes=yes\fP 4
.IX Item \-\-generate\-missing\-build\-notes=yes
.PD 0
.IP \fB\-\-generate\-missing\-build\-notes=no\fP 4
.IX Item \-\-generate\-missing\-build\-notes=no
.PD
这些选项控制 \s-1ELF\s0 汇编程序是否应生成 \s-1GNU\s0 构建属性注释 (如果输入源中不存在)。 默认值可以由
\fB\-\-enable\-generate\-build\-notes\fP 配置选项控制。
.IP \fB\-\-gsframe\fP 4
.IX Item \-\-gsframe
.PD 0
.IP \fB\-\-gsframe\fP 4
.IX Item \-\-gsframe
.PD
从 \s-1CFI\s0 指令创建 \fI.sframe\fP 部分。
.IP "\fB\-\-hash\-size\fP \fIN\fP" 4
.IX Item "\-\-hash\-size N"
忽略。支持与其他汇编程序的命令行兼容性。
.IP \fB\-\-help\fP 4
.IX Item \-\-help
打印命令行选项的总结并退出。
.IP \fB\-\-target\-help\fP 4
.IX Item \-\-target\-help
打印所有目标特定选项的总结并退出。
.IP "\fB\-I\fP \fIdir\fP" 4
.IX Item "\-I dir"
将目录 \fIdir\fP 添加到 \f(CW\*(C`.include\*(C'\fP 指令的搜索列表中。
.IP \fB\-J\fP 4
.IX Item \-J
不要警告签名溢出。
.IP \fB\-K\fP 4
.IX Item \-K
当差异表因长位移而改变时发出警告。
.IP \fB\-L\fP 4
.IX Item \-L
.PD 0
.IP \fB\-\-keep\-locals\fP 4
.IX Item \-\-keep\-locals
.PD
保留 (在符号表中) 局部符号。 这些符号以系统特定的本地标签前缀开头，通常 \fB.L\fP 用于 \s-1ELF\s0 系统或 \fBL\fP 用于传统
a.out 系统。
.IP \fB\-\-listing\-lhs\-width=\fP\fInumber\fP 4
.IX Item \-\-listing\-lhs\-width=number
将汇编器列表的输出数据列的最大宽度 (字) 设置为 \fInumber\fP。
.IP \fB\-\-listing\-lhs\-width2=\fP\fInumber\fP 4
.IX Item \-\-listing\-lhs\-width2=number
将汇编程序列表中续行的输出数据列的最大宽度 (字) 设置为 \fInumber\fP。
.IP \fB\-\-listing\-rhs\-width=\fP\fInumber\fP 4
.IX Item \-\-listing\-rhs\-width=number
将列表中显示的输入源行的最大宽度设置为 \&\fInumber\fP 字节。
.IP \fB\-\-listing\-cont\-lines=\fP\fInumber\fP 4
.IX Item \-\-listing\-cont\-lines=number
将单行输入在列表中打印的最大行数设置为 \fInumber\fP + 1.
.IP \fB\-\-multibyte\-handling=allow\fP 4
.IX Item \-\-multibyte\-handling=allow
.PD 0
.IP \fB\-\-multibyte\-handling=warn\fP 4
.IX Item \-\-multibyte\-handling=warn
.IP \fB\-\-multibyte\-handling=warn\-sym\-only\fP 4
.IX Item \-\-multibyte\-handling=warn\-sym\-only
.IP \fB\-\-multibyte\-handling=warn_sym_only\fP 4
.IX Item \-\-multibyte\-handling=warn_sym_only
.PD
控制汇编器如何处理输入中的多字节字符。 默认值 (可以使用 \fBallow\fP 参数恢复) 是允许这样的字符而不用抱怨。 使用 \fBwarn\fP
参数将使汇编器在遇到任何多字节字符时生成警告消息。 使用 \fBwarn\-sym\-only\fP 参数只会导致在使用包含多字节字符的名称定义符号时生成警告。
(引用未定义的符号不会产生警告)。
.IP \fB\-\-no\-pad\-sections\fP 4
.IX Item \-\-no\-pad\-sections
停止汇编程序以将输出部分的末尾填充到该部分的对齐方式。 默认是填充这些部分，但这可能会浪费内存限制严格的目标可能需要的空间。
.IP "\fB\-o\fP \fIobjfile\fP" 4
.IX Item "\-o objfile"
将目标文件输出命名为 \fBas\fP \fIobjfile\fP。
.IP \fB\-R\fP 4
.IX Item \-R
将数据部分折叠到文本部分。
.IP \fB\-\-reduce\-memory\-overheads\fP 4
.IX Item \-\-reduce\-memory\-overheads
忽略。支持与为汇编器和链接器提供相同选项的工具兼容。
.IP \fB\-\-sectname\-subst\fP 4
.IX Item \-\-sectname\-subst
尊重部分名称中的替换序列。
.IP \fB\-\-size\-check=error\fP 4
.IX Item \-\-size\-check=error
.PD 0
.IP \fB\-\-size\-check=warning\fP 4
.IX Item \-\-size\-check=warning
.PD
对无效的 \s-1ELF\s0 .size 指令发出错误或警告。
.IP \fB\-\-statistics\fP 4
.IX Item \-\-statistics
打印程序集使用的最大空间 (以字节为单位) 和总时间 (以秒为单位)。
.IP \fB\-\-strip\-local\-absolute\fP 4
.IX Item \-\-strip\-local\-absolute
从传出符号表中删除局部绝对符号。
.IP \fB\-v\fP 4
.IX Item \-v
.PD 0
.IP \fB\-version\fP 4
.IX Item \-version
.PD
打印 \fBas\fP 版本。
.IP \fB\-\-version\fP 4
.IX Item \-\-version
打印 \fBas\fP 版本并退出。
.IP \fB\-W\fP 4
.IX Item \-W
.PD 0
.IP \fB\-\-no\-warn\fP 4
.IX Item \-\-no\-warn
.PD
抑制警告消息。
.IP \fB\-\-fatal\-warnings\fP 4
.IX Item \-\-fatal\-warnings
将警告视为错误。
.IP \fB\-\-warn\fP 4
.IX Item \-\-warn
不要隐藏警告消息或将它们视为错误。
.IP \fB\-w\fP 4
.IX Item \-w
Ignored.
.IP \fB\-x\fP 4
.IX Item \-x
Ignored.
.IP \fB\-Z\fP 4
.IX Item \-Z
即使在错误之后生成目标文件。
.IP "\fB\-\- |\fP \fIfiles\fP \fB...\fP" 4
.IX Item "\-\- | files ..."
标准输入，或要汇编的源文件。
.PP
当为 \s-1ARM\s0 架构 (AArch64) 的 64 位模式配置 as 时，以下选项可用。
.IP \fB\-EB\fP 4
.IX Item \-EB
此选项指定汇编程序生成的输出应标记为针对大端处理器进行编码。
.IP \fB\-EL\fP 4
.IX Item \-EL
此选项指定汇编程序生成的输出应标记为针对小端处理器进行编码。
.IP \fB\-mabi=\fP\fIabi\fP 4
.IX Item \-mabi=abi
指定源代码使用哪个 \s-1ABI\s0。 识别的参数为: \f(CW\*(C`ilp32\*(C'\fP 和
\f(CW\*(C`lp64\*(C'\fP，分别决定生成的目标文件为 \s-1ELF32\s0 和 \s-1ELF64\s0 格式。 默认为
\f(CW\*(C`lp64\*(C'\fP。
.IP \fB\-mcpu=\fP\fIprocessor\fP\fB[+\fP\fIextension\fP\fB...]\fP 4
.IX Item \-mcpu=processor[+extension...]
该选项指定目标处理器。 如果试图汇编一条不会在目标处理器上执行的指令，汇编程序将发出一条错误消息。 可识别以下处理器名称:
\&\f(CW\*(C`cortex\-a34\*(C'\fP、\&\f(CW\*(C`cortex\-a35\*(C'\fP、\&\f(CW\*(C`cortex\-a53\*(C'\fP、\&\f(CW\*(C`cortex\-a55\*(C'\fP、\&\f(CW\*(C`cortex\-a57\*(C'\fP、\&\f(CW\*(C`cortex\-a65\*(C'\fP、\&\f(CW\*(C`cortex\-a65ae\*(C'\fP、\&\f(CW\*(C`cortex\-a72\*(C'\fP、\&\f(CW\*(C`cortex\-a73\*(C'\fP、\&\f(CW\*(C`cortex\-a75\*(C'\fP、\&\f(CW\*(C`cortex\-a76\*(C'\fP、\&\f(CW\*(C`cortex\-a76ae\*(C'\fP、\&\f(CW\*(C`cortex\-a77\*(C'\fP、\&\f(CW\*(C`cortex\-a78\*(C'\fP、\&\f(CW\*(C`cortex\-a78ae\*(C'\fP、\&\f(CW\*(C`cortex\-a78c\*(C'\fP、\&\f(CW\*(C`cortex\-a510\*(C'\fP、\&\f(CW\*(C`cortex\-a710\*(C'\fP、\&\f(CW\*(C`ares\*(C'\fP、\&\f(CW\*(C`exynos\-m1\*(C'\fP、\&\f(CW\*(C`falkor\*(C'\fP、\&\f(CW\*(C`neoverse\-n1\*(C'\fP、\&\f(CW\*(C`neoverse\-n2\*(C'\fP、\&\f(CW\*(C`neoverse\-e1\*(C'\fP、\&\f(CW\*(C`neoverse\-v1\*(C'\fP、\&\f(CW\*(C`qdf24xx\*(C'\fP、\&\f(CW\*(C`saphira\*(C'\fP、\&\f(CW\*(C`thunderx\*(C'\fP、\&\f(CW\*(C`vulcan\*(C'\fP、\&\f(CW\*(C`xgene1\*(C'\fP、\&\f(CW\*(C`xgene2\*(C'\fP、\&\f(CW\*(C`cortex\-r82\*(C'\fP、\&\f(CW\*(C`cortex\-x1\*(C'\fP
和 \&\f(CW\*(C`cortex\-x2\*(C'\fP。 特殊名称 \f(CW\*(C`all\*(C'\fP
可用于允许汇编器接受对任何支持的处理器有效的指令，包括所有可选扩展。
.Sp
除了基本指令集之外，还可以告诉汇编程序接受或限制扩展处理器的各种扩展助记符。
.Sp
如果特定处理器的某些实现可以具有扩展，那么这些扩展将自动启用。 因此，您通常不必指定任何额外的扩展名。
.IP \fB\-march=\fP\fIarchitecture\fP\fB[+\fP\fIextension\fP\fB...]\fP 4
.IX Item \-march=architecture[+extension...]
此选项指定目标体系结构。 如果试图汇编一条不会在目标体系结构上执行的指令，汇编程序将发出一条错误消息。 可识别以下架构名称:
\f(CW\*(C`armv8\-a\*(C'\fP、\&\f(CW\*(C`armv8.1\-a\*(C'\fP、\f(CW\*(C`armv8.2\-a\*(C'\fP、\f(CW\*(C`armv8.3\-a\*(C'\fP、\f(CW\*(C`armv8.4\-a\*(C'\fP、\&\f(CW\*(C`armv8.5\-a\*(C'\fP、\f(CW\*(C`armv8.6\-a\*(C'\fP、\f(CW\*(C`armv8.7\-a\*(C'\fP、\f(CW\*(C`armv8.8\-a\*(C'\fP、\&\f(CW\*(C`armv8\-r\*(C'\fP、\f(CW\*(C`armv9\-a\*(C'\fP、\f(CW\*(C`armv9.1\-a\*(C'\fP、\f(CW\*(C`armv9.2\-a\*(C'\fP
和 \f(CW\*(C`armv9.3\-a\*(C'\fP。
.Sp
如果同时指定了 \fB\-mcpu\fP 和 \fB\-march\fP，汇编程序将使用 \fB\-mcpu\fP 的设置。 如果两者均未指定，则汇编程序将默认为
\fB\-mcpu=all\fP。
.Sp
可以使用与 \fB\-mcpu\fP 选项相同的指令集扩展选项来扩展架构选项。 与 \&\fB\-mcpu\fP 不同，扩展并不总是默认启用，
.IP \fB\-mverbose\-error\fP 4
.IX Item \-mverbose\-error
此选项为 AArch64 气体启用详细错误消息。 默认情况下启用此选项。
.IP \fB\-mno\-verbose\-error\fP 4
.IX Item \-mno\-verbose\-error
此选项禁用 AArch64 gas 中的详细错误消息。
.PP
当为 Alpha 处理器配置 as 时，以下选项可用。
.IP \fB\-m\fP\fIcpu\fP 4
.IX Item \-mcpu
该选项指定目标处理器。 如果试图汇编一条不会在目标处理器上执行的指令，汇编程序可能会将指令扩展为宏或发出错误消息。 此选项等效于
\f(CW\*(C`.arch\*(C'\fP 指令。
.Sp
可识别以下处理器名称:
\&\f(CW21064\fP、\&\f(CW\*(C`21064a\*(C'\fP、\&\f(CW21066\fP、\&\f(CW21068\fP、\&\f(CW21164\fP、\&\f(CW\*(C`21164a\*(C'\fP、\&\f(CW\*(C`21164pc\*(C'\fP、\&\f(CW21264\fP、\&\f(CW\*(C`21264a\*(C'\fP、\&\f(CW\*(C`21264b\*(C'\fP、\&\f(CW\*(C`ev4\*(C'\fP、\&\f(CW\*(C`ev5\*(C'\fP、\&\f(CW\*(C`lca45\*(C'\fP、\&\f(CW\*(C`ev5\*(C'\fP、\&\f(CW\*(C`ev56\*(C'\fP、\&\f(CW\*(C`pca56\*(C'\fP、\&\f(CW\*(C`ev6\*(C'\fP、\&\f(CW\*(C`ev67\*(C'\fP、\&\f(CW\*(C`ev68\*(C'\fP。
特殊名称 \f(CW\*(C`all\*(C'\fP 可用于允许汇编程序接受对任何 Alpha 处理器有效的指令。
.Sp
为了支持 \s-1OSF/1\s0 中关于 \f(CW\*(C`.arch\*(C'\fP 的现有实践，以及 \fB\s-1MILO\s0\fP (Linux
\s-1ARC\s0 引导加载程序) 中的现有实践，编号的处理器名称 (例如 21064) 启用特定于处理器的 PALcode 指令，而 \*
(L`electro\-vlasic\*(R" 名称 (例如 \f(CW\*(C`ev4\*(C'\fP) 没有。
.IP \fB\-mdebug\fP 4
.IX Item \-mdebug
.PD 0
.IP \fB\-no\-mdebug\fP 4
.IX Item \-no\-mdebug
.PD
为 stabs 指令和过程描述符启用或禁用 \f(CW\*(C`.mdebug\*(C'\fP 封装的生成。 默认设置是在看到第一个 stabs 指令时自动启用
\f(CW\*(C`.mdebug\*(C'\fP。
.IP \fB\-relax\fP 4
.IX Item \-relax
此选项强制将所有重定位放入目标文件，而不是节省空间并在汇编时解决一些重定位。
请注意，此选项不会将所有符号算法传播到目标文件中，因为并非所有符号算法都可以表示。 但是，该选项在特定应用程序中仍然有用。
.IP \fB\-replace\fP 4
.IX Item \-replace
.PD 0
.IP \fB\-noreplace\fP 4
.IX Item \-noreplace
.PD
在组合时和链接时启用或禁用过程调用的优化。 这些选项仅适用于 \s-1VMS\s0 目标，\&\f(CW\*(C`\-replace\*(C'\fP 是默认值。
请参见 OpenVMS 链接器实用程序手册的 1.4.1 部分。
.IP \fB\-g\fP 4
.IX Item \-g
当编译器生成调试信息时使用此选项。 当 \&\fBgcc\fP 使用 \fBmips\-tfile\fP 为 \s-1ECOFF 生成调试信息时，\s0
本地标签必须传递到目标文件。 否则此选项无效。
.IP \fB\-G\fP\fIsize\fP 4
.IX Item \-Gsize
大于 \fIsize\fP 的局部公共符号放在 \f(CW\*(C`.bss\*(C'\fP 中，而较小的符号放在 \f(CW\*(C`.sbss\*(C'\fP 中。
.IP \fB\-F\fP 4
.IX Item \-F
.PD 0
.IP \fB\-32addr\fP 4
.IX Item \-32addr
.PD
为了向后兼容，这些选项将被忽略。
.PP
当为 \s-1ARC\s0 处理器配置 as 时，以下选项可用。
.IP \fB\-mcpu=\fP\fIcpu\fP 4
.IX Item \-mcpu=cpu
此选项选择核心处理器变体。
.IP "\fB\-EB | \-EL\fP" 4
.IX Item "\-EB | \-EL"
选择大端 (\-EB) 或小端 (\-EL) 输出。
.IP \fB\-mcode\-density\fP 4
.IX Item \-mcode\-density
启用代码密度扩展指令。
.PP
当为 \s-1ARM\s0 处理器系列配置 as 时，以下选项可用。
.IP \fB\-mcpu=\fP\fIprocessor\fP\fB[+\fP\fIextension\fP\fB...]\fP 4
.IX Item \-mcpu=processor[+extension...]
指定哪个 \s-1ARM\s0 处理器变体是目标。
.IP \fB\-march=\fP\fIarchitecture\fP\fB[+\fP\fIextension\fP\fB...]\fP 4
.IX Item \-march=architecture[+extension...]
指定目标使用的 \s-1ARM\s0 体系结构变体。
.IP \fB\-mfpu=\fP\fIfloating\-point\-format\fP 4
.IX Item \-mfpu=floating\-point\-format
选择哪个浮点架构是目标。
.IP \fB\-mfloat\-abi=\fP\fIabi\fP 4
.IX Item \-mfloat\-abi=abi
选择正在使用的浮点 \s-1ABI\s0。
.IP \fB\-mthumb\fP 4
.IX Item \-mthumb
启用 Thumb only 指令解码。
.IP "\fB\-mapcs\-32 | \-mapcs\-26 | \-mapcs\-float | \-mapcs\-reentrant\fP" 4
.IX Item "\-mapcs\-32 | \-mapcs\-26 | \-mapcs\-float | \-mapcs\-reentrant"
选择正在使用的过程调用约定。
.IP "\fB\-EB | \-EL\fP" 4
.IX Item "\-EB | \-EL"
选择大端 (\-EB) 或小端 (\-EL) 输出。
.IP \fB\-mthumb\-interwork\fP 4
.IX Item \-mthumb\-interwork
指定代码是在考虑到 Thumb 和 \&\s-1ARM\s0 代码之间的互通的情况下生成的。
.IP \fB\-mccs\fP 4
.IX Item \-mccs
打开 CodeComposer Studio 汇编语法兼容模式。
.IP \fB\-k\fP 4
.IX Item \-k
指定已生成 \s-1PIC\s0 代码。
.PP
当为 Blackfin 处理器系列配置 as 时，以下选项可用。
.IP \fB\-mcpu=\fP\fIprocessor\fP[\fB\-\fP\fIsirevision\fP] 4
.IX Item \-mcpu=processor[\-sirevision]
该选项指定目标处理器。 可选的 \fIsirevision\fP 不在汇编程序中使用。 在这里，\s-1GCC\s0 可以轻松传递其
\&\f(CW\*(C`\-mcpu=\*(C'\fP 选项。 如果试图汇编一条不会在目标处理器上执行的指令，汇编程序将发出一条错误消息。 识别以下处理器名称:
\&\f(CW\*(C`bf504\*(C'\fP、\&\f(CW\*(C`bf506\*(C'\fP、\&\f(CW\*(C`bf512\*(C'\fP、\&\f(CW\*(C`bf514\*(C'\fP、\&\f(CW\*(C`bf516\*(C'\fP、\&\f(CW\*(C`bf518\*(C'\fP、\&\f(CW\*(C`bf522\*(C'\fP、\&\f(CW\*(C`bf523\*(C'\fP、\&\f(CW\*(C`bf524\*(C'\fP、\&\f(CW\*(C`bf525\*(C'\fP、\&\f(CW\*(C`bf526\*(C'\fP、\&\f(CW\*(C`bf527\*(C'\fP、\&\f(CW\*(C`bf531\*(C'\fP、\&\f(CW\*(C`bf532\*(C'\fP、\&\f(CW\*(C`bf533\*(C'\fP、\&\f(CW\*(C`bf534\*(C'\fP、\&\f(CW\*(C`bf535\*(C'\fP
(尚未实现)、\&\f(CW\*(C`bf536\*(C'\fP、\&\f(CW\*(C`bf537\*(C'\fP、\&\f(CW\*(C`bf538\*(C'\fP、\&\f(CW\*(C`bf539\*(C'\fP、\&\f(CW\*(C`bf542\*(C'\fP、\&\f(CW\*(C`bf542m\*(C'\fP、\&\f(CW\*(C`bf544\*(C'\fP、\&\f(CW\*(C`bf544m\*(C'\fP、\&\f(CW\*(C`bf547\*(C'\fP、\&\f(CW\*(C`bf547m\*(C'\fP、\&\f(CW\*(C`bf548\*(C'\fP、\&\f(CW\*(C`bf548m\*(C'\fP、\&\f(CW\*(C`bf549\*(C'\fP、\&\f(CW\*(C`bf549m\*(C'\fP、\&\f(CW\*(C`bf561\*(C'\fP
和 \&\f(CW\*(C`bf592\*(C'\fP。
.IP \fB\-mfdpic\fP 4
.IX Item \-mfdpic
为 \s-1FDPIC ABI.\s0 组装
.IP \fB\-mno\-fdpic\fP 4
.IX Item \-mno\-fdpic
.PD 0
.IP \fB\-mnopic\fP 4
.IX Item \-mnopic
.PD
禁用 \-mfdpic。
.PP
当为 Linux 内核 \s-1BPF\s0 处理器系列配置 as 时，以下选项可用。
.PP
\&\f(CW@chapter\fP \s-1BPF\s0 相关，特性
.SS Options
.IX Subsection Options
.IP \fB\-EB\fP 4
.IX Item \-EB
此选项指定汇编程序应发出 big\-endian eBPF。
.IP \fB\-EL\fP 4
.IX Item \-EL
此选项指定汇编程序应发出小端 eBPF。
.PP
请注意，如果在命令行中未指定字节序选项，则使用主机字节序。 有关 CRIS 特定选项的文档，请参见信息页面。
.PP
当为 C\-SKY 处理器系列配置 as 时，以下选项可用。
.IP \fB\-march=\fP\fIarchname\fP 4
.IX Item \-march=archname
为架构 \fIarchname\fP 组装。 \fB\-\-help\fP 选项列出 \fIarchname\fP 的有效值。
.IP \fB\-mcpu=\fP\fIcpuname\fP 4
.IX Item \-mcpu=cpuname
为架构 \fIcpuname\fP 组装。 \fB\-\-help\fP 选项列出 \fIcpuname\fP 的有效值。
.IP \fB\-EL\fP 4
.IX Item \-EL
.PD 0
.IP \fB\-mlittle\-endian\fP 4
.IX Item \-mlittle\-endian
.PD
生成小端输出。
.IP \fB\-EB\fP 4
.IX Item \-EB
.PD 0
.IP \fB\-mbig\-endian\fP 4
.IX Item \-mbig\-endian
.PD
生成大端输出。
.IP \fB\-fpic\fP 4
.IX Item \-fpic
.PD 0
.IP \fB\-pic\fP 4
.IX Item \-pic
.PD
生成与位置无关的代码。
.IP \fB\-mljump\fP 4
.IX Item \-mljump
.PD 0
.IP \fB\-mno\-ljump\fP 4
.IX Item \-mno\-ljump
.PD
Enable/disable 将短分支指令
\&\f(CW\*(C`jbf\*(C'\fP、\f(CW\*(C`jbt\*(C'\fP、\f(CW\*(C`jbr\*(C'\fP 转换为
\f(CW\*(C`jmpi\*(C'\fP。 此选项仅适用于 V2 处理器。 它在不支持 \f(CW\*(C`jmpi\*(C'\fP 指令的
\s-1CK801\s0 和 \s-1CK802\s0 目标上被忽略，默认情况下为其他处理器启用。
.IP \fB\-mbranch\-stub\fP 4
.IX Item \-mbranch\-stub
.PD 0
.IP \fB\-mno\-branch\-stub\fP 4
.IX Item \-mno\-branch\-stub
.PD
将 \f(CW\*(C`bsr\*(C'\fP 指令的 \f(CW\*(C`R_CKCORE_PCREL_IMM26BY2\*(C'\fP 重定位传递给链接器。
.Sp
此选项仅适用于裸机 C\-SKY V2 \s-1ELF\s0 目标，默认情况下启用。 它不能用于将动态链接到共享库的代码中。
.IP \fB\-force2bsr\fP 4
.IX Item \-force2bsr
.PD 0
.IP \fB\-mforce2bsr\fP 4
.IX Item \-mforce2bsr
.IP \fB\-no\-force2bsr\fP 4
.IX Item \-no\-force2bsr
.IP \fB\-mno\-force2bsr\fP 4
.IX Item \-mno\-force2bsr
.PD
Enable/disable 将 \f(CW\*(C`jbsr\*(C'\fP 指令转换为 \f(CW\*(C`bsr\*(C'\fP。 对于
\s-1CK801/CK802\s0 目标，此选项始终启用 (并且忽略 \fB\-mno\-force2bsr\fP)。 当 \&\fB\-mbranch\-stub\fP
有效时，它也始终启用。
.IP \fB\-jsri2bsr\fP 4
.IX Item \-jsri2bsr
.PD 0
.IP \fB\-mjsri2bsr\fP 4
.IX Item \-mjsri2bsr
.IP \fB\-no\-jsri2bsr\fP 4
.IX Item \-no\-jsri2bsr
.IP \fB\-mno\-jsri2bsr\fP 4
.IX Item \-mno\-jsri2bsr
.PD
Enable/disable 将 \f(CW\*(C`jsri\*(C'\fP 指令转换为 \f(CW\*(C`bsr\*(C'\fP。 默认情况下启用此选项。
.IP \fB\-mnolrw\fP 4
.IX Item \-mnolrw
.PD 0
.IP \fB\-mno\-lrw\fP 4
.IX Item \-mno\-lrw
.PD
Enable/disable 将 \f(CW\*(C`lrw\*(C'\fP 指令转换为
\&\f(CW\*(C`movih\*(C'\fP/\f(CW\*(C`ori\*(C'\fP 对。
.IP \fB\-melrw\fP 4
.IX Item \-melrw
.PD 0
.IP \fB\-mno\-elrw\fP 4
.IX Item \-mno\-elrw
.PD
Enable/disable 扩展 \f(CW\*(C`lrw\*(C'\fP 指令。 CK800 系列处理器默认启用此选项。
.IP \fB\-mlaf\fP 4
.IX Item \-mlaf
.PD 0
.IP \fB\-mliterals\-after\-func\fP 4
.IX Item \-mliterals\-after\-func
.IP \fB\-mno\-laf\fP 4
.IX Item \-mno\-laf
.IP \fB\-mno\-literals\-after\-func\fP 4
.IX Item \-mno\-literals\-after\-func
.PD
Enable/disable 在每个函数之后放置字面量池。
.IP \fB\-mlabr\fP 4
.IX Item \-mlabr
.PD 0
.IP \fB\-mliterals\-after\-br\fP 4
.IX Item \-mliterals\-after\-br
.IP \fB\-mno\-labr\fP 4
.IX Item \-mno\-labr
.IP \fB\-mnoliterals\-after\-br\fP 4
.IX Item \-mnoliterals\-after\-br
.PD
Enable/disable 在无条件分支之后放置字面量池。 默认情况下启用此选项。
.IP \fB\-mistack\fP 4
.IX Item \-mistack
.PD 0
.IP \fB\-mno\-istack\fP 4
.IX Item \-mno\-istack
.PD
Enable/disable 中断栈指令。 此选项在 \s-1CK801、CK802、\s0 和 \s-1CK802\s0 处理器上默认启用。
.PP
以下选项明确启用某些可选指令。 这些特性也可以通过使用 \f(CW\*(C`\-mcpu=\*(C'\fP 指定支持它的处理器来隐式启用。
.IP \fB\-mhard\-float\fP 4
.IX Item \-mhard\-float
启用硬浮动指令。
.IP \fB\-mmp\fP 4
.IX Item \-mmp
启用多处理器指令。
.IP \fB\-mcp\fP 4
.IX Item \-mcp
启用协处理器指令。
.IP \fB\-mcache\fP 4
.IX Item \-mcache
启用高速缓存预取指令。
.IP \fB\-msecurity\fP 4
.IX Item \-msecurity
开启中天安全指令。
.IP \fB\-mtrust\fP 4
.IX Item \-mtrust
开启中天信任指令。
.IP \fB\-mdsp\fP 4
.IX Item \-mdsp
启用 \s-1DSP\s0 指令。
.IP \fB\-medsp\fP 4
.IX Item \-medsp
启用增强型 \s-1DSP\s0 指令。
.IP \fB\-mvdsp\fP 4
.IX Item \-mvdsp
启用 vector \s-1DSP\s0 指令。
.PP
当为 Epiphany 处理器配置 as 时，以下选项可用。
.IP \fB\-mepiphany\fP 4
.IX Item \-mepiphany
指定允许 32 位和 16 位指令。 这是默认行为。
.IP \fB\-mepiphany16\fP 4
.IX Item \-mepiphany16
将允许的指令限制为仅 16 位集。
.PP
当为 H8/300 处理器配置 as 时，以下选项可用。 \&\f(CW@chapter\fP H8/300 相关，特性
.SS Options
.IX Subsection Options
\f(CW\*(C`as\*(C'\fP 的 Renesas H8/300 版本具有一个与机器相关的选项:
.IP \fB\-h\-tick\-hex\fP 4
.IX Item \-h\-tick\-hex
除 0x00 样式外，还支持 H'00 样式的十六进制常量。
.IP \fB\-mach=\fP\fIname\fP 4
.IX Item \-mach=name
设置 H8300 机器型号。 可识别以下机器名称:
\&\f(CW\*(C`h8300h\*(C'\fP、\&\f(CW\*(C`h8300hn\*(C'\fP、\&\f(CW\*(C`h8300s\*(C'\fP、\&\f(CW\*(C`h8300sn\*(C'\fP、\&\f(CW\*(C`h8300sx\*(C'\fP
和 \&\f(CW\*(C`h8300sxn\*(C'\fP。
.PP
当为 i386 处理器配置 as 时，以下选项可用。
.IP "\fB\-\-32 | \-\-x32 | \-\-64\fP" 4
.IX Item "\-\-32 | \-\-x32 | \-\-64"
选择字长，32 位或 64 位。 \fB\-\-32\fP 表示 Intel i386 架构，而 \fB\-\-x32\fP 和 \fB\-\-64\fP 表示分别具有 32 位或
64 位字长的 \s-1AMD\s0 x86\-64 架构。
.Sp
这些选项仅适用于 \s-1ELF\s0 目标文件格式，并且需要包含必要的 \s-1BFD\s0 支持 (在 32 位平台上，您必须添加
\-\-enable\-64\-bit\-bfd 以配置启用 64 位使用和使用 x86\-64 作为目标平台)。
.IP \fB\-n\fP 4
.IX Item \-n
默认情况下，x86 \s-1GAS\s0 将用于代码段内对齐的多个 nop 指令替换为多字节 nop 指令，例如 leal 0
(%esi,1),%esi。如果单字节 nop (0x90) 被明确指定为用于对齐的填充字节，则此开关将禁用优化。
.IP \fB\-\-divide\fP 4
.IX Item \-\-divide
在 SVR4 派生平台上，字符 \fB/\fP 被视为注释字符，这意味着它不能用于表达式中。 \&\fB\-\-divide\fP 选项将 \fB/\fP 变为普通字符。
这不会在开始注释的行的开头禁用 \fB/\fP，或影响使用 \fB#\fP 开始注释。
.IP \fB\-march=\fP\fI\s-1CPU\s0\fP\fB[+\fP\fI\s-1EXTENSION\s0\fP\fB...]\fP 4
.IX Item \-march=CPU[+EXTENSION...]
该选项指定目标处理器。 如果试图汇编一条不会在目标处理器上执行的指令，汇编程序将发出一条错误消息。 可识别以下处理器名称:
\&\f(CW\*(C`i8086\*(C'\fP、\&\f(CW\*(C`i186\*(C'\fP、\&\f(CW\*(C`i286\*(C'\fP、\&\f(CW\*(C`i386\*(C'\fP、\&\f(CW\*(C`i486\*(C'\fP、\&\f(CW\*(C`i586\*(C'\fP、\&\f(CW\*(C`i686\*(C'\fP、\&\f(CW\*(C`pentium\*(C'\fP、\&\f(CW\*(C`pentiumpro\*(C'\fP、\&\f(CW\*(C`pentiumii\*(C'\fP、\&\f(CW\*(C`pentiumiii\*(C'\fP、\&\f(CW\*(C`pentium4\*(C'\fP、\&\f(CW\*(C`prescott\*(C'\fP、\&\f(CW\*(C`nocona\*(C'\fP、\&\f(CW\*(C`core\*(C'\fP、\&\f(CW\*(C`core2\*(C'\fP、\&\f(CW\*(C`corei7\*(C'\fP、\&\f(CW\*(C`iamcu\*(C'\fP、\&\f(CW\*(C`k6\*(C'\fP、\&\f(CW\*(C`k6_2\*(C'\fP、\&\f(CW\*(C`athlon\*(C'\fP、\&\f(CW\*(C`opteron\*(C'\fP、\&\f(CW\*(C`k8\*(C'\fP、\&\f(CW\*(C`amdfam10\*(C'\fP、\&\f(CW\*(C`bdver1\*(C'\fP、\&\f(CW\*(C`bdver2\*(C'\fP、\&\f(CW\*(C`bdver3\*(C'\fP、\&\f(CW\*(C`bdver4\*(C'\fP、\&\f(CW\*(C`znver1\*(C'\fP、\&\f(CW\*(C`znver2\*(C'\fP、\&\f(CW\*(C`znver3\*(C'\fP、\&\f(CW\*(C`znver4\*(C'\fP、\&\f(CW\*(C`btver1\*(C'\fP、\&\f(CW\*(C`btver2\*(C'\fP、\&\f(CW\*(C`generic32\*(C'\fP
和 \&\f(CW\*(C`generic64\*(C'\fP。
.Sp
除了基本指令集之外，还可以告诉汇编程序接受各种扩展助记符。 例如，\&\f(CW\*(C`\-march=i686+sse4+vmx\*(C'\fP 用
\fIsse4\fP 和 \&\fIvmx\fP 扩展 \fIi686\fP。 The following extensions are currently
supported: \&\f(CW8087\fP, \&\f(CW287\fP, \&\f(CW387\fP, \&\f(CW687\fP,
\&\f(CW\*(C`cmov\*(C'\fP, \&\f(CW\*(C`fxsr\*(C'\fP, \&\f(CW\*(C`mmx\*(C'\fP,
\&\f(CW\*(C`sse\*(C'\fP, \&\f(CW\*(C`sse2\*(C'\fP, \&\f(CW\*(C`sse3\*(C'\fP,
\&\f(CW\*(C`sse4a\*(C'\fP, \&\f(CW\*(C`ssse3\*(C'\fP, \&\f(CW\*(C`sse4.1\*(C'\fP,
\&\f(CW\*(C`sse4.2\*(C'\fP, \&\f(CW\*(C`sse4\*(C'\fP, \&\f(CW\*(C`avx\*(C'\fP,
\&\f(CW\*(C`avx2\*(C'\fP, \&\f(CW\*(C`adx\*(C'\fP, \&\f(CW\*(C`rdseed\*(C'\fP,
\&\f(CW\*(C`prfchw\*(C'\fP, \&\f(CW\*(C`smap\*(C'\fP, \&\f(CW\*(C`mpx\*(C'\fP,
\&\f(CW\*(C`sha\*(C'\fP, \&\f(CW\*(C`rdpid\*(C'\fP, \&\f(CW\*(C`ptwrite\*(C'\fP,
\&\f(CW\*(C`cet\*(C'\fP, \&\f(CW\*(C`gfni\*(C'\fP, \&\f(CW\*(C`vaes\*(C'\fP,
\&\f(CW\*(C`vpclmulqdq\*(C'\fP, \&\f(CW\*(C`prefetchwt1\*(C'\fP,
\&\f(CW\*(C`clflushopt\*(C'\fP, \&\f(CW\*(C`se1\*(C'\fP, \&\f(CW\*(C`clwb\*(C'\fP,
\&\f(CW\*(C`movdiri\*(C'\fP, \&\f(CW\*(C`movdir64b\*(C'\fP, \&\f(CW\*(C`enqcmd\*(C'\fP,
\&\f(CW\*(C`serialize\*(C'\fP, \&\f(CW\*(C`tsxldtrk\*(C'\fP, \&\f(CW\*(C`kl\*(C'\fP,
\&\f(CW\*(C`widekl\*(C'\fP, \&\f(CW\*(C`hreset\*(C'\fP, \&\f(CW\*(C`avx512f\*(C'\fP,
\&\f(CW\*(C`avx512cd\*(C'\fP, \&\f(CW\*(C`avx512er\*(C'\fP,
\&\f(CW\*(C`avx512pf\*(C'\fP, \&\f(CW\*(C`avx512vl\*(C'\fP,
\&\f(CW\*(C`avx512bw\*(C'\fP, \&\f(CW\*(C`avx512dq\*(C'\fP,
\&\f(CW\*(C`avx512ifma\*(C'\fP, \&\f(CW\*(C`avx512vbmi\*(C'\fP,
\&\f(CW\*(C`avx512_4fmaps\*(C'\fP, \&\f(CW\*(C`avx512_4vnniw\*(C'\fP,
\&\f(CW\*(C`avx512_vpopcntdq\*(C'\fP, \&\f(CW\*(C`avx512_vbmi2\*(C'\fP,
\&\f(CW\*(C`avx512_vnni\*(C'\fP, \&\f(CW\*(C`avx512_bitalg\*(C'\fP,
\&\f(CW\*(C`avx512_vp2intersect\*(C'\fP, \&\f(CW\*(C`tdx\*(C'\fP,
\&\f(CW\*(C`avx512_bf16\*(C'\fP, \&\f(CW\*(C`avx_vnni\*(C'\fP,
\&\f(CW\*(C`avx512_fp16\*(C'\fP, \&\f(CW\*(C`prefetchi\*(C'\fP,
\&\f(CW\*(C`avx_ifma\*(C'\fP, \&\f(CW\*(C`avx_vnni_int8\*(C'\fP,
\&\f(CW\*(C`cmpccxadd\*(C'\fP, \&\f(CW\*(C`wrmsrns\*(C'\fP, \&\f(CW\*(C`msrlist\*(C'\fP,
\&\f(CW\*(C`avx_ne_convert\*(C'\fP, \&\f(CW\*(C`rao_int\*(C'\fP,
\&\f(CW\*(C`amx_int8\*(C'\fP, \&\f(CW\*(C`amx_bf16\*(C'\fP,
\&\f(CW\*(C`amx_fp16\*(C'\fP, \&\f(CW\*(C`amx_tile\*(C'\fP, \&\f(CW\*(C`vmx\*(C'\fP,
\&\f(CW\*(C`vmfunc\*(C'\fP, \&\f(CW\*(C`smx\*(C'\fP, \&\f(CW\*(C`xsave\*(C'\fP,
\&\f(CW\*(C`xsaveopt\*(C'\fP, \&\f(CW\*(C`xsavec\*(C'\fP, \&\f(CW\*(C`xsaves\*(C'\fP,
\&\f(CW\*(C`aes\*(C'\fP, \&\f(CW\*(C`pclmul\*(C'\fP, \&\f(CW\*(C`fsgsbase\*(C'\fP,
\&\f(CW\*(C`rdrnd\*(C'\fP, \&\f(CW\*(C`f16c\*(C'\fP, \&\f(CW\*(C`bmi2\*(C'\fP,
\&\f(CW\*(C`fma\*(C'\fP, \&\f(CW\*(C`movbe\*(C'\fP, \&\f(CW\*(C`ept\*(C'\fP,
\&\f(CW\*(C`lzcnt\*(C'\fP, \&\f(CW\*(C`popcnt\*(C'\fP, \&\f(CW\*(C`hle\*(C'\fP,
\&\f(CW\*(C`rtm\*(C'\fP, \&\f(CW\*(C`tsx\*(C'\fP, \&\f(CW\*(C`invpcid\*(C'\fP,
\&\f(CW\*(C`clflush\*(C'\fP, \&\f(CW\*(C`mwaitx\*(C'\fP, \&\f(CW\*(C`clzero\*(C'\fP,
\&\f(CW\*(C`wbnoinvd\*(C'\fP, \&\f(CW\*(C`pconfig\*(C'\fP, \&\f(CW\*(C`waitpkg\*(C'\fP,
\&\f(CW\*(C`uintr\*(C'\fP, \&\f(CW\*(C`cldemote\*(C'\fP, \&\f(CW\*(C`rdpru\*(C'\fP,
\&\f(CW\*(C`mcommit\*(C'\fP, \&\f(CW\*(C`sev_es\*(C'\fP, \&\f(CW\*(C`lwp\*(C'\fP,
\&\f(CW\*(C`fma4\*(C'\fP, \&\f(CW\*(C`xop\*(C'\fP, \&\f(CW\*(C`cx16\*(C'\fP,
\&\f(CW\*(C`syscall\*(C'\fP, \&\f(CW\*(C`rdtscp\*(C'\fP, \&\f(CW\*(C`3dnow\*(C'\fP,
\&\f(CW\*(C`3dnowa\*(C'\fP, \&\f(CW\*(C`sse4a\*(C'\fP, \&\f(CW\*(C`sse5\*(C'\fP,
\&\f(CW\*(C`snp\*(C'\fP, \&\f(CW\*(C`invlpgb\*(C'\fP, \&\f(CW\*(C`tlbsync\*(C'\fP,
\&\f(CW\*(C`svme\*(C'\fP and \&\f(CW\*(C`padlock\*(C'\fP.  请注意，这些扩展助记符可以以
\f(CW\*(C`no\*(C'\fP 为前缀，以撤销相应的 (和任何相关的) 功能。
.Sp
当 \f(CW\*(C`.arch\*(C'\fP 指令与 \fB\-march\fP 一起使用时，\&\f(CW\*(C`.arch\*(C'\fP 指令将优先。
.IP \fB\-mtune=\fP\fI\s-1CPU\s0\fP 4
.IX Item \-mtune=CPU
此选项指定要优化的处理器。当与 \fB\-march\fP 选项一起使用时，只会生成 \fB\-march\fP 选项指定的处理器的指令。
.Sp
有效的 \fI\s-1CPU\s0\fP 值与 \&\fB\-march=\fP\fI\s-1CPU\s0\fP 的处理器列表相同。
.IP \fB\-msse2avx\fP 4
.IX Item \-msse2avx
此选项指定汇编程序应使用 \s-1VEX\s0 前缀对 \s-1SSE\s0 指令进行编码。
.IP \fB\-muse\-unaligned\-vector\-move\fP 4
.IX Item \-muse\-unaligned\-vector\-move
此选项指定汇编程序应将对齐的 vector 移动编码为未对齐的 vector 移动。
.IP \fB\-msse\-check=\fP\fInone\fP 4
.IX Item \-msse\-check=none
.PD 0
.IP \fB\-msse\-check=\fP\fIwarning\fP 4
.IX Item \-msse\-check=warning
.IP \fB\-msse\-check=\fP\fIerror\fP 4
.IX Item \-msse\-check=error
.PD
这些选项控制汇编程序是否应检查 \s-1SSE\s0 指令。 \&\fB\-msse\-check=\fP\fInone\fP 将使汇编程序不检查 \s-1SSE\s0
指令，这是默认的。 \fB\-msse\-check=\fP\fIwarning\fP 将使汇编程序对任何 \s-1SSE\s0 指令发出警告。
\&\fB\-msse\-check=\fP\fIerror\fP 将使汇编程序对任何 \s-1SSE\s0 指令发出错误。
.IP \fB\-mavxscalar=\fP\fI128\fP 4
.IX Item \-mavxscalar=128
.PD 0
.IP \fB\-mavxscalar=\fP\fI256\fP 4
.IX Item \-mavxscalar=256
.PD
这些选项控制汇编器应如何编码标量 \s-1AVX\s0 指令。 \fB\-mavxscalar=\fP\fI128\fP 将使用 128 位 vector
长度编码标量 \&\s-1AVX\s0 指令，这是默认值。 \&\fB\-mavxscalar=\fP\fI256\fP 将使用 256 位 vector 长度对标量
\s-1AVX\s0 指令进行编码。
.Sp
\&\s-1 警告: \s0 不要将此用于生产代码 \- 由于 \s-1CPU\s0 勘误表，生成的代码可能不适用于某些型号。
.IP \fB\-mvexwig=\fP\fI0\fP 4
.IX Item \-mvexwig=0
.PD 0
.IP \fB\-mvexwig=\fP\fI1\fP 4
.IX Item \-mvexwig=1
.PD
这些选项控制汇编程序应如何编码 \s-1VEX\s0.W\-ignored (\s-1WIG\s0)\&\s-1VEX\s0 指令。
\fB\-mvexwig=\fP\fI0\fP 将使用 vex.w =0 对 \s-1WIG VEX\s0 指令进行编码，这是默认值。
\&\fB\-mvexwig=\fP\fI1\fP 将使用 vex.w = 编码 \s-1WIG EVEX\s0 指令 1.
.Sp
\&\s-1 警告: \s0 不要将此用于生产代码 \- 由于 \s-1CPU\s0 勘误表，生成的代码可能不适用于某些型号。
.IP \fB\-mevexlig=\fP\fI128\fP 4
.IX Item \-mevexlig=128
.PD 0
.IP \fB\-mevexlig=\fP\fI256\fP 4
.IX Item \-mevexlig=256
.IP \fB\-mevexlig=\fP\fI512\fP 4
.IX Item \-mevexlig=512
.PD
这些选项控制汇编程序应如何对忽略长度的 (\s-1LIG\s0) \s-1EVEX\s0 指令进行编码。 \fB\-mevexlig=\fP\fI128\fP 将使用
128 位 vector 长度编码 \s-1LIG EVEX\s0 指令，这是默认值。 \&\fB\-mevexlig=\fP\fI256\fP 和
\fB\-mevexlig=\fP\fI512\fP 将分别使用 256 位和 512 位 vector 长度对 \s-1LIG EVEX\s0 指令进行编码。
.IP \fB\-mevexwig=\fP\fI0\fP 4
.IX Item \-mevexwig=0
.PD 0
.IP \fB\-mevexwig=\fP\fI1\fP 4
.IX Item \-mevexwig=1
.PD
这些选项控制汇编程序应如何编码 w\-ignored (\s-1WIG\s0)\&\s-1EVEX\s0 指令。 \fB\-mevexwig=\fP\fI0\fP
将使用 evex.w =0 对 \s-1WIG EVEX\s0 指令进行编码，这是默认值。 \&\fB\-mevexwig=\fP\fI1\fP 将使用 evex.w
= 编码 \s-1WIG EVEX\s0 指令 1.
.IP \fB\-mmnemonic=\fP\fIatt\fP 4
.IX Item \-mmnemonic=att
.PD 0
.IP \fB\-mmnemonic=\fP\fIintel\fP 4
.IX Item \-mmnemonic=intel
.PD
该选项指定匹配指令的指令助记符。 \f(CW\*(C`.att_mnemonic\*(C'\fP 和 \f(CW\*(C`.intel_mnemonic\*(C'\fP
指令将成为先例。
.IP \fB\-msyntax=\fP\fIatt\fP 4
.IX Item \-msyntax=att
.PD 0
.IP \fB\-msyntax=\fP\fIintel\fP 4
.IX Item \-msyntax=intel
.PD
该选项指定处理指令时的指令语法。 \f(CW\*(C`.att_syntax\*(C'\fP 和 \f(CW\*(C`.intel_syntax\*(C'\fP
指令将成为先例。
.IP \fB\-mnaked\-reg\fP 4
.IX Item \-mnaked\-reg
此选项指定寄存器不需要 \fB%\fP 前缀。 \f(CW\*(C`.att_syntax\*(C'\fP 和 \f(CW\*(C`.intel_syntax\*(C'\fP
指令将成为先例。
.IP \fB\-madd\-bnd\-prefix\fP 4
.IX Item \-madd\-bnd\-prefix
此选项强制汇编程序将 \s-1BND\s0 前缀添加到所有分支，即使源代码中未明确指定此类前缀。
.IP \fB\-mno\-shared\fP 4
.IX Item \-mno\-shared
在 \s-1ELF\s0 目标上，汇编程序通常会针对具有默认可见性的已定义非弱全局分支目标优化非 PLT 重定位。 \fB\-mshared\fP
选项告诉汇编器生成可以进入共享库的代码，在共享库中所有具有默认可见性的非弱全局分支目标都可以被抢占。 生成的代码稍大。 该选项只影响分支指令的处理。
.IP \fB\-mbig\-obj\fP 4
.IX Item \-mbig\-obj
在 \s-1PE/COFF\s0 目标上，此选项强制使用大对象文件格式，允许超过 32768 个部分。
.IP \fB\-momit\-lock\-prefix=\fP\fIno\fP 4
.IX Item \-momit\-lock\-prefix=no
.PD 0
.IP \fB\-momit\-lock\-prefix=\fP\fIyes\fP 4
.IX Item \-momit\-lock\-prefix=yes
.PD
这些选项控制汇编程序应如何编码锁定前缀。 此选项旨在作为在锁定前缀上失败的处理器的解决方法。此选项只能安全地用于单核、单线程计算机
\&\fB\-momit\-lock\-prefix=\fP\fIyes\fP 将省略所有锁前缀。 \&\fB\-momit\-lock\-prefix=\fP\fIno\fP
将像往常一样对锁前缀进行编码，这是默认设置。
.IP \fB\-mfence\-as\-lock\-add=\fP\fIno\fP 4
.IX Item \-mfence\-as\-lock\-add=no
.PD 0
.IP \fB\-mfence\-as\-lock\-add=\fP\fIyes\fP 4
.IX Item \-mfence\-as\-lock\-add=yes
.PD
这些选项控制汇编程序应如何对 lfence、mfence 和 sfence 进行编码。 \&\fB\-mfence\-as\-lock\-add=\fP\fIyes\fP
会将 lfence、mfence 和 sfence 编码为 \fBlock addl \fP\f(CB$0x0\fB, (%rsp)\fP 在 64 位模式下和
\&\fBlock addl \fP\f(CB$0x0\fB, (%esp)\fP 在 32 位模式下。
\&\fB\-mfence\-as\-lock\-add=\fP\fIno\fP 将像往常一样对 lfence、mfence 和 sfence 进行编码，这是默认设置。
.IP \fB\-mrelax\-relocations=\fP\fIno\fP 4
.IX Item \-mrelax\-relocations=no
.PD 0
.IP \fB\-mrelax\-relocations=\fP\fIyes\fP 4
.IX Item \-mrelax\-relocations=yes
.PD
这些选项控制汇编程序是否应生成松弛重定位，R_386_GOT32X，在 32 位模式下，或 R_X86_64_GOTPCRELX 和
R_X86_64_REX_GOTPCRELX，在 64 位模式下。 \&\fB\-mrelax\-relocations=\fP\fIyes\fP 将生成放松重定位。
\&\fB\-mrelax\-relocations=\fP\fIno\fP 不会生成放松重定位。 默认值可以由配置选项
\&\fB\-\-enable\-x86\-relax\-relocations\fP 控制。
.IP \fB\-malign\-branch\-boundary=\fP\fI\s-1NUM\s0\fP 4
.IX Item \-malign\-branch\-boundary=NUM
此选项控制汇编程序应如何将分支与段前缀或 \s-1NOP 对齐。\s0 \fI\s-1NUM\s0\fP 必须是 2 的幂。 它应该是 0 或不小于 16。
分支将在 \fI\s-1NUM\s0\fP 字节边界内对齐。 默认的 \fB\-malign\-branch\-boundary=0\fP 不对齐分支。
.IP \fB\-malign\-branch=\fP\fI\s-1TYPE\s0\fP\fB[+\fP\fI\s-1TYPE\s0\fP\fB...]\fP 4
.IX Item \-malign\-branch=TYPE[+TYPE...]
此选项指定要对齐的分支类型。\fI\s-1TYPE\s0\fP 是对齐条件跳转的 \fBjcc\fP、对齐融合条件跳转的 \&\fBfused\fP、对齐无条件跳转的
\fBjmp\fP、对齐调用的 \fBcall\fP、对齐 rets 的 \&\fBret\fP、对齐间接跳转和调用的 \fBindirect\fP。 默认为
\fB\-malign\-branch=jcc+fused+jmp\fP。
.IP \fB\-malign\-branch\-prefix\-size=\fP\fI\s-1NUM\s0\fP 4
.IX Item \-malign\-branch\-prefix\-size=NUM
该选项指定一条指令中用于对齐分支的最大前缀数。 \fI\s-1NUM\s0\fP 应介于 0 和 5 之间。 默认 \&\fI\s-1NUM\s0\fP 是 5.
.IP \fB\-mbranches\-within\-32B\-boundaries\fP 4
.IX Item \-mbranches\-within\-32B\-boundaries
此选项将 32 字节边界内的条件跳转、融合条件跳转和无条件跳转与指令上最多 5 个段前缀对齐。 相当于
\&\fB\-malign\-branch\-boundary=32\fP \&\fB\-malign\-branch=jcc+fused+jmp\fP
\&\fB\-malign\-branch\-prefix\-size=5\fP。 默认不对齐分支。
.IP \fB\-mlfence\-after\-load=\fP\fIno\fP 4
.IX Item \-mlfence\-after\-load=no
.PD 0
.IP \fB\-mlfence\-after\-load=\fP\fIyes\fP 4
.IX Item \-mlfence\-after\-load=yes
.PD
这些选项控制汇编程序是否应在加载指令后生成 lfence。 \fB\-mlfence\-after\-load=\fP\fIyes\fP 将生成 lfence。
\fB\-mlfence\-after\-load=\fP\fIno\fP 不会生成 lfence，这是默认的。
.IP \fB\-mlfence\-before\-indirect\-branch=\fP\fInone\fP 4
.IX Item \-mlfence\-before\-indirect\-branch=none
.PD 0
.IP \fB\-mlfence\-before\-indirect\-branch=\fP\fIall\fP 4
.IX Item \-mlfence\-before\-indirect\-branch=all
.IP \fB\-mlfence\-before\-indirect\-branch=\fP\fIregister\fP 4
.IX Item \-mlfence\-before\-indirect\-branch=register
.IP \fB\-mlfence\-before\-indirect\-branch=\fP\fImemory\fP 4
.IX Item \-mlfence\-before\-indirect\-branch=memory
.PD
这些选项控制汇编程序是否应在间接近分支指令之前生成 lfence。
\&\fB\-mlfence\-before\-indirect\-branch=\fP\fIall\fP 将在通过寄存器间接近分支之前生成
lfence，并在通过内存间接近分支之前发出警告。 当没有明确的 \fB\-mlfence\-before\-ret=\fP 时，它还会隐式设置
\fB\-mlfence\-before\-ret=\fP\fIshl\fP。
\&\fB\-mlfence\-before\-indirect\-branch=\fP\fIregister\fP 会在间接 near 分支之前通过寄存器生成
lfence。 \&\fB\-mlfence\-before\-indirect\-branch=\fP\fImemory\fP 将在通过内存间接接近分支之前发出警告。
\&\fB\-mlfence\-before\-indirect\-branch=\fP\fInone\fP 不会生成 lfence 也不会发出警告，这是默认设置。
请注意，lfence 不会在通过使用 \&\fB\-mlfence\-after\-load=\fP\fIyes\fP 的寄存器间接近分支之前生成，因为 lfence
将在加载分支目标寄存器后生成。
.IP \fB\-mlfence\-before\-ret=\fP\fInone\fP 4
.IX Item \-mlfence\-before\-ret=none
.PD 0
.IP \fB\-mlfence\-before\-ret=\fP\fIshl\fP 4
.IX Item \-mlfence\-before\-ret=shl
.IP \fB\-mlfence\-before\-ret=\fP\fIor\fP 4
.IX Item \-mlfence\-before\-ret=or
.IP \fB\-mlfence\-before\-ret=\fP\fIyes\fP 4
.IX Item \-mlfence\-before\-ret=yes
.IP \fB\-mlfence\-before\-ret=\fP\fInot\fP 4
.IX Item \-mlfence\-before\-ret=not
.PD
这些选项控制汇编程序是否应在 ret 之前生成 lfence。 \fB\-mlfence\-before\-ret=\fP\fIor\fP 将使用 lfence 生成
generate 或 instruction。 \&\fB\-mlfence\-before\-ret=\fP\fIshl/yes\fP 会用 lfence 生成 shl
指令。\fB\-mlfence\-before\-ret=\fP\fInot\fP 将生成 not 指令与
lfence。\fB\-mlfence\-before\-ret=\fP\fInone\fP 不会生成 lfence，这是默认的。
.IP \fB\-mx86\-used\-note=\fP\fIno\fP 4
.IX Item \-mx86\-used\-note=no
.PD 0
.IP \fB\-mx86\-used\-note=\fP\fIyes\fP 4
.IX Item \-mx86\-used\-note=yes
.PD
这些选项控制汇编程序是否应生成 \&\s-1GNU_PROPERTY_X86_ISA_1_USED\s0 和
\s-1GNU_PROPERTY_X86_FEATURE_2_USED GNU\s0 属性注释。 默认值可以由
\&\fB\-\-enable\-x86\-used\-note\fP 配置选项控制。
.IP \fB\-mevexrcig=\fP\fIrne\fP 4
.IX Item \-mevexrcig=rne
.PD 0
.IP \fB\-mevexrcig=\fP\fIrd\fP 4
.IX Item \-mevexrcig=rd
.IP \fB\-mevexrcig=\fP\fIru\fP 4
.IX Item \-mevexrcig=ru
.IP \fB\-mevexrcig=\fP\fIrz\fP 4
.IX Item \-mevexrcig=rz
.PD
这些选项控制汇编器应如何编码 SAE\-only\&\s-1EVEX\s0 指令。 \fB\-mevexrcig=\fP\fIrne\fP 会将 \s-1EVEX\s0
指令的 \s-1RC\s0 位编码为 00，这是默认值。 \&\fB\-mevexrcig=\fP\fIrd\fP、\fB\-mevexrcig=\fP\fIru\fP 和
\fB\-mevexrcig=\fP\fIrz\fP 将分别使用 01、10 和 11 \s-1RC\s0 位对仅限 SAE 的 \s-1EVEX\s0
指令进行编码。
.IP \fB\-mamd64\fP 4
.IX Item \-mamd64
.PD 0
.IP \fB\-mintel64\fP 4
.IX Item \-mintel64
.PD
此选项指定汇编程序在 64 位模式下应仅接受 \s-1AMD64\s0 或 Intel64 \s-1ISA\s0。 默认是接受通用的、仅 Intel64
和 \s-1AMD64\s0 ISA。
.IP "\fB\-O0 | \-O | \-O1 | \-O2 | \-Os\fP" 4
.IX Item "\-O0 | \-O | \-O1 | \-O2 | \-Os"
使用更小的指令大小优化指令编码。 \fB\-O\fP 和 \fB\-O1\fP 用 64 位 immediate 编码 64 位寄存器加载指令作为 31 位或 32
位立即数编码 32 位寄存器加载指令，用 32 位寄存器清零指令编码 64 位寄存器清零指令，编码 256\-bit/512\-bit
\s-1VEX/EVEX\s0 vector 寄存器清零指令用 128 位 \s-1VEX\s0 vector
寄存器清零指令编码，128\-bit/256\-bit \s-1EVEX\s0 vector 寄存器 load/store 指令用 \s-1VEX\s0
vector 寄存器 load/store 指令编码，128\-bit/256\-bit \s-1EVEX\s0 封装的整数逻辑指令用
128\-bit/256\-bit \s-1VEX\s0 封装的整数逻辑指令编码。
.Sp
\&\fB\-O2\fP 包括 \fB\-O1\fP 优化加上用 128 位 \&\s-1EVEX\s0 vector 寄存器清零指令编码
256\-bit/512\-bit \s-1EVEX\s0 vector 寄存器清零指令。 在 64 位模式下，如果允许使用 2 字节 \s-1VEX\s0
前缀形式而不是 3 字节形式，则具有可交换源操作数的 \s-1VEX\s0 编码指令也将交换它们的源操作数。 某些形式的 \s-1AND\s0
以及具有两次指定相同 (register) 操作数的 \s-1OR\s0 也将更改为 \s-1TEST。\s0
.Sp
\&\fB\-Os\fP 包括 \fB\-O2\fP 优化以及使用 immediate 编码 16 位、32 位和 64 位寄存器测试作为使用 immediate 的
8 位寄存器测试。 \fB\-O0\fP 关闭此优化。
.PP
当为 Ubicom \s-1IP2K\s0 系列配置 as 时，以下选项可用。
.IP \fB\-mip2022ext\fP 4
.IX Item \-mip2022ext
指定允许扩展 \s-1IP2022\s0 指令。
.IP \fB\-mip2022\fP 4
.IX Item \-mip2022
恢复默认行为，将允许的指令限制为基本的 \s-1IP2022\s0 指令。
.PP
当为 Renesas M32C 和 M16C 处理器配置 as 时，以下选项可用。
.IP \fB\-m32c\fP 4
.IX Item \-m32c
汇编 M32C 指令。
.IP \fB\-m16c\fP 4
.IX Item \-m16c
汇编 M16C 指令 (默认)。
.IP \fB\-relax\fP 4
.IX Item \-relax
启用对链接时间放宽的支持。
.IP \fB\-h\-tick\-hex\fP 4
.IX Item \-h\-tick\-hex
除 0x00 样式外，还支持 H'00 样式的十六进制常量。
.PP
当为 Renesas M32R (以前称为 Mitsubishi M32R) 系列配置 as 时，以下选项可用。
.IP \fB\-\-m32rx\fP 4
.IX Item \-\-m32rx
指定 M32R 系列中的哪个处理器是目标。 默认值通常是 M32R，但此选项将其更改为 M32RX。
.IP "\fB\-\-warn\-explicit\-parallel\-conflicts or \-\-Wp\fP" 4
.IX Item "\-\-warn\-explicit\-parallel\-conflicts or \-\-Wp"
当遇到有问题的并行结构时产生警告信息。
.IP "\fB\-\-no\-warn\-explicit\-parallel\-conflicts or \-\-Wnp\fP" 4
.IX Item "\-\-no\-warn\-explicit\-parallel\-conflicts or \-\-Wnp"
当遇到有问题的并行构造时，不要产生警告信息。
.PP
当为 Motorola 68000 系列配置 as 时，以下选项可用。
.IP \fB\-l\fP 4
.IX Item \-l
将引用缩短为未定义的符号，缩短为一个词而不是两个。
.IP "\fB\-m68000 | \-m68008 | \-m68010 | \-m68020 | \-m68030\fP" 4
.IX Item "\-m68000 | \-m68008 | \-m68010 | \-m68020 | \-m68030"
.PD 0
.IP "\fB| \-m68040 | \-m68060 | \-m68302 | \-m68331 | \-m68332\fP" 4
.IX Item "| \-m68040 | \-m68060 | \-m68302 | \-m68331 | \-m68332"
.IP "\fB| \-m68333 | \-m68340 | \-mcpu32 | \-m5200\fP" 4
.IX Item "| \-m68333 | \-m68340 | \-mcpu32 | \-m5200"
.PD
指定 68000 系列中的哪个处理器是目标。 默认值通常为 68020，但可以在配置时更改。
.IP "\fB\-m68881 | \-m68882 | \-mno\-68881 | \-mno\-68882\fP" 4
.IX Item "\-m68881 | \-m68882 | \-mno\-68881 | \-mno\-68882"
目标机器有 (或没有) 浮点协处理器。 默认情况下假设协处理器用于 68020、68030 和 cpu32。 虽然基本的 68000 与 68881
不兼容，但可以指定两者的组合，因为可以用主处理器模拟协处理器指令。
.IP "\fB\-m68851 | \-mno\-68851\fP" 4
.IX Item "\-m68851 | \-mno\-68851"
目标机器有 (或没有) 内存管理元协处理器。 对于 68020 及更高版本，默认设置为 \s-1MMU\s0。
.PP
当为 Altera Nios \s-1II\s0 处理器配置 as 时，以下选项可用。
.IP \fB\-relax\-section\fP 4
.IX Item \-relax\-section
尽可能用 PC 相关的 \f(CW\*(C`jmp\*(C'\fP 序列替换已识别的越界的分支。
生成的代码序列适用于位置无关代码，但由于序列的长度，扩展分支范围存在实际限制。 此选项是默认选项。
.IP \fB\-relax\-all\fP 4
.IX Item \-relax\-all
将无法确定在范围内的分支指令和所有调用指令替换为 \f(CW\*(C`jmp\*(C'\fP 和 \f(CW\*(C`callr\*(C'\fP 序列
(respectively)。 此选项针对目标符号生成绝对重定位，不适用于与位置无关的代码。
.IP \fB\-no\-relax\fP 4
.IX Item \-no\-relax
不要更换任何分支机构或电话。
.IP \fB\-EB\fP 4
.IX Item \-EB
生成大端输出。
.IP \fB\-EL\fP 4
.IX Item \-EL
生成小端输出。 这是默认设置。
.IP \fB\-march=\fP\fIarchitecture\fP 4
.IX Item \-march=architecture
此选项指定目标体系结构。 如果试图汇编一条不会在目标体系结构上执行的指令，汇编程序会发出一条错误消息。 可识别以下体系结构名称:
\&\f(CW\*(C`r1\*(C'\fP、\&\f(CW\*(C`r2\*(C'\fP。 默认为 \f(CW\*(C`r1\*(C'\fP。
.PP
当为 \&\s-1PRU\s0 处理器配置 as 时，以下选项可用。
.IP \fB\-mlink\-relax\fP 4
.IX Item \-mlink\-relax
假设 \s-1LD\s0 将通过检查 \fIexpression\fP 的高 16 位来优化 \s-1LDI32\s0 指令。如果它们全为零，则
\s-1LD\s0 会将 \s-1LDI32\s0 指令缩短为单个 \s-1LDI。\s0 在这种情况下，\f(CW\*(C`as\*(C'\fP 将为
diff 表达式输出 \s-1DIFF\s0 重定位。
.IP \fB\-mno\-link\-relax\fP 4
.IX Item \-mno\-link\-relax
假设 \s-1LD\s0 不会优化 \s-1LDI32\s0 指令。因此，不会发出 \&\s-1DIFF\s0 重定位。
.IP \fB\-mno\-warn\-regname\-label\fP 4
.IX Item \-mno\-warn\-regname\-label
如果标签名称与寄存器名称匹配，则不发出警告。通常汇编程序员会希望发出此警告。C 编译器可能想关闭它。
.PP
当为 \s-1MIPS\s0 处理器配置 as 时，以下选项可用。
.IP "\fB\-G\fP \fInum\fP" 4
.IX Item "\-G num"
此选项设置可使用 \f(CW\*(C`gp\*(C'\fP 寄存器隐式引用的对象的最大大小。 它只被使用 \s-1ECOFF\s0 格式的目标接受，例如运行
Ultrix 的 DECstation。 默认值为 8.
.IP \fB\-EB\fP 4
.IX Item \-EB
生成 \*(L"big endian\*(R" 格式输出。
.IP \fB\-EL\fP 4
.IX Item \-EL
生成 \*(L"little endian\*(R" 格式输出。
.IP \fB\-mips1\fP 4
.IX Item \-mips1
.PD 0
.IP \fB\-mips2\fP 4
.IX Item \-mips2
.IP \fB\-mips3\fP 4
.IX Item \-mips3
.IP \fB\-mips4\fP 4
.IX Item \-mips4
.IP \fB\-mips5\fP 4
.IX Item \-mips5
.IP \fB\-mips32\fP 4
.IX Item \-mips32
.IP \fB\-mips32r2\fP 4
.IX Item \-mips32r2
.IP \fB\-mips32r3\fP 4
.IX Item \-mips32r3
.IP \fB\-mips32r5\fP 4
.IX Item \-mips32r5
.IP \fB\-mips32r6\fP 4
.IX Item \-mips32r6
.IP \fB\-mips64\fP 4
.IX Item \-mips64
.IP \fB\-mips64r2\fP 4
.IX Item \-mips64r2
.IP \fB\-mips64r3\fP 4
.IX Item \-mips64r3
.IP \fB\-mips64r5\fP 4
.IX Item \-mips64r5
.IP \fB\-mips64r6\fP 4
.IX Item \-mips64r6
.PD
为特定的 \s-1MIPS\s0 指令集架构级别生成代码。 \&\fB\-mips1\fP 是 \fB\-march=r3000\fP 的别名，\fB\-mips2\fP 是
\fB\-march=r6000\fP 的别名，\fB\-mips3\fP 是 \&\fB\-march=r4000\fP 的别名，\fB\-mips4\fP 是
\fB\-march=r8000\fP 的别名。
\&\fB\-mips5\fP、\fB\-mips32\fP、\fB\-mips32r2\fP、\fB\-mips32r3\fP、\&\fB\-mips32r5\fP、\fB\-mips32r6\fP、\fB\-mips64\fP、\fB\-mips64r2\fP、\&\fB\-mips64r3\fP、\fB\-mips64r5\fP、\fB\-mips64r6\fP
对应泛型 \&\s-1MIPS V、MIPS32、MIPS32\s0 Release 2、\s-1MIPS32\s0 Release
3、\s-1MIPS32\s0 Release 5、\s-1MIPS32\s0 Release 6、\s-1MIPS64、MIPS64\s0
Release 2、\s-1MIPS64\s0 Release 3、\s-1MIPS64\s0 Release 5 和 \&\s-1MIPS64\s0
Release 6 \s-1ISA\s0 处理器。
.IP \fB\-march=\fP\fIcpu\fP 4
.IX Item \-march=cpu
为特定的 \s-1MIPS CPU.\s0 生成代码
.IP \fB\-mtune=\fP\fIcpu\fP 4
.IX Item \-mtune=cpu
为特定的 \s-1MIPS CPU.\s0 安排和调整
.IP \fB\-mfix7000\fP 4
.IX Item \-mfix7000
.PD 0
.IP \fB\-mno\-fix7000\fP 4
.IX Item \-mno\-fix7000
.PD
如果在以下两条指令中读取 mfhi 或 mflo 指令的目标寄存器，则会导致插入 nop。
.IP \fB\-mfix\-rm7000\fP 4
.IX Item \-mfix\-rm7000
.PD 0
.IP \fB\-mno\-fix\-rm7000\fP 4
.IX Item \-mno\-fix\-rm7000
.PD
如果 dmult 或 dmultu 指令后跟加载指令，则导致插入 nop。
.IP \fB\-mfix\-r5900\fP 4
.IX Item \-mfix\-r5900
.PD 0
.IP \fB\-mno\-fix\-r5900\fP 4
.IX Item \-mno\-fix\-r5900
.PD
不要尝试将前面的指令安排到放置在六条或更少指令的短循环末尾的分支指令的延迟槽中，而是始终将 \f(CW\*(C`nop\*(C'\fP 指令安排在那里。 由于
R5900 芯片中的硬件错误，某些情况下的短循环错误会导致循环仅执行一次或两次。
.IP \fB\-mdebug\fP 4
.IX Item \-mdebug
.PD 0
.IP \fB\-no\-mdebug\fP 4
.IX Item \-no\-mdebug
.PD
导致 stabs 样式的调试输出进入 ECOFF 样式的 .mdebug 部分，而不是标准的 \s-1ELF\s0 .stabs 部分。
.IP \fB\-mpdr\fP 4
.IX Item \-mpdr
.PD 0
.IP \fB\-mno\-pdr\fP 4
.IX Item \-mno\-pdr
.PD
控制 \f(CW\*(C`.pdr\*(C'\fP 部分的生成。
.IP \fB\-mgp32\fP 4
.IX Item \-mgp32
.PD 0
.IP \fB\-mfp32\fP 4
.IX Item \-mfp32
.PD
寄存器大小通常是从 \s-1ISA\s0 和 \s-1ABI,\s0 推断出来的，但是这些标志强制将某组寄存器始终视为 32 位宽。 \fB\-mgp32\fP
控制通用寄存器的大小，\fB\-mfp32\fP 控制浮点寄存器的大小。
.IP \fB\-mgp64\fP 4
.IX Item \-mgp64
.PD 0
.IP \fB\-mfp64\fP 4
.IX Item \-mfp64
.PD
寄存器大小通常是从 \s-1ISA\s0 和 \s-1ABI,\s0 推断出来的，但是这些标志强制将某组寄存器始终视为 64 位宽。 \fB\-mgp64\fP
控制通用寄存器的大小，\fB\-mfp64\fP 控制浮点寄存器的大小。
.IP \fB\-mfpxx\fP 4
.IX Item \-mfpxx
寄存器大小通常是从 \s-1ISA\s0 和 \s-1ABI,\s0 推断出来的，但是将此标志与 \fB\-mabi=32\fP 结合使用可以启用
\s-1ABI\s0 变体，该变体将与 32 或 64 位宽的浮点寄存器一起正确运行。
.IP \fB\-modd\-spreg\fP 4
.IX Item \-modd\-spreg
.PD 0
.IP \fB\-mno\-odd\-spreg\fP 4
.IX Item \-mno\-odd\-spreg
.PD
当 \s-1ISA 支持时，启用对奇数单精度寄存器的浮点运算。\s0 \fB\-mfpxx\fP 表示 \&\fB\-mno\-odd\-spreg\fP，否则默认为
\fB\-modd\-spreg\fP。
.IP \fB\-mips16\fP 4
.IX Item \-mips16
.PD 0
.IP \fB\-no\-mips16\fP 4
.IX Item \-no\-mips16
.PD
为 \s-1MIPS 16\s0 处理器生成代码。 这相当于将 \&\f(CW\*(C`.module mips16\*(C'\fP 放在汇编文件的开头。
\fB\-no\-mips16\fP 关闭此选项。
.IP \fB\-mmips16e2\fP 4
.IX Item \-mmips16e2
.PD 0
.IP \fB\-mno\-mips16e2\fP 4
.IX Item \-mno\-mips16e2
.PD
在 \s-1MIPS16\s0 模式下启用 MIPS16e2 指令。 这相当于将 \f(CW\*(C`.module mips16e2\*(C'\fP
放在汇编文件的开头。 \&\fB\-mno\-mips16e2\fP 关闭此选项。
.IP \fB\-mmicromips\fP 4
.IX Item \-mmicromips
.PD 0
.IP \fB\-mno\-micromips\fP 4
.IX Item \-mno\-micromips
.PD
为 microMIPS 处理器生成代码。 这相当于将 \&\f(CW\*(C`.module micromips\*(C'\fP 放在汇编文件的开头。
\&\fB\-mno\-micromips\fP 关闭此选项。 这相当于将 \&\f(CW\*(C`.module nomicromips\*(C'\fP
放在汇编文件的开头。
.IP \fB\-msmartmips\fP 4
.IX Item \-msmartmips
.PD 0
.IP \fB\-mno\-smartmips\fP 4
.IX Item \-mno\-smartmips
.PD
启用 \s-1MIPS32\s0 指令集的 SmartMIPS 扩展。 这相当于将 \f(CW\*(C`.module smartmips\*(C'\fP
放在汇编文件的开头。 \fB\-mno\-smartmips\fP 关闭此选项。
.IP \fB\-mips3d\fP 4
.IX Item \-mips3d
.PD 0
.IP \fB\-no\-mips3d\fP 4
.IX Item \-no\-mips3d
.PD
为 \s-1MIPS\-3D\s0 应用程序特定扩展生成代码。 这告诉汇编程序接受 \s-1MIPS\-3D\s0 指令。 \&\fB\-no\-mips3d\fP
关闭此选项。
.IP \fB\-mdmx\fP 4
.IX Item \-mdmx
.PD 0
.IP \fB\-no\-mdmx\fP 4
.IX Item \-no\-mdmx
.PD
为 \s-1MDMX\s0 应用程序特定扩展生成代码。 这告诉汇编程序接受 \s-1MDMX\s0 指令。 \&\fB\-no\-mdmx\fP 关闭此选项。
.IP \fB\-mdsp\fP 4
.IX Item \-mdsp
.PD 0
.IP \fB\-mno\-dsp\fP 4
.IX Item \-mno\-dsp
.PD
为 \s-1DSP\s0 Release 1 Application Specific Extension 生成代码。 这告诉汇编器接受
\s-1DSP\s0 Release 1 指令。 \&\fB\-mno\-dsp\fP 关闭此选项。
.IP \fB\-mdspr2\fP 4
.IX Item \-mdspr2
.PD 0
.IP \fB\-mno\-dspr2\fP 4
.IX Item \-mno\-dspr2
.PD
为 \s-1DSP\s0 Release 2 Application Specific Extension 生成代码。 该选项表示 \fB\-mdsp\fP。
这告诉汇编器接受 \s-1DSP\s0 Release 2 指令。 \&\fB\-mno\-dspr2\fP 关闭此选项。
.IP \fB\-mdspr3\fP 4
.IX Item \-mdspr3
.PD 0
.IP \fB\-mno\-dspr3\fP 4
.IX Item \-mno\-dspr3
.PD
为 \s-1DSP\s0 Release 3 Application Specific Extension 生成代码。 该选项表示 \fB\-mdsp\fP 和
\fB\-mdspr2\fP。 这告诉汇编器接受 \s-1DSP\s0 Release 3 指令。 \&\fB\-mno\-dspr3\fP 关闭此选项。
.IP \fB\-mmsa\fP 4
.IX Item \-mmsa
.PD 0
.IP \fB\-mno\-msa\fP 4
.IX Item \-mno\-msa
.PD
为 \s-1MIPS SIMD\s0 架构扩展生成代码。 这告诉汇编程序接受 \s-1MSA\s0 指令。 \&\fB\-mno\-msa\fP 关闭此选项。
.IP \fB\-mxpa\fP 4
.IX Item \-mxpa
.PD 0
.IP \fB\-mno\-xpa\fP 4
.IX Item \-mno\-xpa
.PD
为 \s-1MIPS\s0 扩展物理地址 (\s-1XPA\s0) 扩展生成代码。 这告诉汇编程序接受 \s-1XPA\s0 指令。
\&\fB\-mno\-xpa\fP 关闭此选项。
.IP \fB\-mmt\fP 4
.IX Item \-mmt
.PD 0
.IP \fB\-mno\-mt\fP 4
.IX Item \-mno\-mt
.PD
为 \s-1MT\s0 应用程序特定扩展生成代码。 这告诉汇编程序接受 \s-1MT\s0 指令。 \&\fB\-mno\-mt\fP 关闭此选项。
.IP \fB\-mmcu\fP 4
.IX Item \-mmcu
.PD 0
.IP \fB\-mno\-mcu\fP 4
.IX Item \-mno\-mcu
.PD
为 \s-1MCU\s0 应用程序特定扩展生成代码。 这告诉汇编程序接受 \s-1MCU\s0 指令。 \&\fB\-mno\-mcu\fP 关闭此选项。
.IP \fB\-mcrc\fP 4
.IX Item \-mcrc
.PD 0
.IP \fB\-mno\-crc\fP 4
.IX Item \-mno\-crc
.PD
为 \s-1MIPS\s0 循环冗余检查 (\s-1CRC\s0) 应用特定扩展生成代码。 这告诉汇编程序接受 \s-1CRC\s0 指令。
\&\fB\-mno\-crc\fP 关闭此选项。
.IP \fB\-mginv\fP 4
.IX Item \-mginv
.PD 0
.IP \fB\-mno\-ginv\fP 4
.IX Item \-mno\-ginv
.PD
为全局 INValidate (\s-1GINV\s0) 应用程序特定扩展生成代码。 这告诉汇编程序接受 \s-1GINV\s0 指令。
\&\fB\-mno\-ginv\fP 关闭此选项。
.IP \fB\-mloongson\-mmi\fP 4
.IX Item \-mloongson\-mmi
.PD 0
.IP \fB\-mno\-loongson\-mmi\fP 4
.IX Item \-mno\-loongson\-mmi
.PD
为龙芯多媒体扩展指令 (\s-1MMI\s0) 应用特定扩展生成代码。 这告诉汇编程序接受 \s-1MMI\s0 指令。
\&\fB\-mno\-loongson\-mmi\fP 关闭此选项。
.IP \fB\-mloongson\-cam\fP 4
.IX Item \-mloongson\-cam
.PD 0
.IP \fB\-mno\-loongson\-cam\fP 4
.IX Item \-mno\-loongson\-cam
.PD
为龙芯内容地址存储器 (\s-1CAM\s0) 指令生成代码。 这告诉汇编程序接受龙芯 \s-1CAM\s0 指令。
\&\fB\-mno\-loongson\-cam\fP 关闭此选项。
.IP \fB\-mloongson\-ext\fP 4
.IX Item \-mloongson\-ext
.PD 0
.IP \fB\-mno\-loongson\-ext\fP 4
.IX Item \-mno\-loongson\-ext
.PD
为龙芯 EXTensions (\s-1EXT\s0) 指令生成代码。 这告诉汇编程序接受龙芯 \s-1EXT\s0 指令。
\&\fB\-mno\-loongson\-ext\fP 关闭此选项。
.IP \fB\-mloongson\-ext2\fP 4
.IX Item \-mloongson\-ext2
.PD 0
.IP \fB\-mno\-loongson\-ext2\fP 4
.IX Item \-mno\-loongson\-ext2
.PD
为龙芯 EXTensions R2 (\s-1EXT2\s0) 指令生成代码。 该选项表示 \fB\-mloongson\-ext\fP。 这告诉汇编程序接受龙芯
\s-1EXT2\s0 指令。 \&\fB\-mno\-loongson\-ext2\fP 关闭此选项。
.IP \fB\-minsn32\fP 4
.IX Item \-minsn32
.PD 0
.IP \fB\-mno\-insn32\fP 4
.IX Item \-mno\-insn32
.PD
为 microMIPS 处理器生成代码时，仅使用 32 位指令编码。 该选项禁止使用任何 16 位指令。 这相当于将 \f(CW\*(C`.set insn32\*(C'\fP 放在汇编文件的开头。 \fB\-mno\-insn32\fP 关闭此选项。 这相当于将 \f(CW\*(C`.set noinsn32\*(C'\fP 放在汇编文件的开头。 默认选择 \fB\-mno\-insn32\fP，允许使用所有指令。
.IP \fB\-\-construct\-floats\fP 4
.IX Item \-\-construct\-floats
.PD 0
.IP \fB\-\-no\-construct\-floats\fP 4
.IX Item \-\-no\-construct\-floats
.PD
\fB\-\-no\-construct\-floats\fP 选项通过将值的两半加载到构成双宽度寄存器的两个单宽度浮点寄存器来禁用双宽度浮点常量的构造。 默认选择
\fB\-\-construct\-floats\fP，允许构造这些浮点常量。
.IP \fB\-\-relax\-branch\fP 4
.IX Item \-\-relax\-branch
.PD 0
.IP \fB\-\-no\-relax\-branch\fP 4
.IX Item \-\-no\-relax\-branch
.PD
\fB\-\-relax\-branch\fP 选项可以放宽越界的分支。 默认选择 \fB\-\-no\-relax\-branch\fP，导致任何越界的分支产生错误。
.IP \fB\-mignore\-branch\-isa\fP 4
.IX Item \-mignore\-branch\-isa
.PD 0
.IP \fB\-mno\-ignore\-branch\-isa\fP 4
.IX Item \-mno\-ignore\-branch\-isa
.PD
忽略 \s-1ISA\s0 模式之间无效转换的分支检查。 分支的语义不提供 \s-1ISA\s0 模式开关，因此在大多数情况下，分支编码的
\s-1ISA\s0 模式必须与分支目标标签的 \s-1ISA\s0 模式相同。 因此，\s-1GAS\s0 已实现检查，以在分支程序集中验证两个
\s-1ISA\s0 模式是否匹配。 \fB\-mignore\-branch\-isa\fP 禁用这些检查。 默认选择
\fB\-mno\-ignore\-branch\-isa\fP，导致任何需要在 \s-1ISA\s0 模式之间转换的无效分支产生错误。
.IP \fB\-mnan=\fP\fIencoding\fP 4
.IX Item \-mnan=encoding
在 \s-1IEEE 754\-2008\s0 (\fB\-mnan=2008\fP) 或旧版 (\fB\-mnan=legacy\fP) NaN 编码格式之间进行选择。
后者是默认值。
.IP \fB\-\-emulation=\fP\fIname\fP 4
.IX Item \-\-emulation=name
此选项以前用于在支持两者的 \s-1IRIX 5\s0 等目标上在 \s-1ELF\s0 和 \s-1ECOFF\s0 输出之间切换。 \s-1MIPS
ECOFF\s0 支持已在 \s-1GAS 2.24 中删除，\s0 因此该选项现在没有什么用处。 保留它是为了向后兼容。
.Sp
可用的配置名称是: \fBmipself\fP、\fBmipslelf\fP 和 \&\fBmipsbelf\fP。 选择 \fBmipself\fP
现在没有效果，因为输出始终是 \s-1ELF.\s0 \fBmipslelf\fP 和 \fBmipsbelf\fP 分别选择小端和大端输出，但 \fB\-EL\fP 和
\fB\-EB\fP 现在是首选选项。
.IP \fB\-nocpp\fP 4
.IX Item \-nocpp
\&\fBas\fP 忽略此选项。 它被接受是为了与原生工具兼容。
.IP \fB\-\-trap\fP 4
.IX Item \-\-trap
.PD 0
.IP \fB\-\-no\-trap\fP 4
.IX Item \-\-no\-trap
.IP \fB\-\-break\fP 4
.IX Item \-\-break
.IP \fB\-\-no\-break\fP 4
.IX Item \-\-no\-break
.PD
控制如何处理乘法溢出和除以零。 \&\fB\-\-trap\fP 或 \fB\-\-no\-break\fP (它们是同义词) 采取陷阱异常 (并且仅适用于指令集架构级别 2
及更高级别) ; \&\fB\-\-break\fP 或 \fB\-\-no\-trap\fP (也是同义词，默认值) 中断异常。
.IP \fB\-n\fP 4
.IX Item \-n
使用此选项时，\fBas\fP 每次从宏生成 nop 指令时都会发出警告。
.PP
当为 LoongArch 处理器配置 as 时，以下选项可用。
.IP \fB\-fpic\fP 4
.IX Item \-fpic
.PD 0
.IP \fB\-fPIC\fP 4
.IX Item \-fPIC
.PD
生成与位置无关的代码
.IP \fB\-fno\-pic\fP 4
.IX Item \-fno\-pic
不要生成与位置无关的代码 (default)
.PP
当为元处理器配置 as 时，以下选项可用。
.ie  n .IP """\-mcpu=metac11""" 4
.el .IP "\f(CW\-mcpu=metac11\fR" 4
.IX Item \-mcpu=metac11
为 Meta 1.1 生成代码。
.ie  n .IP """\-mcpu=metac12""" 4
.el .IP "\f(CW\-mcpu=metac12\fR" 4
.IX Item \-mcpu=metac12
为 Meta 1.2 生成代码。
.ie  n .IP """\-mcpu=metac21""" 4
.el .IP "\f(CW\-mcpu=metac21\fR" 4
.IX Item \-mcpu=metac21
为 Meta 2.1 生成代码。
.ie  n .IP """\-mfpu=metac21""" 4
.el .IP "\f(CW\-mfpu=metac21\fR" 4
.IX Item \-mfpu=metac21
允许代码使用 Meta 2.1 的 \s-1FPU\s0 硬件。
.PP
有关 MMIX 特定选项的文档，请参见信息页面。
.PP
当为 \&\s-1NDS32\s0 处理器配置 as 时，以下选项可用。
.ie  n .IP """\-O1""" 4
.el .IP "\f(CW\-O1\fR" 4
.IX Item \-O1
优化性能。
.ie  n .IP """\-Os""" 4
.el .IP "\f(CW\-Os\fR" 4
.IX Item \-Os
优化空间。
.ie  n .IP """\-EL""" 4
.el .IP "\f(CW\-EL\fR" 4
.IX Item \-EL
产生小端数据输出。
.ie  n .IP """\-EB""" 4
.el .IP "\f(CW\-EB\fR" 4
.IX Item \-EB
产生小端数据输出。
.ie  n .IP """\-mpic""" 4
.el .IP "\f(CW\-mpic\fR" 4
.IX Item \-mpic
生成 \s-1PIC.\s0
.ie  n .IP """\-mno\-fp\-as\-gp\-relax""" 4
.el .IP "\f(CW\-mno\-fp\-as\-gp\-relax\fR" 4
.IX Item \-mno\-fp\-as\-gp\-relax
抑制此文件的 fp\-as\-gp 松弛。
.ie  n .IP """\-mb2bb\-relax""" 4
.el .IP "\f(CW\-mb2bb\-relax\fR" 4
.IX Item \-mb2bb\-relax
背靠背分支优化。
.ie  n .IP """\-mno\-all\-relax""" 4
.el .IP "\f(CW\-mno\-all\-relax\fR" 4
.IX Item \-mno\-all\-relax
抑制该文件的所有松弛。
.ie  n .IP """\-march=<arch name>""" 4
.el .IP "\f(CW\-march=<arch name>\fR" 4
.IX Item "\-march=<arch name>"
为架构 <arch name> 组装，可以是 v3、v3j、v3m、v3f、v3s、v2、v2j、v2f、v2s。
.ie  n .IP """\-mbaseline=<baseline>""" 4
.el .IP "\f(CW\-mbaseline=<baseline>\fR" 4
.IX Item \-mbaseline=<baseline>
为基线 <baseline> 组装，它可以是 v2、v3、v3m。
.ie  n .IP """\-mfpu\-freg=\fIFREG\fP""" 4
.el .IP "\f(CW\-mfpu\-freg=\f(CIFREG\f(CW\fR" 4
.IX Item \-mfpu\-freg=FREG
指定 \s-1FPU\s0 配置。
.RS 4
.ie  n .IP """0      8 SP /  4 DP registers""" 4
.el .IP "\f(CW0      8 SP /  4 DP registers\fR" 4
.IX Item "0 8 SP / 4 DP registers"
.PD 0
.ie  n .IP """1     16 SP /  8 DP registers""" 4
.el .IP "\f(CW1     16 SP /  8 DP registers\fR" 4
.IX Item "1 16 SP / 8 DP registers"
.ie  n .IP """2     32 SP / 16 DP registers""" 4
.el .IP "\f(CW2     32 SP / 16 DP registers\fR" 4
.IX Item "2 32 SP / 16 DP registers"
.ie  n .IP """3     32 SP / 32 DP registers""" 4
.el .IP "\f(CW3     32 SP / 32 DP registers\fR" 4
.IX Item "3 32 SP / 32 DP registers"
.RE
.RS 4
.RE
.ie  n .IP """\-mabi=\fIabi\fP""" 4
.el .IP "\f(CW\-mabi=\f(CIabi\f(CW\fR" 4
.IX Item \-mabi=abi
.PD
指定 abi 版本 <abi> 可以是 v1、v2、v2fp、v2fpp。
.ie  n .IP """\-m[no\-]mac""" 4
.el .IP "\f(CW\-m[no\-]mac\fR" 4
.IX Item \-m[no\-]mac
Enable/Disable 乘法指令支持。
.ie  n .IP """\-m[no\-]div""" 4
.el .IP "\f(CW\-m[no\-]div\fR" 4
.IX Item \-m[no\-]div
Enable/Disable 除法指令支持。
.ie  n .IP """\-m[no\-]16bit\-ext""" 4
.el .IP "\f(CW\-m[no\-]16bit\-ext\fR" 4
.IX Item \-m[no\-]16bit\-ext
Enable/Disable 16 位扩展
.ie  n .IP """\-m[no\-]dx\-regs""" 4
.el .IP "\f(CW\-m[no\-]dx\-regs\fR" 4
.IX Item \-m[no\-]dx\-regs
Enable/Disable d0/d1 寄存器
.ie  n .IP """\-m[no\-]perf\-ext""" 4
.el .IP "\f(CW\-m[no\-]perf\-ext\fR" 4
.IX Item \-m[no\-]perf\-ext
Enable/Disable 性能扩展
.ie  n .IP """\-m[no\-]perf2\-ext""" 4
.el .IP "\f(CW\-m[no\-]perf2\-ext\fR" 4
.IX Item \-m[no\-]perf2\-ext
Enable/Disable 性能扩展 2
.ie  n .IP """\-m[no\-]string\-ext""" 4
.el .IP "\f(CW\-m[no\-]string\-ext\fR" 4
.IX Item \-m[no\-]string\-ext
Enable/Disable 字符串扩展
.ie  n .IP """\-m[no\-]reduced\-regs""" 4
.el .IP "\f(CW\-m[no\-]reduced\-regs\fR" 4
.IX Item \-m[no\-]reduced\-regs
Enable/Disable 简化寄存器配置 (\s-1GPR16\s0) 选项
.ie  n .IP """\-m[no\-]audio\-isa\-ext""" 4
.el .IP "\f(CW\-m[no\-]audio\-isa\-ext\fR" 4
.IX Item \-m[no\-]audio\-isa\-ext
Enable/Disable\s-1AUDIO ISA\s0 扩展
.ie  n .IP """\-m[no\-]fpu\-sp\-ext""" 4
.el .IP "\f(CW\-m[no\-]fpu\-sp\-ext\fR" 4
.IX Item \-m[no\-]fpu\-sp\-ext
Enable/Disable\s-1FPU SP\s0 扩展
.ie  n .IP """\-m[no\-]fpu\-dp\-ext""" 4
.el .IP "\f(CW\-m[no\-]fpu\-dp\-ext\fR" 4
.IX Item \-m[no\-]fpu\-dp\-ext
Enable/Disable\s-1FPU DP\s0 扩展
.ie  n .IP """\-m[no\-]fpu\-fma""" 4
.el .IP "\f(CW\-m[no\-]fpu\-fma\fR" 4
.IX Item \-m[no\-]fpu\-fma
Enable/Disable \s-1FPU\s0 融合乘加指令
.ie  n .IP """\-mall\-ext""" 4
.el .IP "\f(CW\-mall\-ext\fR" 4
.IX Item \-mall\-ext
打开所有扩展和指令支持
.PP
当为 PowerPC 处理器配置 as 时，以下选项可用。
.IP \fB\-a32\fP 4
.IX Item \-a32
生成 \s-1ELF32\s0 或 \s-1XCOFF32.\s0
.IP \fB\-a64\fP 4
.IX Item \-a64
生成 \s-1ELF64\s0 或 \s-1XCOFF64.\s0
.IP "\fB\-K \s-1PIC\s0\fP" 4
.IX Item "\-K PIC"
在 \s-1ELF\s0 标志中设置 \s-1EF_PPC_RELOCATABLE_LIB\s0。
.IP "\fB\-mpwrx | \-mpwr2\fP" 4
.IX Item "\-mpwrx | \-mpwr2"
为 \s-1POWER/2\s0 (\s-1RIOS2\s0) 生成代码。
.IP \fB\-mpwr\fP 4
.IX Item \-mpwr
为 \s-1POWER\s0 (\s-1RIOS1\s0) 生成代码
.IP \fB\-m601\fP 4
.IX Item \-m601
为 PowerPC 601 生成代码。
.IP "\fB\-mppc, \-mppc32, \-m603, \-m604\fP" 4
.IX Item "\-mppc, \-mppc32, \-m603, \-m604"
为 PowerPC 603/604 生成代码。
.IP "\fB\-m403, \-m405\fP" 4
.IX Item "\-m403, \-m405"
为 PowerPC 403/405 生成代码。
.IP \fB\-m440\fP 4
.IX Item \-m440
为 PowerPC 440 生成代码。 BookE 和一些 405 指令。
.IP \fB\-m464\fP 4
.IX Item \-m464
为 PowerPC 464 生成代码。
.IP \fB\-m476\fP 4
.IX Item \-m476
为 PowerPC 476 生成代码。
.IP "\fB\-m7400, \-m7410, \-m7450, \-m7455\fP" 4
.IX Item "\-m7400, \-m7410, \-m7450, \-m7455"
为 PowerPC 7400/7410/7450/7455 生成代码。
.IP "\fB\-m750cl, \-mgekko, \-mbroadway\fP" 4
.IX Item "\-m750cl, \-mgekko, \-mbroadway"
为 PowerPC 750CL/Gekko/Broadway 生成代码。
.IP "\fB\-m821, \-m850, \-m860\fP" 4
.IX Item "\-m821, \-m850, \-m860"
为 PowerPC 821/850/860 生成代码。
.IP "\fB\-mppc64, \-m620\fP" 4
.IX Item "\-mppc64, \-m620"
为 PowerPC 620/625/630 生成代码。
.IP "\fB\-me200z2, \-me200z4\fP" 4
.IX Item "\-me200z2, \-me200z4"
为 e200 变体生成代码，e200z2 带 \s-1LSP，\s0 e200z4 带 \s-1SPE。\s0
.IP \fB\-me300\fP 4
.IX Item \-me300
为 PowerPC e300 系列生成代码。
.IP "\fB\-me500, \-me500x2\fP" 4
.IX Item "\-me500, \-me500x2"
为摩托罗拉 e500 核心复合体生成代码。
.IP \fB\-me500mc\fP 4
.IX Item \-me500mc
为 Freescale e500mc 核心复合体生成代码。
.IP \fB\-me500mc64\fP 4
.IX Item \-me500mc64
为 Freescale e500mc64 核心复合体生成代码。
.IP \fB\-me5500\fP 4
.IX Item \-me5500
为 Freescale e5500 核心复合体生成代码。
.IP \fB\-me6500\fP 4
.IX Item \-me6500
为 Freescale e6500 核心复合体生成代码。
.IP \fB\-mlsp\fP 4
.IX Item \-mlsp
启用 \s-1LSP\s0 指令。 (禁用 \s-1SPE\s0 和 \s-1SPE2.\s0)
.IP \fB\-mspe\fP 4
.IX Item \-mspe
为 Motorola \s-1SPE\s0 指令生成代码。 (禁用 \s-1LSP。\s0)
.IP \fB\-mspe2\fP 4
.IX Item \-mspe2
为 Freescale \s-1SPE2\s0 指令生成代码。 (禁用 \s-1LSP。\s0)
.IP \fB\-mtitan\fP 4
.IX Item \-mtitan
为 AppliedMicro Titan 核心复合体生成代码。
.IP \fB\-mppc64bridge\fP 4
.IX Item \-mppc64bridge
为 PowerPC 64 生成代码，包括 bridge insns。
.IP \fB\-mbooke\fP 4
.IX Item \-mbooke
为 32 位 BookE 生成代码。
.IP \fB\-ma2\fP 4
.IX Item \-ma2
为 A2 架构生成代码。
.IP \fB\-maltivec\fP 4
.IX Item \-maltivec
使用 AltiVec 指令为处理器生成代码。
.IP \fB\-mvle\fP 4
.IX Item \-mvle
为 Freescale PowerPC \s-1VLE\s0 指令生成代码。
.IP \fB\-mvsx\fP 4
.IX Item \-mvsx
使用 Vector\-Scalar (\s-1VSX\s0) 指令为处理器生成代码。
.IP \fB\-mhtm\fP 4
.IX Item \-mhtm
使用硬件事务内存指令为处理器生成代码。
.IP "\fB\-mpower4, \-mpwr4\fP" 4
.IX Item "\-mpower4, \-mpwr4"
为 Power4 架构生成代码。
.IP "\fB\-mpower5, \-mpwr5, \-mpwr5x\fP" 4
.IX Item "\-mpower5, \-mpwr5, \-mpwr5x"
为 Power5 架构生成代码。
.IP "\fB\-mpower6, \-mpwr6\fP" 4
.IX Item "\-mpower6, \-mpwr6"
为 Power6 架构生成代码。
.IP "\fB\-mpower7, \-mpwr7\fP" 4
.IX Item "\-mpower7, \-mpwr7"
为 Power7 架构生成代码。
.IP "\fB\-mpower8, \-mpwr8\fP" 4
.IX Item "\-mpower8, \-mpwr8"
为 Power8 架构生成代码。
.IP "\fB\-mpower9, \-mpwr9\fP" 4
.IX Item "\-mpower9, \-mpwr9"
为 Power9 架构生成代码。
.IP "\fB\-mpower10, \-mpwr10\fP" 4
.IX Item "\-mpower10, \-mpwr10"
为 Power10 架构生成代码。
.IP \fB\-mfuture\fP 4
.IX Item \-mfuture
为 'future' 架构生成代码。
.IP \fB\-mcell\fP 4
.IX Item \-mcell
.PD 0
.IP \fB\-mcell\fP 4
.IX Item \-mcell
.PD
为 Cell 宽带引擎架构生成代码。
.IP \fB\-mcom\fP 4
.IX Item \-mcom
生成代码 Power/PowerPC 通用指令。
.IP \fB\-many\fP 4
.IX Item \-many
为任何架构 (\s-1PWR/PWRX/PPC\s0) 生成代码。
.IP \fB\-mregnames\fP 4
.IX Item \-mregnames
允许寄存器的符号名称。
.IP \fB\-mno\-regnames\fP 4
.IX Item \-mno\-regnames
不允许寄存器的符号名称。
.IP \fB\-mrelocatable\fP 4
.IX Item \-mrelocatable
支持 \s-1GCC\s0 的 \-mrelocatable 选项。
.IP \fB\-mrelocatable\-lib\fP 4
.IX Item \-mrelocatable\-lib
支持 \s-1GCC\s0 的 \- mrelocatable\-lib 选项。
.IP \fB\-memb\fP 4
.IX Item \-memb
在 \s-1ELF\s0 标志中设置 \s-1PPC_EMB\s0 位。
.IP "\fB\-mlittle, \-mlittle\-endian, \-le\fP" 4
.IX Item "\-mlittle, \-mlittle\-endian, \-le"
为小端机器生成代码。
.IP "\fB\-mbig, \-mbig\-endian, \-be\fP" 4
.IX Item "\-mbig, \-mbig\-endian, \-be"
为大端机器生成代码。
.IP \fB\-msolaris\fP 4
.IX Item \-msolaris
为 Solaris 生成代码。
.IP \fB\-mno\-solaris\fP 4
.IX Item \-mno\-solaris
不要为 Solaris 生成代码。
.IP \fB\-nops=\fP\fIcount\fP 4
.IX Item \-nops=count
如果对齐指令插入多于 \fIcount\fP 个 nop，则在开头放置一个分支以跳过 nop 的执行。
.PP
当为 RISC\-V 处理器配置 as 时，以下选项可用。
.IP \fB\-fpic\fP 4
.IX Item \-fpic
.PD 0
.IP \fB\-fPIC\fP 4
.IX Item \-fPIC
.PD
生成与位置无关的代码
.IP \fB\-fno\-pic\fP 4
.IX Item \-fno\-pic
不要生成与位置无关的代码 (default)
.IP \fB\-march=ISA\fP 4
.IX Item \-march=ISA
选择由 \s-1ISA 指定的基础 isa。\s0 例如 \- march=rv32ima。 如果未设置此选项和体系结构属性，则汇编程序将检查默认配置设置
\-\-with\-arch=ISA。
.IP \fB\-misa\-spec=ISAspec\fP 4
.IX Item \-misa\-spec=ISAspec
选择默认的 isa spec 版本。 如果 \s-1ISA\s0 的版本不是由 \-march 设置的，那么汇编程序会根据默认选择的规范帮助设置版本。
如果未设置此选项，则汇编程序将检查默认配置设置 \-\-with\-isa\-spec=ISAspec。
.IP \fB\-mpriv\-spec=PRIVspec\fP 4
.IX Item \-mpriv\-spec=PRIVspec
选择特权规范版本。 我们可以根据选择的规格来决定 \s-1CSR\s0 是否有效。 如果未设置此选项和特权属性，则汇编器将检查默认配置设置
\&\-\-with\-priv\-spec=PRIVspec。
.IP \fB\-mabi=ABI\fP 4
.IX Item \-mabi=ABI
选择 \s-1ABI,\s0 是 \*(L"ilp32\*(R" 或 \*(L"lp64\*(R", 可选地后跟 \*(L"f\*(R"
,\*(L"d\*(R", 或 \*(L"q\*(R" 表示单精度、双精度或四精度浮点调用约定，或 none 表示软浮点调用约定。
此外，\*(L"ilp32\*(R" 可以选择后跟 \*(L"e\*(R" 以指示始终为软浮动的 \s-1RVE ABI,\s0。
.IP \fB\-mrelax\fP 4
.IX Item \-mrelax
利用链接器放宽来减少具体化符号地址所需的指令数。(default)
.IP \fB\-mno\-relax\fP 4
.IX Item \-mno\-relax
不要做链接器松弛。
.IP \fB\-march\-attr\fP 4
.IX Item \-march\-attr
如果未设置 \&.attribute 指令，则为 riscv elf 属性部分生成默认内容。 该部分用于记录链接器或运行时加载器检查兼容性所需的信息。
此信息包括 \s-1ISA\s0 字符串、栈对齐要求、未对齐的内存访问以及特权规范的主要、次要和修订版本。
.IP \fB\-mno\-arch\-attr\fP 4
.IX Item \-mno\-arch\-attr
如果未设置 .attribute 指令，则不要生成默认的 riscv elf 属性部分。
.IP \fB\-mcsr\-check\fP 4
.IX Item \-mcsr\-check
为 ISA 相关的 \s-1CRS\s0 和只读的 \s-1CSR 启用 \s-1CSR\s0 检查。\s0 ISA 相关的 \s-1CSR\s0
仅在设置特定 \s-1ISA\s0 时有效。 只读的 \s-1CSR\s0 不能被 \s-1CSR\s0 指令写入。
.IP \fB\-mno\-csr\-check\fP 4
.IX Item \-mno\-csr\-check
不要进行 \s-1CSR\s0 检查。
.IP \fB\-mlittle\-endian\fP 4
.IX Item \-mlittle\-endian
为小端机器生成代码。
.IP \fB\-mbig\-endian\fP 4
.IX Item \-mbig\-endian
为大端机器生成代码。
.PP
有关 RX 特定选项的文档，请参见信息页面。
.PP
当为 s390 处理器系列配置 as 时，以下选项可用。
.IP \fB\-m31\fP 4
.IX Item \-m31
.PD 0
.IP \fB\-m64\fP 4
.IX Item \-m64
.PD
选择字长，31/32 位或 64 位。
.IP \fB\-mesa\fP 4
.IX Item \-mesa
.PD 0
.IP \fB\-mzarch\fP 4
.IX Item \-mzarch
.PD
选择架构模式，企业系统架构 (esa) 或 z/Architecture 模式 (zarch)。
.IP \fB\-march=\fP\fIprocessor\fP 4
.IX Item \-march=processor
指定哪个 s390 处理器变体是目标，\fBg5\fP (或 \&\fBarch3\fP)、\fBg6\fP、\fBz900\fP (或 \fBarch5\fP)、\fBz990\fP
(或 \&\fBarch6\fP)、\fBz9\-109\fP、\fBz9\-ec\fP (或 \fBarch7\fP)、\fBz10\fP (或 \&\fBarch8\fP)、\fBz196\fP
(或 \fBarch9\fP)、\fBzEC12\fP (或 \fBarch10\fP)、\&\fBz13\fP (或 \fBarch11\fP)、\fBz14\fP (或
\fBarch12\fP)、\fBz15\fP (或 \fBarch13\fP)、或 \fBz16\fP (或 \fBarch14\fP)。
.IP \fB\-mregnames\fP 4
.IX Item \-mregnames
.PD 0
.IP \fB\-mno\-regnames\fP 4
.IX Item \-mno\-regnames
.PD
允许或禁止寄存器的符号名称。
.IP \fB\-mwarn\-areg\-zero\fP 4
.IX Item \-mwarn\-areg\-zero
每当指定了基址或变址寄存器的操作数但计算结果为零时发出警告。
.PP
当为 \&\s-1TMS320C6000\s0 处理器配置 as 时，以下选项可用。
.IP \fB\-march=\fP\fIarch\fP 4
.IX Item \-march=arch
从架构 \fIarch\fP 启用 (only) 指令。 默认情况下，允许所有指令。
.Sp
接受以下 \fIarch\fP 值:
\f(CW\*(C`c62x\*(C'\fP、\&\f(CW\*(C`c64x\*(C'\fP、\f(CW\*(C`c64x+\*(C'\fP、\f(CW\*(C`c67x\*(C'\fP、\f(CW\*(C`c67x+\*(C'\fP、\f(CW\*(C`c674x\*(C'\fP。
.IP \fB\-mdsbt\fP 4
.IX Item \-mdsbt
.PD 0
.IP \fB\-mno\-dsbt\fP 4
.IX Item \-mno\-dsbt
.PD
\fB\-mdsbt\fP 选项使汇编程序生成值为 1 的 \&\f(CW\*(C`Tag_ABI_DSBT\*(C'\fP 属性，表示代码正在使用
\s-1DSBT\s0 寻址。 默认的 \fB\-mno\-dsbt\fP 选项使标签的值为 0，表示代码不使用 \s-1DSBT\s0 寻址。 如果不同类型
(\s-1DSBT\s0 和非 DSBT) 的对象链接在一起，链接器将发出警告。
.IP \fB\-mpid=no\fP 4
.IX Item \-mpid=no
.PD 0
.IP \fB\-mpid=near\fP 4
.IX Item \-mpid=near
.IP \fB\-mpid=far\fP 4
.IX Item \-mpid=far
.PD
\fB\-mpid=\fP 选项使汇编程序生成 \&\f(CW\*(C`Tag_ABI_PID\*(C'\fP 属性，其值指示代码使用的数据寻址形式。
默认情况下，\fB\-mpid=no\fP 表示位置相关数据寻址，\fB\-mpid=near\fP 表示位置无关寻址，\s-1GOT\s0 访问使用近
\&\s-1DP\s0 寻址，\fB\-mpid=far\fP 表示位置无关寻址，\s-1GOT\s0 访问使用远 \s-1DP\s0 寻址。
如果使用此选项的不同设置构建的对象链接在一起，链接器将发出警告。
.IP \fB\-mpic\fP 4
.IX Item \-mpic
.PD 0
.IP \fB\-mno\-pic\fP 4
.IX Item \-mno\-pic
.PD
\fB\-mpic\fP 选项使汇编程序生成值为 1 的 \&\f(CW\*(C`Tag_ABI_PIC\*(C'\fP
属性，表示代码使用与位置无关的代码寻址，\&\f(CW\*(C`\-mno\-pic\*(C'\fP 选项，默认情况下，使标记的值为 0，表示与位置相关代码寻址。
如果不同类型 (位置相关和位置无关) 的对象链接在一起，链接器将发出警告。
.IP \fB\-mbig\-endian\fP 4
.IX Item \-mbig\-endian
.PD 0
.IP \fB\-mlittle\-endian\fP 4
.IX Item \-mlittle\-endian
.PD
为指定的字节顺序生成代码。 默认是小端。
.PP
当为 TILE\-Gx 处理器配置 as 时，以下选项可用。
.IP "\fB\-m32 | \-m64\fP" 4
.IX Item "\-m32 | \-m64"
选择字长，32 位或 64 位。
.IP "\fB\-EB | \-EL\fP" 4
.IX Item "\-EB | \-EL"
选择字节顺序，大端 (\-EB) 或小端 (\-EL)。
.PP
当为 Visium 处理器配置 as 时，以下选项可用。
.IP \fB\-mtune=\fP\fIarch\fP 4
.IX Item \-mtune=arch
此选项指定目标体系结构。 如果试图汇编一条不会在目标体系结构上执行的指令，汇编器将发出一条错误消息。
.Sp
识别以下名称: \&\f(CW\*(C`mcm24\*(C'\fP \&\f(CW\*(C`mcm\*(C'\fP \&\f(CW\*(C`gr5\*(C'\fP
\&\f(CW\*(C`gr6\*(C'\fP
.PP
当为 Xtensa 处理器配置 as 时，以下选项可用。
.IP "\fB\-\-text\-section\-literals | \-\-no\-text\-section\-literals\fP" 4
.IX Item "\-\-text\-section\-literals | \-\-no\-text\-section\-literals"
控制字面量池的处理。 默认值为 \&\fB\-\-no\-text\-section\-literals\fP，它将字符面量放在输出文件的单独部分中。
这允许将字面量池放置在数据 \s-1RAM/ROM.\s0 和 \fB\-\-text\-section\-literals\fP
中，字面量散布在文本部分中，以使它们尽可能接近它们的引用。 这对于大型汇编文件可能是必需的，否则其中的字面量将超出文本部分中
\&\f(CW\*(C`L32R\*(C'\fP 指令的范围。 字面量按照 \f(CW\*(C`.literal_position\*(C'\fP 指令或之前的
\&\f(CW\*(C`ENTRY\*(C'\fP 指令分组到池中。 这些选项只影响通过 PC 相关的 \f(CW\*(C`L32R\*(C'\fP 指令引用的字面量;
绝对模式 \&\f(CW\*(C`L32R\*(C'\fP 指令的字面量单独处理。
.IP "\fB\-\-auto\-litpools | \-\-no\-auto\-litpools\fP" 4
.IX Item "\-\-auto\-litpools | \-\-no\-auto\-litpools"
控制字面量池的处理。 默认值为 \&\fB\-\-no\-auto\-litpools\fP，在没有 \&\fB\-\-text\-section\-literals\fP
的情况下，它会将字面量放在输出文件的单独部分中。 这允许将字面量池放置在数据 \&\s-1RAM/ROM 中。\s0 对于
\fB\-\-auto\-litpools\fP，字面量散布在文本部分中，以使它们尽可能接近它们的引用，显式
\f(CW\*(C`.literal_position\*(C'\fP 不需要指令。
对于非常大的函数，这可能是必要的，其中函数开头的单个字符值池可能无法通过末尾的 \&\f(CW\*(C`L32R\*(C'\fP 指令访问。 这些选项只影响通过
PC 相关的 \f(CW\*(C`L32R\*(C'\fP 指令引用的字面量; 绝对模式 \f(CW\*(C`L32R\*(C'\fP 指令的字面量单独处理。 与
\fB\-\-text\-section\-literals\fP 一起使用时，\&\fB\-\-auto\-litpools\fP 优先。
.IP "\fB\-\-absolute\-literals | \-\-no\-absolute\-literals\fP" 4
.IX Item "\-\-absolute\-literals | \-\-no\-absolute\-literals"
向汇编程序指示 \f(CW\*(C`L32R\*(C'\fP 指令是使用绝对寻址还是 PC 相对寻址。 如果处理器包含绝对寻址选项，则默认使用绝对
\f(CW\*(C`L32R\*(C'\fP 重定位。 否则，只能使用与 PC 相关的 \f(CW\*(C`L32R\*(C'\fP 重定位。
.IP "\fB\-\-target\-align | \-\-no\-target\-align\fP" 4
.IX Item "\-\-target\-align | \-\-no\-target\-align"
启用或禁用自动对齐以减少代码大小的分支惩罚。 默认情况下启用此优化。 请注意，汇编程序将始终对齐具有固定对齐要求的指令，例如
\f(CW\*(C`LOOP\*(C'\fP。
.IP "\fB\-\-longcalls | \-\-no\-longcalls\fP" 4
.IX Item "\-\-longcalls | \-\-no\-longcalls"
启用或禁用调用指令的转换以允许跨更大范围的地址进行调用。 当调用目标可能越界时，应使用此选项。
它可能会降低代码大小和性能，但链接器通常可以在调用最终在范围内时优化掉不必要的开销。 默认为 \&\fB\-\-no\-longcalls\fP。
.IP "\fB\-\-transform | \-\-no\-transform\fP" 4
.IX Item "\-\-transform | \-\-no\-transform"
启用或禁用 Xtensa 指令的所有汇编程序转换，包括松弛和优化。 默认为 \&\fB\-\-transform\fP; \fB\-\-no\-transform\fP
只应在极少数情况下使用，此时指令必须与汇编源代码中指定的完全一致。 使用 \fB\-\-no\-transform\fP 会导致越界的指令操作数出错。
.IP "\fB\-\-rename\-section\fP \fIoldname\fP\fB=\fP\fInewname\fP" 4
.IX Item "\-\-rename\-section oldname=newname"
将 \fIoldname\fP 部分重命名为 \fInewname\fP。 可以多次使用此选项来重命名多个部分。
.IP "\fB\-\-trampolines | \-\-no\-trampolines\fP" 4
.IX Item "\-\-trampolines | \-\-no\-trampolines"
启用或禁用跳转指令的转换以允许跳转更大范围的地址。 当跳跃目标可能越界时，应使用此选项。 在没有此类跳转的情况下，此选项不会影响代码大小或性能。 默认为
\&\fB\-\-trampolines\fP。
.IP "\fB\-\-abi\-windowed | \-\-abi\-call0\fP" 4
.IX Item "\-\-abi\-windowed | \-\-abi\-call0"
选择写入 \f(CW\*(C`.xtensa.info\*(C'\fP 部分的 \s-1ABI\s0 标记。 \s-1ABI\s0 标签表示汇编代码的
\s-1ABI\s0。 链接器会在尝试链接具有不一致 \s-1ABI\s0 标记的目标文件时发出警告。 默认 \s-1ABI\s0 由 Xtensa
核心配置选择。
.PP
当为 Z80 处理器配置 as 时，以下选项可用。
.PP
\&\f(CW@chapter\fP Z80 相关，特性
.SS "Command\-line Options"
.IX Subsection "Command\-line Options"
.IP \fB\-march=\fP\fI\s-1CPU\s0\fP\fB[\-\fP\fI\s-1EXT\s0\fP\fB...][+\fP\fI\s-1EXT\s0\fP\fB...]\fP 4
.IX Item \-march=CPU[\-EXT...][+EXT...]
该选项指定目标处理器。如果试图汇编一条不会在目标处理器上执行的指令，汇编程序将发出一条错误消息。可识别以下处理器名称:
\&\f(CW\*(C`z80\*(C'\fP、\&\f(CW\*(C`z180\*(C'\fP、\&\f(CW\*(C`ez80\*(C'\fP、\&\f(CW\*(C`gbz80\*(C'\fP、\&\f(CW\*(C`z80n\*(C'\fP、\&\f(CW\*(C`r800\*(C'\fP。
除了基本指令集之外，还可以告诉汇编程序接受一些扩展助记符。例如，\&\f(CW\*(C`\-march=z180+sli+infc\*(C'\fP 使用
\fI\s-1SLI\s0\fP 指令和 \&\fI\s-1IN F,\s0(C)\fP 扩展 \fIz180\fP。目前支持以下扩展:
\&\f(CW\*(C`full\*(C'\fP (所有已知指令)、\&\f(CW\*(C`adl\*(C'\fP (默认为 \s-1ADL CPU\s0 模式，仅
eZ80)、\&\f(CW\*(C`sli\*(C'\fP (称为 \fI\s-1SLI\s0\fP、\fI\s-1SLL\s0\fP 或 \fI\s-1SL1\s0\fP)
的指令、\&\f(CW\*(C`xyhl\*(C'\fP (具有一半变址寄存器的指令:
\fI\s-1IXL\s0\fP，\fI\s-1IXH\s0\fP，\&\fI\s-1IYL\s0\fP，\fI\s-1IYH\s0\fP)，\&\f(CW\*(C`xdcb\*(C'\fP
(\fIRotOp (II+d),R\fP 和 \fIBitOp n,(II+d),R\fP) 指令，\&\f(CW\*(C`infc\*(C'\fP (指令
\fI\s-1IN F,\s0(C)\fP 或 \fI\s-1IN\s0 (C)\fP)，\&\f(CW\*(C`outc0\*(C'\fP (指令
\fI\s-1OUT\s0 (C),0\fP).  请注意，不是扩展基本指令集，而是以 \f(CW\*(C`\-\*(C'\fP 开头的扩展助记符撤销相应的功能:
\&\f(CW\*(C`\-march=z80\-full+xyhl\*(C'\fP 首先删除所有默认扩展并仅添加对变址寄存器的支持。
.Sp
如果未指定此选项，则假定为 \f(CW\*(C`\-march=z80+xyhl+infc\*(C'\fP。
.IP \fB\-local\-prefix=\fP\fIprefix\fP 4
.IX Item \-local\-prefix=prefix
将具有指定前缀的所有标签标记为本地。但是这样的标签可以在代码中明确标示为全局。该选项不改变默认的本地标签前缀
\f(CW\*(C`.L\*(C'\fP，它只是添加一个新的。
.IP \fB\-colonless\fP 4
.IX Item \-colonless
接受无冒号标签。行首的所有符号都被视为标签。
.IP \fB\-sdcc\fP 4
.IX Item \-sdcc
接受 \s-1SDCC 生成的汇编程序代码。\s0
.IP \fB\-fp\-s=\fP\fI\s-1FORMAT\s0\fP 4
.IX Item \-fp\-s=FORMAT
单精度浮点数格式。默认值: ieee754 (32 位)。
.IP \fB\-fp\-d=\fP\fI\s-1FORMAT\s0\fP 4
.IX Item \-fp\-d=FORMAT
双精度浮点数格式。默认值: ieee754 (64 位)。
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBgcc\fP\|(1)、\fBld\fP\|(1) 以及 \fIbinutils\fP 和 \fIld\fP.
.SH COPYRIGHT
.IX Header COPYRIGHT
Copyright (c) 1991\-2023 Free Software Foundation, Inc.
.PP
根据 \s-1GNU\s0 自由文档许可证版本 1.3 或自由软件基金会发布的任何更高版本的条款，授予复制、分发或者修改本文档的权限;
没有不变的部分，没有封面文本，也没有封底文本。 该许可证的副本包含在标题为 \*(L"\s-1GNU\s0 Free Documentation
License\*(R") 的部分中。
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
