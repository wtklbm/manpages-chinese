.\" -*- coding: UTF-8 -*-
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH LESSPIPE.SH 1 "Jan 2023" lesspipe.sh "User Commands"
.SH NAME
lesspipe.sh \- 更少的过滤器
.SH SYNOPSIS
\fBlesspipe.sh\fP [\fIFILE[s]\fP] ...
.SH DESCRIPTION
.PP
\fBlesspipe.sh\fP 的目的是增强 \fBless\fP 的输出。要应用于修改输出的规则的选择基于文件内容。 文件扩展名仅作为最后的手段。 通常
\fBlesspipe.sh\fP 被称为 \fBless\fP 的输入滤波器。
.PP
在该过滤器的帮助下，\fBless\fP 将显示压缩的 (\fIgzip, bzip2, compress, zstd, lz4, lzip, xz, lzma or brotli\fP) 文件的未压缩内容。对于包含档案和目录的文件，目录将显示为 (\fItar, ar, zip, i7\-zip, rar, jar, rpm, deb ms\-cabinet and iso formats\fP)。 许多其他文件将被重新格式化以供显示。它包括 \fIpdf, dvi, markdown, Office (MS and Openoffice)\fP 套件格式、\fINetCDF, matlab, html\fP 和 \fImedia (image, audio and video)\fP 格式。这确实需要安装帮助程序。
.PP
过滤器也可以递归地应用以动态地提取和显示档案中的文件。这适用于深度 6，其中应用减压算法算作一个单独的级别。
.PP
如果文件实用程序报告的文本编码与最终中使用的编码不同，则文本将使用 \fIiconv\fP 转换为默认编码。这确实假设 \fIfile\fP
命令获得了正确的文件编码，这在某些情况下可能是错误的。文件名的，追加，冒号会抑制转换。
.PP
当使用程序 \fBgit\fP、\fBvim\fP 或 \fBmutt\fP 时，可以使用 lesspipe.sh 使它们能够读取非文本文件。这在
\fIhttps://github.com/wofr06/lesspipe/wiki\fP 的 Wiki 中有描述。
.SH "FILTER ACTIVATION"
如果正确设置了环境变量 \fBLESSOPEN\fP，则从 \fBless\fP 调用过滤器。对于像 shells (\fIbash, zsh\fP) 这样的 ksh
命令
.RS
\fILESSOPEN="|lesspipe.sh %s"; export LESSOPEN\fP
.RE
确实以更少的价格激活过滤器。如果 \fBlesspipe.sh\fP 不在搜索路径中，则使用完全限定路径。设置 \fBLESSOPEN\fP
的命令也可以通过不带参数调用 \fBlesspipe.sh\fP 来显示。 这甚至可以用于直接设置 \fBLESSOPEN\fP:
.RS
\fIeval `lesspipe.sh`\fP (bash) 或
.RE
.RS
\fIlesspipe.sh|source /dev/stdin\fP (zsh)
.RE
如上所述设置环境变量后，\fBless\fP 将显示各种文件格式的文本信息。
.PP
如果输入通过管道传输到 less 中，通常不会调用过滤器
.RS
\fIcat somefile | less\fP
.RE
正如 less 的手册页中所述，管道中的过滤可以通过使用字符 \fI|\-\fP 启动 \fBLESSOPEN\fP 来强制执行。
.PP
\fBLESSOPEN\fP 以两个字符 \fI||\fP 开头，用于处理空文件和命令错误，仅部分实现，通常在 \fBlesspipe.sh\fP
内的命令失败时显示错误消息。
.PP
现在已过时的变量 \fBLESS_ADVANCED_PREPROCESSOR\fP 用于决定 \fIhtml\fP、\fIxml\fP 和 \fIperl pod\fP
是否应显示为纯文本。这已经改变，现在总是解释这些格式，除非在文件名后，追加，冒号。如果后面是正确的文件类型
(\fIhtml\fP、\fIxml\fP、\fIpod\fP)，则输出可以着色 (见下文)。
.PP
.RS
示例: \fIless index.html:html\fP
.RE
.PP
要抑制过滤器输出第一行中的非正式消息，可以将 ENV 变量 \fBLESSQUIET\fP 设置为非空值。
.PP
要暂时脱离过滤器，可以在文件名后，追加，一个冒号。 如果文件名包含冒号，则应使用等号代替。
.SH "OUTPUT COLORIZATION"
该过滤器能够对多种文件类型进行语法高亮显示。如果已安装，\fIbat\fP/\fIbatcat\fP 用于为输出着色。如果不是，则依次尝试
\fIpygmentize\fP、\fIsource\-highlight\fP、\fIcode2color\fP、\fIvimcolor\fP。 对于
bat/batcat，主题设置为 \fIansi\fP，样式设置为 \fIplain\fP，这更接近 \fBless\fP 的未过滤输出。 这些设置可以在
\fI~/.config/bat/config\fP 中或通过环境变量 \fBBAT_STYLE\fP 和 \fBBAT_THEME\fP 进行更改。
.PP
在着色器中，可以通过将 ENV 变量 \fBLESSCOLORIZER\fP 设置为着色器的名称来强制首选着色器进行着色。对于 \fIpygmentize\fP 和
\fIbat\fP/\fIbatcat\fP，允许如下限制选项设置:
.RS
\fILESSCOLORIZER='pygmentize \-O style=foo'\fP
.RE
.RS
\fILESSCOLORIZER='bat \-\-style=foo \-\-theme=bar'\fP
.RE
如果环境变量 \fBLESS\fP 存在并且包含选项 \fI\-R\fP 或更少，则激活语法突出显示。这保证了转义序列被转换成颜色并且不会混淆显示。不推荐使用选项
\fI\-r\fP，因为如果输出中有长行，屏幕布局可能有误。
.PP
如果输出是彩色的，可以通过在文件名后，追加，一个冒号来关闭语法突出显示。如果为语法突出显示选择了错误的语言，则可以通过在文件名后，追加，冒号和后缀来强制使用另一种语言。
.PP
在管道中不能使用该方法。作为解决方法，可以添加最后一个参数，由 \fBlesspipe.sh\fP 检查。 单个冒号 (脱离过滤器) 或 :extension
(强制语言) 是可能的，例如
.RS
\fIcommand that generates c code | less \- :c\fP
.RE
.PP
当满足语法突出显示的条件时，目录列表和 tar 文件内容列表也会被着色。
.PP
由于 \fBless\fP 在其他程序中用作默认浏览器，因此着色器的选择会影响这些程序的输出。 对于 \fIman\fP、\fIgit\fP 和
\fIperldoc\fP)，lesspipe.sh 不进行过滤。
.SH "WATCHING GROWING FILES"
一旦 \fBlesspipe.sh\fP 调用一个程序来转换输入，就失去了观察不断增长的文件的能力 (在 less 中使用 F 命令)。这通常需要像
syslog 这样的日志文件。要暂时脱离 \fBlesspipe.sh\fP，需要添加冒号作为 \fBless\fP 的最后一个参数，例如
.RS
\fIless /var/log/syslog :\fP
.RE
或 \fBless\fP 可以用 + F 参数调用，相当于传呼机中的 F :
.RS
\fIless +F /var/log/syslog\fP
.RE
在文件名后，追加，一个冒号是行不通的，因为必须使用过滤器至少删除该冒号并对原始文件使用 cat。 另一方面，非增长日志文件可以使用 \fBccze\fP
着色。 如果不是以 \fI.log\fP 结尾，则很难将其识别为日志文件，但可以强制将 \fB:.log\fP 追加到文件名，例如
.RS
\fIless /var/log/syslog:.log\fP
.RE
.SH "ADVANCED USAGE"
此版本的 \fBlesspipe.sh\fP 允许您查看文件存档中包含的单个文件，文件存档本身甚至可能包含在另一个存档中。
.PP
在多文件档案中查看文件的表示法是
.RS
\fBless\fP \fIarchive_file\fP:\fIcontained_file\fP
.RE
甚至
.RS
\fBless\fP \fIsuper_archive\fP:\fIarchive_file\fP:\fIcontained_file\fP
.RE
要以链原始格式显示最后一个文件，必须在文件名后，追加，一个冒号 (\fI:\fP)。如果确实包含冒号，则必须使用备用分隔符等号 (\fI=\fP)。
.PP
同样，如果在输出管道中调用 \fBless\fP 并且 \fBLESSOPEN\fP 以 \fB|\-\fP
字符开头，则这种提取和显示文件的方法不起作用。对于语法高亮，解决方案是使用第二个以冒号开头的参数。那么上面的命令将被写成
.RS
\fBcat \fP\fIsuper_archive\fP\fB | less \- :\fP\fIarchive\fP\fB:\fP\fIcontained_file\fP
.RE
.PP
.SH "COMPLETING MECHANISM FOR ARCHIVE CONTENTS"
使用提供的 \fIlesscomplete\fP (对于 \fBzsh\fP 和 \fBbash\fP)，\fI_less\fP (对于 \fBzsh\fP) 和
\fIless_completion\fP (对于 \fBbash\fP) 文件，可以完成档案中文件的制表符完成。 在存档文件名后输入冒号 (:) 或等号
(=)，然后按 Tab 键触发补全机制。 这也适用于链式档案。文件 \fIlesscomplete\fP 和 \fIless_completion\fP 必须位于
\fB$PATH\fP 中列出的目录之一中，\fBzsh\fP 的函数 \fI_less\fP 必须位于 \fI$fpath\fP 列出的目录中。less_completion
脚本必须在 bash 初始化脚本中获取，例如在 \fI~/.bashrc\fP 中。可以使用命令添加新目录，例如 \fI~/scripts\fP 和
\fI~/.fpath\fP
.RS
\fBPATH\fP=\fI~/scripts:$PATH\fP 和 \fBfpath\fP=\fI(~/.fpath $fpath)\fP
.RE
.SH "USER DEFINED FILTERING"
lesspipe.sh 过滤可以由用户定义的程序替换或增强。这样的程序必须被称为 \fB.lessfilter\fP (并放在用户主目录中) 或
\fBlessfilter\fP (并且可以从 \fB$PATH\fP) 中提到的目录访问。 如果过滤是在该脚本中完成的，它必须是可执行的并且必须以退出代码 0
结束。否则，非零退出代码意味着过滤留给 lesspipe.sh。
.PP
此机制可用于为新格式添加过滤或例如禁止对某些文件类型的过滤。
.SH AUTHOR
沃尔夫冈・弗里贝尔
.SH "REPORTING BUGS"
向 <wp.friebel AT gmail DOT com> 报告错误。
.SH COPYRIGHT
Copyright \(co 2005\-2023 Wolfgang Friebel
.br
This is free software;  see the source for copying conditions.   There is NO
warranty;  not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE.
.SH "SEE ALSO"
less(1)
.PP
\fBlesspipe.sh\fP 的说明也包含在源代码包中的 README 文件中
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
