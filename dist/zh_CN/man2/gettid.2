.\" -*- coding: UTF-8 -*-
.\" Copyright 2003 Abhijit Menon-Sen <ams@wiw.org>
.\" and Copyright (C) 2008 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" SPDX-License-Identifier: Linux-man-pages-copyleft
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH gettid 2 2022\-12\-04 "Linux man\-pages 6.03" 
.SH NAME
gettid \- 获取线程标识
.SH LIBRARY
标准 C 库 (\fIlibc\fP、\fI\-lc\fP)
.SH SYNOPSIS
.nf
\fB#define _GNU_SOURCE\fP
\fB#include <unistd.h>\fP
.PP
\fBpid_t gettid(void);\fP
.fi
.SH DESCRIPTION
\fBgettid\fP() 返回调用者的线程 ID (TID)。 在单线程进程中，线程 ID 等于进程 ID (PID，由 \fBgetpid\fP(2)).
在多线程进程中，所有线程都有相同的 PID，但每个线程都有唯一的 TID。 有关详细信息，请参见 \fBclone\fP(2) 中对
\fBCLONE_THREAD\fP 的讨论。
.SH "RETURN VALUE"
成功时，返回调用线程的线程 ID。
.SH ERRORS
这个调用总是成功的。
.SH VERSIONS
\fBgettid\fP() 系统调用最早出现在 Linux 2.4.11。 glibc 2.30 中添加了库支持。 (早期的 glibc
版本没有为这个系统提供包装器调用，需要使用 \fBsyscall\fP(2).)
.SH STANDARDS
\fBgettid\fP() 是特定于 Linux 的，不应在旨在可移植的程序中使用。
.SH NOTES
此调用返回的线程 ID 与 POSIX 线程 ID (即 \fBpthread_self\fP(3)) 返回的不透明值) 不同。
.PP
在一个没有指定 \fBCLONE_THREAD\fP 标志的 \fBclone\fP(2) 调用创建的新线程组中 (或者，等价地，\fBfork\fP(2))
创建的一个新进程，新进程是一个线程组组长，它的线程组 ID (\fBgetpid\fP(2)) 返回的值为与其线程 ID (\fBgettid\fP()).
.SH "SEE ALSO"
.\" .BR kcmp (2),
.\" .BR move_pages (2),
.\" .BR migrate_pages (2),
.\" .BR process_vm_readv (2),
.\" .BR ptrace (2),
\fBcapget\fP(2), \fBclone\fP(2), \fBfcntl\fP(2), \fBfork\fP(2), \fBget_robust_list\fP(2),
\fBgetpid\fP(2), \fBioprio_set\fP(2), \fBperf_event_open\fP(2),
\fBsched_setaffinity\fP(2), \fBsched_setparam\fP(2), \fBsched_setscheduler\fP(2),
\fBtgkill\fP(2), \fBtimer_create\fP(2)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
