.\" -*- coding: UTF-8 -*-
.\" Copyright (c) 1993 Luigi P. Bai (lpb@softint.com) July 28, 1993
.\"
.\" SPDX-License-Identifier: Linux-man-pages-copyleft
.\"
.\" Modified Wed Jul 28 10:57:35 1993, Rik Faith <faith@cs.unc.edu>
.\" Modified Sun Nov 28 16:43:30 1993, Rik Faith <faith@cs.unc.edu>
.\"          with material from Giorgio Ciucci <giorgio@crcc.it>
.\" Portions Copyright 1993 Giorgio Ciucci <giorgio@crcc.it>
.\" Modified Tue Oct 22 22:03:17 1996 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified, 8 Jan 2003, Michael Kerrisk, <mtk.manpages@gmail.com>
.\"	Removed EIDRM from errors - that can't happen...
.\" Modified, 27 May 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"     Added notes on capability requirements
.\" Modified, 11 Nov 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Language and formatting clean-ups
.\"	Added notes on /proc files
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH shmget 2 2023\-02\-10 "Linux man\-pages 6.03" 
.SH NAME
shmget \- 分配一个 System V 共享内存段
.SH LIBRARY
标准 C 库 (\fIlibc\fP、\fI\-lc\fP)
.SH SYNOPSIS
.nf
\fB#include <sys/shm.h>\fP
.PP
\fBint shmget(key_t \fP\fIkey\fP\fB, size_t \fP\fIsize\fP\fB, int \fP\fIshmflg\fP\fB);\fP
.fi
.SH DESCRIPTION
\fBshmget\fP() 返回与参数 \fIkey\fP 的值关联的 System\V 共享内存段的标识符。 它可用于获取先前创建的共享内存段的标识符 (当
\fIshmflg\fP 为零且 \fIkey\fP 不具有值 \fBIPC_PRIVATE\fP) 时)，或用于创建一个新集合。
.PP
如果 \fIkey\fP 的值为 \fBIPC_PRIVATE\fP 或 \fIkey\fP 不是 \fBIPC_PRIVATE\fP，则创建一个新的共享内存段，其大小等于
\fIsize\fP 的值四舍五入为 \fBPAGE_SIZE\fP 的倍数，或者 \fIkey\fP 不是 \fBIPC_PRIVATE\fP，不存在对应于 \fIkey\fP
的共享内存段，并且指定 \fBIPC_CREAT\fP 在 \fIshmflg\fP 中。
.PP
如果 \fIshmflg\fP 同时指定 \fBIPC_CREAT\fP 和 \fBIPC_EXCL\fP，并且 \fIkey\fP 的共享内存段已经存在，则
\fBshmget\fP() 失败，\fIerrno\fP 设置为 \fBEEXIST\fP。 (这类似于组合 \fBO_CREAT | O_EXCL\fP 对
\fBopen\fP(2).) 的影响
.PP
值 \fIshmflg\fP 由以下部分组成:
.TP 
\fBIPC_CREAT\fP
创建一个新的细分市场。 如果不使用此标志，则 \fBshmget\fP() 将查找与 \fIkey\fP 关联的段并检查用户是否有权访问该段。
.TP 
\fBIPC_EXCL\fP
此标志与 \fBIPC_CREAT\fP 一起使用以确保此调用创建段。 如果该段已存在，则调用失败。
.TP 
\fBSHM_HUGETLB\fP (since Linux 2.6)
使用 "huge" 页分配段。 有关详细信息，请参见 Linux 内核源文件
\fIDocumentation/admin\-guide/mm/hugetlbpage.rst\fP。
.TP 
\fBSHM_HUGE_2MB\fP, \fBSHM_HUGE_1GB\fP (since Linux 3.8)
.\" See https://lwn.net/Articles/533499/
与 \fBSHM_HUGETLB\fP 结合使用以在支持多个 hugetlb 页面大小的系统上选择替代 hugetlb 页面大小 (分别为 2\MB 和
1\GB)。
.IP
更一般地，可以通过在偏移量 \fBSHM_HUGE_SHIFT\fP 处的六位中编码所需页面大小的 base\-2 对数来配置所需的大页面大小。
因此，上述两个常量定义为:
.IP
.in +4n
.EX
#define SHM_HUGE_2MB    (21 << SHM_HUGE_SHIFT)
#define SHM_HUGE_1GB    (30 << SHM_HUGE_SHIFT)
.EE
.in
.IP
有关其他详细信息，请参见 \fBmmap\fP(2) 中对名称相似的常量的讨论。
.TP 
\fBSHM_NORESERVE\fP (since Linux 2.6.15)
.\" As at 2.6.17-rc2, this flag has no effect if SHM_HUGETLB was also
.\" specified.
该标志与 \fBmmap\fP(2) \fBMAP_NORESERVE\fP 标志的用途相同。 不要为该段保留交换空间。 当保留交换空间时，可以保证可以修改该段。
当没有保留交换空间时，如果没有可用的物理内存，则在写入时可能会得到 \fBSIGSEGV\fP。 另请参见 \fBproc\fP(5) 中对文件
\fI/proc/sys/vm/overcommit_memory\fP 的讨论。
.PP
除了上述标志外，\fIshmflg\fP 的低 9 位指定授予所有者、组和其他人的权限。 这些位与 \fBopen\fP(2) 的 \fImode\fP
参数具有相同的格式和相同的含义。 目前，系统不使用执行权限。
.PP
当一个新的共享内存段被创建时，它的内容被初始化为零值，它的关联数据结构体，\fIshmid_ds\fP (见 \fBshmctl\fP(2))，初始化如下:
.IP \[bu] 3
\fIshm_perm.cuid\fP 和 \fIshm_perm.uid\fP 设置为调用进程的有效用户 ID。
.IP \[bu]
\fIshm_perm.cgid\fP 和 \fIshm_perm.gid\fP 设置为调用进程的有效组 ID。
.IP \[bu]
\fIshm_perm.mode\fP 的低 9 位设置为 \fIshmflg\fP 的低 9 位。
.IP \[bu]
\fIshm_segsz\fP 设置为 \fIsize\fP 的值。
.IP \[bu]
\fIshm_lpid\fP、\fIshm_nattch\fP、\fIshm_atime\fP 和 \fIshm_dtime\fP 设置为 0.
.IP \[bu]
\fIshm_ctime\fP 设置为当前时间。
.PP
如果共享内存段已经存在，则验证权限，并检查它是否被标记为销毁。
.SH "RETURN VALUE"
成功时，返回一个有效的共享内存标识符。 出错时返回 \-1，并设置 \fIerrno\fP 以指示错误。
.SH ERRORS
.TP 
\fBEACCES\fP
用户没有访问共享内存段的权限，并且在管理其 IPC 命名空间的用户命名空间中不具有 \fBCAP_IPC_OWNER\fP 能力。
.TP 
\fBEEXIST\fP
在 \fIshmflg\fP 中指定了 \fBIPC_CREAT\fP 和 \fBIPC_EXCL\fP，但 \fIkey\fP 的共享内存段已经存在。
.TP 
\fBEINVAL\fP
要创建一个新段并且 \fIsize\fP 小于 \fBSHMMIN\fP 或大于 \fBSHMMAX\fP。
.TP 
\fBEINVAL\fP
存在给定 \fIkey\fP 的段，但 \fIsize\fP 大于该段的大小。
.TP 
\fBENFILE\fP
.\" [2.6.7] shmem_zero_setup()-->shmem_file_setup()-->get_empty_filp()
已达到系统范围内打开文件总数的限制。
.TP 
\fBENOENT\fP
给定的 \fIkey\fP 不存在段，并且未指定 \fBIPC_CREAT\fP。
.TP 
\fBENOMEM\fP
无法为段开销分配内存。
.TP 
\fBENOSPC\fP
所有可能的共享内存 ID 都已被占用 (\fBSHMMNI\fP)，或者分配请求的 \fIsize\fP 的一段会导致系统超出共享内存 (\fBSHMALL\fP)
的系统范围限制。
.TP 
\fBEPERM\fP
指定了 \fBSHM_HUGETLB\fP 标志，但调用者没有特权 (没有 \fBCAP_IPC_LOCK\fP 能力) 并且不是
\fIsysctl_hugetlb_shm_group\fP 组的成员; 请参见 \fBproc\fP(5) 中
\fI/proc/sys/vm/sysctl_hugetlb_shm_group\fP 的说明。
.SH STANDARDS
.\" SVr4 documents an additional error condition EEXIST.
POSIX.1\-2001, POSIX.1\-2008, SVr4.
.PP
\fBSHM_HUGETLB\fP 和 \fBSHM_NORESERVE\fP 是 Linux 扩展。
.SH NOTES
.\"
\fBIPC_PRIVATE\fP 不是标志字段，而是 \fIkey_t\fP 类型。 如果这个特殊值用于 \fIkey\fP，系统调用忽略 \fIshmflg\fP
除了最低有效的 9 位之外的所有位，并创建一个新的共享内存段。
.SS "Shared memory limits"
以下对共享内存段资源的限制会影响 \fBshmget\fP() 调用:
.TP 
\fBSHMALL\fP
系统范围内对共享内存总量的限制，以系统页面大小为单位进行测量。
.IP
.\" commit 060028bac94bf60a65415d1d55a359c3a17d5c31
在 Linux 上，可以通过 \fI/proc/sys/kernel/shmall\fP 读取和修改此限制。 自 Linux 3.16 起，此限制的默认值为:
.IP
.in +4n
.EX
ULONG_MAX \- 2\[ha]24
.EE
.in
.IP
该值 (适用于 32 位和 64 位系统) 的作用是不对分配施加任何限制。 选择此值而不是 \fBULONG_MAX\fP
作为默认值是为了防止历史应用程序在不首先检查其当前值的情况下简单地提高现有限制的情况。 如果将限制设置为
\fBULONG_MAX\fP，此类应用程序将导致值溢出。
.IP
从 Linux 2.4 到 Linux 3.15，此限制的默认值为:
.IP
.in +4n
.EX
SHMMAX / PAGE_SIZE * (SHMMNI / 16)
.EE
.in
.IP
如果未修改 \fBSHMMAX\fP 和 \fBSHMMNI\fP，则将此公式的结果乘以页面大小 (以获得以字节为单位的值) 得出 8\GB
的值作为所有共享内存段使用的总内存的限制。
.TP 
\fBSHMMAX\fP
共享内存段的最大字节数。
.IP
.\" commit 060028bac94bf60a65415d1d55a359c3a17d5c31
在 Linux 上，可以通过 \fI/proc/sys/kernel/shmmax\fP 读取和修改此限制。 自 Linux 3.16 起，此限制的默认值为:
.IP
.in +4n
.EX
ULONG_MAX \- 2\[ha]24
.EE
.in
.IP
该值 (适用于 32 位和 64 位系统) 的作用是不对分配施加任何限制。 请参见 \fBSHMALL\fP 的描述，了解为什么使用此默认值 (而不是
\fBULONG_MAX\fP)) 的讨论。
.IP
从 Linux 2.2 到 Linux 3.15，此限制的默认值为 0x2000000 (32\MiB)。
.IP
因为 map 只是共享内存段的一部分是不可能的，虚拟内存的数量对可用段的最大大小设置了另一个限制: 例如，在 i386 上，可以映射的最大段的大小约为
2.8\GB，而在 x86\-64 上，限制约为 127 TB。
.TP 
\fBSHMMIN\fP
共享内存段的最小大小 (以字节为单位) : 取决于实现 (目前为 1 字节，但 \fBPAGE_SIZE\fP 是有效的最小大小)。
.TP 
\fBSHMMNI\fP
共享内存段数量的系统范围限制。 在 Linux 2.2 中，此限制的默认值为 128; 从 Linux 2.4 开始，默认值为 4096。
.IP
.\" Kernels between Linux 2.4.x and Linux 2.6.8 had an off-by-one error
.\" that meant that we could create one more segment than SHMMNI -- MTK
.\" This /proc file is not available in Linux 2.2 and earlier -- MTK
在 Linux 上，可以通过 \fI/proc/sys/kernel/shmmni\fP 读取和修改此限制。
.PP
该实现对每个进程的最大共享内存段数 (\fBSHMSEG\fP) 没有具体限制。
.SS "Linux notes"
在 Linux 2.3.30 之前，Linux 将在计划删除的共享内存段上为 \fBshmget\fP() 返回 \fBEIDRM\fP。
.SH BUGS
名字选择 \fBIPC_PRIVATE\fP 可能是不幸的，\fBIPC_NEW\fP 会更清楚地显示它的函数。
.SH EXAMPLES
请参见 \fBshmop\fP(2)。
.SH "SEE ALSO"
\fBmemfd_create\fP(2), \fBshmat\fP(2), \fBshmctl\fP(2), \fBshmdt\fP(2), \fBftok\fP(3),
\fBcapabilities\fP(7), \fBshm_overview\fP(7), \fBsysvipc\fP(7)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
