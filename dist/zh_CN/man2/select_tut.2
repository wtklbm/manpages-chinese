.\" -*- coding: UTF-8 -*-
.\" This manpage is copyright (C) 2001 Paul Sheer.
.\"
.\" SPDX-License-Identifier: Linux-man-pages-copyleft
.\"
.\" very minor changes, aeb
.\"
.\" Modified 5 June 2002, Michael Kerrisk <mtk.manpages@gmail.com>
.\" 2006-05-13, mtk, removed much material that is redundant with select.2
.\"             various other changes
.\" 2008-01-26, mtk, substantial changes and rewrites
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH SELECT_TUT 2 2023\-02\-05 "Linux man\-pages 6.03" 
.SH NAME
选择、pselect \- 同步 I/O 多路复用
.SH LIBRARY
标准 C 库 (\fIlibc\fP、\fI\-lc\fP)
.SH SYNOPSIS
请参见 \fBselect\fP(2)
.SH DESCRIPTION
\fBselect\fP() 和 \fBpselect\fP() 系统调用用于有效地监视多个文件描述符，以查看它们中的任何一个是否是或成为 "ready";
也就是说，查看 I/O 是否变为可能，或者 "exceptional condition" 是否已出现在任何文件描述符上。
.PP
.\"
此页面提供有关使用这些系统调用的背景和教程信息。 \fBselect\fP() 和 \fBpselect\fP() 的参数和语义详见 \fBselect\fP(2)。
.SS "Combining signal and data events"
如果您正在等待信号以及文件 descriptor(s) 为 I/O 做好准备，则 \fBpselect\fP() 很有用。
接收信号的程序通常只使用信号处理程序来引发全局标志。 全局标志将指示事件必须在程序的主循环中处理。 一个信号将导致 \fBselect\fP() (或
\fBpselect\fP()) 调用) 返回，\fIerrno\fP 设置为 \fBEINTR\fP。 这种行为是必不可少的，以便可以在程序的主循环中处理信号，否则
\fBselect\fP() 将无限期阻塞。
.PP
现在，主循环中的某处将有条件地检查全局标志。 所以我们必须问: 如果信号在条件语句之后但在 \fBselect\fP() 调用之前到达怎么办? 答案是
\fBselect\fP() 会无限期地阻塞，即使一个事件实际上是挂起的。 本竞技条件由 \fBpselect\fP() 调用解决。
该调用可用于将信号掩码设置为仅在 \fBpselect\fP() 调用内接收的一组信号。 例如，假设所讨论的事件是子进程的退出。 在主循环开始之前，我们将使用
\fBsigprocmask\fP(2) 阻塞 \fBSIGCHLD\fP。 我们的 \fBpselect\fP() 调用将通过使用空信号掩码启用 \fBSIGCHLD\fP。
我们的程序看起来像:
.PP
.EX
static volatile sig_atomic_t got_SIGCHLD = 0;

static void
child_sig_handler(int sig)
{
    got_SIGCHLD = 1;
}

int
main(int argc, char *argv[])
{
    sigset_t sigmask, empty_mask;
    struct sigaction sa;
    fd_set readfds, writefds, exceptfds;
    int r;

    sigemptyset(&sigmask);
    sigaddset(&sigmask, SIGCHLD);
    if (sigprocmask(SIG_BLOCK, &sigmask, NULL) == \-1) {
        perror("sigprocmask");
        exit(EXIT_FAILURE);
    }

    sa.sa_flags = 0;
    sa.sa_handler = child_sig_handler;
    sigemptyset(&sa.sa_mask);
    if (sigaction(SIGCHLD, &sa, NULL) == \-1) {
        perror("sigaction");
        exit(EXIT_FAILURE);
    }

    sigemptyset(&empty_mask);

    for (;;) {          /* main loop */
        /* 初始化 readfds、writefds 和 exceptfds
           pselect() 调用前。(省略代码。) */

        r = pselect(nfds, &readfds, &writefds, &exceptfds,
                    空，&empty_mask) ;
        if (r == \-1 && errno != EINTR) {
            /* Handle error */
        }

        if (got_SIGCHLD) {
            got_SIGCHLD = 0;

            /* 在这里处理信号事件; 例如，wait() 代表所有
               被终止的子节点。(省略代码。) */
        }

        /* main body of program */
    }
}
.EE
.SS Practical
那么 \fBselect\fP() 有什么意义呢? 我不能随时读写我的文件描述符吗? \fBselect\fP()
的要点在于它同时监视多个描述符并在没有活动时适当地让进程进入睡眠状态。 UNIX 程序员经常发现他们必须处理来自多个文件描述符的
I/O，其中数据流可能是间歇性的。 如果您只是创建一系列 \fBread\fP(2) 和 \fBwrite\fP(2) 调用，您会发现其中一个调用可能会阻塞等待数据
from/to 文件描述符，而另一个文件描述符虽然已为 I/O 准备就绪但未使用。 \fBselect\fP() 有效地应对了这种情况。
.SS "Select law"
许多尝试使用 \fBselect\fP() 的人都会遇到难以理解的行为，并会产生不可移植或临界结果。
例如，上面的程序被小心地编写成在任何时候都不会阻塞，即使它没有将其文件描述符设置为非阻塞模式。 很容易引入细微的错误，从而消除使用
\fBselect\fP() 的优势，因此这里列出了使用 \fBselect\fP() 时需要注意的要点。
.TP  4
1.
您应该始终尝试在没有超时的情况下使用 \fBselect\fP()。 如果没有可用数据，您的程序应该无事可做。 依赖超时的代码通常不可移植且难以调试。
.TP 
2.
如上所述，必须正确计算 \fInfds\fP 值以提高效率。
.TP 
3.
如果您不打算在 \fBselect\fP() 调用之后检查其结果并做出适当响应，则不得向任何集合添加文件描述符。 见下一条。
.TP 
4.
\fBselect\fP() 返回后，应检查所有集合中的所有文件描述符，看它们是否准备就绪。
.TP 
5.
函数 \fBread\fP(2)、\fBrecv\fP(2)、\fBwrite\fP(2) 和 \fBsend\fP(2) 做 \fInot\fP 必然 read/write
您请求的全部数据量。 如果他们全部执行 read/write，那是因为您的流量负载低且流速度快。 情况并非总是如此。
您应该处理您的任数只发送或接收一个字节的情况。
.TP 
6.
永远不要 read/write 一次只有一个字节，除非您真的确定您有少量数据要处理。 每次都尽可能多地缓冲 read/write 是非常低效的。
下面示例中的缓冲区是 1024 字节，尽管它们可以很容易地变大。
.TP 
7.
.\" Nonetheless, you should still cope with these errors for completeness.
对 \fBread\fP(2)、\fBrecv\fP(2)、\fBwrite\fP(2)、\fBsend\fP(2) 和 \fBselect\fP() 的调用可能会失败并显示错误
\fBEINTR\fP，而对 \fBread\fP(2)、\fBrecv\fP(2)、\fBwrite\fP(2) 和 \fBsend\fP(2) 的调用可能会失败并将
\fIerrno\fP 设置为 \fBEAGAIN\fP (\fBEWOULDBLOCK\fP)。 这些结果必须得到妥善管理 (上面没有妥善处理)。
如果您的程序不打算接收任何信号，那么您不太可能获得 \fBEINTR\fP。 如果您的程序没有设置非阻塞 I/O，您将得不到 \fBEAGAIN\fP。
.TP 
8.
永远不要调用缓冲区长度为零的 \fBread\fP(2)、\fBrecv\fP(2)、\fBwrite\fP(2) 或 \fBsend\fP(2)。
.TP 
9.
如果函数 \fBread\fP(2)、\fBrecv\fP(2)、\fBwrite\fP(2) 和 \fBsend\fP(2) 因 \fB7.\fP
中列出的错误以外的错误而失败，或者输入函数之一返回 0，表示文件结束，那么您应该 \fInot\fP 再次将该文件描述符传递给 \fBselect\fP()。
在下面的示例中，我立即关闭文件描述符，然后将其设置为 \-1 以防止它被包含在一个集合中。
.TP 
10.
由于某些操作系统会修改结构体，因此必须使用每个新调用 \fBselect\fP() 来初始化超时值。 然而，\fBpselect\fP() 不会修改其超时结构体。
.TP 
11.
.\" "I have heard" does not fill me with confidence, and doesn't
.\" belong in a man page, so I've commented this point out.
.\" .TP
.\" 11.
.\" I have heard that the Windows socket layer does not cope with OOB data
.\" properly.
.\" It also does not cope with
.\" .BR select ()
.\" calls when no file descriptors are set at all.
.\" Having no file descriptors set is a useful
.\" way to sleep the process with subsecond precision by using the timeout.
.\" (See further on.)
由于 \fBselect\fP() 修改了它的文件描述符集，如果在循环中使用调用，则必须在每次调用之前重新初始化这些集。
.SH "RETURN VALUE"
请参见 \fBselect\fP(2)。
.SH NOTES
一般来说，所有支持套接字的操作系统也都支持 \fBselect\fP()。 \fBselect\fP()
可用于以一种可移植且高效的方式解决许多问题，而天真的程序员试图以更复杂的方式使用线程、分叉、IPC、信号、内存共享等来解决这些问题。
.PP
\fBpoll\fP(2) 系统调用与 \fBselect\fP() 具有相同的功能，并且在监视稀疏文件描述符集时效率更高。 它现在广泛可用，但历史上不如
\fBselect\fP() 便携。
.PP
特定于 Linux 的 \fBepoll\fP(7) API 提供了一个在监视大量文件描述符时比 \fBselect\fP(2) 和 \fBpoll\fP(2)
更有效的接口。
.SH EXAMPLES
这是一个更好地展示 \fBselect\fP() 真正实用性的示例。 下面的清单是一个 TCP 转发程序，它从一个 TCP 端口转发到另一个。
.PP
.\" SRC BEGIN (select.c)
.EX
#include <arpa/inet.h>
#include <errno.h>
#include <netinet/in.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/select.h>
#include <sys/socket.h>
#include <unistd.h>

static int forward_port;

#undef max
#define max(x, y) ((x) > (y) ? (x) : (y))

static int
listen_socket(int listen_port)
{
    int                 lfd;
    int                 yes;
    struct sockaddr_in  addr;

    lfd = socket(AF_INET, SOCK_STREAM, 0);
    if (lfd == \-1) {
        perror("socket");
        return \-1;
    }

    yes = 1;
    if (setsockopt(lfd, SOL_SOCKET, SO_REUSEADDR,
                   &yes, sizeof(yes)) == \-1)
    {
        perror("setsockopt");
        close(lfd);
        return \-1;
    }

    memset(&addr, 0, sizeof(addr));
    addr.sin_port = htons(listen_port);
    addr.sin_family = AF_INET;
    if (bind(lfd, (struct sockaddr *) &addr, sizeof(addr)) == \-1) {
        perror("bind");
        close(lfd);
        return \-1;
    }

    printf("accepting connections on port %d\en", listen_port);
    listen(lfd, 10);
    return lfd;
}

static int
connect_socket(int connect_port, char *address)
{
    int                 cfd;
    struct sockaddr_in  addr;

    cfd = socket(AF_INET, SOCK_STREAM, 0);
    if (cfd == \-1) {
        perror("socket");
        return \-1;
    }

    memset(&addr, 0, sizeof(addr));
    addr.sin_port = htons(connect_port);
    addr.sin_family = AF_INET;

    if (!inet_aton(address, (struct in_addr *) &addr.sin_addr.s_addr)) {
        fprintf(stderr, "inet_aton(): bad IP address format\en");
        close(cfd);
        return \-1;
    }

    if (connect(cfd, (struct sockaddr *) &addr, sizeof(addr)) == \-1) {
        perror("connect()");
        shutdown(cfd, SHUT_RDWR);
        close(cfd);
        return \-1;
    }
    return cfd;
}

#define SHUT_FD1 do {                                \e
                     if (fd1 >= 0) {                 \e
                         shutdown(fd1, SHUT_RDWR);   \e
                         close(fd1);                 \e
                         fd1 = \-1;                   \e
                     }                               \e
                 } while (0)

#define SHUT_FD2 do {                                \e
                     if (fd2 >= 0) {                 \e
                         shutdown(fd2, SHUT_RDWR);   \e
                         close(fd2);                 \e
                         fd2 = \-1;                   \e
                     }                               \e
                 } while (0)

#define BUF_SIZE 1024

int
main(int argc, char *argv[])
{
    int      h;
    int      ready, nfds;
    int      fd1 = \-1, fd2 = \-1;
    int      buf1_avail = 0, buf1_written = 0;
    int      buf2_avail = 0, buf2_written = 0;
    char     buf1[BUF_SIZE], buf2[BUF_SIZE];
    fd_set   readfds, writefds, exceptfds;
    ssize_t  nbytes;

    if (argc != 4) {
        fprintf(stderr, "Usage\en\etfwd <listen\-port> "
                "<forward\-to\-port> <forward\-to\-ip\-address>\en");
        exit(EXIT_FAILURE);
    }

    signal(SIGPIPE, SIG_IGN);

    forward_port = atoi(argv[2]);

    h = listen_socket(atoi(argv[1]));
    if (h == \-1)
        exit(EXIT_FAILURE);

    for (;;) {
        nfds = 0;

        FD_ZERO(&readfds);
        FD_ZERO(&writefds);
        FD_ZERO(&exceptfds);
        FD_SET(h, &readfds);
        nfds = max(nfds, h);

        if (fd1 > 0 && buf1_avail < BUF_SIZE)
            FD_SET(fd1, &readfds);
            /* Note: nfds is updated below, when fd1 is added to
               exceptfds.  */
        if (fd2 > 0 && buf2_avail < BUF_SIZE)
            FD_SET(fd2, &readfds);

        if (fd1 > 0 && buf2_avail \- buf2_written > 0)
            FD_SET(fd1, &writefds);
        if (fd2 > 0 && buf1_avail \- buf1_written > 0)
            FD_SET(fd2, &writefds);

        if (fd1 > 0) {
            FD_SET(fd1, &exceptfds);
            nfds = max(nfds, fd1);
        }
        if (fd2 > 0) {
            FD_SET(fd2, &exceptfds);
            nfds = max(nfds, fd2);
        }

        ready = select(nfds + 1, &readfds, &writefds, &exceptfds, NULL);

        if (ready == \-1 && errno == EINTR)
            continue;

        if (ready == \-1) {
            perror("select()");
            exit(EXIT_FAILURE);
        }

        if (FD_ISSET(h, &readfds)) {
            socklen_t addrlen;
            struct sockaddr_in client_addr;
            int fd;

            addrlen = sizeof(client_addr);
            memset(&client_addr, 0, addrlen);
            fd = accept(h, (struct sockaddr *) &client_addr, &addrlen);
            if (fd == \-1) {
                perror("accept()");
            } else  {
                SHUT_FD1;
                SHUT_FD2;
                buf1_avail = buf1_written = 0;
                buf2_avail = buf2_written = 0;
                fd1 = fd;
                fd2 = connect_socket(forward_port, argv[3]);
                if (fd2 == \-1)
                    SHUT_FD1;
                else
                    printf("connect from %s\en",
                           inet_ntoa(client_addr.sin_addr));

                /* Skip any events on the old, closed file
                   descriptors. */

                continue;
            }
        }

        /* NB: read OOB data before normal reads. */

        if (fd1 > 0 && FD_ISSET(fd1, &exceptfds)) {
            char c;

            nbytes = recv(fd1, &c, 1, MSG_OOB);
            if (nbytes < 1)
                SHUT_FD1;
            else
                send(fd2, &c, 1, MSG_OOB);
        }
        if (fd2 > 0 && FD_ISSET(fd2, &exceptfds)) {
            char c;

            nbytes = recv(fd2, &c, 1, MSG_OOB);
            if (nbytes < 1)    
                SHUT_FD2;
            else    
                send(fd1, &c, 1, MSG_OOB);
        }
        if (fd1 > 0 && FD_ISSET(fd1, &readfds)) {
            nbytes = read(fd1, buf1 + buf1_avail,
                          BUF_SIZE \- buf1_avail);
            if (nbytes < 1)
                SHUT_FD1;
            else
                buf1_avail += nbytes;
        }
        if (fd2 > 0 && FD_ISSET(fd2, &readfds)) {
            nbytes = read(fd2, buf2 + buf2_avail,
                          BUF_SIZE \- buf2_avail);
            if (nbytes < 1)
                SHUT_FD2;
            else
                buf2_avail += nbytes;
        }
        if (fd1 > 0 && FD_ISSET(fd1, &writefds) && buf2_avail > 0) {
            nbytes = write(fd1, buf2 + buf2_written,
                           buf2_avail \- buf2_written);
            if (nbytes < 1)
                SHUT_FD1;
            else
                buf2_written += nbytes;
        }
        if (fd2 > 0 && FD_ISSET(fd2, &writefds) && buf1_avail > 0) {
            nbytes = write(fd2, buf1 + buf1_written,
                           buf1_avail \- buf1_written);
            if (nbytes < 1)
                SHUT_FD2;
            else
                buf1_written += nbytes;
        }

        /* Check if write data has caught read data. */

        if (buf1_written == buf1_avail)
            buf1_written = buf1_avail = 0;
        if (buf2_written == buf2_avail)
            buf2_written = buf2_avail = 0;

        /* One side has closed the connection, keep
           writing to the other side until empty. */

        if (fd1 < 0 && buf1_avail \- buf1_written == 0)
            SHUT_FD2;
        if (fd2 < 0 && buf2_avail \- buf2_written == 0)
            SHUT_FD1;
    }
    exit(EXIT_SUCCESS);
}
.EE
.\" SRC END
.PP
上述程序正确转发了大多数类型的 TCP 连接，包括 \fBtelnet\fP 服务器传输的 OOB 信号数据。 它处理同时在两个方向上传输数据的棘手问题。
您可能认为使用 \fBfork\fP(2) 调用并为每个流分配一个线程更有效。 这变得比您想象的更棘手。 另一个想法是使用 \fBfcntl\fP(2) 设置非阻塞
I/O。 这也有它的问题，因为您最终会使用低效的超时。
.PP
该程序一次不处理多个并发连接，尽管它可以很容易地扩展为使用一个缓冲区链表来做到这一点 \[em] 每个连接一个。 目前，新连接导致当前连接被丢弃。
.SH "SEE ALSO"
\fBaccept\fP(2), \fBconnect\fP(2), \fBpoll\fP(2), \fBread\fP(2), \fBrecv\fP(2),
\fBselect\fP(2), \fBsend\fP(2), \fBsigprocmask\fP(2), \fBwrite\fP(2), \fBepoll\fP(7)
.\" .SH AUTHORS
.\" This man page was written by Paul Sheer.
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
