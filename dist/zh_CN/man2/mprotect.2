.\" -*- coding: UTF-8 -*-
.\" Copyright (C) 2007 Michael Kerrisk <mtk.manpages@gmail.com>
.\" and Copyright (C) 1995 Michael Shields <shields@tembel.org>.
.\"
.\" SPDX-License-Identifier: Linux-man-pages-copyleft
.\"
.\" Modified 1996-10-22 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 1997-05-31 by Andries Brouwer <aeb@cwi.nl>
.\" Modified 2003-08-24 by Andries Brouwer <aeb@cwi.nl>
.\" Modified 2004-08-16 by Andi Kleen <ak@muc.de>
.\" 2007-06-02, mtk: Fairly substantial rewrites and additions, and
.\" a much improved example program.
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH mprotect 2 2023\-02\-05 "Linux man\-pages 6.03" 
.SH NAME
mprotect, pkey_mprotect \- 对内存区域设置保护
.SH LIBRARY
标准 C 库 (\fIlibc\fP、\fI\-lc\fP)
.SH SYNOPSIS
.nf
\fB#include <sys/mman.h>\fP
.PP
\fBint mprotect(void \fP\fIaddr\fP\fB[.\fP\fIlen\fP\fB], size_t \fP\fIlen\fP\fB, int \fP\fIprot\fP\fB);\fP
.PP
\fB#define _GNU_SOURCE\fP             /* See feature_test_macros(7) */
\fB#include <sys/mman.h>\fP
.PP
\fBint pkey_mprotect(void \fP\fIaddr\fP\fB[.\fP\fIlen\fP\fB], size_t \fP\fIlen\fP\fB, int \fP\fIprot\fP\fB, int \fP\fIpkey\fP\fB);\fP
.fi
.SH DESCRIPTION
\fBmprotect\fP() 更改调用进程内存页的访问保护，内存页包含区间 [\fIaddr\fP,\ \fIaddr\fP+\fIlen\fP\-1]
中地址范围的任何部分。 \fIaddr\fP 必须与页面边界对齐。
.PP
如果调用进程试图以违反保护的方式访问内存，则内核会为该进程生成一个 \fBSIGSEGV\fP 信号。
.PP
\fIprot\fP 是以下访问标志的组合: \fBPROT_NONE\fP 或以下列表中其他值的按位或:
.TP 
\fBPROT_NONE\fP
根本无法访问内存。
.TP 
\fBPROT_READ\fP
可以读取内存。
.TP 
\fBPROT_WRITE\fP
内存可以修改。
.TP 
\fBPROT_EXEC\fP
内存可以执行。
.TP 
\fBPROT_SEM\fP (since Linux 2.5.7)
内存可用于原子操作。 此标志作为 \fBfutex\fP(2) 实现的一部分引入 (以保证执行 \fBFUTEX_WAIT\fP)
等命令所需的原子操作的能力，但目前未在任何体系结构中使用。
.TP 
\fBPROT_SAO\fP (since Linux 2.6.26)
.\" commit aba46c5027cb59d98052231b36efcbbde9c77a1d
.\" commit ef3d3246a0d06be622867d21af25f997aeeb105f
内存应该有很强的访问顺序。 此特性特定于 PowerPC 架构 (架构规范的版本 2.06 增加了 SAO CPU 特性并且它在 POWER 7 或
PowerPC A2 上可用，例如)。
.PP
此外 (自 Linux 2.6.0 起)，\fIprot\fP 可以设置以下标志之一:
.TP 
.\" mm/mmap.c:
.\"	vm_flags |= calc_vm_prot_bits(prot, pkey) | calc_vm_flag_bits(flags) |
.\"			mm->def_flags | VM_MAYREAD | VM_MAYWRITE | VM_MAYEXEC;
.\" And calc_vm_flag_bits converts only GROWSDOWN/DENYWRITE/LOCKED.
\fBPROT_GROWSUP\fP
.\" The VMA is one that was marked with VM_GROWSUP by the kernel
.\" when the stack was created. Note that (unlike VM_GROWSDOWN),
.\" there is no mmap() flag (analogous to MAP_GROWSDOWN) for
.\" creating a VMA that is marked VM_GROWSUP.
将保护模式应用到向上增长的映射的末尾。 (此类映射是为架构上的栈区域创建的 \[em]，例如，具有向上增长栈的 HP\-PARISC\[em]。)
.TP 
\fBPROT_GROWSDOWN\fP
将保护模式向下应用到向下增长的映射的开头 (应该是栈段或设置了 \fBMAP_GROWSDOWN\fP 标志的映射段)。
.PP
与 \fBmprotect\fP() 一样，\fBpkey_mprotect\fP() 更改了 \fIaddr\fP 和 \fIlen\fP 指定的页面上的保护。
\fIpkey\fP 参数指定保护键 (见 \fBpkeys\fP(7)) 分配给内存。 在传递给 \fBpkey_mprotect\fP() 之前，保护密钥必须分配有
\fBpkey_alloc\fP(2)。 有关使用此系统调用的示例，请参见 \fBpkeys\fP(7)。
.SH "RETURN VALUE"
成功时，\fBmprotect\fP() 和 \fBpkey_mprotect\fP() 返回零。 出错时，这些系统调用返回 \-1，并且设置 \fIerrno\fP
以指示错误。
.SH ERRORS
.TP 
\fBEACCES\fP
无法为内存提供指定的访问权限。 例如，如果您 \fBmmap\fP(2) 一个您具有只读访问权限的文件，则可能会发生这种情况，然后要求
\fBmprotect\fP() 将其标记为 \fBPROT_WRITE\fP。
.TP 
\fBEINVAL\fP
\fIaddr\fP 不是有效指针，或者不是系统页面大小的倍数。
.TP 
\fBEINVAL\fP
(\fBpkey_mprotect\fP()) \fIpkey\fP 没有分配 \fBpkey_alloc\fP(2)
.TP 
\fBEINVAL\fP
\fBPROT_GROWSUP\fP 和 \fBPROT_GROWSDOWN\fP 都在 \fIprot\fP 中指定。
.TP 
\fBEINVAL\fP
\fIprot\fP 中指定的标志无效。
.TP 
\fBEINVAL\fP
(PowerPC 架构) \fIprot\fP 中指定了 \fBPROT_SAO\fP，但 SAO 硬件特性不可用。
.TP 
\fBENOMEM\fP
无法分配内部内核结构。
.TP 
\fBENOMEM\fP
[\fIaddr\fP、\fIaddr\fP+\fIlen\fP\-1] 范围内的地址对于进程的地址空间无效，或者指定一个或多个未映射的页面。 (在 Linux
2.4.19 之前，错误 \fBEFAULT\fP 是针对这些情况错误产生的。)
.TP 
\fBENOMEM\fP
.\" I.e., the number of VMAs would exceed the 64 kB maximum
更改内存区域的保护将导致具有不同属性 (例如，读取与 read/write 保护) 的映射总数超过允许的最大值。 (例如，在当前保护为
\fBPROT_READ|PROT_WRITE\fP 的区域中间保护范围 \fBPROT_READ\fP 将导致三个映射: 两端各有两个 read/write
映射，中间有一个只读映射。)
.SH VERSIONS
\fBpkey_mprotect\fP() 最早出现在 Linux 4.9; glibc 2.27 中添加了库支持。
.SH STANDARDS
.\" SVr4 defines an additional error
.\" code EAGAIN. The SVr4 error conditions don't map neatly onto Linux's.
\fBmprotect\fP(): POSIX.1\-2001, POSIX.1\-2008, SVr4.  POSIX 表示如果将 \fBmprotect\fP()
应用于不是通过 \fBmmap\fP(2) 获得的内存区域，则 \fBmprotect\fP() 的行为是未指定的。
.PP
\fBpkey_mprotect\fP() 是不可移植的 Linux 扩展。
.SH NOTES
在 Linux 上，始终允许在进程地址空间 (内核 vsyscall 区域除外) 中的任何地址上调用 \fBmprotect\fP()。
特别是，它可用于将现有代码映射更改为可写。
.PP
\fBPROT_EXEC\fP 是否有任何不同于 \fBPROT_READ\fP 的效果取决于处理器架构、内核版本和进程状态。 如果在进程的个性标志中设置了
\fBREAD_IMPLIES_EXEC\fP (请参见 \fBpersonality\fP(2))，指定 \fBPROT_READ\fP 将隐式添加
\fBPROT_EXEC\fP。
.PP
在某些硬件架构 (例如 i386) 上，\fBPROT_WRITE\fP 表示 \fBPROT_READ\fP。
.PP
POSIX.1 表示一个实现可能允许除 \fIprot\fP 中指定的访问之外的访问，但至少只有在设置了 \fBPROT_WRITE\fP
的情况下才能允许写访问，如果设置了 \fBPROT_NONE\fP 则不得允许任何访问。
.PP
混合使用 \fBmprotect\fP() 和 \fBpkey_mprotect\fP() 时，应用程序应小心。 在 x86 上，当 \fBmprotect\fP() 与
\fIprot\fP 设置为 \fBPROT_EXEC\fP 一起使用时，内核可能会在内存中隐式分配和设置 pkey，但前提是 pkey 之前为 0。
.PP
在硬件不支持保护密钥的系统上，\fBpkey_mprotect\fP() 仍然可以使用，但 \fIpkey\fP 必须设置为 \-1。
这样调用时，\fBpkey_mprotect\fP() 的操作等同于 \fBmprotect\fP()。
.SH EXAMPLES
.\" sigaction.2 refers to this example
下面的程序演示了 \fBmprotect\fP() 的使用。 该程序分配了四页内存，将其中的第三页设置为只读，然后执行一个向上遍历分配区域修改字节的循环。
.PP
运行该程序时我们可能会看到的示例如下:
.PP
.in +4n
.EX
$\fB ./a.out\fP
区域开始: 0x804c000
在地址获得 SIGSEGV: 0x804e000
.EE
.in
.SS "Program source"
.\" SRC BEGIN (mprotect.c)
\&
.EX
#include <malloc.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/mman.h>
#include <unistd.h>

#define handle_error(msg) \e
    do { perror(msg); exit(EXIT_FAILURE); } while (0)

static char *buffer;

static void
handler(int sig, siginfo_t *si, void *unused)
{
    /* 注意: 从信号处理程序调用 printf() 是不安全的
       (并且不应在生产程序中完成)，因为
       printf() is not async\-signal\-safe;  请参见信号安全 (7)。
       不过，我们在这里使用 printf() 作为一种简单的方法
       显示调用了处理程序。*/

    printf("Got SIGSEGV at address: %p\en", si\->si_addr);
    exit(EXIT_FAILURE);
}

int
main(void)
{
    int               pagesize;
    struct sigaction  sa;

    sa.sa_flags = SA_SIGINFO;
    sigemptyset(&sa.sa_mask);
    sa.sa_sigaction = handler;
    if (sigaction(SIGSEGV, &sa, NULL) == \-1)
        handle_error("sigaction");

    pagesize = sysconf(_SC_PAGE_SIZE);
    if (pagesize == \-1)
        handle_error("sysconf");

    /* Allocate a buffer aligned on a page boundary;
       initial protection is PROT_READ | PROT_WRITE. */

    buffer = memalign(pagesize, 4 * pagesize);
    if (buffer == NULL)
        handle_error("memalign");

    printf("Start of region:        %p\en", buffer);

    if (mprotect(buffer + pagesize * 2, pagesize,
                 PROT_READ) == \-1)
        handle_error("mprotect");

    for (char *p = buffer ; ; )
        *(p++) = \[aq]a\[aq];

    printf("Loop completed\en");     /* Should never happen */
    exit(EXIT_SUCCESS);
}
.EE
.\" SRC END
.SH "SEE ALSO"
\fBmmap\fP(2), \fBsysconf\fP(3), \fBpkeys\fP(7)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
