.\" -*- coding: UTF-8 -*-
.\" Copyright (C) 2003 Andries Brouwer (aeb@cwi.nl)
.\"
.\" SPDX-License-Identifier: Linux-man-pages-copyleft
.\"
.\" Modified 2003-08-17 by Walter Harms
.\" Modified 2004-06-23 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH statfs 2 2022\-10\-30 "Linux man\-pages 6.03" 
.SH NAME
statfs, fstatfs \- get filesystem statistics
.SH LIBRARY
标准 C 库 (\fIlibc\fP、\fI\-lc\fP)
.SH SYNOPSIS
.nf
\fB#include <sys/vfs.h>    \fP/* or <sys/statfs.h> */
.PP
\fB[[deprecated]] int statfs(const char *\fP\fIpath\fP\fB, 结构体 statfs *\fP\fIbuf\fP\fB);\fP
\fB[[deprecated]] int fstatfs(int \fP\fIfd\fP\fB, 结构体 statfs *\fP\fIbuf\fP\fB);\fP
.fi
.SH DESCRIPTION
\fBstatfs\fP() 系统调用返回有关已安装文件系统的信息。 \fIpath\fP 是挂载文件系统中任何文件的路径名。 \fIbuf\fP 是指向
\fIstatfs\fP 结构体的指针，大致定义如下:
.PP
.in +4n
.EX
struct statfs {
    __fsword_t f_type;    /* Type of filesystem (see below) */
    __fsword_t f_bsize;   /* Optimal transfer block size */
    fsblkcnt_t f_blocks;  /* Total data blocks in filesystem */
    fsblkcnt_t f_bfree;   /* Free blocks in filesystem */
    fsblkcnt_t f_bavail; /* 可用的空闲块
                             非特权用户 */
    fsfilcnt_t f_files;   /* Total inodes in filesystem */
    fsfilcnt_t f_ffree;   /* Free inodes in filesystem */
    fsid_t     f_fsid;    /* Filesystem ID */
    __fsword_t f_namelen; /* Maximum length of filenames */
    __fsword_t f_frsize;  /* Fragment size (since Linux 2.6) */
    __fsword_t f_flags;/* 文件系统的挂载标志
                             (自 Linux 2.6.36 起) */
    __fsword_t f_spare[xxx];
                    /* Padding bytes reserved for future use */
};
.EE
.in
.PP
\fIf_type\fP: 中可能出现以下文件系统类型
.PP
.in +4n
.EX
ADFS_SUPER_MAGIC      0xadf5
AFFS_SUPER_MAGIC      0xadff
AFS_SUPER_MAGIC       0x5346414f
ANON_INODE_FS_MAGIC 0x09041934/* 匿名 inode FS (用于
                                    没有名字的伪文件;
                                    例如，epoll、signalfd、bpf) */
AUTOFS_SUPER_MAGIC    0x0187
BDEVFS_MAGIC          0x62646576
BEFS_SUPER_MAGIC      0x42465331
BFS_MAGIC             0x1badface
BINFMTFS_MAGIC        0x42494e4d
BPF_FS_MAGIC          0xcafe4a11
BTRFS_SUPER_MAGIC     0x9123683e
BTRFS_TEST_MAGIC      0x73727279
CGROUP_SUPER_MAGIC    0x27e0eb   /* Cgroup pseudo FS */
CGROUP2_SUPER_MAGIC   0x63677270 /* Cgroup v2 pseudo FS */
CIFS_MAGIC_NUMBER     0xff534d42
CODA_SUPER_MAGIC      0x73757245
COH_SUPER_MAGIC       0x012ff7b7
CRAMFS_MAGIC          0x28cd3d45
DEBUGFS_MAGIC         0x64626720
DEVFS_SUPER_MAGIC     0x1373     /* Linux 2.6.17 and earlier */
DEVPTS_SUPER_MAGIC    0x1cd1
ECRYPTFS_SUPER_MAGIC  0xf15f
EFIVARFS_MAGIC        0xde5e81e4
EFS_SUPER_MAGIC       0x00414a53
EXT_SUPER_MAGIC       0x137d     /* Linux 2.0 and earlier */
EXT2_OLD_SUPER_MAGIC  0xef51
EXT2_SUPER_MAGIC      0xef53
EXT3_SUPER_MAGIC      0xef53
EXT4_SUPER_MAGIC      0xef53
F2FS_SUPER_MAGIC      0xf2f52010
FUSE_SUPER_MAGIC      0x65735546
FUTEXFS_SUPER_MAGIC   0xbad1dea  /* Unused */
HFS_SUPER_MAGIC       0x4244
HOSTFS_SUPER_MAGIC    0x00c0ffee
HPFS_SUPER_MAGIC      0xf995e849
HUGETLBFS_MAGIC       0x958458f6
ISOFS_SUPER_MAGIC     0x9660
JFFS2_SUPER_MAGIC     0x72b6
JFS_SUPER_MAGIC       0x3153464a
MINIX_SUPER_MAGIC     0x137f     /* original minix FS */
MINIX_SUPER_MAGIC2    0x138f     /* 30 char minix FS */
MINIX2_SUPER_MAGIC    0x2468     /* minix V2 FS */
MINIX2_SUPER_MAGIC2   0x2478     /* minix V2 FS, 30 char names */
MINIX3_SUPER_MAGIC    0x4d5a     /* minix V3 FS, 60 char names */
MQUEUE_MAGIC          0x19800202 /* POSIX message queue FS */
MSDOS_SUPER_MAGIC     0x4d44
MTD_INODE_FS_MAGIC    0x11307854
NCP_SUPER_MAGIC       0x564c
NFS_SUPER_MAGIC       0x6969
NILFS_SUPER_MAGIC     0x3434
NSFS_MAGIC            0x6e736673
NTFS_SB_MAGIC         0x5346544e
OCFS2_SUPER_MAGIC     0x7461636f
OPENPROM_SUPER_MAGIC  0x9fa1
OVERLAYFS_SUPER_MAGIC 0x794c7630
PIPEFS_MAGIC          0x50495045
PROC_SUPER_MAGIC      0x9fa0     /* /proc FS */
PSTOREFS_MAGIC        0x6165676c
QNX4_SUPER_MAGIC      0x002f
QNX6_SUPER_MAGIC      0x68191122
RAMFS_MAGIC           0x858458f6
REISERFS_SUPER_MAGIC  0x52654973
ROMFS_MAGIC           0x7275
SECURITYFS_MAGIC      0x73636673
SELINUX_MAGIC         0xf97cff8c
SMACK_MAGIC           0x43415d53
SMB_SUPER_MAGIC       0x517b
SMB2_MAGIC_NUMBER     0xfe534d42
SOCKFS_MAGIC          0x534f434b
SQUASHFS_MAGIC        0x73717368
SYSFS_MAGIC           0x62656572
SYSV2_SUPER_MAGIC     0x012ff7b6
SYSV4_SUPER_MAGIC     0x012ff7b5
TMPFS_MAGIC           0x01021994
TRACEFS_MAGIC         0x74726163
UDF_SUPER_MAGIC       0x15013346
UFS_MAGIC             0x00011954
USBDEVICE_SUPER_MAGIC 0x9fa2
V9FS_MAGIC            0x01021997
VXFS_SUPER_MAGIC      0xa501fcf5
XENFS_SUPER_MAGIC     0xabba1974
XENIX_SUPER_MAGIC     0x012ff7b4
XFS_SUPER_MAGIC       0x58465342
_XIAFS_SUPER_MAGIC    0x012fd16d /* Linux 2.0 and earlier */
.EE
.in
.PP
大多数这些 MAGIC 常量在 \fI/usr/include/linux/magic.h\fP 中定义，有些在内核源代码中硬编码。
.PP
.\" XXX Keep this list in sync with statvfs(3)
\fIf_flags\fP 字段是一个位掩码，指示文件系统的安装选项。 它包含零个或多个以下位:
.TP 
\fBST_MANDLOCK\fP
文件系统允许强制锁定 (参见 \fBfcntl\fP(2)).
.TP 
\fBST_NOATIME\fP
不更新访问时间; 请参见 \fBmount\fP(2)。
.TP 
\fBST_NODEV\fP
禁止访问此文件系统上的设备特殊文件。
.TP 
\fBST_NODIRATIME\fP
不更新目录访问时间; 请参见 \fBmount\fP(2)。
.TP 
\fBST_NOEXEC\fP
在此文件系统上不允许执行程序。
.TP 
\fBST_NOSUID\fP
对于此文件系统上的可执行文件，\fBexec\fP(3) 会忽略 set\-user\-ID 和 set\-group\-ID 位
.TP 
\fBST_RDONLY\fP
该文件系统以只读方式挂载。
.TP 
\fBST_RELATIME\fP
更新一个相对于 mtime/ctime 的时间; 请参见 \fBmount\fP(2)。
.TP 
\fBST_SYNCHRONOUS\fP
写入会立即同步到文件系统 (请参见 \fBopen\fP(2)).h 中对 \fBO_SYNC\fP 的描述)。
.TP 
\fBST_NOSYMFOLLOW\fP (since Linux 5.10)
.\" dab741e0e02bd3c4f5e2e97be74b39df2523fc6e
解析路径时不遵循符号链接; 请参见 \fBmount\fP(2)。
.PP
没有人知道 \fIf_fsid\fP 应该包含什么 (但见下文)。
.PP
为特定文件系统未定义的字段设置为 0.
.PP
\fBfstatfs\fP() 返回关于描述符 \fIfd\fP 引用的打开文件的相同信息。
.SH "RETURN VALUE"
成功时，返回零。 出错时返回 \-1，并设置 \fIerrno\fP 以指示错误。
.SH ERRORS
.TP 
\fBEACCES\fP
(\fBstatfs\fP()) 对 \fIpath\fP 路径前缀的组件的搜索权限被拒绝。 (另见 \fBpath_resolution\fP(7).)
.TP 
\fBEBADF\fP
(\fBfstatfs\fP()) \fIfd\fP 不是有效的打开文件描述符。
.TP 
\fBEFAULT\fP
\fIbuf\fP 或 \fIpath\fP 指向无效地址。
.TP 
\fBEINTR\fP
调用被信号打断; 请参见 \fBsignal\fP(7)。
.TP 
\fBEIO\fP
从文件系统读取时发生 I/O 错误。
.TP 
\fBELOOP\fP
(\fBstatfs\fP()) 翻译 \fIpath\fP 时遇到太多符号链接。
.TP 
\fBENAMETOOLONG\fP
(\fBstatfs\fP()) \fIpath\fP 太长。
.TP 
\fBENOENT\fP
(\fBstatfs\fP()) \fIpath\fP 引用的文件不存在。
.TP 
\fBENOMEM\fP
可用内核内存不足。
.TP 
\fBENOSYS\fP
文件系统不支持这个调用。
.TP 
\fBENOTDIR\fP
(\fBstatfs\fP()) \fIpath\fP 的路径前缀的组成部分不是目录。
.TP 
\fBEOVERFLOW\fP
有些值太大，无法在返回的结构体中表示。
.SH STANDARDS
特定于 Linux。Linux \fBstatfs\fP() 的灵感来自于 4.4BSD (但它们不使用相同的结构体)。
.SH NOTES
\fIstatfs\fP 结构体定义中用于各个字段的 \fI__fsword_t\fP 类型是 glibc 内部类型，不供公众使用。
这让程序人员在尝试将这些字段复制或比较程序中的本地变量时陷入困境。 在大多数系统上对此类变量使用 \fIunsigned\ int\fP 就足够了。
.PP
最初的 Linux \fBstatfs\fP() 和 \fBfstatfs\fP() 系统调用在设计时并没有考虑到非常大的文件大小。 随后，Linux 2.6
添加了新的 \fBstatfs64\fP() 和 \fBfstatfs64\fP() 系统调用，使用新的结构体 \fIstatfs64\fP。 新的结构体包含与原始
\fIstatfs\fP 结构体相同的字段，但增加了各个字段的大小，以适应大文件大小。 glibc \fBstatfs\fP() 和 \fBfstatfs\fP()
包装器函数透明地处理内核差异。
.PP
有的系统只有 \fI<sys/vfs.h>\fP，有的系统也有 \fI<sys/statfs.h>\fP，前者包含后者。
所以看起来包括前者是最好的选择。
.PP
LSB 已弃用库调用 \fBstatfs\fP() 和 \fBfstatfs\fP()，并告诉我们改用 \fBstatvfs\fP(3) 和
\fBfstatvfs\fP(3)。
.SS "The f_fsid field"
Solaris、Irix 和 POSIX 有一个系统调用 \fBstatvfs\fP(2)，它返回一个 \fIstruct statvfs\fP (在包含
\fIunsigned long\fP \fIf_fsid\fP 的 \fI<sys/statvfs.h>\fP) 中定义。
Linux、SunOS、HP\-UX、4.4BSD 有一个系统调用 \fBstatfs\fP() 返回一个 \fIstruct statfs\fP (定义在
\fI<sys/vfs.h>\fP) 包含一个 \fIfsid_t\fP \fIf_fsid\fP，其中 \fIfsid_t\fP 定义为 \fIstruct { int val[2]; }\fP。 FreeBSD 也是如此，只是它使用了包含文件 \fI<sys/mount.h>\fP。
.PP
一般的想法是 \fIf_fsid\fP 包含一些随机的东西，这样 (\fIf_fsid\fP,\fIino\fP) 对唯一地确定一个文件。 一些操作系统使用 (变体)
设备号，或设备号与文件系统类型相结合。 一些操作系统限制仅将 \fIf_fsid\fP 字段提供给超级用户 (对于非特权用户将其归零)，因为该字段在 NFS
导出时用于文件系统的文件句柄中，并且将其提供是一个安全问题。
.PP
在某些操作系统下，\fIfsid\fP 可以作为 \fBsysfs\fP(2) 系统调用的第二个参数。
.SH BUGS
.\" broken in commit ff0c7d15f9787b7e8c601533c015295cc68329f8
.\" fixed in commit d70ef97baf048412c395bb5d65791d8fe133a52b
从 Linux 2.6.38 到 Linux 3.1 (包括 Linux 3.1)，\fBfstatfs\fP() 因 \fBpipe\fP(2)
创建的文件描述符错误 \fBENOSYS\fP 而失败。
.SH "SEE ALSO"
\fBstat\fP(2), \fBstatvfs\fP(3), \fBpath_resolution\fP(7)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
