.\" -*- coding: UTF-8 -*-
'\" t
.\" Copyright (c) 1983, 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" SPDX-License-Identifier: BSD-4-Clause-UC
.\"
.\"     $Id: socket.2,v 1.4 1999/05/13 11:33:42 freitag Exp $
.\"
.\" Modified 1993-07-24 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1996-10-22 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 1998, 1999 by Andi Kleen <ak@muc.de>
.\" Modified 2002-07-17 by Michael Kerrisk <mtk.manpages@gmail.com>
.\" Modified 2004-06-17 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH socket 2 2023\-02\-05 "Linux man\-pages 6.03" 
.SH NAME
socket \- 创建一个通信端点
.SH LIBRARY
标准 C 库 (\fIlibc\fP、\fI\-lc\fP)
.SH SYNOPSIS
.nf
\fB#include <sys/socket.h>\fP
.PP
\fBint socket(int \fP\fIdomain\fP\fB, int \fP\fItype\fP\fB, int \fP\fIprotocol\fP\fB);\fP
.fi
.SH DESCRIPTION
\fBsocket\fP() 创建用于通信的端点并返回引用该端点的文件描述符。 成功调用返回的文件描述符将是当前未为进程打开的最小编号的文件描述符。
.PP
\fIdomain\fP 参数指定一个通信域; 这将选择将用于通信的协议系列。 这些系列在 \fI<sys/socket.h>\fP 中定义。 目前
Linux 内核可以理解的格式包括:
.TS
tab(:);
l1 lw40 l.
Name:Purpose:Man page
T{
\fBAF_UNIX\fP
T}:T{
Local communication
T}:T{
\fBunix\fP(7)
T}
T{
\fBAF_LOCAL\fP
T}:T{
Synonym for
\fBAF_UNIX\fP
T}:T{
T}
T{
\fBAF_INET\fP
T}:IPv4 Internet protocols:T{
\fBip\fP(7)
T}
T{
\fBAF_AX25\fP
T}:T{
Amateur radio AX.25 protocol
T}:T{
.\" Part of ax25-tools
\fBax25\fP(4)
T}
T{
\fBAF_IPX\fP
T}:IPX \- Novell protocols:
T{
\fBAF_APPLETALK\fP
T}:AppleTalk:T{
\fBddp\fP(7)
T}
T{
\fBAF_X25\fP
T}:ITU\-T X.25 / ISO\-8208 protocol:T{
\fBx25\fP(7)
T}
T{
\fBAF_INET6\fP
T}:IPv6 Internet protocols:T{
\fBipv6\fP(7)
T}
T{
\fBAF_DECnet\fP
T}:T{
DECet protocol sockets
T}
T{
\fBAF_KEY\fP
T}:T{
Key management protocol, originally developed for usage with IPsec
T}
T{
\fBAF_NETLINK\fP
T}:T{
Kernel user interface device
T}:T{
\fBnetlink\fP(7)
T}
T{
\fBAF_PACKET\fP
T}:T{
Low\-level packet interface
T}:T{
\fBpacket\fP(7)
T}
T{
\fBAF_RDS\fP
T}:T{
.\" commit: 639b321b4d8f4e412bfbb2a4a19bfebc1e68ace4
Reliable Datagram Sockets (RDS) protocol
T}:T{
.\" rds-tools: https://github.com/oracle/rds-tools/blob/master/rds.7
.\" rds-tools: https://github.com/oracle/rds-tools/blob/master/rds-rdma.7
\fBrds\fP(7)
.br
\fBrds\-rdma\fP(7)
T}
T{
\fBAF_PPPOX\fP
T}:T{
Generic PPP transport layer, for setting up L2 tunnels
(L2TP and PPPoE)
T}
T{
\fBAF_LLC\fP
T}:T{
.\" linux-history commit: 34beb106cde7da233d4df35dd3d6cf4fee937caa
Logical link control (IEEE 802.2 LLC) protocol
T}
T{
\fBAF_IB\fP
T}:T{
.\" commits: 8d36eb01da5d371f..ce117ffac2e93334
InfiniBand native addressing
T}
T{
\fBAF_MPLS\fP
T}:T{
.\" commits: 0189197f441602acdca3f97750d392a895b778fd
Multiprotocol Label Switching
T}
T{
\fBAF_CAN\fP
T}:T{
.\" commits: 8dbde28d9711475a..5423dd67bd0108a1
Controller Area Network automotive bus protocol
T}
T{
\fBAF_TIPC\fP
T}:T{
.\" commits: b97bf3fd8f6a16966d4f18983b2c40993ff937d4
TIPC, "cluster domain sockets" protocol
T}
T{
\fBAF_BLUETOOTH\fP
T}:T{
.\" commits: 8d36eb01da5d371f..ce117ffac2e93334
Bluetooth low\-level socket protocol
T}
T{
\fBAF_ALG\fP
T}:T{
.\" commit: 03c8efc1ffeb6b82a22c1af8dd908af349563314
Interface to kernel crypto API
T}
T{
\fBAF_VSOCK\fP
T}:T{
.\" commit: d021c344051af91f42c5ba9fdedc176740cbd238
VSOCK (originally "VMWare VSockets") protocol
for hypervisor\-guest communication
T}:T{
\fBvsock\fP(7)
T}
T{
\fBAF_KCM\fP
T}:T{
.\" commit: 03c8efc1ffeb6b82a22c1af8dd908af349563314
KCM (kernel connection multiplexer) interface
T}
T{
\fBAF_XDP\fP
T}:T{
.\" commit: c0c77d8fb787cfe0c3fca689c2a30d1dad4eaba7
XDP (express data path) interface
T}
.TE
.PP
可以在 \fBaddress_families\fP(7) 中找到上述地址系列的更多详细信息以及其他几个地址系列的信息。
.PP
套接字具有指定的 \fItype\fP，它指定了通信语义。 当前定义的类型有:
.TP  16
\fBSOCK_STREAM\fP
提供有序的、可靠的、双向的、基于连接的字节流。 可以支持带外数据传输机制。
.TP 
\fBSOCK_DGRAM\fP
支持数据报 (固定最大长度的无连接、不可靠消息)。
.TP 
\fBSOCK_SEQPACKET\fP
为固定最大长度的数据报提供有序的、可靠的、基于双向连接的数据传输路径; 消费者需要使用每个输入系统调用来读取整个数据包。
.TP 
\fBSOCK_RAW\fP
提供原始网络协议访问。
.TP 
\fBSOCK_RDM\fP
提供不保证顺序的可靠数据报层。
.TP 
\fBSOCK_PACKET\fP
已过时，不应在新程序中使用; 请参见 \fBpacket\fP(7)。
.PP
某些套接字类型可能并非由所有协议系列实现。
.PP
从 Linux 2.6.27 开始，\fItype\fP 参数还有第二个用途: 除了指定套接字类型外，它还可以包括以下任何值的按位或，以修改
\fBsocket\fP(): 的行为
.TP  16
\fBSOCK_NONBLOCK\fP
在打开的文件描述中设置 \fBO_NONBLOCK\fP 文件状态标志 (请参见新文件描述符引用的 \fBopen\fP(2))。 使用此标志可节省对
\fBfcntl\fP(2) 的额外调用以实现相同的结果。
.TP 
\fBSOCK_CLOEXEC\fP
在新文件描述符上设置 close\-on\-exec (\fBFD_CLOEXEC\fP) 标志。 请参见 \fBopen\fP(2) 中 \fBO_CLOEXEC\fP
标志的描述，了解这可能有用的原因。
.PP
\fIprotocol\fP 指定要与套接字一起使用的特定协议。 通常只存在一个协议来支持给定协议系列中的特定套接字类型，在这种情况下，\fIprotocol\fP
可以指定为 0。 但是，可能存在许多协议，在这种情况下必须以这种方式指定特定的协议。 要使用的协议号特定于通信发生的 `通信域`; 请参见
\fBprotocols\fP(5)。 有关如何将 map 协议名称字符串转换为协议编号的信息，请参见 \fBgetprotoent\fP(3)。
.PP
\fBSOCK_STREAM\fP 类型的套接字是全双工字节流。 它们不保留记录边界。 流套接字必须处于 \fIconnected\fP
状态才能发送或接收任何数据。 使用 \fBconnect\fP(2) 调用创建到另一个套接字的连接。 连接后，可以使用 \fBread\fP(2) 和
\fBwrite\fP(2) 调用或 \fBsend\fP(2) 和 \fBrecv\fP(2) 调用的某些变体来传输数据。 会话完成后，可能会执行
\fBclose\fP(2)。 带外数据也可以按照 \fBsend\fP(2) 中的描述进行传输，并按照 \fBrecv\fP(2) 中的描述进行接收。
.PP
实现 \fBSOCK_STREAM\fP 的通信协议确保数据不会丢失或复制。
如果对端协议有缓冲空间的一段数据不能在合理的时间内成功传输，那么连接就被认为是死的。 当在套接字上启用 \fBSO_KEEPALIVE\fP
时，协议以协议特定的方式检查另一端是否仍然存在。 如果进程在中断的流上发送或接收，则会引发 \fBSIGPIPE\fP 信号;
这会导致不处理信号的原始进程退出。 \fBSOCK_SEQPACKET\fP 套接字使用与 \fBSOCK_STREAM\fP 套接字相同的系统调用。 唯一的区别是
\fBread\fP(2) 调用将只返回请求的数据量，到达数据包中剩余的任何数据都将被丢弃。 传入数据报中的所有消息边界也被保留。
.PP
\fBSOCK_DGRAM\fP 和 \fBSOCK_RAW\fP 套接字允许将数据报发送到 \fBsendto\fP(2) 调用中命名的通信者。 数据报通常使用
\fBrecvfrom\fP(2) 接收，它返回下一个数据报及其发送者的地址。
.PP
\fBSOCK_PACKET\fP 是一种过时的套接字类型，用于直接从设备驱动程序接收原始数据包。 请改用 \fBpacket\fP(7)。
.PP
\fBfcntl\fP(2) \fBF_SETOWN\fP 操作可用于指定进程或进程组在带外数据到达时接收 \fBSIGURG\fP 信号，或在
\fBSOCK_STREAM\fP 连接意外中断时接收 \fBSIGPIPE\fP 信号。 该操作也可用于设置通过 \fBSIGIO\fP 接收 I/O 和 I/O
事件的异步通知的进程或进程组。 使用 \fBF_SETOWN\fP 相当于 \fBioctl\fP(2) 调用与 \fBFIOSETOWN\fP 或
\fBSIOCSPGRP\fP 参数。
.PP
当网络向协议模块发送错误条件信号时 (例如，使用 IP 的 ICMP 消息)，将为套接字设置未决错误标志。
此套接字上的下一个操作将返回挂起错误的错误代码。 对于某些协议，可以启用每个套接字错误队列来检索有关错误的详细信息; 请参见 \fBip\fP(7) 中的
\fBIP_RECVERR\fP。
.PP
套接字的操作由套接字级别 \fIoptions\fP 控制。 这些选项在 \fI<sys/socket.h>\fP 中定义。 函数
\fBsetsockopt\fP(2) 和 \fBgetsockopt\fP(2) 用于设置和获取选项。
.SH "RETURN VALUE"
成功时，返回新套接字的文件描述符。 出错时返回 \-1，并设置 \fIerrno\fP 以指示错误。
.SH ERRORS
.TP 
\fBEACCES\fP
创建指定类型或者协议的套接字的权限被拒绝。
.TP 
\fBEAFNOSUPPORT\fP
该实现不支持指定的地址系列。
.TP 
\fBEINVAL\fP
未知协议或协议系列不可用。
.TP 
\fBEINVAL\fP
.\" Since Linux 2.6.27
\fItype\fP 中的无效标志。
.TP 
\fBEMFILE\fP
已达到打开文件描述符数量的每个进程限制。
.TP 
\fBENFILE\fP
已达到系统范围内打开文件总数的限制。
.TP 
\fBENOBUFS\fP or \fBENOMEM\fP
可用内存不足。 在释放足够的资源之前无法创建套接字。
.TP 
\fBEPROTONOSUPPORT\fP
该域不支持协议类型或指定的协议。
.PP
其他错误可能由底层协议模块生成。
.SH STANDARDS
POSIX.1\-2001, POSIX.1\-2008, 4.4BSD.
.PP
\fBSOCK_NONBLOCK\fP 和 \fBSOCK_CLOEXEC\fP 标志是特定于 Linux 的。
.PP
\fBsocket\fP() 出现在 4.2BSD 中。 它通常是可移植的 to/from 非 BSD 系统，支持 BSD 套接字层的克隆 (包括
System\V 变体)。
.SH NOTES
4.x BSD 下用于协议族的清单常量为 \fBPF_UNIX\fP、\fBPF_INET\fP 等，而 \fBAF_UNIX\fP、\fBAF_INET\fP 等用于地址族。
但是，BSD 手册页 promises: "The protocol family generally is the same as the
address family" 和后续标准已在各处使用 AF_*。
.SH EXAMPLES
\fBgetaddrinfo\fP(3) 中显示了 \fBsocket\fP() 的使用示例。
.SH "SEE ALSO"
\fBaccept\fP(2), \fBbind\fP(2), \fBclose\fP(2), \fBconnect\fP(2), \fBfcntl\fP(2),
\fBgetpeername\fP(2), \fBgetsockname\fP(2), \fBgetsockopt\fP(2), \fBioctl\fP(2),
\fBlisten\fP(2), \fBread\fP(2), \fBrecv\fP(2), \fBselect\fP(2), \fBsend\fP(2),
\fBshutdown\fP(2), \fBsocketpair\fP(2), \fBwrite\fP(2), \fBgetprotoent\fP(3),
\fBaddress_families\fP(7), \fBip\fP(7), \fBsocket\fP(7), \fBtcp\fP(7), \fBudp\fP(7),
\fBunix\fP(7)
.PP
\[lq] An Introductory 4.3BSD Interprocess Communication Tutorial\[rq]
and\[lq] BSD Interprocess Communication Tutorial\[rq]，转载于 \fIUNIX Programmer's Supplementary Documents Volume 1.\fP
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
