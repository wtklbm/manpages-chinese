.\" -*- coding: UTF-8 -*-
.\" Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\" and Copyright (c) 2004 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" SPDX-License-Identifier: Linux-man-pages-copyleft
.\"
.\" Modified Sat Jul 24 13:32:44 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Mon Jun 23 14:09:52 1997 by aeb - add EINTR.
.\" Modified Tue Jul  7 12:26:42 1998 by aeb - changed return value wait3
.\" Modified 2004-11-11, Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Rewrote much of this page, and removed much duplicated text,
.\"		replacing with pointers to wait.2
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH wait4 2 2023\-02\-05 "Linux man\-pages 6.03" 
.SH NAME
wait3, wait4 \- 等待进程改变状态，BSD 风格
.SH LIBRARY
标准 C 库 (\fIlibc\fP、\fI\-lc\fP)
.SH SYNOPSIS
.nf
\fB#include <sys/wait.h>\fP
.PP
\fBpid_t wait3(int *_Nullable \fP\fIwstatus\fP\fB, int \fP\fIoptions\fP\fB,\fP
\fB            struct rusage *_Nullable \fP\fIrusage\fP\fB);\fP
\fBpid_t wait4(pid_t \fP\fIpid\fP\fB, int *_Nullable \fP\fIwstatus\fP\fB, int \fP\fIoptions\fP\fB,\fP
\fB            struct rusage *_Nullable \fP\fIrusage\fP\fB);\fP
.fi
.PP
.RS -4
特性测试宏 glibc 的要求 (参见 \fBfeature_test_macros\fP(7)):
.RE
.PP
\fBwait3\fP():
.nf
.\"          || _XOPEN_SOURCE && _XOPEN_SOURCE_EXTENDED
    由于 glibc 2.26:
        _DEFAULT_SOURCE
            || (_XOPEN_SOURCE >= 500 &&
                ! (_POSIX_C_SOURCE >= 200112L
                   || _XOPEN_SOURCE >= 600))
    从 glibc 2.19 到 glibc 2.25:
        _DEFAULT_SOURCE || _XOPEN_SOURCE >= 500
    glibc 2.19 及更早版本:
        _BSD_SOURCE || _XOPEN_SOURCE >= 500
.fi
.PP
\fBwait4\fP():
.nf
    由于 glibc 2.19:
        _DEFAULT_SOURCE
    glibc 2.19 及更早版本:
        _BSD_SOURCE
.fi
.SH DESCRIPTION
这些函数是不标准的; 在新程序中，最好使用 \fBwaitpid\fP(2) 或 \fBwaitid\fP(2)。
.PP
\fBwait3\fP() 和 \fBwait4\fP() 系统调用与 \fBwaitpid\fP(2) 类似，但在 \fIrusage\fP
指向的结构体中额外返回子进程的资源使用信息。
.PP
除了使用 \fIrusage\fP 参数外，还有以下 \fBwait3\fP() 调用:
.PP
.in +4n
.EX
wait3(wstatus, options, rusage);
.EE
.in
.PP
相当于:
.PP
.in +4n
.EX
waitpid(\-1, wstatus, options);
.EE
.in
.PP
同样，下面的 \fBwait4\fP() 调用:
.PP
.in +4n
.EX
wait4(pid, wstatus, options, rusage);
.EE
.in
.PP
相当于:
.PP
.in +4n
.EX
waitpid(pid, wstatus, options);
.EE
.in
.PP
换句话说，\fBwait3\fP() 等待任何子节点，而 \fBwait4\fP() 可用于选择要等待的特定子节点或子节点。 有关详细信息，请参见
\fBwait\fP(2)。
.PP
如果 \fIrusage\fP 不为 NULL，则它指向的 \fIstruct rusage\fP 将填充有关子节点的帐户信息。 有关详细信息，请参见
\fBgetrusage\fP(2)。
.SH "RETURN VALUE"
至于 \fBwaitpid\fP(2)。
.SH ERRORS
至于 \fBwaitpid\fP(2)。
.SH STANDARDS
4.3BSD.
.PP
SUSv1 包含 \fBwait3\fP() 规格; SUSv2 包含 \fBwait3\fP()，但将其标记为 LEGACY; SUSv3 删除了它。
.SH NOTES
现在不需要包括 \fI<sys/time.h>\fP，但增加了可移植性。 (实际上，\fI<sys/resource.h>\fP
定义了 \fIrusage\fP 结构体，其中 \fIstruct timeval\fP 类型的字段在 \fI<sys/time.h>\fP.) 中定义
.SS "C library/kernel differences"
在 Linux 上，\fBwait3\fP() 是在 \fBwait4\fP() 系统调用之上实现的一个库函数。
.SH "SEE ALSO"
\fBfork\fP(2), \fBgetrusage\fP(2), \fBsigaction\fP(2), \fBsignal\fP(2), \fBwait\fP(2),
\fBsignal\fP(7)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
