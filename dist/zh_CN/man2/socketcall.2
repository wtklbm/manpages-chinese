.\" -*- coding: UTF-8 -*-
'\" t
.\" Copyright (c) 1995 Michael Chastain (mec@shell.portal.com), 15 April 1995.
.\"
.\" SPDX-License-Identifier: GPL-2.0-or-later
.\"
.\" Modified Tue Oct 22 22:11:53 1996 by Eric S. Raymond <esr@thyrsus.com>
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH socketcall 2 2023\-02\-05 "Linux man\-pages 6.03" 
.SH NAME
socketcall \- 套接字系统调用
.SH LIBRARY
标准 C 库 (\fIlibc\fP、\fI\-lc\fP)
.SH SYNOPSIS
.nf
\fB#include <linux/net.h>\fP        /* Definition of \fBSYS_*\fP constants */
\fB#include <sys/syscall.h>\fP      /* Definition of \fBSYS_socketcall\fP */
\fB#include <unistd.h>\fP
.PP
\fBint syscall(SYS_socketcall, int \fP\fIcall\fP\fB, unsigned long *\fP\fIargs\fP\fB);\fP
.fi
.PP
\fINote\fP: glibc 没有为 \fBsocketcall\fP() 提供包装器，因此需要使用 \fBsyscall\fP(2)。
.SH DESCRIPTION
\fBsocketcall\fP() 是套接字系统调用的通用内核入口点。 \fIcall\fP 确定要调用哪个套接字函数。 \fIargs\fP
指向包含实际参数的块，这些参数被传递给适当的调用。
.PP
用户程序应该用它们通常的名字来调用适当的函数。 只有标准库实现者和内核黑客需要了解 \fBsocketcall\fP()。
.PP
.TS
tab(:);
l l.
\fIcall\fP:Man page
T{
\fBSYS_SOCKET\fP
T}:T{
\fBsocket\fP(2)
T}
T{
\fBSYS_BIND\fP
T}:T{
\fBbind\fP(2)
T}
T{
\fBSYS_CONNECT\fP
T}:T{
\fBconnect\fP(2)
T}
T{
\fBSYS_LISTEN\fP
T}:T{
\fBlisten\fP(2)
T}
T{
\fBSYS_ACCEPT\fP
T}:T{
\fBaccept\fP(2)
T}
T{
\fBSYS_GETSOCKNAME\fP
T}:T{
\fBgetsockname\fP(2)
T}
T{
\fBSYS_GETPEERNAME\fP
T}:T{
\fBgetpeername\fP(2)
T}
T{
\fBSYS_SOCKETPAIR\fP
T}:T{
\fBsocketpair\fP(2)
T}
T{
\fBSYS_SEND\fP
T}:T{
\fBsend\fP(2)
T}
T{
\fBSYS_RECV\fP
T}:T{
\fBrecv\fP(2)
T}
T{
\fBSYS_SENDTO\fP
T}:T{
\fBsendto\fP(2)
T}
T{
\fBSYS_RECVFROM\fP
T}:T{
\fBrecvfrom\fP(2)
T}
T{
\fBSYS_SHUTDOWN\fP
T}:T{
\fBshutdown\fP(2)
T}
T{
\fBSYS_SETSOCKOPT\fP
T}:T{
\fBsetsockopt\fP(2)
T}
T{
\fBSYS_GETSOCKOPT\fP
T}:T{
\fBgetsockopt\fP(2)
T}
T{
\fBSYS_SENDMSG\fP
T}:T{
\fBsendmsg\fP(2)
T}
T{
\fBSYS_RECVMSG\fP
T}:T{
\fBrecvmsg\fP(2)
T}
T{
\fBSYS_ACCEPT4\fP
T}:T{
\fBaccept4\fP(2)
T}
T{
\fBSYS_RECVMMSG\fP
T}:T{
\fBrecvmmsg\fP(2)
T}
T{
\fBSYS_SENDMMSG\fP
T}:T{
\fBsendmmsg\fP(2)
T}
.TE
.SH STANDARDS
此调用特定于 Linux，不应在旨在可移植的程序中使用。
.SH NOTES
在某些体系结构 \[em] 上，例如 x86\-64 和分支 \[em]，没有 \fBsocketcall\fP() 系统调用;
相反，\fBsocket\fP(2)、\fBaccept\fP(2)、\fBbind\fP(2) 等实际上是作为单独的系统调用实现的。
.PP
.\" commit 9dea5dc921b5f4045a18c63eb92e84dc274d17eb
在 x86\-32 上，\fBsocketcall\fP() 历来是套接字 API 的唯一入口点。 但是，从 Linux 4.3 开始，在 x86\-32
上为套接字 API 提供了直接系统调用。 这有助于创建过滤套接字系统调用的 \fBseccomp\fP(2) 过滤器
(针对编译为使用新入口点的新用户空间二进制文件)，并提供 (very) 小的性能改进。
.SH "SEE ALSO"
\fBaccept\fP(2), \fBbind\fP(2), \fBconnect\fP(2), \fBgetpeername\fP(2),
\fBgetsockname\fP(2), \fBgetsockopt\fP(2), \fBlisten\fP(2), \fBrecv\fP(2),
\fBrecvfrom\fP(2), \fBrecvmsg\fP(2), \fBsend\fP(2), \fBsendmsg\fP(2), \fBsendto\fP(2),
\fBsetsockopt\fP(2), \fBshutdown\fP(2), \fBsocket\fP(2), \fBsocketpair\fP(2)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
