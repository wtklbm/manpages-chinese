.\" -*- coding: UTF-8 -*-
.\" Copyright (c) 2021, IBM Corporation.
.\" Written by Mike Rapoport <rppt@linux.ibm.com>
.\"
.\" Based on memfd_create(2) man page
.\" Copyright (C) 2014 Michael Kerrisk <mtk.manpages@gmail.com>
.\" and Copyright (C) 2014 David Herrmann <dh.herrmann@gmail.com>
.\"
.\" SPDX-License-Identifier: GPL-2.0-or-later
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH memfd_secret 2 2023\-02\-05 "Linux man\-pages 6.03" 
.SH NAME
memfd_secret \- 创建一个基于 RAM 的匿名文件以访问秘密内存区域
.SH LIBRARY
标准 C 库 (\fIlibc\fP、\fI\-lc\fP)
.SH SYNOPSIS
.nf
.PP
\fB#include <sys/syscall.h>\fP      /* Definition of \fBSYS_*\fP constants */
\fB#include <unistd.h>\fP
.PP
\fBint syscall(SYS_memfd_secret, unsigned int \fP\fIflags\fP\fB);\fP
.fi
.PP
\fINote\fP: glibc 没有为 \fBmemfd_secret\fP() 提供包装器，因此需要使用 \fBsyscall\fP(2)。
.SH DESCRIPTION
\fBmemfd_secret\fP() 创建一个基于 RAM 的匿名文件并返回引用它的文件描述符。 该文件提供了一种创建和访问内存区域的方法，比通常的基于
RAM 的文件和匿名内存映射具有更强的保护。 一旦对文件的所有打开引用都关闭了，它就自动释放了。 文件的初始大小设置为 0。
在调整之后，文件大小应该使用 \fBftruncate\fP(2) 来设置。
.PP
支持使用 \fBmemfd_secret\fP(2) 创建的文件的内存区域仅对有权访问文件描述符的进程可见。 内存区域从内核页表中删除，只有持有文件描述符
map 的进程的页表对应的物理内存。 (因此，该区域中的页面不能被内核本身访问，因此，例如，指向该区域的指针不能传递给系统调用。)
.PP
以下值可以在 \fIflags\fP 中按位或运算以控制 \fBmemfd_secret\fP(): 的行为
.TP 
\fBFD_CLOEXEC\fP
在新文件描述符上设置 close\-on\-exec 标志，这会导致该区域从 \fBexecve\fP(2) 上的进程中删除。 请参见 \fBopen\fP(2) 中
\fBO_CLOEXEC\fP 标志的说明
.PP
作为它的返回值，\fBmemfd_secret\fP() 返回一个指向匿名文件的新文件描述符。 这个文件描述符是为读取和写入 (\fBO_RDWR\fP)
而打开的，\fBO_LARGEFILE\fP 是为文件描述符设置的。
.PP
对于 \fBfork\fP(2) 和 \fBexecve\fP(2)，通常的语义适用于 \fBmemfd_secret\fP() 创建的文件描述符。 文件描述符的副本由
\fBfork\fP(2) 生成的子项继承，并引用同一文件。 除非已设置 close\-on\-exec 标志，否则文件描述符将在 \fBexecve\fP(2)
中保留。
.PP
内存区域以与 \fBmlock\fP(2) 相同的方式锁定到内存中，因此它永远不会被写入交换区，并且只要存在任何 \fBmemfd_secret\fP()
描述，就会禁止休眠。 但是，\fBmemfd_secret\fP() 的实现不会尝试在将区域附加到进程地址空间的 \fBmmap\fP(2) 调用期间填充整个范围;
相反，页面仅在出现故障时才实际分配。 文件描述符的内存映射所允许的内存量遵循与 \fBmlock\fP(2) 相同的规则，不能超过
\fBRLIMIT_MEMLOCK\fP。
.SH "RETURN VALUE"
成功时，\fBmemfd_secret\fP() 返回一个新的文件描述符。 出错时，返回 \-1 并设置 \fIerrno\fP 以指示错误。
.SH ERRORS
.TP 
\fBEINVAL\fP
\fIflags\fP 包含未知位。
.TP 
\fBEMFILE\fP
已达到打开文件描述符数量的每个进程限制。
.TP 
\fBEMFILE\fP
已达到系统范围内打开文件总数的限制。
.TP 
\fBENOMEM\fP
内存不足，无法创建新的匿名文件。
.TP 
\fBENOSYS\fP
\fBmemfd_secret\fP() 未在此体系结构上实现，或者尚未在带有 \fBsecretmem_enable\fP=1 的内核命令行上启用。
.SH VERSIONS
\fBmemfd_secret\fP() 系统调用最早出现在 Linux 5.14。
.SH STANDARDS
\fBmemfd_secret\fP() 系统调用是 Linux 特有的。
.SH NOTES
\fBmemfd_secret\fP() 系统调用旨在允许用户空间进程创建一系列其他任何人都无法访问的内存 \- 包括内核。 无法 100%
保证内核在任何情况下都无法访问 \fBmemfd_secret\fP() 支持的内存范围，但尽管如此，从这些区域泄露数据要困难得多。
.PP
\fBmemfd_secret\fP() 提供以下保护:
.IP \[bu] 3
针对 ROP 攻击的增强保护 (与所有其他内核内攻击预防系统相结合)。 没有任何用于访问 \fBmemfd_secret\fP() 支持的内存的内核原语意味着
one\-gadget ROP 攻击无法执行数据泄露。 攻击者需要找到足够的 ROP gadgets
来重建丢失的页表条目，这会显着增加攻击的难度，尤其是当内核栈大小限制和地址空间布局随机化等其他保护措施到位时。
.IP \[bu]
防止跨进程用户空间内存暴露。 一旦为 \fBmemfd_secret\fP() 内存映射分配了一个区域，用户就不会意外地将其传递到内核中以在某个地方传输。
不能通过直接 map 访问该区域中的内存页面，并且在 get_user_pages 中不允许使用它们。
.IP \[bu]
针对被利用的内核缺陷进行强化。 为了访问 \fBmemfd_secret\fP() 支持的内存区域，内核端攻击需要遍历页表并创建新页表，或者 spawn
一个新的特权用户空间进程以使用 \fBptrace\fP(2) 执行秘密泄露。
.PP
\fBmemfd_secret\fP() 分配和锁定内存的方式可能会影响整体系统性能，因此系统调用默认情况下是禁用的，只有在系统管理员使用
"secretmem.enable=y" 内核参数打开它时才可用。
.PP
为了防止休眠映像中 \fBmemfd_secret\fP() 支持的内存区域的潜在数据泄漏，当有活动的 \fBmemfd_secret\fP()
用户时，会阻止休眠。
.SH "SEE ALSO"
\fBfcntl\fP(2), \fBftruncate\fP(2), \fBmlock\fP(2), \fBmemfd_create\fP(2), \fBmmap\fP(2),
\fBsetrlimit\fP(2)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
