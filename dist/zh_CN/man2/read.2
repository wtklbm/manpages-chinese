.\" -*- coding: UTF-8 -*-
.\" This manpage is Copyright (C) 1992 Drew Eckhardt;
.\"  and Copyright (C) 1993 Michael Haardt, Ian Jackson.
.\"  and Copyright (C) 2009-2015 Michael Kerrisk, <mtk.manpages.gmail.com>
.\"
.\" SPDX-License-Identifier: Linux-man-pages-copyleft
.\"
.\" Modified Sat Jul 24 00:06:00 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Wed Jan 17 16:02:32 1996 by Michael Haardt
.\"   <michael@cantor.informatik.rwth-aachen.de>
.\" Modified Thu Apr 11 19:26:35 1996 by Andries Brouwer <aeb@cwi.nl>
.\" Modified Sun Jul 21 18:59:33 1996 by Andries Brouwer <aeb@cwi.nl>
.\" Modified Fri Jan 31 16:47:33 1997 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified Sat Jul 12 20:45:39 1997 by Michael Haardt
.\"   <michael@cantor.informatik.rwth-aachen.de>
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH read 2 2022\-12\-04 "Linux man\-pages 6.03" 
.SH NAME
read \- 从文件描述符中读取
.SH LIBRARY
标准 C 库 (\fIlibc\fP、\fI\-lc\fP)
.SH SYNOPSIS
.nf
\fB#include <unistd.h>\fP
.PP
\fBssize_t read(int \fP\fIfd\fP\fB, void \fP\fIbuf\fP\fB[.\fP\fIcount\fP\fB], size_t \fP\fIcount\fP\fB);\fP
.fi
.SH DESCRIPTION
\fBread\fP() 尝试从文件描述符 \fIfd\fP 读取最多 \fIcount\fP 个字节到从 \fIbuf\fP 开始的缓冲区中。
.PP
在支持查找的文件上，读取操作从文件偏移量开始，文件偏移量按读取的字节数递增。 如果文件偏移量位于或超过文件末尾，则不读取任何字节，并且
\fBread\fP() 返回零。
.PP
如果 \fIcount\fP 为零，则 \fBread\fP() \fImay\fP 检测到下述错误。 在没有任何错误的情况下，或者如果 \fBread\fP()
不检查错误，\fBread\fP() 和 \fIcount\fP 为 0 将返回零并且没有其他影响。
.PP
根据 POSIX.1，如果 \fIcount\fP 大于 \fBSSIZE_MAX\fP，结果是实现定义的; 关于 Linux 的上限，请参见注释。
.SH "RETURN VALUE"
成功时，返回读取的字节数 (零表示文件结尾)，文件位置按此数字前进。 如果此数字小于请求的字节数，则不是错误;
例如，这可能会发生，因为现在实际可用的字节较少 (可能是因为我们接近文件末尾，或者因为我们正在从管道或终端读取)，或者因为 \fBread\fP()
被信号中断。 另请详见注释。
.PP
出错时返回 \-1，并设置 \fIerrno\fP 以指示错误。 在这种情况下，未指定文件位置 (如果有) 是否更改。
.SH ERRORS
.TP 
\fBEAGAIN\fP
文件描述符 \fIfd\fP 引用一个文件而不是套接字，并已被标记为非阻塞 (\fBO_NONBLOCK\fP)，读取将阻塞。 有关 \fBO_NONBLOCK\fP
标志的更多详细信息，请参见 \fBopen\fP(2)。
.TP 
\fBEAGAIN\fP or \fBEWOULDBLOCK\fP
.\" Actually EAGAIN on Linux
文件描述符 \fIfd\fP 引用一个套接字并已标记为非阻塞 (\fBO_NONBLOCK\fP)，读取将阻塞。 POSIX.1\-2001
允许在这种情况下返回任一错误，并且不要求这些常量具有相同的值，因此可移植应用程序应该检查这两种可能性。
.TP 
\fBEBADF\fP
\fIfd\fP 不是有效的文件描述符或未打开以供读取。
.TP 
\fBEFAULT\fP
\fIbuf\fP 在您可访问的地址空间之外。
.TP 
\fBEINTR\fP
在读取任何数据之前调用被信号中断; 请参见 \fBsignal\fP(7)。
.TP 
\fBEINVAL\fP
\fIfd\fP 附着在不适合读取的对象上; 或者文件是用 \fBO_DIRECT\fP 标志打开的，\fIbuf\fP 中指定的地址、\fIcount\fP
中指定的值或文件偏移量未适当对齐。
.TP 
\fBEINVAL\fP
\fIfd\fP 是通过调用 \fBtimerfd_create\fP(2) 创建的，错误大小的缓冲区被提供给 \fBread\fP(); 有关详细信息，请参见
\fBtimerfd_create\fP(2)。
.TP 
\fBEIO\fP
I/O 错误。 例如，当进程在后台进程组中时，会发生这种情况，尝试从其控制终端读取，并且它忽略或阻止 \fBSIGTTIN\fP 或其进程组被孤立。
当从磁盘或磁带读取时出现底层 I/O 错误时也可能发生。 网络文件系统上 \fBEIO\fP 的另一个可能原因是当文件描述符上的咨询锁被取消并且该锁丢失时。
有关详细信息，请参见 \fBfcntl\fP(2) 的 \fILost locks\fP 部分。
.TP 
\fBEISDIR\fP
\fIfd\fP 指的是一个目录。
.PP
根据连接到 \fIfd\fP 的对象，可能会出现其他错误。
.SH STANDARDS
SVr4, 4.3BSD, POSIX.1\-2001.
.SH NOTES
类型 \fIsize_t\fP 和 \fIssize_t\fP 分别是由 POSIX.1 指定的无符号和有符号整数类型。
.PP
.\" commit e28cc71572da38a5a12c1cfe4d7032017adccf69
在 Linux 上，\fBread\fP() (和类似的系统调用) 将最多传输 0x7ffff000 (2,147,479,552)
字节，返回实际传输的字节数。 (在 32 位和 64 位系统上都是如此。)
.PP
在 NFS 文件系统上，读取少量数据只会在第一次更新时间戳，后续调用可能不会这样做。 这是由客户端属性缓存引起的，因为大多数 (如果不是全部) NFS
客户端将 \fIst_atime\fP (上次文件访问时间) 更新留给服务器，并且客户端从客户端缓存中读取满足的内容不会导致服务器上的 \fIst_atime\fP
更新，因为没有服务器端读取。 UNIX 语义可以通过禁用客户端属性缓存来获得，但在大多数情况下，这将大大增加服务器负载并降低性能。
.SH BUGS
根据 POSIX.1\-2008/SUSv4 部分 XSI 2.9.7 (`与常规文件操作的线程交互`) :
.PP
.RS 4
在 POSIX.1\-2008 中指定的效果中，当它们对常规文件或符号链接进行操作时，以下所有函数相互之间应是原子的: ...
.RE
.PP
.\" http://thread.gmane.org/gmane.linux.kernel/1649458
.\"    From: Michael Kerrisk (man-pages <mtk.manpages <at> gmail.com>
.\"    Subject: Update of file offset on write() etc. is non-atomic with I/O
.\"    Date: 2014-02-17 15:41:37 GMT
.\"    Newsgroups: gmane.linux.kernel, gmane.linux.file-systems
.\" commit 9c225f2655e36a470c4f58dbbc99244c5fc7f2d4
.\"    Author: Linus Torvalds <torvalds@linux-foundation.org>
.\"    Date:   Mon Mar 3 09:36:58 2014 -0800
.\"
.\"        vfs: atomic f_pos accesses as per POSIX
随后列出的 API 包括 \fBread\fP() 和 \fBreadv\fP(2)。 在线程 (和进程) 之间应该是原子的影响之一是文件偏移量的更新。 然而，在
Linux 3.14 之前，情况并非如此: 如果两个共享打开文件描述的进程 (参见 \fBopen\fP(2)) 同时执行 \fBread\fP() (或
\fBreadv\fP(2))，则 I/O 操作在更新文件偏移量方面不是原子的，与结果是两个进程中的读取可能 (incorrectly)
在它们获得的数据块中重叠。 此问题已在 Linux 3.14 中修复。
.SH "SEE ALSO"
\fBclose\fP(2), \fBfcntl\fP(2), \fBioctl\fP(2), \fBlseek\fP(2), \fBopen\fP(2), \fBpread\fP(2),
\fBreaddir\fP(2), \fBreadlink\fP(2), \fBreadv\fP(2), \fBselect\fP(2), \fBwrite\fP(2),
\fBfread\fP(3)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
