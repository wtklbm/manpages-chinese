.\" -*- coding: UTF-8 -*-
.\" Copyright (c) 2007 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" SPDX-License-Identifier: Linux-man-pages-copyleft
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH sgetmask 2 2022\-10\-30 "Linux man\-pages 6.03" 
.SH NAME
sgetmask, ssetmask \- 信号掩码 (obsolete) 的操作
.SH LIBRARY
标准 C 库 (\fIlibc\fP、\fI\-lc\fP)
.SH SYNOPSIS
.nf
\fB#include <sys/syscall.h>\fP      /* Definition of \fBSYS_*\fP constants */
\fB#include <unistd.h>\fP
.PP
\fB[[deprecated]] long syscall(SYS_sgetmask, void);\fP
\fB[[deprecated]] long syscall(SYS_ssetmask, long \fP\fInewmask\fP\fB);\fP
.fi
.SH DESCRIPTION
这些系统调用已过时。 这些系统调用已过时。请改用 \fBsigprocmask\fP(2)。
.PP
\fBsgetmask\fP() 返回调用进程的信号掩码。
.PP
\fBssetmask\fP() 将调用进程的信号掩码设置为 \fInewmask\fP 中给定的值。 返回先前的信号掩码。
.PP
这两个系统调用处理的信号掩码是普通位掩码 (与 \fBsigprocmask\fP(2)) 使用的 \fIsigset_t\fP 不同; 使用
\fBsigmask\fP(3) 创建和检查这些掩码。
.SH "RETURN VALUE"
\fBsgetmask\fP() 始终成功返回信号掩码。 \fBssetmask\fP() 总是成功，并返回前一个信号掩码。
.SH ERRORS
这些系统调用总是成功的。
.SH VERSIONS
.\" f6187769dae48234f3877df3c4d99294cc2254fa
从 Linux 3.16 开始，对这些系统调用的支持是可选的，具体取决于内核是否使用 \fBCONFIG_SGETMASK_SYSCALL\fP 选项构建。
.SH STANDARDS
这些系统调用是特定于 Linux 的。
.SH NOTES
这些系统调用不知道大于 31 的信号数 (即实时信号)。
.PP
x86\-64 上不存在这些系统调用。
.PP
无法阻止 \fBSIGSTOP\fP 或 \fBSIGKILL\fP。
.SH "SEE ALSO"
\fBsigprocmask\fP(2), \fBsignal\fP(7)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
