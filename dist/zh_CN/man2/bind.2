.\" -*- coding: UTF-8 -*-
.\" Copyright 1993 Rickard E. Faith (faith@cs.unc.edu)
.\" and Copyright 2005-2007, Michael Kerrisk <mtk.manpages@gmail.com>
.\" Portions extracted from /usr/include/sys/socket.h, which does not have
.\" any authorship information in it.  It is probably available under the GPL.
.\"
.\" SPDX-License-Identifier: Linux-man-pages-copyleft
.\"
.\"
.\" Other portions are from the 6.9 (Berkeley) 3/10/91 man page:
.\"
.\" Copyright (c) 1983 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" SPDX-License-Identifier: BSD-4-Clause-UC
.\"
.\" Modified Mon Oct 21 23:05:29 EDT 1996 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 1998 by Andi Kleen
.\" $Id: bind.2,v 1.3 1999/04/23 19:56:07 freitag Exp $
.\" Modified 2004-06-23 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH bind 2 2023\-02\-05 "Linux man\-pages 6.03" 
.SH NAME
bind \- 将名称绑定到套接字
.SH LIBRARY
标准 C 库 (\fIlibc\fP、\fI\-lc\fP)
.SH SYNOPSIS
.nf
\fB#include <sys/socket.h>\fP
.PP
\fBint bind(int \fP\fIsockfd\fP\fB, const struct sockaddr *\fP\fIaddr\fP\fB,\fP
\fB         socklen_t \fP\fIaddrlen\fP\fB);\fP
.fi
.SH DESCRIPTION
当使用 \fBsocket\fP(2) 创建套接字时，它存在于名称空间 (地址族) 中但没有分配给它的地址。 \fBbind\fP() 将 \fIaddr\fP
指定的地址分配给文件描述符 \fIsockfd\fP 引用的套接字。 \fIaddrlen\fP 指定 \fIaddr\fP 指向的地址结构体的大小，以字节为单位。
传统上，此操作称为 \[lq] 为套接字分配名称 \[rq]。
.PP
在 \fBSOCK_STREAM\fP 套接字可以接收连接之前，通常需要使用 \fBbind\fP() 分配本地地址 (请参见 \fBaccept\fP(2)).
.PP
名称绑定中使用的规则因地址族而异。 有关详细信息，请参见第 7 节中的手册条目。 \fBAF_INET\fP 见 \fBip\fP(7); \fBAF_INET6\fP
见 \fBipv6\fP(7); \fBAF_UNIX\fP 见 \fBunix\fP(7); \fBAF_APPLETALK\fP 见 \fBddp\fP(7);
\fBAF_PACKET\fP 见 \fBpacket\fP(7); \fBAF_X25\fP 见 \fBx25\fP(7); 对于 \fBAF_NETLINK\fP，请参见
\fBnetlink\fP(7)。
.PP
为 \fIaddr\fP 参数传递的实际结构体将取决于地址族。 \fIsockaddr\fP 结构体定义如下:
.PP
.in +4n
.EX
struct sockaddr {
    sa_family_t sa_family;
    char        sa_data[14];
}
.EE
.in
.PP
此结构体的唯一目的是转换 \fIaddr\fP 中传递的结构体指针以避免编译器警告。 请参见下面的示例。
.SH "RETURN VALUE"
成功时，返回零。 出错时返回 \-1，并设置 \fIerrno\fP 以指示错误。
.SH ERRORS
.TP 
\fBEACCES\fP
.\" e.g., privileged port in AF_INET domain
地址受保护，用户不是超级用户。
.TP 
\fBEADDRINUSE\fP
给定的地址已被使用。
.TP 
\fBEADDRINUSE\fP
(Internet 域套接字) 在套接字地址结构体中将端口号指定为零，但是在尝试绑定到临时端口时，确定临时端口范围内的所有端口号当前都在使用中。 请参见
\fI/proc/sys/net/ipv4/ip_local_port_range\fP \fBip\fP(7) 的讨论。
.TP 
\fBEBADF\fP
\fIsockfd\fP 不是有效的文件描述符。
.TP 
\fBEINVAL\fP
.\" This may change in the future: see
.\" .I linux/unix/sock.c for details.
套接字已经绑定到一个地址。
.TP 
\fBEINVAL\fP
\fIaddrlen\fP 错误，或者 \fIaddr\fP 不是该套接字域的有效地址。
.TP 
\fBENOTSOCK\fP
文件描述符 \fIsockfd\fP 不引用套接字。
.PP
以下错误特定于 UNIX 域 (\fBAF_UNIX\fP) 套接字:
.TP 
\fBEACCES\fP
路径前缀的某个组件的搜索权限被拒绝。 (另见 \fBpath_resolution\fP(7).)
.TP 
\fBEADDRNOTAVAIL\fP
请求了不存在的接口或请求的地址不是本地的。
.TP 
\fBEFAULT\fP
\fIaddr\fP 指向用户可访问的地址空间之外。
.TP 
\fBELOOP\fP
解析 \fIaddr\fP 时遇到太多符号链接。
.TP 
\fBENAMETOOLONG\fP
\fIaddr\fP 太长。
.TP 
\fBENOENT\fP
套接字路径名的目录前缀中的组件不存在。
.TP 
\fBENOMEM\fP
可用内核内存不足。
.TP 
\fBENOTDIR\fP
路径前缀的组成部分不是目录。
.TP 
\fBEROFS\fP
套接字 inode 将驻留在只读文件系统上。
.SH STANDARDS
.\" SVr4 documents an additional
.\" .B ENOSR
.\" general error condition, and
.\" additional
.\" .B EIO
.\" and
.\" .B EISDIR
.\" UNIX-domain error conditions.
POSIX.1\-2001、POSIX.1\-2008、SVr4、4.4BSD (\fBbind\fP() 首次出现在 4.2BSD)。
.SH NOTES
有关 \fIsocklen_t\fP 类型的背景，请参见 \fBaccept\fP(2)。
.SH BUGS
.\" FIXME Document transparent proxy options
不描述透明代理选项。
.SH EXAMPLES
在 \fBgetaddrinfo\fP(3) 中可以找到 \fBbind\fP() 与 Internet 域套接字一起使用的示例。
.PP
.\" listen.7 refers to this example.
.\" accept.7 refers to this example.
.\" unix.7 refers to this example.
以下示例显示如何在 UNIX (\fBAF_UNIX\fP) 域中绑定流套接字并接受连接:
.PP
.\" SRC BEGIN (bind.c)
.EX
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/un.h>
#include <unistd.h>

#define MY_SOCK_PATH "/somepath"
#define LISTEN_BACKLOG 50

#define handle_error(msg) \e
    do { perror(msg); exit(EXIT_FAILURE); } while (0)

int
main(void)
{
    int                 sfd, cfd;
    socklen_t           peer_addr_size;
    struct sockaddr_un  my_addr, peer_addr;

    sfd = socket(AF_UNIX, SOCK_STREAM, 0);
    if (sfd == \-1)
        handle_error("socket");

    memset(&my_addr, 0, sizeof(my_addr));
    my_addr.sun_family = AF_UNIX;
    strncpy(my_addr.sun_path, MY_SOCK_PATH,
            sizeof(my_addr.sun_path) \- 1);

    if (bind(sfd, (struct sockaddr *) &my_addr,
             sizeof(my_addr)) == \-1)
        handle_error("bind");

    if (listen(sfd, LISTEN_BACKLOG) == \-1)
        handle_error("listen");

    /* Now we can accept incoming connections one
       at a time using accept(2). */

    peer_addr_size = sizeof(peer_addr);
    cfd = accept(sfd, (struct sockaddr *) &peer_addr,
                 &peer_addr_size);
    if (cfd == \-1)
        handle_error("accept");

    /* Code to deal with incoming connection(s)... */

    if (close(sfd) == \-1)
        handle_error("close");

    if (unlink(MY_SOCK_PATH) == \-1)
        handle_error("unlink");
}
.EE
.\" SRC END
.SH "SEE ALSO"
\fBaccept\fP(2), \fBconnect\fP(2), \fBgetsockname\fP(2), \fBlisten\fP(2), \fBsocket\fP(2),
\fBgetaddrinfo\fP(3), \fBgetifaddrs\fP(3), \fBip\fP(7), \fBipv6\fP(7),
\fBpath_resolution\fP(7), \fBsocket\fP(7), \fBunix\fP(7)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
