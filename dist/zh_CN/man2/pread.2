.\" -*- coding: UTF-8 -*-
.\" Copyright (C) 1999 Joseph Samuel Myers.
.\"
.\" SPDX-License-Identifier: Linux-man-pages-copyleft
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH pread 2 2022\-12\-04 "Linux man\-pages 6.03" 
.SH NAME
pread, pwrite \- 在给定偏移处读取或写入文件描述符
.SH LIBRARY
标准 C 库 (\fIlibc\fP、\fI\-lc\fP)
.SH SYNOPSIS
.nf
\fB#include <unistd.h>\fP
.PP
\fBssize_t pread(int \fP\fIfd\fP\fB, void \fP\fIbuf\fP\fB[.\fP\fIcount\fP\fB], size_t \fP\fIcount\fP\fB,\fP
\fB              off_t \fP\fIoffset\fP\fB);\fP
\fBssize_t pwrite(int \fP\fIfd\fP\fB, const void \fP\fIbuf\fP\fB[.\fP\fIcount\fP\fB], size_t \fP\fIcount\fP\fB,\fP
\fB              off_t \fP\fIoffset\fP\fB);\fP
.fi
.PP
.RS -4
特性测试宏 glibc 的要求 (参见 \fBfeature_test_macros\fP(7)):
.RE
.PP
\fBpread\fP(), \fBpwrite\fP():
.nf
    _XOPEN_SOURCE >= 500
        || /* Since glibc 2.12: */ _POSIX_C_SOURCE >= 200809L
.fi
.SH DESCRIPTION
\fBpread\fP() 从文件描述符 \fIfd\fP 的偏移量 \fIoffset\fP (从文件的开头) 读取最多 \fIcount\fP 个字节到从 \fIbuf\fP
开始的缓冲区中。 文件偏移量没有改变。
.PP
\fBpwrite\fP() 从从 \fIbuf\fP 开始的缓冲区写入最多 \fIcount\fP 个字节到偏移量 \fIoffset\fP 处的文件描述符 \fIfd\fP。
文件偏移量没有改变。
.PP
\fIfd\fP 引用的文件必须能够查找。
.SH "RETURN VALUE"
成功时，\fBpread\fP() 返回读取的字节数 (返回零表示文件结束)，\fBpwrite\fP() 返回写入的字节数。
.PP
请注意，成功调用传输的字节数少于请求的字节数并不是错误 (请参见 \fBread\fP(2) 和 \fBwrite\fP(2))。
.PP
出错时，返回 \-1 并设置 \fIerrno\fP 以指示错误。
.SH ERRORS
\fBpread\fP() 可能会失败并将 \fIerrno\fP 设置为为 \fBread\fP(2) 或 \fBlseek\fP(2) 指定的任何错误。
\fBpwrite\fP() 可能会失败并将 \fIerrno\fP 设置为为 \fBwrite\fP(2) 或 \fBlseek\fP(2) 指定的任何错误。
.SH VERSIONS
Linux 2.1.60 中增加了 \fBpread\fP() 和 \fBpwrite\fP() 系统调用; i386 系统调用表中的条目已添加到 Linux
2.1.69 中。 在 glibc 2.1 中添加了 C 库支持 (包括在没有系统调用的旧内核上使用 \fBlseek\fP(2) 的仿真)。
.SH STANDARDS
POSIX.1\-2001, POSIX.1\-2008.
.SH NOTES
.\"
\fBpread\fP() 和 \fBpwrite\fP() 系统调用在多线程应用程序中特别有用。 它们允许多个线程对同一个文件描述符执行
I/O，而不会受到其他线程对文件偏移量更改的影响。
.SS "C library/kernel differences"
在 Linux 上，底层系统调用在 Linux 2.6 改名: \fBpread\fP() 变成了 \fBpread64\fP()，\fBpwrite\fP() 变成了
\fBpwrite64\fP()。 系统调用数保持不变。 glibc \fBpread\fP() 和 \fBpwrite\fP() 封装函数透明地处理变化。
.PP
在某些 32 位体系结构上，这些系统调用的调用签名不同，原因在 \fBsyscall\fP(2) 中有所描述。
.SH BUGS
.\" FIXME . https://bugzilla.kernel.org/show_bug.cgi?id=43178
POSIX 要求打开带有 \fBO_APPEND\fP 标志的文件不应影响 \fBpwrite\fP() 写入数据的位置。 但是，在 Linux 上，如果使用
\fBO_APPEND\fP 打开文件，则 \fBpwrite\fP() 会将数据追加到文件末尾，而不管 \fIoffset\fP 的值如何。
.SH "SEE ALSO"
\fBlseek\fP(2), \fBread\fP(2), \fBreadv\fP(2), \fBwrite\fP(2)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
