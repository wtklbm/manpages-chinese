.\" -*- coding: UTF-8 -*-
.\" This manpage is Copyright (C) 1992 Drew Eckhardt;
.\"             and Copyright (C) 1993 Michael Haardt, Ian Jackson.
.\" and Copyright (C) 2006, 2014 Michael Kerrisk
.\"
.\" SPDX-License-Identifier: Linux-man-pages-copyleft
.\"
.\" Modified 1993-07-23 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1994-08-21 by Michael Haardt
.\" Modified 2004-06-23 by Michael Kerrisk <mtk.manpages@gmail.com>
.\" Modified 2005-04-04, as per suggestion by Michael Hardt for rename.2
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH link 2 2023\-02\-05 "Linux man\-pages 6.03" 
.SH NAME
link, linkat \- 为文件创建一个新名称
.SH LIBRARY
标准 C 库 (\fIlibc\fP、\fI\-lc\fP)
.SH SYNOPSIS
.nf
\fB#include <unistd.h>\fP
.PP
\fBint link(const char *\fP\fIoldpath\fP\fB, const char *\fP\fInewpath\fP\fB);\fP
.PP
\fB#include <fcntl.h>           \fP/* Definition of \fBAT_*\fP constants */
\fB#include <unistd.h>\fP
.PP
\fBint linkat(int \fP\fIolddirfd\fP\fB, const char *\fP\fIoldpath\fP\fB,\fP
\fB           int \fP\fInewdirfd\fP\fB, const char *\fP\fInewpath\fP\fB, int \fP\fIflags\fP\fB);\fP
.fi
.PP
.RS -4
特性测试宏 glibc 的要求 (参见 \fBfeature_test_macros\fP(7)):
.RE
.PP
\fBlinkat\fP():
.nf
    由于 glibc 2.10:
        _POSIX_C_SOURCE >= 200809L
    在 glibc 2.10 之前:
        _ATFILE_SOURCE
.fi
.SH DESCRIPTION
\fBlink\fP() 创建到现有文件的新链接 (也称为硬链接)。
.PP
如果 \fInewpath\fP 存在，它将被 \fInot\fP 覆盖。
.PP
这个新名称可以与旧名称完全一样用于任何操作; 这两个名称指的是同一个文件 (因此具有相同的权限和所有权) 并且无法分辨哪个名称是 "original"。
.SS linkat()
\fBlinkat\fP() 系统调用的操作方式与 \fBlink\fP() 完全相同，除了此处描述的差异。
.PP
如果 \fIoldpath\fP 中给出的路径名是相对的，那么它被解释为相对于文件描述符 \fIolddirfd\fP 引用的目录
(而不是相对于调用进程的当前工作目录，如 \fBlink\fP() 对相对路径名所做的那样)。
.PP
如果 \fIoldpath\fP 是相对的且 \fIolddirfd\fP 是特殊值 \fBAT_FDCWD\fP，则 \fIoldpath\fP
被解释为相对于调用进程的当前工作目录 (如 \fBlink\fP()).
.PP
如果 \fIoldpath\fP 是绝对的，则忽略 \fIolddirfd\fP。
.PP
\fInewpath\fP 的解释与 \fIoldpath\fP 相同，除了相对路径名是相对于文件描述符 \fInewdirfd\fP 引用的目录解释的。
.PP
以下值可以在 \fIflags\fP: 中按位或运算
.TP 
\fBAT_EMPTY_PATH\fP (since Linux 2.6.39)
.\" commit 11a7b371b64ef39fc5fb1b6f2218eef7c4d035e3
.\" Before glibc 2.16, defining _ATFILE_SOURCE sufficed
如果 \fIoldpath\fP 是空字符串，则创建指向 \fIolddirfd\fP 引用的文件的链接 (可能已使用 \fBopen\fP(2) \fBO_PATH\fP
标志获得)。 在这种情况下，\fIolddirfd\fP 可以引用除目录之外的任何类型的文件。 如果文件的链接计数为零 (使用 \fBO_TMPFILE\fP
创建的文件和不使用 \fBO_EXCL\fP 的文件除外)，这通常不起作用。 调用者必须具有 \fBCAP_DAC_READ_SEARCH\fP
能力才能使用此标志。 这个标志是 Linux 特有的; 定义 \fB_GNU_SOURCE\fP 以获得其定义。
.TP 
\fBAT_SYMLINK_FOLLOW\fP (since Linux 2.6.18)
默认情况下，如果 \fBlinkat\fP() 是符号链接 (如 \fBlink\fP()).  如果 \fIflags\fP 是符号链接，则可以在 \fIflags\fP
中指定标志 \fBAT_SYMLINK_FOLLOW\fP 以使 \fIoldpath\fP 被解引用。 如果安装了 procfs，它可以用作
\fBAT_EMPTY_PATH\fP 的替代品，如下所示:
.IP
.in +4n
.EX
linkat(AT_FDCWD, "/proc/self/fd/<fd>", newdirfd,
       newname, AT_SYMLINK_FOLLOW);
.EE
.in
.PP
在 Linux 2.6.18 之前，\fIflags\fP 参数未被使用，必须指定为 0.
.PP
有关对 \fBlinkat\fP() 的需求的说明，请参见 \fBopenat\fP(2)。
.SH "RETURN VALUE"
成功时，返回零。 出错时返回 \-1，并设置 \fIerrno\fP 以指示错误。
.SH ERRORS
.TP 
\fBEACCES\fP
对包含 \fInewpath\fP 的目录的写访问被拒绝，或者对 \fIoldpath\fP 或 \fInewpath\fP 的路径前缀中的目录之一的搜索权限被拒绝。
(另见 \fBpath_resolution\fP(7).)
.TP 
\fBEDQUOT\fP
用户在文件系统上的磁盘块配额已用完。
.TP 
\fBEEXIST\fP
\fInewpath\fP 已经存在。
.TP 
\fBEFAULT\fP
\fIoldpath\fP 或 \fInewpath\fP 指向您可访问的地址空间之外。
.TP 
\fBEIO\fP
发生 I/O 错误。
.TP 
\fBELOOP\fP
解析 \fIoldpath\fP 或 \fInewpath\fP 时遇到太多符号链接。
.TP 
\fBEMLINK\fP
\fIoldpath\fP 引用的文件已具有最大数量的指向它的链接。 例如，在不使用 \fIdir_index\fP 特性的 \fBext4\fP(5)
文件系统上，一个文件的硬链接数限制为 65,000; 在 \fBbtrfs\fP(5) 上，限制为 65,535 个链接。
.TP 
\fBENAMETOOLONG\fP
\fIoldpath\fP 或 \fInewpath\fP 太长。
.TP 
\fBENOENT\fP
\fIoldpath\fP 或 \fInewpath\fP 中的目录组件不存在或者是悬垂符号链接。
.TP 
\fBENOMEM\fP
可用内核内存不足。
.TP 
\fBENOSPC\fP
包含该文件的设备没有空间容纳新的目录条目。
.TP 
\fBENOTDIR\fP
在 \fIoldpath\fP 或 \fInewpath\fP 中用作目录的组件实际上不是目录。
.TP 
\fBEPERM\fP
\fIoldpath\fP 是一个目录。
.TP 
\fBEPERM\fP
包含 \fIoldpath\fP 和 \fInewpath\fP 的文件系统不支持创建硬链接。
.TP 
\fBEPERM\fP (since Linux 3.6)
调用者无权创建此文件的硬链接 (参见 \fBproc\fP(5)).h 中 \fI/proc/sys/fs/protected_hardlinks\fP 的说明)。
.TP 
\fBEPERM\fP
\fIoldpath\fP 被标记为不可改变或仅，追加。 (见 \fBioctl_iflags\fP(2).)
.TP 
\fBEROFS\fP
该文件位于只读文件系统上。
.TP 
\fBEXDEV\fP
\fIoldpath\fP 和 \fInewpath\fP 不在同一个挂载文件系统上。 (Linux 允许在多个点挂载一个文件系统，但 \fBlink\fP()
不能跨不同的挂载点工作，即使在两个点挂载了相同的文件系统。)
.PP
\fBlinkat\fP(): 可能会出现以下其他错误
.TP 
\fBEBADF\fP
\fIoldpath\fP (\fInewpath\fP) 是相对的，但 \fIolddirfd\fP (\fInewdirfd\fP) 既不是 \fBAT_FDCWD\fP
也不是有效的文件描述符。
.TP 
\fBEINVAL\fP
在 \fIflags\fP 中指定了无效的标志值。
.TP 
\fBENOENT\fP
在 \fIflags\fP 中指定了 \fBAT_EMPTY_PATH\fP，但调用者没有 \fBCAP_DAC_READ_SEARCH\fP 能力。
.TP 
\fBENOENT\fP
尝试链接到与使用创建的文件描述符相对应的 \fI/proc/self/fd/NN\fP 文件
.IP
.in +4n
.EX
open(path, O_TMPFILE | O_EXCL, mode);
.EE
.in
.IP
请参见 \fBopen\fP(2)。
.TP 
\fBENOENT\fP
试图链接到与已删除文件相对应的 \fI/proc/self/fd/NN\fP 文件。
.TP 
\fBENOENT\fP
\fIoldpath\fP 为相对路径名，\fIolddirfd\fP 为已删除的目录，或者 \fInewpath\fP 为相对路径名，\fInewdirfd\fP
为已删除的目录。
.TP 
\fBENOTDIR\fP
\fIoldpath\fP 是相对的，\fIolddirfd\fP 是指文件而不是目录的文件描述符; 或类似的 \fInewpath\fP 和 \fInewdirfd\fP
.TP 
\fBEPERM\fP
\fIflags\fP 中指定了 \fBAT_EMPTY_PATH\fP，\fIoldpath\fP 为空串，\fIolddirfd\fP 为目录。
.SH VERSIONS
\fBlinkat\fP() 在 Linux 2.6.16 中加入; glibc 2.4 中添加了库支持。
.SH STANDARDS
.\" SVr4 documents additional ENOLINK and
.\" EMULTIHOP error conditions; POSIX.1 does not document ELOOP.
.\" X/OPEN does not document EFAULT, ENOMEM or EIO.
\fBlink\fP(): SVr4、4.3BSD、POSIX.1\-2001 (但请参见注释)、POSIX.1\-2008。
.PP
\fBlinkat\fP(): POSIX.1\-2008.
.SH NOTES
由 \fBlink\fP() 创建的硬链接不能跨越文件系统。 如果需要，请使用 \fBsymlink\fP(2)。
.PP
.\" more precisely: since Linux 1.3.56
.\" For example, the default Solaris compilation environment
.\" behaves like Linux, and contributors to a March 2005
.\" thread in the Austin mailing list reported that some
.\" other (System V) implementations did/do the same -- MTK, Apr 05
POSIX.1\-2001 说如果 \fBlink\fP() 是一个符号链接，它应该解释为 \fIoldpath\fP。 但是，由于 Linux 2.0，Linux
不这样做: 如果 \fIoldpath\fP 是一个符号链接，那么 \fInewpath\fP 被创建为指向同一个符号链接文件的 (hard) 链接
(即，\fInewpath\fP 成为指向 \fIoldpath\fP 引用的同一个文件的符号链接) .  其他一些实现的行为方式与 Linux 相同。
POSIX.1\-2008 更改了 \fBlink\fP() 的规范，如果它是符号链接，则无论 \fIoldpath\fP 是否被解引用都取决于实现。
要在创建链接时精确控制符号链接的处理，请使用 \fBlinkat\fP()。
.SS "glibc notes"
在 \fBlinkat\fP() 不可用的旧内核上，glibc 包装器函数退回到使用 \fBlink\fP()，除非指定了
\fBAT_SYMLINK_FOLLOW\fP。 当 \fIoldpath\fP 和 \fInewpath\fP 是相对路径名时，glibc 根据
\fI/proc/self/fd\fP 中对应于 \fIolddirfd\fP 和 \fInewdirfd\fP 参数的符号链接构造路径名。
.SH BUGS
在 NFS 文件系统上，返回代码可能是错误的，以防 NFS 服务器执行链接创建并在它可以说之前死掉。 使用 \fBstat\fP(2) 查看链接是否已创建。
.SH "SEE ALSO"
\fBln\fP(1), \fBopen\fP(2), \fBrename\fP(2), \fBstat\fP(2), \fBsymlink\fP(2), \fBunlink\fP(2),
\fBpath_resolution\fP(7), \fBsymlink\fP(7)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
