.\" -*- coding: UTF-8 -*-
.\" Copyright (C) Tom Bjorkholm & Markus Kuhn, 1996
.\"
.\" SPDX-License-Identifier: GPL-2.0-or-later
.\"
.\" 1996-04-01 Tom Bjorkholm <tomb@mydata.se>
.\"            First version written
.\" 1996-04-10 Markus Kuhn <mskuhn@cip.informatik.uni-erlangen.de>
.\"            revision
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH sched_yield 2 2022\-10\-30 "Linux man\-pages 6.03" 
.SH NAME
sched_yield \- 产生处理器
.SH LIBRARY
标准 C 库 (\fIlibc\fP、\fI\-lc\fP)
.SH SYNOPSIS
.nf
\fB#include <sched.h>\fP
.PP
\fBint sched_yield(void);\fP
.fi
.SH DESCRIPTION
\fBsched_yield\fP() 导致调用线程放弃 CPU。 该线程因其静态优先级被移动到队列的末尾，并且一个新线程开始运行。
.SH "RETURN VALUE"
成功时，\fBsched_yield\fP() 返回 0。 出错时返回 \-1，并设置 \fIerrno\fP 以指示错误。
.SH ERRORS
在 Linux 实现中，\fBsched_yield\fP() 总是成功。
.SH STANDARDS
POSIX.1\-2001, POSIX.1\-2008.
.SH NOTES
如果此时调用线程是最高优先级列表中的唯一线程，则调用到 \fBsched_yield\fP() 后会继续运行。
.PP
\fBsched_yield\fP() 可用的 POSIX 系统在 \fI<unistd.h>\fP 中定义
\fB_POSIX_PRIORITY_SCHEDULING\fP。
.PP
对 \fBsched_yield\fP() 的策略性调用可以通过在调用者释放 (heavily) 争用资源 (例如，互连锁)
时让其他线程或进程有机会运行来提高性能。 避免不必要或不恰当地调用 \fBsched_yield\fP()
(例如，当其他可调度线程所需的资源仍由调用者持有时)，因为这样做会导致不必要的上下文切换，从而降低系统性能。
.PP
\fBsched_yield\fP() 旨在用于实时调度策略 (即 \fBSCHED_FIFO\fP 或 \fBSCHED_RR\fP)。 将
\fBsched_yield\fP() 与不确定的调度策略 (例如 \fBSCHED_OTHER\fP) 一起使用是未指定的，很可能意味着您的应用程序设计已损坏。
.SH "SEE ALSO"
\fBsched\fP(7)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
