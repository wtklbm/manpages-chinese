.\" -*- coding: UTF-8 -*-
.\" Copyright 1993 Rickard E. Faith (faith@cs.unc.edu)
.\"
.\" SPDX-License-Identifier: Linux-man-pages-copyleft
.\"
.\" Historical remark, aeb, 2004-06-05
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH getuid 2 2022\-10\-30 "Linux man\-pages 6.03" 
.SH NAME
getuid, geteuid \- 获取用户身份
.SH LIBRARY
标准 C 库 (\fIlibc\fP、\fI\-lc\fP)
.SH SYNOPSIS
.nf
\fB#include <unistd.h>\fP
.PP
\fBuid_t getuid(void);\fP
\fBuid_t geteuid(void);\fP
.fi
.SH DESCRIPTION
\fBgetuid\fP() 返回调用进程的真实用户 ID。
.PP
\fBgeteuid\fP() 返回调用进程的有效用户 ID。
.SH ERRORS
.\" https://www.austingroupbugs.net/view.php?id=511
.\" 0000511: getuid and friends should not modify errno
这些函数总是成功的，从不修改 \fIerrno\fP。
.SH STANDARDS
POSIX.1\-2001, POSIX.1\-2008, 4.3BSD.
.SH NOTES
.SS History
在 UNIX\V6 中，\fBgetuid\fP() 调用返回 \fI(euid << 8) + uid\fP。 UNIX\V7 引入了单独的调用
\fBgetuid\fP() 和 \fBgeteuid\fP()。
.PP
原始的 Linux \fBgetuid\fP() 和 \fBgeteuid\fP() 系统调用仅支持 16 位用户 ID。 随后，Linux 2.4 增加了
\fBgetuid32\fP() 和 \fBgeteuid32\fP()，支持 32 位 ID。 glibc \fBgetuid\fP() 和 \fBgeteuid\fP()
包装器函数透明地处理内核版本之间的变化。
.PP
在 Alpha 上，提供了单个 \fBgetxuid\fP() 系统调用，而不是一对 \fBgetuid\fP() 和 \fBgeteuid\fP()
系统调用，它返回一对真实有效的 UID。 glibc \fBgetuid\fP() 和 \fBgeteuid\fP() 包装器函数透明地处理这个问题。
有关寄存器映射的详细信息，请参见 \fBsyscall\fP(2)。
.SH "SEE ALSO"
\fBgetresuid\fP(2), \fBsetreuid\fP(2), \fBsetuid\fP(2), \fBcredentials\fP(7)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
