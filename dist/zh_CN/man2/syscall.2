.\" -*- coding: UTF-8 -*-
'\" t
.\" Copyright (c) 1980, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" SPDX-License-Identifier: BSD-4-Clause-UC
.\"
.\"     @(#)syscall.2	8.1 (Berkeley) 6/16/93
.\"
.\"
.\" 2002-03-20  Christoph Hellwig <hch@infradead.org>
.\"	- adopted for Linux
.\" 2015-01-17, Kees Cook <keescook@chromium.org>
.\"	Added mips and arm64.
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH syscall 2 2023\-02\-05 "Linux man\-pages 6.03" 
.SH NAME
syscall \- 间接系统调用
.SH LIBRARY
标准 C 库 (\fIlibc\fP、\fI\-lc\fP)
.SH SYNOPSIS
.nf
\fB#include <sys/syscall.h>\fP      /* Definition of \fBSYS_*\fP constants */
\fB#include <unistd.h>\fP
.PP
\fBlong syscall(long \fP\fInumber\fP\fB, ...);\fP
.fi
.PP
.RS -4
特性测试宏 glibc 的要求 (参见 \fBfeature_test_macros\fP(7)):
.RE
.PP
\fBsyscall\fP():
.nf
    由于 glibc 2.19:
        _DEFAULT_SOURCE
    在 glibc 2.19 之前:
        _BSD_SOURCE || _SVID_SOURCE
.fi
.SH DESCRIPTION
\fBsyscall\fP() 是一个调用系统调用的小库函数，其汇编语言接口有指定的 \fInumber\fP 和指定的参数。 使用 \fBsyscall\fP()
很有用，例如，在调用 C 库中没有包装器函数的系统调用时。
.PP
\fBsyscall\fP() 在进行系统调用之前保存 CPU 寄存器，在系统调用返回时恢复寄存器，并将系统调用返回的任何错误存储在 \fBerrno\fP(3)
中。
.PP
系统调用数的符号常量可以在头文件 \fI<sys/syscall.h>\fP 中找到。
.SH "RETURN VALUE"
返回值由被调用的系统调用定义。 通常，0 返回值表示成功。 \-1 返回值表示错误，错误号存储在 \fIerrno\fP 中。
.SH NOTES
\fBsyscall\fP() 最早出现在 4BSD 中。
.SS "Architecture\-specific requirements"
每个架构 ABI 对如何将系统调用参数传递给内核都有自己的要求。 对于具有 glibc 包装器的系统调用 (例如，大多数系统调用)，glibc
以适合体系结构的方式处理将参数复制到正确寄存器的细节。 然而，当使用 \fBsyscall\fP() 做一个系统调用时，调用者可能需要处理架构相关的细节;
此要求在某些 32 位体系结构上最常遇到。
.PP
例如，在 ARM 架构的嵌入式 ABI (EABI) 上，64 位值 (例如，\fIlong long\fP) 必须与偶数寄存器对对齐。 因此，使用
\fBsyscall\fP() 而不是 glibc 提供的包装器，\fBreadahead\fP(2) 系统调用将在 ARM 架构上以小端模式在 EABI
上调用如下:
.PP
.in +4n
.EX
syscall(SYS_readahead, fd, 0,
        (unsigned int) (offset & 0xFFFFFFFF),
        (unsigned int) (offset >> 32),
        count);
.EE
.in
.PP
由于偏移参数是 64 位，而第一个参数 (\fIfd\fP) 是在 \fIr0\fP 中传递的，调用者必须手动拆分对齐 64 位值，以便在 \fIr2\fP/\fIr3\fP
寄存器对中传递。 这意味着将一个虚拟值插入 \fIr1\fP (0 的第二个参数)。 还必须注意拆分遵循字节序约定 (根据平台的 C ABI)。
.PP
.\" Mike Frysinger: this issue ends up forcing MIPS
.\" O32 to take 7 arguments to syscall()
类似的问题可能发生在具有 O32 ABI 的 MIPS、具有 32 位 ABI 的 PowerPC 和 parisc 以及 Xtensa 上。
.PP
.\" See arch/parisc/kernel/sys_parisc.c.
请注意，虽然 parisc C ABI 也使用对齐的寄存器对，但它使用填充层来隐藏用户空间的问题。
.PP
受影响的系统调用是
\fBfadvise64_64\fP(2)、\fBftruncate64\fP(2)、\fBposix_fadvise\fP(2)、\fBpread64\fP(2)、\fBpwrite64\fP(2)、\fBreadahead\fP(2)、\fBsync_file_range\fP(2)
和 \fBtruncate64\fP(2)。
.PP
.\" You need to look up the syscalls directly in the kernel source to see if
.\" they should be in this list.  For example, look at fs/read_write.c and
.\" the function signatures that do:
.\" ..., unsigned long, pos_l, unsigned long, pos_h, ...
.\" If they use off_t, then they most likely do not belong in this list.
这不会影响手动拆分和组合 64 位值的系统调用，例如
\fB_llseek\fP(2)、\fBpreadv\fP(2)、\fBpreadv2\fP(2)、\fBpwritev\fP(2) 和 \fBpwritev2\fP(2)。
欢迎来到历史包袱的奇妙世界。
.SS "Architecture calling conventions"
每个体系结构都有自己的调用参数并将参数传递给内核的方式。 下表列出了各种架构的详细信息。
.PP
第一个表列出了用于转换到内核模式的指令 (这可能不是转换到内核的最快或最好的方法，因此您可能必须参考
\fBvdso\fP(7))，用于指示系统调用编号的寄存器，使用的 register(s) 返回系统调用结果，以及用于发出错误信号的寄存器。
.if  t \{\
.ft CW
\}
.TS
l2	l2	l2	l2	l1	l2	l.
Arch/ABI	Instruction	System	Ret	Ret	Error	Notes
		call #	val	val2
_
alpha	callsys	v0	v0	a4	a3	1, 6
arc	trap0	r8	r0	\-	\-
arm/OABI	swi NR	\-	r0	\-	\-	2
arm/EABI	swi 0x0	r7	r0	r1	\-
arm64	svc #0	w8	x0	x1	\-
blackfin	excpt 0x0	P0	R0	\-	\-
i386	int $0x80	eax	eax	edx	\-
ia64	break 0x100000	r15	r8	r9	r10	1, 6
loongarch	syscall 0	a7	a0	\-	\-
m68k	trap #0	d0	d0	\-	\-
microblaze	brki r14,8	r12	r3	\-	\-
mips	syscall	v0	v0	v1	a3	1, 6
nios2	trap	r2	r2	\-	r7
parisc	ble 0x100(%sr2, %r0)	r20	r28	\-	\-
powerpc	sc	r0	r3	\-	r0	1
powerpc64	sc	r0	r3	\-	cr0.SO	1
riscv	ecall	a7	a0	a1	\-
s390	svc 0	r1	r2	r3	\-	3
s390x	svc 0	r1	r2	r3	\-	3
superh	trapa #31	r3	r0	r1	\-	4, 6
sparc/32	t 0x10	g1	o0	o1	psr/csr	1, 6
sparc/64	t 0x6d	g1	o0	o1	psr/csr	1, 6
tile	swint1	R10	R00	\-	R01	1
x86\-64	syscall	rax	rax	rdx	\-	5
x32	syscall	rax	rax	rdx	\-	5
xtensa	syscall	a2	a2	\-	\-
.TE
.PP
Notes:
.IP \[bu] 3
在一些架构上，寄存器被用作布尔值 (0 表示没有错误，\-1 表示错误) 来表示系统调用失败。 实际错误值仍包含在返回寄存器中。 在 sparc
上，使用处理器状态寄存器 (\fIpsr\fP) 中的进位位 (\fIcsr\fP) 而不是完整寄存器。 在 powerpc64 上，使用条件寄存器
(\fIcr0\fP) 的字段 0 中的总结溢出位 (\fISO\fP)。
.IP \[bu]
\fINR\fP 为系统调用号。
.IP \[bu]
对于 s390 和 s390x，\fINR\fP (系统调用号) 如果小于 256 可以直接和 \fIsvc\ NR\fP 一起传。
.IP \[bu]
由于历史原因，在 SuperH 上支持额外的陷阱编号，但 \fBtrapa\fP#31 是推荐的 "unified" ABI。
.IP \[bu]
x32 ABI 与 x86\-64 ABI 共享 syscall 表，但有一些细微差别:
.RS
.IP \[bu] 3
为了指示系统调用在 x32 ABI 下被调用，额外的位 \fB__X32_SYSCALL_BIT\fP 与系统调用编号进行按位或运算。 进程使用的 ABI
会影响一些进程行为，包括信号处理或系统调用重启。
.IP \[bu]
由于 x32 对于 \fIlong\fP 和指针类型具有不同的大小，因此一些 (但不是全部; 例如，\fIstruct timeval\fP 或 \fIstruct rlimit\fP 是 64 位) 结构的布局是不同的。 为了处理这个问题，系统调用表中添加了额外的系统调用，从编号 512 开始 (没有
\fB__X32_SYSCALL_BIT\fP).  例如，对于 x86\-64 ABI，\fB__NR_readv\fP 被定义为
19，\fI__X32_SYSCALL_BIT\fP | \fB515\fP 用于 x32 ABI。 大多数这些额外的系统调用实际上与用于提供 i386
兼容的系统调用相同。 然而，有一些值得注意的例外，例如 \fBpreadv2\fP(2)，它使用具有 4 字节指针和大小的 \fIstruct iovec\fP
实体 (内核术语中的 "compat_iovec")，但在单个寄存器而不是两个寄存器中传递 8 字节 \fIpos\fP 参数，如在每隔一个 ABI。
.RE
.IP \[bu]
一些架构 (即 Alpha、IA\-64、MIPS、SuperH、sparc/32 和 sparc/64) 使用额外的寄存器 (上表中的
"Retval2") 从 \fBpipe\fP(2) 系统调回第二个返回值; Alpha 在特定于体系结构的
\fBgetxpid\fP(2)、\fBgetxuid\fP(2) 和 \fBgetxgid\fP(2) 系统调用中也使用了这种技术。
其他架构不使用系统调用接口中的第二个返回值寄存器，即使它是在 System V ABI 中定义的。
.if  t \{\
.in
.ft P
\}
.PP
第二个表显示了用于传递系统调用参数的寄存器。
.if  t \{\
.ft CW
\}
.TS
l	l2	l2	l2	l2	l2	l2	l2	l.
Arch/ABI	arg1	arg2	arg3	arg4	arg5	arg6	arg7	Notes
_
alpha	a0	a1	a2	a3	a4	a5	\-
arc	r0	r1	r2	r3	r4	r5	\-
arm/OABI	r0	r1	r2	r3	r4	r5	r6
arm/EABI	r0	r1	r2	r3	r4	r5	r6
arm64	x0	x1	x2	x3	x4	x5	\-
blackfin	R0	R1	R2	R3	R4	R5	\-
i386	ebx	ecx	edx	esi	edi	ebp	\-
ia64	out0	out1	out2	out3	out4	out5	\-
loongarch	a0	a1	a2	a3	a4	a5	a6
m68k	d1	d2	d3	d4	d5	a0	\-
microblaze	r5	r6	r7	r8	r9	r10	\-
mips/o32	a0	a1	a2	a3	\-	\-	\-	1
mips/n32,64	a0	a1	a2	a3	a4	a5	\-
nios2	r4	r5	r6	r7	r8	r9	\-
parisc	r26	r25	r24	r23	r22	r21	\-
powerpc	r3	r4	r5	r6	r7	r8	r9
powerpc64	r3	r4	r5	r6	r7	r8	\-
riscv	a0	a1	a2	a3	a4	a5	\-
s390	r2	r3	r4	r5	r6	r7	\-
s390x	r2	r3	r4	r5	r6	r7	\-
superh	r4	r5	r6	r7	r0	r1	r2
sparc/32	o0	o1	o2	o3	o4	o5	\-
sparc/64	o0	o1	o2	o3	o4	o5	\-
tile	R00	R01	R02	R03	R04	R05	\-
x86\-64	rdi	rsi	rdx	r10	r8	r9	\-
x32	rdi	rsi	rdx	r10	r8	r9	\-
xtensa	a6	a3	a4	a5	a8	a9	\-
.TE
.PP
Notes:
.IP \[bu] 3
mips/o32 系统调用约定在用户栈上传递参数 5 到 8。
.if  t \{\
.in
.ft P
\}
.PP
请注意，这些表并未涵盖整个调用约定 \[em] 某些体系结构可能会不加区别地破坏此处未列出的其他寄存器。
.SH EXAMPLES
.\" SRC BEGIN (syscall.c)
.EX
#define _GNU_SOURCE
#include <signal.h>
#include <sys/syscall.h>
#include <unistd.h>

int
main(void)
{
    pid_t tid;

    tid = syscall(SYS_gettid);
    syscall(SYS_tgkill, getpid(), tid, SIGHUP);
}
.EE
.\" SRC END
.SH "SEE ALSO"
\fB_syscall\fP(2), \fBintro\fP(2), \fBsyscalls\fP(2), \fBerrno\fP(3), \fBvdso\fP(7)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
