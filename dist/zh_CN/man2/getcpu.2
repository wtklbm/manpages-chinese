.\" -*- coding: UTF-8 -*-
.\" This man page is Copyright (C) 2006 Andi Kleen <ak@muc.de>.
.\"
.\" %%%LICENSE_START(VERBATIM_ONE_PARA)
.\" Permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\" %%%LICENSE_END
.\"
.\" 2008, mtk, various edits
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH getcpu 2 2022\-12\-04 "Linux man\-pages 6.03" 
.SH NAME
getcpu \- 确定运行调用线程的 CPU 和 NUMA 节点
.SH LIBRARY
标准 C 库 (\fIlibc\fP、\fI\-lc\fP)
.SH SYNOPSIS
.nf
\fB#define _GNU_SOURCE\fP             /* See feature_test_macros(7) */
\fB#include <sched.h>\fP
.PP
\fBint getcpu(unsigned int *_Nullable \fP\fIcpu\fP\fB, unsigned int *_Nullable \fP\fInode\fP\fB);\fP
.fi
.SH DESCRIPTION
\fBgetcpu\fP() 系统调用标识调用线程或进程当前运行的处理器和节点，并将它们写入 \fIcpu\fP 和 \fInode\fP 参数指向的整数。 处理器是标识
CPU 的唯一小整数。 节点是标识 NUMA 节点的唯一小标识符。 当 \fIcpu\fP 或 \fInode\fP 为 NULL
时，不会向相应的指针写入任何内容。
.PP
放置在 \fIcpu\fP 中的信息保证仅在调用时是最新的: 除非使用 \fBsched_setaffinity\fP(2) 修复了 CPU
关联，否则内核可能随时更改 CPU。 (通常这不会发生，因为调度器试图最小化 CPU 之间的移动以保持缓存热，但这是可能的。) 调用者必须考虑到
\fIcpu\fP 和 \fInode\fP 中返回的信息在调用时不再是最新信息的可能性回报。
.SH "RETURN VALUE"
成功时，返回 0。 出错时返回 \-1，并设置 \fIerrno\fP 以指示错误。
.SH ERRORS
.TP 
\fBEFAULT\fP
参数指向调用进程的地址空间之外。
.SH VERSIONS
对于 x86\-64 和 i386，\fBgetcpu\fP() 添加到 Linux 2.6.19 中。 在 glibc 2.29 中添加了库支持 (早期的
glibc 版本没有为这个系统提供包装器调用，需要使用 \fBsyscall\fP(2).)
.SH STANDARDS
\fBgetcpu\fP() 是特定于 Linux 的。
.SH NOTES
.\"
Linux 尽最大努力使此调用尽可能快。 (在某些架构上，这是通过 \fBvdso\fP(7).) 中的实现完成的。\fBgetcpu\fP()
的目的是允许程序对每个 CPU 数据进行优化或进行 NUMA 优化。
.SS "C library/kernel differences"
内核系统调用有第三个参数:
.PP
.in +4n
.nf
\fBint getcpu(unsigned int *\fP\fIcpu\fP\fB, unsigned int *\fP\fInode\fP\fB,\fP
\fB           struct getcpu_cache *\fP\fItcache\fP\fB);\fP
.fi
.in
.PP
\fItcache\fP 参数自 Linux 2.6.24 以来未使用，并且 (当直接调用系统调用时) 应指定为 NULL，除非需要移植到 Linux
2.6.23 或更早版本。
.PP
.\" commit 4307d1e5ada595c87f9a4d16db16ba5edb70dcb1
.\" Author: Ingo Molnar <mingo@elte.hu>
.\" Date:   Wed Nov 7 18:37:48 2007 +0100
.\" x86: ignore the sys_getcpu() tcache parameter
.\"
.\" ===== Before Linux 2.6.24: =====
.\" .I tcache
.\" is a pointer to a
.\" .IR "struct getcpu_cache"
.\" that is used as a cache by
.\" .BR getcpu ().
.\" The caller should put the cache into a thread-local variable
.\" if the process is multithreaded,
.\" because the cache cannot be shared between different threads.
.\" .I tcache
.\" can be NULL.
.\" If it is not NULL
.\" .BR getcpu ()
.\" will use it to speed up operation.
.\" The information inside the cache is private to the system call
.\" and should not be accessed by the user program.
.\" The information placed in the cache can change between Linux releases.
.\"
.\" When no cache is specified
.\" .BR getcpu ()
.\" will be slower,
.\" but always retrieve the current CPU and node information.
.\" With a cache
.\" .BR getcpu ()
.\" is faster.
.\" However, the cached information is updated only once per jiffy (see
.\" .BR time (7)).
.\" This means that the information could theoretically be out of date,
.\" although in practice the scheduler's attempt to maintain
.\" soft CPU affinity means that the information is unlikely to change
.\" over the course of the caching interval.
在 Linux 2.6.23 及更早版本中，如果 \fItcache\fP 参数为非
NULL，则它指定一个指向线程本地存储中调用者分配的缓冲区的指针，该缓冲区用于为 \fBgetcpu\fP() 提供缓存机制。 使用缓存可以加快
\fBgetcpu\fP() 调用的速度，但代价是返回的信息极有可能会过时。 在 CPU 之间迁移线程时，缓存机制被认为会导致问题，因此现在忽略了参数。
.SH "SEE ALSO"
\fBmbind\fP(2), \fBsched_setaffinity\fP(2), \fBset_mempolicy\fP(2),
\fBsched_getcpu\fP(3), \fBcpuset\fP(7), \fBvdso\fP(7)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
