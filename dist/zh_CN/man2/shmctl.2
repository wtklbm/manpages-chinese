.\" -*- coding: UTF-8 -*-
'\" t
.\" Copyright (c) 1993 Luigi P. Bai (lpb@softint.com) July 28, 1993
.\" and Copyright 1993 Giorgio Ciucci <giorgio@crcc.it>
.\" and Copyright 2004, 2005 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" SPDX-License-Identifier: Linux-man-pages-copyleft
.\"
.\" Modified 1993-07-28, Rik Faith <faith@cs.unc.edu>
.\" Modified 1993-11-28, Giorgio Ciucci <giorgio@crcc.it>
.\" Modified 1997-01-31, Eric S. Raymond <esr@thyrsus.com>
.\" Modified 2001-02-18, Andries Brouwer <aeb@cwi.nl>
.\" Modified 2002-01-05, 2004-05-27, 2004-06-17,
.\"    Michael Kerrisk <mtk.manpages@gmail.com>
.\" Modified 2004-10-11, aeb
.\" Modified, Nov 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Language and formatting clean-ups
.\"	Updated shmid_ds structure definitions
.\"	Added information on SHM_DEST and SHM_LOCKED flags
.\"	Noted that CAP_IPC_LOCK is not required for SHM_UNLOCK
.\"		since Linux 2.6.9
.\" Modified, 2004-11-25, mtk, notes on 2.6.9 RLIMIT_MEMLOCK changes
.\" 2005-04-25, mtk -- noted aberrant Linux behavior w.r.t. new
.\"	attaches to a segment that has already been marked for deletion.
.\" 2005-08-02, mtk: Added IPC_INFO, SHM_INFO, SHM_STAT descriptions.
.\" 2018-03-20, dbueso: Added SHM_STAT_ANY description.
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH shmctl 2 2022\-12\-15 "Linux man\-pages 6.03" 
.SH NAME
shmctl\-System V 共享内存控制
.SH LIBRARY
标准 C 库 (\fIlibc\fP、\fI\-lc\fP)
.SH SYNOPSIS
.nf
\fB#include <sys/shm.h>\fP
.PP
\fBint shmctl(int \fP\fIshmid\fP\fB, int \fP\fIcmd\fP\fB, struct shmid_ds *\fP\fIbuf\fP\fB);\fP
.fi
.SH DESCRIPTION
\fBshmctl\fP() 在 System\V 共享内存段上执行 \fIcmd\fP 指定的控制操作，其标识符在 \fIshmid\fP 中给出。
.PP
\fIbuf\fP 参数是指向 \fIshmid_ds\fP 结构体的指针，在 \fI<sys/shm.h>\fP 中定义如下:
.PP
.in +4n
.EX
struct shmid_ds {
    struct ipc_perm shm_perm;    /* Ownership and permissions */
    size_t          shm_segsz;   /* Size of segment (bytes) */
    time_t          shm_atime;   /* Last attach time */
    time_t          shm_dtime;   /* Last detach time */
    time_t shm_ctime; /* 最后创建 time/time
                                    通过 shmctl() 修改 */
    pid_t           shm_cpid;    /* PID of creator */
    pid_t           shm_lpid;    /* PID of last shmat(2)/shmdt(2) */
    shmatt_t        shm_nattch;  /* No. of current attaches */
    ...
};
.EE
.in
.PP
\fIshmid_ds\fP 结构体的字段如下:
.TP  12
\fIshm_perm\fP
这是一个 \fIipc_perm\fP 结构体 (见下文)，它指定了对共享内存段的访问权限。
.TP 
\fIshm_segsz\fP
共享内存段的大小 (以字节为单位)。
.TP 
\fIshm_atime\fP
最后一次 \fBshmat\fP(2) 系统调用附加该段的时间。
.TP 
\fIshm_dtime\fP
分离 tgis 段的最后一个 \fBshmdt\fP(2) 系统调用的时间。
.TP 
\fIshm_ctime\fP
创建段的时间或最后一次 \fBshmctl\fP() \fBIPC_SET\fP 操作的时间。
.TP 
\fIshm_cpid\fP
创建共享内存段的进程的 ID。
.TP 
\fIshm_lpid\fP
在此段上执行 \fBshmat\fP(2) 或 \fBshmdt\fP(2) 系统调用的最后一个进程的 ID。
.TP 
\fIshm_nattch\fP
附加了该段的进程数。
.PP
\fIipc_perm\fP 结构体定义如下 (突出显示的字段可使用 \fBIPC_SET\fP): 设置
.PP
.in +4n
.EX
struct ipc_perm {
    key_t          __key;    /* Key supplied to shmget(2) */
    uid_t          \fBuid\fP;      /* Effective UID of owner */
    gid_t          \fBgid\fP;      /* Effective GID of owner */
    uid_t          cuid;     /* Effective UID of creator */
    gid_t          cgid;     /* Effective GID of creator */
    unsigned short \fBmode\fP;     /* \fBPermissions\fP + SHM_DEST and
                                SHM_LOCKED flags */
    unsigned short __seq;    /* Sequence number */
};
.EE
.in
.PP
\fIipc_perm\fP 结构体的 \fImode\fP 字段的最低有效 9 位定义共享内存段的访问权限。 权限位如下:
.TS
l l.
0400	Read by user
0200	Write by user
0040	Read by group
0020	Write by group
0004	Read by others
0002	Write by others
.TE
.PP
系统未使用位 0100、0010 和 0001 (执行位)。 (为了执行带有 \fBSHM_EXEC\fP 标志的 \fBshmat\fP(2)
调用，不需要对段具有执行权限。)
.PP
\fIcmd\fP 的有效值为:
.TP 
\fBIPC_STAT\fP
将 \fIshmid\fP 关联的内核数据结构体中的信息复制到 \fIbuf\fP 指向的 \fIshmid_ds\fP 结构体中。 调用者必须对共享内存段具有读取权限。
.TP 
\fBIPC_SET\fP
将 \fIbuf\fP 指向的 \fIshmid_ds\fP 结构体的某些成员的值写入与此共享内存段关联的内核数据结构体，同时更新其 \fIshm_ctime\fP
成员。
.IP
以下字段已更新: \fIshm_perm.uid\fP、\fIshm_perm.gid\fP 和 (最低有效的 9 位) \fIshm_perm.mode\fP。
.IP
调用进程的有效 UID 必须匹配共享内存段的所有者 (\fIshm_perm.uid\fP) 或创建者
(\fIshm_perm.cuid\fP)，否则调用者必须具有特权。
.TP 
\fBIPC_RMID\fP
将段标记为销售残骸。 只有在最后一个进程分离它之后 (即，当关联结构体 \fIshmid_ds\fP 的 \fIshm_nattch\fP
成员为零时)，该段才会真正被销毁。 调用者必须是段的所有者或创建者，或者具有特权。 \fIbuf\fP 参数被忽略。
.IP
如果一个段已被标记为销毁，则 \fBIPC_STAT\fP 检索到的关联数据结构体中 \fIshm_perm.mode\fP 字段的 (nonstandard)
\fBSHM_DEST\fP 标志将被设置。
.IP
调用方 \fImust\fP 确保一个段最终被销毁; 否则其出现故障的页面将保留在内存中或交换。
.IP
另请详见 \fBproc\fP(5) 中 \fI/proc/sys/kernel/shm_rmid_forced\fP 的说明。
.TP 
\fBIPC_INFO\fP (Linux\-specific)
在 \fIbuf\fP 指向的结构体中返回有关系统范围共享内存限制和参数的信息。 此结构体是 \fIshminfo\fP 类型 (因此，需要强制转换)，如果定义了
\fB_GNU_SOURCE\fP 特性测试宏，则在 \fI<sys/shm.h>\fP 中定义:
.IP
.in +4n
.EX
struct shminfo {
    unsigned long shmmax; /* Maximum segment size */
    unsigned long shmmin; /* Minimum segment size;
                             总是 1 */
    unsigned long shmmni; /* Maximum number of segments */
    unsigned long shmseg; /* Maximum number of segments
                             一个进程可以附加;
                             unused within kernel */
    unsigned long shmall; /* Maximum number of pages of
                             共享内存，系统范围 */
};
.EE
.in
.IP
\fIshmmni\fP、\fIshmmax\fP 和 \fIshmall\fP 设置可以通过同名的 \fI/proc\fP 文件进行更改; 详见 \fBproc\fP(5)。
.TP 
\fBSHM_INFO\fP (Linux\-specific)
返回一个 \fIshm_info\fP 结构体，其字段包含有关共享内存消耗的系统资源的信息。 如果定义了 \fB_GNU_SOURCE\fP
特性测试宏，则此结构体在 \fI<sys/shm.h>\fP 中定义:
.IP
.in +4n
.EX
struct shm_info {
    int           used_ids; /* # of currently existing
                               segments */
    unsigned long shm_tot;  /* Total number of shared
                               memory pages */  
    unsigned long shm_rss;  /* # of resident shared
                               memory pages */
    unsigned long shm_swp;  /* # of swapped shared
                               memory pages */
    unsigned long swap_attempts;
                            /* Unused since Linux 2.4 */
    unsigned long swap_successes;
                            /* Unused since Linux 2.4 */
};
.EE
.in
.TP 
\fBSHM_STAT\fP (Linux\-specific)
像 \fBIPC_STAT\fP 一样返回 \fIshmid_ds\fP 结构体。 但是，\fIshmid\fP
参数不是段标识符，而是内核内部数组的索引，该数组维护有关系统上所有共享内存段的信息。
.TP 
\fBSHM_STAT_ANY\fP (Linux\-specific, since Linux 4.17)
像 \fBSHM_STAT\fP 一样返回 \fIshmid_ds\fP 结构体。 但是，不会检查 \fIshm_perm.mode\fP 是否具有 \fIshmid\fP
的读取权限，这意味着任何用户都可以使用此操作 (就像任何用户都可以读取 \fI/proc/sysvipc/shm\fP 以获得相同的信息一样)。
.PP
调用者可以阻止或允许交换具有以下 \fIcmd\fP 值的共享内存段:
.TP 
\fBSHM_LOCK\fP (Linux\-specific)
防止交换共享内存段。 调用者必须在启用锁定后需要存在的任何页面中出错。 如果一个段已经被锁定，则 \fBIPC_STAT\fP 检索到的关联数据结构体中
\fIshm_perm.mode\fP 字段的 (nonstandard) \fBSHM_LOCKED\fP 标志将被置位。
.TP 
\fBSHM_UNLOCK\fP (Linux\-specific)
解锁段，允许它被换出。
.PP
.\" There was some weirdness in Linux 2.6.9: SHM_LOCK and SHM_UNLOCK could
.\" be applied to a segment, regardless of ownership of the segment.
.\" This was a botch-up in the move to RLIMIT_MEMLOCK, and was fixed
.\" in Linux 2.6.10.  MTK, May 2005
在 Linux 2.6.10 之前，只有特权进程可以使用 \fBSHM_LOCK\fP 和 \fBSHM_UNLOCK\fP。 从 Linux 2.6.10
开始，如果非特权进程的有效 UID 与段的所有者或创建者 UID 匹配，并且 (对于 \fBSHM_LOCK\fP)，要锁定的内存量落在
\fBRLIMIT_MEMLOCK\fP 资源限制内 (参见 \fBsetrlimit\fP(2)).
.SH "RETURN VALUE"
成功的 \fBIPC_INFO\fP 或 \fBSHM_INFO\fP 操作返回内核内部数组中最高使用条目的索引，记录有关所有共享内存段的信息。 (此信息可与重复的
\fBSHM_STAT\fP 或 \fBSHM_STAT_ANY\fP 操作一起使用，以获得有关系统上所有共享内存段的信息。) 成功的 \fBSHM_STAT\fP
操作返回其索引在 \fIshmid\fP 中给出的共享内存段的标识符。 其他操作成功返回 0。
.PP
出错时返回 \-1，并设置 \fIerrno\fP 以指示错误。
.SH ERRORS
.TP 
\fBEACCES\fP
请求 \fBIPC_STAT\fP 或 \fBSHM_STAT\fP，\fIshm_perm.mode\fP 不允许对 \fIshmid\fP
进行读取访问，并且调用进程在管理其 IPC 命名空间的用户命名空间中不具有 \fBCAP_IPC_OWNER\fP 能力。
.TP 
\fBEFAULT\fP
参数 \fIcmd\fP 的值为 \fBIPC_SET\fP 或 \fBIPC_STAT\fP，但 \fIbuf\fP 指向的地址不可访问。
.TP 
\fBEIDRM\fP
\fIshmid\fP 指向已删除的标识符。
.TP 
\fBEINVAL\fP
\fIshmid\fP 不是有效的标识符，或者 \fIcmd\fP 不是有效的命令。 或者: 对于 \fBSHM_STAT\fP 或 \fBSHM_STAT_ANY\fP
操作，\fIshmid\fP 中指定的索引值引用了当前未使用的数组槽。
.TP 
\fBENOMEM\fP
(从 Linux 2.6.9 开始)，\fBSHM_LOCK\fP 被指定，要锁定的段的大小意味着锁定的共享内存段中的总字节数将超过调用进程的真实用户 ID
的限制。 此限制由 \fBRLIMIT_MEMLOCK\fP 软资源限制定义 (请参见 \fBsetrlimit\fP(2)).
.TP 
\fBEOVERFLOW\fP
\fBIPC_STAT\fP 被尝试，GID 或 UID 值太大，无法存储在 \fIbuf\fP 指向的结构体中。
.TP 
\fBEPERM\fP
尝试 \fBIPC_SET\fP 或 \fBIPC_RMID\fP，调用进程的有效用户 ID 不是创建者 (在 \fIshm_perm.cuid\fP) 中找到，或所有者
(在 \fIshm_perm.uid\fP) 中找到，进程没有权限) (Linux: 没有 \fBCAP_SYS_ADMIN\fP 能力) .
.IP
或者 (在 Linux 2.6.9 之前) 指定了 \fBSHM_LOCK\fP 或 \fBSHM_UNLOCK\fP，但进程没有特权 (Linux: 没有
\fBCAP_IPC_LOCK\fP 能力)。 (从 Linux 2.6.9 开始，如果 \fBRLIMIT_MEMLOCK\fP 为 0
并且调用者没有特权，也会出现此错误。)
.SH STANDARDS
.\" SVr4 documents additional error conditions EINVAL,
.\" ENOENT, ENOSPC, ENOMEM, EEXIST.  Neither SVr4 nor SVID documents
.\" an EIDRM error condition.
POSIX.1\-2001, POSIX.1\-2008, SVr4.
.SH NOTES
\fBipcs\fP(1) 程序使用 \fBIPC_INFO\fP、\fBSHM_STAT\fP 和 \fBSHM_INFO\fP 操作来提供有关已分配资源的信息。 在
future 中，这些可能会修改或移动到 \fI/proc\fP 文件系统接口。
.PP
Linux 允许进程将 (\fBshmat\fP(2)) 附加到已使用 \fIshmctl(IPC_RMID)\fP 标记为删除的共享内存段。 此特性在其他
UNIX 实现上不可用; 便携式应用程序应避免依赖它。
.PP
\fIstruct shmid_ds\fP 中的各个字段在 Linux 2.2 下被键入为 \fIshort\fP，在 Linux 2.4 下已成为
\fIlong\fP。 要利用这一点，在 glibc\-2.1.91 或更高版本下重新编译就足够了。 (内核通过 \fIcmd\fP.) 中的 \fBIPC_64\fP
标志区分新旧调用
.SH "SEE ALSO"
\fBmlock\fP(2), \fBsetrlimit\fP(2), \fBshmget\fP(2), \fBshmop\fP(2), \fBcapabilities\fP(7),
\fBsysvipc\fP(7)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
