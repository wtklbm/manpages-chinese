.\" -*- coding: UTF-8 -*-
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH lspci 8 "20 November 2022" pciutils\-3.9.0 "The PCI Utilities"
.SH NAME
lspci \- 列出所有 PCI 设备
.SH SYNOPSIS
\fBlspci\fP [\fBoptions\fP]
.SH DESCRIPTION
\fBlspci\fP 是一个实用程序，用于显示有关系统中的 PCI 总线和连接到它们的设备的信息。

默认情况下，它会显示一个简短的设备列表。使用下面描述的选项来请求更详细的输出或用于其他程序解析的输出。

如果您要报告 PCI 设备驱动程序或 \fIlspci\fP 本身的错误，请包括 "lspci \-vvx" 或更好的 "lspci \-vvxxx" 的输出
(但是，请参见下面的可能警告)。

输出的某些部分，尤其是在非常冗长的模式下，可能只有经验丰富的 PCI 黑客才能理解。有关字段的准确定义，请查阅 PCI 规范或 \fBheader.h\fP
和 \fB/usr/include/linux/pci.h\fP 包含文件。

在许多操作系统上，对 PCI 配置空间的某些部分的访问仅限于 root，因此普通用户可用的 \fIlspci\fP 特性受到限制。但是，\fIlspci\fP
会尽力显示尽可能多的信息，并用 \fI<access denied>\fP 文本标记所有其他信息。

.SH OPTIONS

.SS "Basic display modes"
.TP 
\fB\-m\fP
以向后兼容的机器可读形式转储 PCI 设备数据。 详情见下文。
.TP 
\fB\-mm\fP
以机器可读的形式转储 PCI 设备数据，以便于脚本解析。 详情见下文。
.TP 
\fB\-t\fP
显示一个树状图，其中包含所有总线、桥接器、设备以及它们之间的连接。

.SS "Display options"
.TP 
\fB\-v\fP
详细并显示有关所有设备的详细信息。
.TP 
\fB\-vv\fP
非常冗长并显示更多详细信息。这个级别包括所有被认为有用的东西。
.TP 
\fB\-vvv\fP
更加详细并显示我们能够解析的所有内容，即使它看起来一点也不有趣 (例如，未定义的内存区域)。
.TP 
\fB\-k\fP
显示处理每个设备的内核驱动程序以及能够处理它的内核模块。 正常输出方式给定 \fB\-v\fP 时默认开启。 (目前仅适用于具有内核 2.6 或更新版本的
Linux。)
.TP 
\fB\-x\fP
显示配置空间标准部分的十六进制转储 (CardBus 桥的前 64 字节或 128 字节)。
.TP 
\fB\-xxx\fP
显示整个 PCI 配置空间的十六进制转储。当您尝试读取配置空间的某些部分时，它仅作为多个 PCI 设备 \fBcrash\fP 可用于 root
(此行为可能不违反 PCI 标准，但它至少非常愚蠢)。但是，此类设备很少见，因此您不必太担心。
.TP 
\fB\-xxxx\fP
显示 PCI\-X 2.0 和 PCI Express 总线上可用的扩展 (4096\-byte) PCI 配置空间的十六进制转储。
.TP 
\fB\-b\fP
以总线为中心的视图。显示所有 IRQ 编号和地址，如 PCI 总线上的卡所见，而不是内核所见。
.TP 
\fB\-D\fP
始终显示 PCI 域号。默认情况下，lspci 在只有域的机器上抑制它们 0.
.TP 
\fB\-P\fP
通过每个桥接器的路径而不是总线编号来识别 PCI 设备。
.TP 
\fB\-PP\fP
通过每个桥的路径识别 PCI 设备，显示总线号和设备号。

.SS "Options to control resolving ID's to names"
.TP 
\fB\-n\fP
将 PCI 供应商和设备代码显示为数字，而不是在 PCI ID 列表中查找它们。
.TP 
\fB\-nn\fP
将 PCI 供应商和设备代码显示为数字和名称。
.TP 
\fB\-q\fP
如果在本地 \fBpci.ids\fP 文件中找不到设备，请使用 DNS 查询中央 PCI ID 数据库。如果 DNS 查询成功，结果将缓存在
\fB~/.pciids\-cache\fP 中，即使不再提供 \fB\-q\fP，也会在后续运行中识别。请谨慎地在自动脚本中使用此开关，以免数据库服务器，重载。
.TP 
\fB\-qq\fP
与 \fB\-q\fP 相同，但本地缓存已重置。
.TP 
\fB\-Q\fP
即使是本地识别的条目，也可以查询中央数据库。 如果您怀疑显示的条目有误，请使用此选项。

.SS "Options for selection of devices"
.TP 
\fB\-s [[[[<domain>]:]<bus>]:][<device>][.[<func>]]\fP
仅显示指定域中的设备 (如果您的机器有多个主机桥，它们可以共享一个公共总线编号空间，或者它们中的每一个都可以寻址自己的 PCI 域; 域编号从 0 到
ffff)，bus (0 到 ff)、设备 (0 到 1f) 和函数 (0 到 7)。 设备地址的各个组成部分可以省略，也可以设置为 "*"，即
"any value"。所有数字都是十六进制的。 例如，"0:" 表示总线 0 上的所有设备，"0" 表示任意总线上设备 0 的所有函数，"0.3"
选择所有总线上设备 0 的第三个函数，".4" 只显示每个设备的第四个函数。
.TP 
\fB\-d [<vendor>]:[<device>][:<class>[:<prog\-if>]]\fP
仅显示具有指定供应商、设备、类 ID 和编程接口的设备。 ID 以十六进制形式给出，可以省略或作为 "*" 给出，两者都表示 "any value"。类
ID 可以包含代表 "any digit" 的 "x" 字符。

.SS "Other options"
.TP 
\fB\-i <file>\fP
使用 \fB<file>\fP 作为 PCI ID 列表而不是 /usr/share/hwdata/pci.ids。
.TP 
\fB\-p <file>\fP
使用 \fB<file>\fP 作为内核模块处理的 PCI ID 的 map。默认情况下，lspci 使用
/lib/modules/\fIkernel_version\fP/modules.pcimap。仅适用于具有足够新的模块工具的 Linux 系统。
.TP 
\fB\-M\fP
调用总线映射模式，该模式对所有 PCI 设备进行彻底扫描，包括那些配置错误的桥接器等。此选项仅在直接硬件访问模式下提供有意义的结果，这通常需要 root
权限。 默认情况下，总线映射器扫描域。您可以使用 \fB\-s\fP 选项来选择不同的域。
.TP 
\fB\-\-version\fP
显示 \fIlspci\fP 版本。该选项应该单独使用。

.SS "PCI access options"
.PP
PCI 实用工具使用 PCI 库与 PCI 设备通信 (有关详细信息，请参见 \fBpcilib\fP(7))。您可以使用以下选项来影响其行为:
.TP 
\fB\-A <method>\fP
该库支持多种访问 PCI 硬件的方法。 默认情况下，它使用第一个可用的访问方法，但您可以使用此选项来覆盖此决定。有关可用方法及其说明的列表，请参见
\fB\-A help\fP。
.TP 
\fB\-O <param>=<value>\fP
库的行为由几个命名参数控制。 此选项允许设置任何参数的值。使用 \fB\-O help\fP 获取已知参数及其默认值的列表。
.TP 
\fB\-H1\fP
通过 Intel 配置机制使用直接硬件访问 1.  (这是 \fB\-A intel\-conf1\fP.) 的简写
.TP 
\fB\-H2\fP
通过 Intel 配置机制使用直接硬件访问 2。 (这是 \fB\-A intel\-conf2\fP.) 的简写
.TP 
\fB\-F <file>\fP
不是访问真实硬件，而是从早期运行 lspci \-x 生成的给定文件中读取设备列表及其配置寄存器的值。
这对于分析用户提供的错误报告非常有用，因为您可以以任何您想要的方式显示硬件配置，而不会因请求更多转储而打扰用户。
.TP 
\fB\-G\fP
提高库的调试级别。

.SH "MACHINE READABLE OUTPUT"
如果您打算自动处理 lspci 的输出，请使用本节中描述的机器可读输出格式 (\fB\-m\fP、\fB\-vm\fP、\fB\-vmm\fP) 之一。所有其他格式可能会在
lspci 的版本之间发生变化。

.P
所有数字始终以十六进制打印。如果您想处理数字 ID 而不是名称，请添加 \fB\-n\fP 开关。

.SS "Simple format (\-m)"

在简单格式中，每个设备都在一行中描述，其格式为适合传递给 shell 脚本的参数，即由空格分隔的值，必要时引用和转义。 有些参数是位置性的: slot,
class, vendor name, device name, subsystem vendor name and subsystem name
(如果设备没有子系统，最后两个为空) ; 剩下的参数是类似选项的:

.TP 
\fB\-r\fP\fIrev\fP
修订号。

.TP 
\fB\-p\fP\fIprogif\fP
编程接口。

.P
位置参数和选项的相对顺序未定义。 future
版本中可以添加新选项，但它们始终只有一个参数，与选项之间没有任何空格分隔，因此如果无法识别它们很容易被忽略。

.SS "Verbose format (\-vmm)"

详细输出是由空行分隔的一系列记录。 每条记录通过一系列行描述单个设备，每行包含单个 `\fItag\fP: \fIvalue\fP' 对。\fItag\fP 和
\fIvalue\fP 由单个制表符分隔。 记录和记录中的行都没有任何特定的顺序。 标签区分大小写。

.P
定义了以下标签:

.TP 
\fBSlot\fP
设备所在槽位的名称 ([\fIdomain\fP:]\fIbus\fP:\fIdevice\fP.\fIfunction\fP)。 此标记始终是记录中的第一个。

.TP 
\fBClass\fP
类的名称。

.TP 
\fBVendor\fP
供应商的名称。

.TP 
\fBDevice\fP
设备名称。

.TP 
\fBSVendor\fP
子系统供应商的名称 (optional)。

.TP 
\fBSDevice\fP
子系统 (optional) 的名称。

.TP 
\fBPhySlot\fP
设备所在的物理插槽 (可选，仅限 Linux)。

.TP 
\fBRev\fP
修订号 (optional)。

.TP 
\fBProgIf\fP
编程接口 (optional)。

.TP 
\fBDriver\fP
当前处理设备的内核驱动程序 (可选，仅限 Linux)。

.TP 
\fBModule\fP
内核模块报告它能够处理设备 (可选，仅限 Linux)。可以出现带有此标记的多行。

.TP 
\fBNUMANode\fP
此设备连接到的 NUMA 节点 (可选，仅限 Linux)。

.TP 
\fBIOMMUGroup\fP
此设备所属的 IOMMU 组 (可选，仅限 Linux)。

.P
future 版本中可以添加新标签，因此您应该默默地忽略任何您不认识的标签。

.SS "Backward\-compatible verbose format (\-vm)"

在这种模式下，lspci 试图与其旧版本完美兼容。 它与常规的详细格式几乎相同，但 \fBDevice\fP
标记用于插槽和设备名称，因此它在一条记录中出现两次。请避免在任何新代码中使用此格式。

.SH FILES
.TP 
\fB/usr/share/hwdata/pci.ids\fP
所有已知 PCI ID (供应商、设备、类和子类) 的列表。维护在 https://pci\-ids.ucw.cz/，使用
\fBupdate\-pciids\fP 实用程序下载最新版本。
.TP 
\fB/usr/share/hwdata/pci.ids.gz\fP
如果 lspci 编译时支持压缩，则在 pci.ids 之前尝试此文件。
.TP 
\fB~/.pciids\-cache\fP
在 DNS 查询模式中找到的所有 ID 都缓存在此文件中。

.SH BUGS

有时，lspci 无法完全解码配置寄存器。 当作者没有足够的文档可用时，通常会发生这种情况。 在这种情况下，它至少会打印 \fB<?>\fP
标记以表示可能还有更多内容要说。如果您知道细节，当然欢迎补丁。

当前仅 \fBlinux_sysfs\fP 后端支持访问扩展配置空间。

.SH "SEE ALSO"
\fBsetpci\fP(8), \fBpci.ids\fP(5), \fBupdate\-pciids\fP(8), \fBpcilib\fP(7)

.SH AUTHOR
PCI 实用工具由 Martin Mares <mj@ucw.cz> 维护。
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
