.\" -*- coding: UTF-8 -*-
.\" @(#)man/man8/setkeycodes.8	1.0 Nov  8 22:30:48 MET 1994
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH SETKEYCODES 8 "8 Nov 1994" kbd 
.SH NAME
setkeycodes \- 加载内核扫描码到键码映射表条目
.SH SYNOPSIS
\fBsetkeycodes\fP \fIscancode keycode ...\fP
.SH DESCRIPTION
\fIsetkeycodes\fP 命令一次读取它的两个参数，每对参数由一个扫描码 (以十六进制给出) 和一个键码 (以十进制给出)
组成。对于每个这样的对，它告诉内核键盘驱动程序将指定的扫描码 map 到指定的键码。

此命令仅对使用稍微不寻常的键盘的人有用，这些人有一些键会产生内核无法识别的扫描码。

.SH THEORY
通常的 PC 键盘会为每次按键和按键释放生成一系列扫描码。(扫描码由 \fBshowkey \-s\fP 显示，请参见 \fBshowkey\fP(1))
内核解析此扫描码流，并将其转换为键码流 (键 press/release 事件)。 (Keycodes are showed by
\fBshowkey\fP.) 除了少数具有特殊含义的扫描码，除了 Pause 键产生的序列，除了与 shiftstate 相关的扫描码，除了关键的
up/down 位之外，扫描码流由未转义的扫描码 xx 组成 (7 位) 和转义扫描码 e0 xx (8+7 位)。
可以为这些扫描码或扫描码对分配相应的键码 (在 1\-127 范围内)。 例如，如果您有一个根据 \fBshowkey\fP(1) 产生 e0 6f
的宏键，则命令
.RS
\fBsetkeycodes e06f 112\fP
.RE
会将 keycode 112 赋值给它，然后可以用 \fBloadkeys\fP(1) 来定义这个键的函数。
.LP
一些较旧的内核可能会将低扫描码范围硬连接到等效的键码; 当您尝试重新映射这些时，setkeycodes 将失败。

.SH "2.6 KERNELS"
在 2.6 内核中，关键代码位于 1\-255 范围内，而不是 1\-127。 (最好将自己限制在 1\-239 的范围内。)
.LP
在 2.6 内核中，原始模式或扫描码模式根本不是很原始。 使用 setkeycodes 后，showkey \-s 返回的代码将发生变化。
内核错误。另请详见 \fBshowkey\fP(1)。
.SH OPTIONS
None.
.SH BUGS
X 的键码与 Linux 的键码无关。 不寻常的键可以在 Linux 下可见，但在 X 下不可见。
.SH "SEE ALSO"
\fBdumpkeys\fP(1), \fBloadkeys\fP(1), \fBshowkey\fP(1), \fBgetkeycodes\fP(8)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
