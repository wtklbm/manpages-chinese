.\" -*- coding: UTF-8 -*-
'\" t
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH SYSTEMD\-REPART 8 "" "systemd 253" systemd\-repart
.ie  \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH NAME
systemd\-repart, systemd\-repart.service \- 自动增长和添加分区
.SH SYNOPSIS
.HP \w'\fBsystemd\-repart\fR\ 'u
\fBsystemd\-repart\fP [OPTIONS...] [\fI[BLOCKDEVICE]\fP...]
.PP
systemd\-repart\&.service
.SH DESCRIPTION
.PP
\fBsystemd\-repart\fP 根据 \fBrepart.d\fP(5)\& 中描述的配置文件增长并添加分区到分区表。
.PP
如果调用时没有参数，它会在支持运行操作系统的根文件系统分区的块设备上运行，从而增加和添加启动操作系统映像本身的分区 \&。如果使用
\fI\-\-image=\fP，它将对指定的图像文件进行操作 \&。当在 initrd 中调用时，它在支持 /sysroot / 的块设备上运行，而不是
i\&.e\&。在块设备上系统将很快过渡到 \&。systemd\-repart\&.service 服务通常在启动时在 initrd
中运行，以便在挂载分区之前扩充操作系统的分区表。 \fBsystemd\-repart\fP (mostly) 以纯增量模式运行:
它只增长现有分区并添加新分区; 它不会缩小、删除或移动现有分区 \&。该服务本应在每次启动时运行，但当它检测到分区表已经与安装的
repart\&.d/*\&.conf 配置文件匹配时，它不执行任何操作 \&。
.PP
\fBsystemd\-repart\fP
旨在在部署操作系统映像时使用，以便在首次启动期间自动将它们调整到它们正在运行的系统上。这样，部署的映像可以最小化，并且可以在需要时在启动时自动扩充，占用可用但尚未使用的磁盘空间
\&。具体包括以下用例:
.sp
.RS 4
.ie  n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
根分区可能会增长以覆盖整个可用磁盘空间 \&。
.RE
.sp
.RS 4
.ie  n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
可以添加 /home/、swap 或 /srv / 分区。
.RE
.sp
.RS 4
.ie  n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
可以添加第二个 (或第三个，\&...) 根分区，以覆盖 A/B 样式设置，其中交替使用第二个版本的根文件系统来实现更新方案
\&。部署的映像将只包含一个分区 ("A")，但在第一次启动时会自动创建用于此目的的第二个分区 ("B")\&。
.RE
.PP
\fBsystemd\-repart\fP 执行的算法大致如下:
.sp
.RS 4
.ie  n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
repart\&.d/*\&.conf 配置文件被加载和解析，并按文件名 (不带目录前缀) \& 排序。对于每一个配置文件，抛弃 \- in
文件在与配置文件同名的目录中查找，并添加后缀 "\&.d"\&。
.RE
.sp
.RS 4
.ie  n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
块设备上已经存在的分区表被加载和解析 \&。
.RE
.sp
.RS 4
.ie  n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
分区表中的现有分区通过 GPT 分区类型 UUID\& 与 repart\&.d/*\&.conf
文件匹配。特定类型的第一个现有分区被分配第一个声明相同类型的配置文件 \&。然后为特定类型的第二个现有分区分配声明相同类型的第二个配置文件，依此类推
\&。在此迭代分配完成后，任何没有匹配配置文件的剩余现有分区将被视为 "foreign" 并保持原样
\&。任何当前不存在分区的配置文件都被理解为创建这样一个分区的请求。
.RE
.sp
.RS 4
.ie  n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
考虑到配置文件中声明的大小限制和权重，所有应创建的分区现在都分配给磁盘，占用所有可用空间，始终遵守大小和填充请求 \&。类似地，应该增长的现有分区增长
\&。新分区总是追加到分区表的末尾，占据第一个分区表槽，其索引大于所有现有分区的索引 \&。分区表槽从不重新排序，因此确保分区号保持稳定
\&。请注意，此分配仅发生在内存中，磁盘上的分区表尚未更新 \&。
.RE
.sp
.RS 4
.ie  n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}
存在配置文件且当前没有设置 GPT 分区标签的所有现有分区都将分配一个标签，或者在配置中明确配置或者 \(em if that\*(Aqs
missing\(em automatically derived from the partition
type\&. 对所有新创建的分区也是如此。这些分配也仅在内存中完成，磁盘尚未更新 \&。
.RE
.sp
.RS 4
.ie  n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}
同样，所有存在配置文件且当前具有全零标识 UUID 的现有分区都将被分配一个新的 UUID\&。这个 UUID 是从一个共同的 seed 值和分区类型
UUID (以及一个计数器，以防定义了多个相同类型的分区) 加密散列的，见下文 \&。对所有重新创建的分区也是如此
\&。这些分配也仅在内存中完成，磁盘尚未更新 \&。
.RE
.sp
.RS 4
.ie  n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}
类似地，如果磁盘 \*(Aqs 卷 UUID 全部为零，它也被初始化，也从相同的公共 seed 值加密散列 \&。这也是在内存中完成的 \&。
.RE
.sp
.RS 4
.ie  n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}
分配给新分区的磁盘空间 (i\&.e\&。以前是可用空间) 现在是 erased\&。具体来说就是去掉所有的文件系统签名，如果设备支持，则下发
\fBBLKDISCARD\fP I/O 控制命令，通知硬件现在空间为空 \&。此外，分区之间和设备末尾的任何 "padding" 同样是 erased\&。
.RE
.sp
.RS 4
.ie  n \{\
\h'-04' 9.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  9." 4.2
.\}
新分区表终于写入磁盘 \&。要求内核重新读取分区表 \&。
.RE
.PP
作为通常严格增量操作的例外，当在特殊的 "factory reset" 模式下调用时，\fBsystemd\-repart\fP
也可用于擦除现有分区以将安装重置回供应商默认值 \&。当在工具上传递 \fB\-\-factory\-reset=yes\fP 开关 \* (Aqs
命令行，或内核命令行上指定的 \fBsystemd\&.factory_reset=yes\fP 选项，或 \fIFactoryReset\fP EFI 变量
(供应商 UUID \fB8cf2644b\-4b0b\-428f\-9387\-6d876050dc67\fP) 设置为 `是`) 时，使用此操作模式
\&. 它稍微改变了上面的算法: 在上面的第 3 步和第 4 步之间，通过 \fIFactoryReset=\fP
布尔值明确标记的任何分区都被删除，算法重新启动，因此立即重新创建这些分区为空 \&。
.PP
请注意，\fBsystemd\-repart\fP 仅更改分区表，它不会在这些分区内创建或调整任何文件系统 \&。为此应使用单独的机制，例如
\fBsystemd\-growfs\fP(8) 和 \fBsystemd\-makefs\fP\&。
.PP
标识新创建的分区 (或分配给尚无 UUID 的现有分区) 以及整个磁盘的 UUID 是从一个共同的 seed 值加密散列的。此 seed 值通常是系统的
\fBmachine\-id\fP(5)，因此机器 ID 可重复地确定分配给所有分区的 UUID。如果无法读取机器 ID (或用户传递
\fB\-\-seed=random\fP，见下文)，则随机生成 seed，这样分区 UUID 也实际上是随机的 \&。seed 值也可以明确设置，通过
\fB\-\-seed=\fP 选项格式化为 UUID\&。通过对使用此工具准备的公共 seed 图像中的这些 UUID 进行哈希处理，这些 UUID
变得可重现，并且上述算法的结果具有确定性 \&。
.PP
位置参数应该指定要操作的块设备 \&。也可以指定常规文件而不是块设备节点路径，在这种情况下，命令对其进行操作，就像指定带有附加文件 \&
的回环块设备节点一样。如果指定了 \fB\-\-empty=create\fP，则指定的路径将创建为常规文件，这对于从头开始生成磁盘映像非常有用 \&。
.SH OPTIONS
.PP
理解以下选项:
.PP
\fB\-\-dry\-run=\fP
.RS 4
采用布尔值 \&。如果未指定此开关，\fB\-\-dry\-run=yes\fP 是隐含的默认值 \&。控制 systemd\-repart
是否执行请求的重新分区操作，或者它是否应该只显示它会做什么 \&。除非指定 \fB\-\-dry\-run=no\fP，否则 systemd\-repart
实际上不会触及设备 \*(Aqs 分区表 \&。
.RE
.PP
\fB\-\-empty=\fP
.RS 4
采用 "refuse"、"allow"、"require"、"force" 或 `创建`\&
之一。控制如何操作完全为空的块设备，i\&.e\&。尚未携带分区 table/disk 标签 \&。如果未指定此开关，则隐含的默认值为 `拒绝`\&。
.sp
如果 "refuse" \fBsystemd\-repart\fP 要求它要操作的块设备已经带有分区表，找不到则拒绝操作 \&。如果
"allow"，该命令将扩展现有分区表或创建一个新分区表 (如果不存在) \&。如果 "require"
如果到目前为止不存在，该命令将创建一个新的分区表，如果已经存在则拒绝操作 \&。如果 "force" 它将无条件地创建一个新的分区表，有效地完全擦除磁盘
\&。如果 "force" 没有现有分区将被考虑或在操作中幸存 \&。因此: 小心使用，这是丢失所有数据的好方法。如果 "create"
在通过设备节点参数传递的路径下创建一个新的回环文件，其大小用 \fB\-\-size=\fP 指示，见下文 \&。
.RE
.PP
\fB\-\-discard=\fP
.RS 4
采用布尔值 \&。如果未指定此开关，\fB\-\-discard=yes\fP 是隐含的默认值 \&。控制是否对任何添加的分区占用的空间或它们之间的空间发出
\fBBLKDISCARD\fP I/O 控制命令 \&。通常，它 \*(发出此请求是一个好主意，因为它告诉底层硬件所覆盖的块应被视为空，从而提高性能
\&。如果在常规文件而不是块设备节点上操作，则会生成一个稀疏文件 \&。
.RE
.PP
\fB\-\-size=\fP
.RS 4
使用通常的 K、M、G、T 后缀或特殊值 `auto`\&
获取以字节为单位的大小。如果使用指定的设备节点路径，则必须引用一个常规文件，如果该文件较小，则在对分区表进行任何更改之前增长到指定的大小
\&。如果指定为 "auto"，则自动确定磁盘映像的最小大小 (i\&.e\&。所有分区的最小大小相加，并考虑额外元数据的空间)
\&。如果指定的节点是块设备，则不支持此开关。如果文件已经达到指定大小或更大 \&，则此开关无效。指定的大小隐式向上舍入为 4096\& 的倍数。当与
\fB\-\-empty=create\fP 一起使用时，它指定要创建的回环文件的初始大小 \&。
.sp
\fB\-\-size=auto\fP 选项将预先存在的分区的大小考虑在内。但是，它不适用于不紧密打包的分区表: 如果现有分区之间 (或第一个分区之前)
存在无法被分区完全填充的空白空间，则配置的分区可能仍无法装入支持设备成长或创造 \&。
.sp
另请注意，自动确定大小不会考虑使用 \fBCopyFiles=\fP 指定的文件或目录:
如果指定的文件或目录需要比配置的每个分区最小大小限制更多的磁盘空间，操作可能会失败 \&。
.RE
.PP
\fB\-\-factory\-reset=\fP
.RS 4
采用布尔值 \&。如果未指定此开关，\fB\-\-factory=reset=no\fP 是隐含的默认值 \&。控制是否在 "factory reset"
模式下运行，见上文 \&。如果设置为 true，这将在执行重新分区算法时删除所有标记为 \fIFactoryReset=\fP
的现有分区。小心使用，这是丢失所有数据的好方法。请注意，分区文件需要明确打开 \fIFactoryReset=\fP，因为该选项默认为关闭
\&。如果没有分区被标记为恢复出厂设置，则此开关无效 \&。请注意，还有其他两种方法可以请求恢复出厂设置操作: 通过内核命令行和通过 EFI
变量，请参见上文 \&。
.RE
.PP
\fB\-\-can\-factory\-reset\fP
.RS 4
如果指定此开关，则磁盘不会重新分区 \&。而是确定是否有任何现有分区标有
\fIFactoryReset=\fP\&。如果存在，该工具将退出，退出状态为零，否则为非零 \&。该开关可用于快速确定正在运行的系统是否支持基于
\fBsystemd\-repart\fP\& 构建的恢复出厂设置机制。
.RE
.PP
\fB\-\-root=\fP
.RS 4
在搜索 repart\&.d/*\&.conf 文件、机器 ID 文件以用作 seed 以及 \fICopyFiles=\fP 和
\fICopyBlocks=\fP 源文件和目录 \& 时，获取一个目录的路径以用作根文件系统。默认情况下，在常规系统上调用时，默认为主机 \*(Aqs
根文件系统 /\&. 如果从 initrd 调用，这默认为 /sysroot/，以便该工具对存储在根文件系统中的配置和机器 ID
进行操作，然后转换为自身 \&。
.RE
.PP
\fB\-\-image=\fP
.RS 4
采用与 \fB\-\-root=\fP 类似的方式挂载和使用磁盘映像文件或设备的路径，请参见上文 \&。
.RE
.PP
\fB\-\-seed=\fP
.RS 4
将 UUID 作为参数或特殊值 \fBrandom\fP\&。如果指定了 UUID，则分配给分区的 UUID 和分区表本身是通过加密散列从中派生的
\&。如果未指定，则尝试从主机 (或更准确地说，通过 \fB\-\-root=\fP) 配置的根目录) 读取机器 ID，并将其用作 seed，否则回落到随机
seed\&。使用 \fB\-\-seed=random\fP 强制随机化 seed\&。显式指定 seed 可用于生成严格可重现的分区表 \&。
.RE
.PP
\fB\-\-pretty=\fP
.RS 4
采用布尔型参数 \&。如果未指定此开关，则在从交互式终端调用时默认打开，否则关闭 \&。控制是否显示用户友好的表格和图形，说明应用的更改 \&。
.RE
.PP
\fB\-\-definitions=\fP
.RS 4
采用文件系统路径 \&。如果指定，*\&.conf 文件将从指定目录读取，而不是在
/usr/repart\&.d/*\&.conf、/etc/repart\&.d/*\&.conf
中搜索,/run/repart\&.d/*\&.conf\&.
.sp
该参数可以指定多次 \&。
.RE
.PP
\fB\-\-key\-file=\fP
.RS 4
采用文件系统路径 \&。配置在分区文件 \& 中设置 \fIEncrypt=key\-file\fP 设置的 LUKS2
卷时使用的加密密钥。应引用包含密钥的常规文件，或文件系统中的 \fBAF_UNIX\fP 流套接字 \&。在后一种情况下，与它建立连接并从中读取密钥
\&。如果未指定此开关，则使用空密钥 (i\&.e\&. 零长度密钥)
\&。此行为对于在早期首次引导期间设置加密分区很有用，这些分区仅在稍后的设置步骤中接收用户提供的密码 \&。
.RE
.PP
\fB\-\-private\-key=\fP
.RS 4
采用文件系统路径 \&。配置在分区文件中使用 \fIVerity=signature\fP 设置创建 verity 签名分区时使用的签名密钥 \&。
.RE
.PP
\fB\-\-certificate=\fP
.RS 4
采用文件系统路径 \&。配置 PEM 编码的 X\&.509 证书，以在分区文件中使用 \fIVerity=signature\fP
设置创建真实性签名分区时使用 \&。
.RE
.PP
\fB\-\-tpm2\-device=\fP, \fB\-\-tpm2\-pcrs=\fP
.RS 4
配置 TPM2 设备和 PCR 列表以用于配置了 \fIEncrypt=tpm2\fP 选项 \& 的 LUKS2 卷。这些选项采用与
\fBsystemd\-cryptenroll\fP(1) 的同名选项相同的参数，并且对请求 TPM2 注册的分区具有相同的效果 \&。
.RE
.PP
\fB\-\-tpm2\-public\-key=\fP [PATH], \fB\-\-tpm2\-public\-key\-pcrs=\fP [PCR...]
.RS 4
配置 TPM2 签名 PCR 策略以将加密绑定到 \&。有关这两个选项的详细信息，请参见 \fBsystemd\-cryptenroll\fP(1)\&。
.RE
.PP
\fB\-\-split=\fP [BOOL]
.RS 4
启用从配置有 \fISplitName=\fP\& 的分区生成拆分工件。如果启用，对于每个设置了 \fISplitName=\fP
的分区，将生成一个仅包含该分区内容的单独输出文件 \&。输出文件名由回环文件名组成，后缀为 \fISplitName=\fP\& 配置的名称。如果回环文件名以
"\&.raw" 结尾，则在 "\&.raw" 扩展名之前插入后缀 \&。
.sp
请注意，\fB\-\-split\fP 独立于 \fB\-\-dry\-run\fP\&。即使启用了 \fB\-\-dry\-run\fP，如果启用了
\fB\-\-split\fP\&，仍会从现有图像生成分割伪像。
.RE
.PP
\fB\-\-include\-partitions=\fP [PARTITION...], \fB\-\-exclude\-partitions=\fP
[PARTITION...]
.RS 4
这些选项指定 \fBsystemd\-repart\fP 应该在哪些分区类型上运行 \&。如果使用 \fB\-\-include\-partitions=\fP，则所有
\*(Aqt 指定的分区都被排除 \&。如果使用 \fB\-\-exclude\-partitions=\fP，则排除所有指定的分区
\&。这两个选项都采用逗号分隔的 GPT 分区类型 UUID 或标识符列表 (请参见 \fBrepart.d\fP(5))\& 中的 \fIType=\fP。
.RE
.PP
\fB\-\-defer\-partitions=\fP [PARTITION...]
.RS 4
此选项指定 \fBsystemd\-repart\fP 应延迟 \& 的分区类型。在计算其他分区的大小和偏移量时，仍会考虑使用此选项延迟的所有分区，但不会
\*(Aqt 实际写入磁盘映像 \&。此选项的实际效果是，如果您在没有这些选项的情况下再次运行
\fBsystemd\-repart\fP，将添加丢失的分区，就好像它们在第一次执行 \fBsystemd\-repart\fP 时没有被延迟一样 \&。
.RE
.PP
\fB\-\-sector\-size=\fP [BYTES]
.RS 4
此选项允许配置 \fBsystemd\-repart\fP\& 生成的图像的扇区大小。它取一个介于 "512" 和 `4096`\& 之间的 "2"
的幂。当为使用不同扇区大小的磁盘构建图像时，此选项很有用，因为在其上生成图像的磁盘 \&。 \&.  .RE
.PP
\fB\-h\fP, \fB\-\-help\fP
.RS 4
打印一个简短的帮助文本并退出 \&。
.RE
.PP
\fB\-\-version\fP
.RS 4
打印一个短版本字符串并退出 \&。
.RE
.PP
\fB\-\-no\-pager\fP
.RS 4
不要将输出通过管道传输到寻呼机 \&。
.RE
.PP
\fB\-\-no\-legend\fP
.RS 4
不要打印图例，i\&.e\&。带有提示的列标题和页脚 \&。
.RE
.PP
\fB\-\-json=\fP\fIMODE\fP
.RS 4
显示格式为 JSON\& 的输出。期望 "short" (用于尽可能短的输出，没有任何冗余空格或换行符)、"pretty"
(用于相同版本的漂亮版本，带有缩进和换行符) 或 "off" (关闭 JSON 输出，默认值) \&。
.RE
.SH "EXIT STATUS"
.PP
成功时返回 0，否则返回非零失败代码 \&。
.SH "SEE ALSO"
.PP
\fBsystemd\fP(1), \fBrepart.d\fP(5), \fBmachine\-id\fP(5), \fBsystemd\-cryptenroll\fP(1)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
