.\" -*- coding: UTF-8 -*-
.\" -*- nroff -*-
.\" Copyright 1993, 1994, 1995 by Theodore Ts'o.  All Rights Reserved.
.\" This file may be copied under the terms of the GNU Public License.
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH EXT4 5 "February 2023" "E2fsprogs version 1.47.0" 
.SH NAME
ext2\-\- 第二个扩展文件系统
.br
ext3\-\- 第三个扩展文件系统
.br
ext4\-\- 第四个扩展文件系统
.SH DESCRIPTION
第二个、第三个和第四个扩展文件系统，或众所周知的 ext2、ext3 和 ext4，是 Linux 文件系统，它们在历史上一直是许多 Linux
发行版的默认文件系统。 它们是为可扩展性和向后兼容性而设计的通用文件系统。 特别是，以前打算与 ext2 和 ext3
文件系统一起使用的文件系统可以使用 ext4 文件系统驱动程序挂载，实际上在许多现代 Linux 发行版中，ext4 文件系统驱动程序已配置为处理
ext2 和 ext3 的挂载请求文件系统。
.SH "FILE SYSTEM FEATURES"
为 ext2、ext3 或 ext4 格式化的文件系统可以启用以下文件系统特性标志的某些集合。 ext2、ext3 和 ext4
文件系统驱动程序的所有实现均不支持其中一些特性具体取决于所使用的 Linux 内核版本。 在其他操作系统 (例如 GNU/HURD 或 FreeBSD)
上，ext2 的实现可能仅支持一组非常有限的文件系统，特性。
.TP 
\fB64bit\fP
.br
使文件系统大于 2^32 块。 此特性会根据需要自动设置，但如果文件系统可能需要调整大小大于 2^32
块，则明确指定此特性可能很有用，即使它在最初创建时小于该阈值。 请注意，一些较旧的内核和较旧版本的 e2fsprogs 将不支持启用此 ext4
特性的文件系统。
.TP 
\fBbigalloc\fP
.br
此 ext4 特性启用集群块分配，因此分配的元是两个块数的幂。 也就是说，传统上称为块分配位图的每一位现在都指示一个簇是否在使用中，其中一个簇默认由
16 个块组成。 此特性可以减少花在块分配上的时间并带来更小的碎片，尤其是对于大文件。 可以使用 \fBmke2fs \-C\fP 选项指定大小。
.IP
\fBWarning:\fP bigalloc 特性仍在开发中，您的内核可能无法完全支持它，或者可能存在各种错误。 详情请见网页
http://ext4.wiki.kernel.org/index.php/Bigalloc。 可能会与延迟分配发生冲突 (请参见
\fBnodelalloc\fP 挂载选项)。
.IP
此特性需要启用 \fBextent\fP 特性。
.TP 
\fBcasefold\fP
.br
此 ext4 特性为启用了 casefold (+F) 标志的目录提供文件系统级字符编码支持。
此特性在磁盘上保留名称，但它允许应用程序使用文件名的等效编码版本在文件系统中查找文件。
.TP 
\fBdir_index\fP
.br
使用散列 b 树加速大型目录中的名称查找。 ext3 和 ext4 文件系统支持此特性ext2 文件系统将忽略此，特性。
.TP 
\fBdir_nlink\fP
.br
通常情况下，ext4 允许一个 inode 有不超过 65,000 个硬链接。 这适用于常规文件和目录，这意味着目录中的子目录不能超过 64,998 个
(因为每个 '.' 和 '..' 条目，以及目录在其父目录中的目录条目都算作一个硬链接)。 此特性通过使 ext4 使用链接计数 1
来指示当链接计数可能超过最大计数限制时不知道指向目录的硬链接数，从而解除了此限制。
.TP 
\fBea_inode\fP
.br
通常，文件的扩展属性和关联的元数据必须适合 inode 或 inode 的关联扩展属性块。此特性允许在必要时将每个扩展属性的值放置在单独 inode
的数据块中，从而增加对每个文件的扩展属性的大小和数量的限制。
.TP 
\fBencrypt\fP
.br
启用对数据块和文件名的文件系统级加密的支持。 inode 元数据 (时间戳、文件大小、user/group 所有权等) 是 \fInot\fP 加密的。
.IP
此特性在具有多个用户或并非所有文件都应加密的文件系统上最有用。 在许多用例中，尤其是在单用户系统上，使用 dm\-crypt
在块设备层进行加密可能会提供更好的安全性。
.TP 
\fBext_attr\fP
.br
此特性允许使用扩展属性。 ext2、ext3 和 ext4 支持此，特性。
.TP 
\fBextent\fP
.br
ext4 特性允许将特定 inode 的逻辑块号映射到存储设备上的物理块，使用扩展树存储，这是一种比 ext2 和 ext3
文件使用的传统间接块方案更有效的数据结构系统。 扩展树的使用减少了元数据块开销，提高了文件系统性能，并减少了在文件系统上运行 \fBe2fsck\fP(8)
的需要。 (注意: 出于 historical/backwards 兼容性原因，\fBextent\fP 和 \fBextents\fP
都被接受为该特性的有效名称。)
.TP 
\fBextra_isize\fP
.br
这个 ext4 特性在每个 inode 中为扩展元数据保留特定数量的空间，例如纳秒时间戳和文件创建时间，即使当前内核目前不需要保留这么多空间。
如果没有此特性内核将为它当前需要的特性保留空间量，并且扩展属性可能会消耗剩余部分。

要使此特性有用，inode 大小必须为 256 字节或更大。
.TP 
\fBfiletype\fP
.br
此特性允许在目录条目中存储文件类型信息。 ext2、ext3 和 ext4 支持此，特性。
.TP 
\fBflex_bg\fP
.br
ext4 特性允许将每块组元数据 (分配位图和 inode 表) 放置在存储介质上的任何位置。 此外，\fBmke2fs\fP 将从每个 "flex_bg
group" 的第一个块组开始将每个块组的元数据放在一起。 可以使用 \fB\-G\fP 选项指定 flex_bg 组的大小。
.TP 
\fBhas_journal\fP
.br
创建一个日志以确保文件系统的一致性，即使是在不正常的关闭过程中也是如此。 设置文件系统特性等同于 \fB\-j\fP 选项与 \fBmke2fs\fP 或
\fBtune2fs.\fP 一起使用此，特性 ext3 和 ext4 支持，ext2 文件系统驱动程序忽略。
.TP 
\fBhuge_file\fP
.br
此 ext4 特性允许文件大小大于 2 TB。
.TP 
\fBinline_data\fP
允许数据存储在 inode 和扩展属性区。
.TP 
\fBjournal_dev\fP
.br
此特性在外部日志设备上的超级块上启用。 外部日志的块大小必须与使用它的文件系统相同。
.IP
通过将 \fB\-J\fP \fBdevice=\fP<external\-device> 选项指定为 \fBmke2fs\fP(8) 或
\fBtune2fs(8)\fP，文件系统可以使用外部日志设备。
.TP 
\fBlarge_dir\fP
.br
此特性通过提高目录的最大大小和散列 b 树目录 (请参见 \fBdir_index\fP)，用于存储目录条目的散列 b 树的最大高度)
来增加每个目录的文件数限制。
.TP 
\fBlarge_file\fP
.br
当创建大于 2 GB 的文件时，现代内核会自动设置此特性标志。
非常老的内核无法处理大文件，所以这个特性标志被用来禁止那些内核挂载它们无法理解的文件系统。
.TP 
\fBmetadata_csum\fP
.br
此 ext4 特性启用元数据校验和。 此特性存储所有文件系统元数据 (超级块、组描述符块、inode 和块位图、目录和扩展树块) 的校验和。
用于元数据块的校验和算法不同于用于具有 \fBuninit_bg\fP 特性的组描述符的算法。 这两个特性不兼容，将优先使用 \fBmetadata_csum\fP
而不是 \fBuninit_bg\fP。
.TP 
\fBmetadata_csum_seed\fP
.br
此特性允许文件系统将元数据校验和 seed 存储在超级块中，这允许管理员在安装时使用 \fBmetadata_csum\fP 特性更改文件系统的 UUID。
.TP 
\fBmeta_bg\fP
.br
此 ext4 特性允许在线调整文件系统的大小，而无需明确地为块组描述符的大小的增长保留空间。 该方案还用于调整大于 2^32 块的文件系统的大小。
不建议在创建文件系统时设置此特性因为这种存储块组描述符的替代方法会减慢挂载文件系统所需的时间，并且较新的内核可以在必要时自动设置此特性在线调整大小并且在调整大小的
inode 中没有更多的保留空间可用。
.TP 
\fBmmp\fP
.br
此 ext4 特性提供多重安装保护 (MMP)。 MMP 有助于防止文件系统被多重挂载，并且在共享存储环境中很有用。
.TP 
\fBproject\fP
.br
此 ext4 特性提供项目配额支持。通过这个特性在挂载文件系统时管理 inode 的 project ID。
.TP 
\fBquota\fP
.br
创建配额 inode (inode #3 用于 userquota，inode #4 用于组配额) 并在 superblock 中设置它们。
使用此特性将在挂载文件系统时自动启用配额。
.IP
导致配额文件 (即旧配额设计中存在的 user.quota 和 group.quota) 成为隐藏 inode。
.TP 
\fBresize_inode\fP
.br
此文件系统特性表示已保留空间，以便在调整已安装文件系统大小时可以扩展块组描述符表。 在线 resize 操作由内核执行，由
\fBresize2fs\fP(8) 触发。 默认情况下，\fBmke2fs\fP 将尝试保留足够的空间，以便文件系统可以增长到其初始大小的 1024 倍。
这可以使用 \fBresize\fP 扩展选项进行更改。
.IP
此特性需要启用 \fBsparse_super\fP 或 \fBsparse_super2\fP 特性。
.TP 
\fBsparse_super\fP
.br
所有现代 ext2、ext3 和 ext4 文件系统都设置了此文件系统，特性。 它表明超级块和块组描述符的备份副本仅存在于少数块组中，而不是所有块组中。
.TP 
\fBsparse_super2\fP
.br
此特性表示最多只有两个备份超级块和块组描述符。 用于存储备份的块组 superblock(s) 和块组 descriptor(s)
存储在超级块中，但通常，一个位于块组 #1 的开头，一个位于文件系统中的最后一个块组。 此特性本质上是 sparse_super
的更极端版本，旨在允许更大比例的磁盘具有可用于数据文件的连续块。
.TP 
\fBstable_inodes\fP
.br
将文件系统的 inode 编号和 UUID 标记为稳定。 \fBresize2fs\fP(8) 不允许使用此特性缩小文件系统，\fBtune2fs\fP(8)
也不允许更改其 UUID。 此特性允许使用利用 inode 编号和 UUID 的专门加密设置。 请注意，\fBencrypt\fP 特性仍需要单独启用。
\fBstable_inodes\fP 是 "compat" 的特性所以旧内核会允许它。
.TP 
\fBuninit_bg\fP
.br
这个 ext4 文件系统特性表明块组描述符将使用校验和进行保护，使 \fBmke2fs\fP(8) 可以安全地创建文件系统而无需初始化所有块组。
内核将保留未使用 inode 的高水位线，并延迟初始化 inode 表和块。 此特性加快了使用 \fBe2fsck\fP(8)
检查文件系统的时间，同时也加快了 \fBmke2fs\fP(8) 创建文件系统所需的时间。
.TP 
\fBverity\fP
.br
启用对 verity 保护文件的支持。 Verity 文件是只读的，它们的数据是根据隐藏在文件末尾之后的默克尔树透明验证的。 使用 Merkle
树的根哈希，可以有效地验证 verity 文件，而不受文件大小的影响。
.IP
此特性对于在读写文件系统上验证重要的只读文件最有用。 如果文件系统本身是只读的，那么使用 dm\-verity 来验证整个块设备可能会提供更好的安全性。
.SH "MOUNT OPTIONS"
本节介绍特定于 ext2、ext3 和 ext4 的安装选项。 也可以使用其他泛型安装选项; 详见 \fBmount\fP(8)。
.SH "Mount options for ext2"
`ext2` 文件系统是标准的 Linux 文件系统。 从 Linux 2.5.46 开始，对于大多数安装选项，默认值由文件系统超级块决定。用
\fBtune2fs\fP(8) 设置它们。
.TP 
\fBacl\fP|\fBnoacl\fP
支持 POSIX 访问控制列表 (或不支持)。 请参见 \fBacl\fP(5) 手册页。
.TP 
\fBbsddf\fP|\fBminixdf\fP
设置 \fIstatfs\fP 系统调用的行为。\fBminixdf\fP 行为是在 \fIf_blocks\fP 字段中返回文件系统的总块数，而 \fBbsddf\fP 行为
(默认) 是减去 ext2 文件系统使用的且不可用于文件存储的开销块。Thus
.sp 1
% mount /k \-o minixdf;  df /k; umount /k
.TS
tab(#);
l2 l2 r2 l2 l2 l
l c r c c l.
File System#1024\-blocks#Used#Available#Capacity#Mounted on
/dev/sda6#2630655#86954#2412169#3%#/k
.TE
.sp 1
% mount /k \-o bsddf;  df /k; umount /k
.TS
tab(#);
l2 l2 r2 l2 l2 l
l c r c c l.
File System#1024\-blocks#Used#Available#Capacity#Mounted on
/dev/sda6#2543714#13#2412169#0%#/k
.TE
.sp 1
(请注意，此示例显示可以将命令行选项添加到 \fI/etc/fstab\fP.) 中给出的选项
.TP 
\fBcheck=none\fP or \fBnocheck\fP
挂载时不进行检查。这是默认设置。这很快。 不时调用 \fBe2fsck\fP(8) 是明智的，例如在启动时调用 \&。不支持非默认行为 (已删除
check=normal 和 check=strict 选项)。请注意，如果 ext4 内核驱动程序用于 ext2 和 ext3
文件系统，则不必支持这些安装选项。
.TP 
\fBdebug\fP
在每次 (重新) 安装时打印调试信息。
.TP 
\fBerrors=\fP{\fBcontinue\fP|\fBremount\-ro\fP|\fBpanic\fP}
定义遇到错误时的行为。 (要么忽略错误，只将文件系统标记为错误并继续，要么以只读方式重新安装文件系统，或者崩溃并停止系统。)
默认设置在文件系统超级块中，可以使用 \fBtune2fs\fP(8) 更改。
.TP 
\fBgrpid\fP|\fBbsdgroups\fP and \fBnogrpid\fP|\fBsysvgroups\fP
这些选项定义了新创建的文件获得的组 ID。 设置 \fBgrpid\fP 时，它采用创建它的目录的组 ID; 否则 (默认) 它采用当前进程的
fsgid，除非该目录设置了 setgid 位，在这种情况下它从父目录中获取 gid，如果它本身是一个目录，它也会设置 setgid 位。
.TP 
\fBgrpquota\fP|\fBnoquota\fP|\fBquota\fP|\fBusrquota\fP
usrquota (与配额相同) 挂载选项启用文件系统上的用户配额支持。grpquota 启用组配额支持。您需要配额实用工具来实际启用和管理配额系统。
.TP 
\fBnouid32\fP
禁用 32 位 UID 和 GID。 这是为了与仅存储和期望 16 位值的旧内核的互操作性。
.TP 
\fBoldalloc\fP or \fBorlov\fP
对新 inode 使用旧分配器或 Orlov 分配器。奥尔洛夫是默认的。
.TP 
\fBresgid=\fP\,\fIn\fP and \fBresuid=\fP\,\fIn\fP
ext2 文件系统保留一定比例的可用空间 (默认为 5%，参见 \fBmke2fs\fP(8) 和 \fBtune2fs\fP(8))。
这些选项决定了谁可以使用保留块。 (大致: 谁拥有指定的 uid，或者属于指定的组。)
.TP 
\fBsb=\fP\fIn\fP
不使用普通超级块，而是使用 \fIn\fP 指定的替代超级块。 当主超级块已损坏时通常使用此选项。 备份超级块的位置取决于文件系统的块大小、每组的块数以及
\fBsparse_super\fP 等特性。
.IP
额外的备份超级块可以通过使用 \fBmke2fs\fP 程序使用 \fB\-n\fP 选项打印出超级块存在的位置来确定，假设 \fBmke2fs\fP
提供了与文件系统布局一致的参数 (例如块大小，每组块，\fBsparse_super\fP 等) .
.IP
这里的块号使用 1\k 个单位。因此，如果要在具有 4k 个块的文件系统上使用逻辑块 32768，请使用 "sb=131072"。
.TP 
\fBuser_xattr\fP|\fBnouser_xattr\fP
支持 "user." 扩展属性 (或不支持)。


.SH "Mount options for ext3"
ext3 文件系统是 ext2 文件系统的一个版本，它已通过日志功能得到增强。 它支持与 ext2 相同的选项以及以下新增功能:
.TP 
\fBjournal_dev=devnum\fP/\fBjournal_path=path\fP
当外部日志设备的 major/minor 编号发生变化时，这些选项允许用户指定新的日志位置。 日志设备通过其在 devnum 中编码的新
major/minor 编号或通过设备路径来标识。
.TP 
\fBnorecovery\fP/\fBnoload\fP
不要在安装时加载轴颈。 请注意，如果文件系统未完全卸载，则跳过日志重播将导致文件系统包含不一致，从而导致许多问题。
.TP 
\fBdata=\fP{\fBjournal\fP|\fBordered\fP|\fBwriteback\fP}
指定文件数据的日志模式。 元数据始终记录在日志中。 要在根文件系统上使用 \fBordered\fP 以外的模式，请将模式作为引导参数传递给内核，例如
\&\fIrootflags=data=journal\fP。
.RS
.TP 
\fBjournal\fP
所有数据在写入主文件系统之前都会提交到日志中。
.TP 
\fBordered\fP
这是默认模式。 在将其元数据提交到日志之前，所有数据都被直接强制输出到主文件系统。
.TP 
\fBwriteback\fP
不保留数据排序 \(en 数据可能在其元数据提交到日志后写入主文件系统。 据传这是吞吐量最高的选项。
它保证内部文件系统的完整性，但是它可以允许旧数据在崩溃和日志恢复后出现在文件中。
.RE
.TP 
\fBdata_err=ignore\fP
如果在有序模式下文件数据缓冲区发生错误，只需打印一条错误消息。
.TP 
\fBdata_err=abort\fP
如果在有序模式下文件数据缓冲区中发生错误，则终止日志。
.TP 
\fBbarrier=0\fP / \fBbarrier=1\fP
这会在 jbd 代码中禁用 / 启用写屏障。 barrier=0 禁用，barrier=1 启用 (default)。这也需要一个可以支持屏障的 IO
栈，如果 jbd 在屏障写入时出错，它将再次禁用屏障并发出警告。
写屏障强制对日志提交进行正确的磁盘排序，使易失性磁盘写缓存可以安全使用，但会造成一些性能损失。
如果您的磁盘以某种方式由电池供电，则禁用屏障可能会安全地提高性能。
.TP 
\fBcommit=\fP\fInrsec\fP
每 \fInrsec\fP 秒开始一次日志提交。 默认值为 5 秒。 零表示默认。
.TP 
\fBuser_xattr\fP
启用扩展用户属性。请参见 \fBattr\fP(5) 手册页。
.TP 
\fBjqfmt=\fP{\fBvfsold\fP|\fBvfsv0\fP|\fBvfsv1\fP}
除了旧的配额系统 (如在 ext2 中，jqfmt=vfsold 又名版本 1 配额) ext3 还支持日志式配额 (版本 2
配额)。jqfmt=vfsv0 或 jqfmt=vfsv1 启用日志配额。日志配额的优点是即使在崩溃后也不需要进行配额检查。启用 \fBquota\fP
文件系统特性时，将自动使用日志配额，并忽略此挂载选项。
.TP 
\fBusrjquota=aquota.user\fP|\fBgrpjquota=aquota.group\fP
对于日志配额 (jqfmt=vfsv0 或 jqfmt=vfsv1)，挂载选项 usrjquota=aquota.user 和
grpjquota=aquota.group 需要告诉配额系统使用哪个配额数据库文件。启用 \fBquota\fP
文件系统特性时，将自动使用日志配额，并忽略此挂载选项。

.SH "Mount options for ext4"
ext4 文件系统是 ext3 文件系统的高级版本，它结合了可扩展性和可靠性增强功能以支持大型文件系统。

选项 \fBjournal_dev, journal_path, norecovery, noload, data, commit, orlov,\fP
\fBoldalloc, [no]user_xattr, [no]acl, bsddf, minixdf, debug, errors,\fP
\fBdata_err, grpid, bsdgroups, nogrpid, sysvgroups, resgid, resuid, sb,\fP
\fBquota, noquota, nouid32, grpquota, usrquota, usrjquota, grpjquota,\fP \fBand jqfmt are backwardly compatible with ext3 or ext2.\fP
.TP 
\fBjournal_checksum | nojournal_checksum\fP
journal_checksum 选项启用日志交易的校验和。 这将允许 e2fsck
中的恢复代码和内核检测内核中的损坏。这是一个兼容的更改，将被旧内核忽略。
.TP 
\fBjournal_async_commit\fP
提交块可以写入磁盘而无需等待描述符块。如果启用旧内核无法安装设备。 这将在内部启用 'journal_checksum'。
.TP 
\fBbarrier=0\fP / \fBbarrier=1\fP / \fBbarrier\fP / \fBnobarrier\fP
这些安装选项与 ext3 中的效果相同。 添加安装选项 "barrier" 和 "nobarrier" 是为了与其他 ext4 安装选项保持一致。

ext4 文件系统默认启用写屏障。
.TP 
\fBinode_readahead_blks=\fP\fIn\fP
这个调整参数控制 ext4 的 inode 表预读算法将预读到缓冲区缓存中的 inode 表块的最大数量。 该值必须是 2 的幂。默认值为 32 个块。
.TP 
\fBstripe=\fP\fIn\fP
mballoc 将尝试用于分配大小和对齐的文件系统块数。对于 RAID5/6 系统，这应该是数据磁盘数 * 文件系统块中的 RAID 块大小。
.TP 
\fBdelalloc\fP
将块分配推迟到写出时间。
.TP 
\fBnodelalloc\fP
禁用延迟分配。当数据从用户复制到页面缓存时分配块。
.TP 
\fBmax_batch_time=\fP\fIusec\fP
ext4 应等待其他文件系统操作与同步写入操作一起批处理的最长时间。由于同步写入操作将强制提交然后等待 I/O
完成，它不会花费太多，并且可以赢得巨大的吞吐量，我们等待少量时间以查看是否有任何其他事务可以搭载同步写入。所使用的算法旨在通过测量完成提交事务所需的时间
(平均) 来自动调整磁盘速度。这次调用 "commit time"。 如果事务已经运行的时间小于提交时间，ext4
会尝试休眠提交时间，看看是否有其他操作加入事务。提交时间受 max_batch_time 的限制，默认为 15000\\[mc] s
(15\ms)。可以通过将 max_batch_time 设置为来完全关闭此优化 0.
.TP 
\fBmin_batch_time=\fP\fIusec\fP
此参数将提交时间 (如上所述) 设置为至少
min_batch_time。它默认为零微秒。增加此参数可能会提高非常快的磁盘上的多线程同步工作负载的吞吐量，但代价是增加延迟。
.TP 
\fBjournal_ioprio=\fP\fIprio\fP
I/O 优先级 (从 0 到 7，其中 0 是最高优先级) 应该用于在提交操作期间由 kjournald2 提交的 I/O 操作。 默认为 3，比默认的
I/O 优先级略高。
.TP 
\fBabort\fP
出于调试目的模拟调用 ext4_abort() 的效果。 这通常在重新安装已安装的文件系统时使用。
.TP 
\fBauto_da_alloc\fP|\fBnoauto_da_alloc\fP
许多损坏的应用程序在通过以下模式替换现有文件时不使用 fsync()

fd = open("foo.new")/write(fd,...)/close(fd)/ rename("foo.new", "foo")

或更糟

fd = open("foo", O_TRUNC)/write(fd,...)/close(fd).

如果启用 auto_da_alloc，ext4 将检测 replace\-via\-rename 和 replace\-via\-truncate
模式并强制分配任何延迟分配块，以便在下一次日志提交时，在默认数据 = 有序模式下，数据块在提交 rename() 操作之前，新文件被强制写入磁盘。
这提供了与 ext3 大致相同级别的保证，并避免了在延迟分配块被强制写入磁盘之前系统崩溃时可能发生的 "zero\-length" 问题。
.TP 
\fBnoinit_itable\fP
不要在后台初始化任何未初始化的 inode 表块。安装 CD 可能会使用此特性以便尽快完成安装过程; inode
表初始化过程将被推迟到下一次挂载文件系统时。
.TP 
\fBinit_itable=n\fP
惰性 itable init 代码将等待 n 倍于将前一个块组的 inode 表清零所花费的毫秒数。这在初始化文件系统的 inode
表时将对系统性能的影响降至最低。
.TP 
\fBdiscard\fP/\fBnodiscard\fP
控制在释放块时 ext4 是否应向底层块设备发出 discard/TRIM 命令。 这对 SSD 设备和
sparse/thinly\-provisioned LUN 很有用，但默认情况下它是关闭的，直到完成足够的测试。
.TP 
\fBblock_validity\fP/\fBnoblock_validity\fP
此选项 enables/disables
是用于在内部数据结构中跟踪文件系统元数据块的内核设施。这允许多块分配器和其他例程快速定位可能与文件系统元数据块重叠的范围。此选项用于调试目的，由于它会对性能产生负面影响，因此默认情况下处于关闭状态。
.TP 
\fBdioread_lock\fP/\fBdioread_nolock\fP
控制 ext4 是否应该使用 DIO 读取锁定。如果指定了 dioread_nolock 选项，ext4 将在缓冲区写入之前分配未初始化的范围，并在
IO 完成后将范围转换为已初始化。 这种方法允许 ext4 代码避免使用 inode
互连锁，从而提高高速存储的可扩展性。然而，这不适用于数据日志，并且内核警告将忽略 dioread_nolock 选项。
请注意，dioread_nolock 代码路径仅用于基于扩展的文件。 由于此选项包含的限制，它在默认情况下处于关闭状态 (例如
\&dioread_lock)。
.TP 
\fBmax_dir_size_kb=n\fP
这限制了目录的大小，因此任何将它们扩展到超过指定的千字节限制的尝试都会导致 ENOSPC
错误。这在内存受限的环境中很有用，在这种环境中，非常大的目录可能会导致严重的性能问题，甚至会引发 Out Of Memory
killer。(例如，如果只有 512\MB 内存可用，176\MB 的目录可能会严重限制系统的风格。)
.TP 
\fBi_version\fP
启用 64 位 inode 版本支持。默认情况下此选项处于关闭状态。
.TP 
\fBnombcache\fP
此选项禁止使用 mbcache 进行扩展属性重复数据删除。在扩展属性很少或从不在文件之间共享的系统上，使用 mbcache
进行重复数据删除会增加不必要的计算开销。
.TP 
\fBprjquota\fP
prjquota 挂载选项在文件系统上启用项目配额支持。 您需要配额实用工具来实际启用和管理配额系统。 此安装选项需要 \fBproject\fP
文件系统，特性。

.SH "FILE ATTRIBUTES"
ext2、ext3 和 ext4 文件系统支持使用 \fBchattr\fP(1) 实用程序在 Linux 系统上设置以下文件属性:
.sp
\fBa\fP \- 仅追加
.sp
\fBA\fP \- 没有时间更新
.sp
\fBd\fP \- 无转储
.sp
\fBD\fP \- 同步目录更新
.sp
\fBi\fP \- immutable
.sp
\fBS\fP \- 同步更新
.sp
\fBu\fP \- undeletable
.sp
此外，ext3 和 ext4 文件系统支持以下标志:
.sp
\fBj\fP \- 数据日志
.sp
最后，ext4 文件系统还支持以下标志:
.sp
\fBe\fP \- 范围格式
.sp
有关这些属性标志的说明，请参见 \fBchattr\fP(1) 手册页。
.SH "KERNEL SUPPORT"
本节列出了支持特定文件系统特性的文件系统驱动程序 (例如，ext2、ext3、ext4) 和上游内核版本。
请注意，在某些情况下，该特性存在于早期的内核版本中，但存在已知的严重错误。 在其他情况下，该特性可能仍被视为处于实验状态。
最后，请注意某些发行版可能已将特性反向移植到较旧的内核中; 特别是某些 "enterprise distributions"
中的内核版本可能极具误导性。
.IP \fBfiletype\fP 2in
ext2, 2.2.0
.IP \fBsparse_super\fP 2in
ext2, 2.2.0
.IP \fBlarge_file\fP 2in
ext2, 2.2.0
.IP \fBhas_journal\fP 2in
ext3, 2.4.15
.IP \fBext_attr\fP 2in
ext2/ext3, 2.6.0
.IP \fBdir_index\fP 2in
ext3, 2.6.0
.IP \fBresize_inode\fP 2in
ext3、2.6.10 (在线调整大小)
.IP \fB64bit\fP 2in
ext4, 2.6.28
.IP \fBdir_nlink\fP 2in
ext4, 2.6.28
.IP \fBextent\fP 2in
ext4, 2.6.28
.IP \fBextra_isize\fP 2in
ext4, 2.6.28
.IP \fBflex_bg\fP 2in
ext4, 2.6.28
.IP \fBhuge_file\fP 2in
ext4, 2.6.28
.IP \fBmeta_bg\fP 2in
ext4, 2.6.28
.IP \fBuninit_bg\fP 2in
ext4, 2.6.28
.IP \fBmmp\fP 2in
ext4, 3.0
.IP \fBbigalloc\fP 2in
ext4, 3.2
.IP \fBquota\fP 2in
ext4, 3.6
.IP \fBinline_data\fP 2in
ext4, 3.8
.IP \fBsparse_super2\fP 2in
ext4, 3.16
.IP \fBmetadata_csum\fP 2in
ext4, 3.18
.IP \fBencrypt\fP 2in
ext4, 4.1
.IP \fBmetadata_csum_seed\fP 2i
ext4, 4.4
.IP \fBproject\fP 2i
ext4, 4.5
.IP \fBea_inode\fP 2i
ext4, 4.13
.IP \fBlarge_dir\fP 2i
ext4, 4.13
.IP \fBcasefold\fP 2i
ext4, 5.2
.IP \fBverity\fP 2i
ext4, 5.4
.IP \fBstable_inodes\fP 2i
ext4, 5.5
.SH "SEE ALSO"
\fBmke2fs\fP(8), \fBmke2fs.conf\fP(5), \fBe2fsck\fP(8), \fBdumpe2fs\fP(8),
\fBtune2fs\fP(8), \fBdebugfs\fP(8), \fBmount\fP(8), \fBchattr\fP(1)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
