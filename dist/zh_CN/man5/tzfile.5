.\" -*- coding: UTF-8 -*-
.\" This file is in the public domain, so clarified as of
.\" 1996-06-05 by Arthur David Olson.
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH TZFILE 5   
.SH NAME
tzfile \- 时区信息
.SH DESCRIPTION
.ie  '\(lq'' .ds lq \&"\"
.el .ds lq \(lq\"
.ie  '\(rq'' .ds rq \&"\"
.el .ds rq \(rq\"
.de  q
\\$3\*(lq\\$1\*(rq\\$2
..
.ie  \n(.g .ds - \f(CR-\fP
.el .ds - \-
\fBtzset\fP(3) 使用的时区信息文件通常位于名称类似于 \fI/usr/share/zoneinfo\fP 的目录下。 这些文件使用 Internet
RFC 8536 中描述的格式。 每个文件都是一个 8 位字节序列。 在一个文件中，二进制整数由一个或多个字节按网络顺序
(bigendian，或高位字节优先) 的序列表示，所有位都有效，有符号二进制整数使用二进制补码表示，布尔值是由 0 (false) 或 1
(true) 的单字节二进制整数表示。 该格式以包含以下字段的 44 字节标头开头:
.IP * 2
神奇的四字节 ASCII 序列
.q TZif
将该文件标识为时区信息文件。
.IP *
标识文件格式版本的字节 (截至 2021 年，要么是 ASCII NUL，
.q 2 ,
.q 3 ,
or
.q 4 ).
.IP *
包含零的十五个字节保留供 future 使用。
.IP *
六个四字节整数值，顺序如下:
.RS
.TP 
\fBtzh_ttisutcnt\fP
文件中存储的 UT/local 指标的数量。 (UT 是世界时。)
.TP 
\fBtzh_ttisstdcnt\fP
文件中存储的 standard/wall 指标的数量。
.TP 
\fBtzh_leapcnt\fP
数据条目存储在文件中的闰秒数。
.TP 
\fBtzh_timecnt\fP
数据条目存储在文件中的转换次数。
.TP 
\fBtzh_typecnt\fP
数据条目存储在文件中的本地时间类型的数量 (不能为零)。
.TP 
\fBtzh_charcnt\fP
文件中存储的时区缩写字符串的字节数。
.RE
.PP
上述标头后跟以下字段，其长度取决于标头的内容:
.IP * 2
\fBtzh_timecnt\fP 四字节有符号整数值，按升序排序。 这些值以网络字节顺序写入。 每个都用作过渡时间 (由 \fBtime\fP(2))
返回，此时计算本地时间的规则发生变化。
.IP *
\fBtzh_timecnt\fP 一字节无符号整数值;
除了最后一个之外的每个都告诉文件中描述的不同类型的本地时间类型中的哪些与从相同索引的过渡时间开始并持续到但不包括下一个过渡时间的时间段相关联。
(最后一次类型仅用于与下面描述的 POSIX 样式 TZ 字符串的一致性检查。) 这些值用作下一个字段的索引。
.IP *
\fBtzh_typecnt\fP \fBttinfo\fP 条目，每个条目定义如下:
.in +.5i
.sp
.nf
.ta .5i +\w'unsigned char\0\0'u
struct ttinfo {
	int32_t	tt_utoff;
	unsigned char	tt_isdst;
	unsigned char	tt_desigidx;
};
.in -.5i
.fi
.sp
每个结构体以网络字节顺序写为 \fBtt_utoff\fP 的四字节带符号整数值，后跟 \fBtt_isdst\fP 的一字节布尔值和 \fBtt_desigidx\fP
的一字节值。 在每个结构体中，\fBtt_utoff\fP 给出要添加到 UT 的秒数，\fBtt_isdst\fP 告诉 \fBtm_isdst\fP 是否应该由
\fBlocaltime\fP(3) 设置，\fBtt_desigidx\fP 作为文件中 \fBttinfo\fP 条目后面的时区缩写字节数组的索引;
如果指定的字符串是 "\*\-00"，则 \fBttinfo\fP 条目是一个占位符，表示本地时间未指定。 \fBtt_utoff\fP 值永远不会等于 \-
2**31，让 32 位客户端在不溢出的情况下取反它。 此外，在实际应用中，\fBtt_utoff\fP 在 [\-89999, 93599] 范围内 (即大于
\-25 小时且小于 26 小时) ; 这允许已经支持 POSIX 要求的范围 [\-24:59:59, 25:59:59] 的实现轻松支持。
.IP *
表示时区名称的 \fBtzh_charcnt\fP 字节，它们是以空字符结尾的字节字符串，每个字节都由上述 \fBtt_desigidx\fP 值索引。
如果一个是另一个的后缀，则，字节字符串，可以重叠。 未指定这些字符串的编码。
.IP *
\fBtzh_leapcnt\fP 成对的四字节值，以网络字节顺序写入; 每对的第一个值给出非负时间 (由 \fBtime\fP(2))
返回，闰秒发生时或闰秒表到期时; 第二个是指定校正的有符号整数，它是在给定时间开始的时间段内应用的闰秒数 \fItotal\fP。 值对按时间严格升序排序。
每对表示一个闰秒，可以是正的也可以是负的 0Z，除非最后一对与前一对具有相同的修正，最后一对表示闰秒表的到期时间。 每个闰秒都在 UTC 日历月的末尾。
第一闰秒的出现时间为非负数，当且仅当其修正为正数时为正闰秒; 第一个闰秒之后的每个闰秒的校正与前一个闰秒相差 1 (正闰秒) 或 \-1
(negative 闰秒)。 如果闰秒表为空，则所有时间戳的闰秒校正为零; 否则，对于第一次出现时间之前的时间戳，如果第一对的校正为 1 或
\-1，则闰秒校正为零，否则未指定 (仅在开始时被截断的文件中发生)。
.IP *
\fBtzh_ttisstdcnt\fP standard/wall 指标，每个存储为一个字节的布尔值;
它们说明与本地时间类型关联的转换时间是指定为标准时间还是本地 (挂钟) 时间。
.IP *
\fBtzh_ttisutcnt\fP UT/local 指标，每个存储为一个字节的布尔值; 它们说明与本地时间类型关联的转换时间是指定为 UT
还是本地时间。 如果设置了 UT/local 指示器，则还必须设置相应的 standard/wall 指示器。
.PP
standard/wall 和 UT/local 指示器旨在将 TZif 文件的转换时间转换为适用于通过缺少规则的 POSIX 样式 TZ
字符串指定的另一个时区的转换。 例如，当 TZ="EET\*\-2EEST" 并且没有 TZif 文件 "EET\*\-2EEST"
时，其想法是从具有众所周知的名称 "posixrules" 的 TZif 文件调整过渡时间，该文件仅用于此目的并且是一个文件
"Europe/Brussels" 的副本，一个具有不同 UT 偏移量的文件。 POSIX
没有指定这种过时的转换行为，默认规则依赖于安装，并且没有已知的实现支持 2037 年以后的时间戳的此特性因此需要 (say) 希腊时间的用户应该改为指定
TZ="Europe/Athens" 以获得更好的历史记录覆盖范围，如果需要 POSIX 一致性并且不需要准确处理旧时间戳，则返回
TZ="EET\*\-2EEST,M3.5.0/3,M10.5.0/4"。
.PP
如果 \fBtzh_timecnt\fP 为零或时间参数小于文件中记录的第一个转换时间，则 \fBlocaltime\fP(3) 函数通常使用文件中的第一个
\fBttinfo\fP 结构体。
.SS "Version 2 format"
对于版本 2 格式的时区文件，上述标题和数据后跟第二个标题和数据，格式相同，但每个转换时间或闰秒时间使用八个字节。 (闰秒计数保持四个字节。)
在第二个标题和数据之后是一个换行符封闭的 POSIX\-TZ
环境变量样式字符串，用于处理存储在文件中的最后一个转换时间之后的瞬间或所有瞬间，如果该文件没有过渡。 如果对于这样的瞬间没有 POSIX 样式的表示，则
POSIX 样式的 TZ 字符串为空 (即，换行符之间没有任何内容)。 如果非空，则 POSIX 风格的 TZ
字符串必须与最后一个转换时间之后的本地时间类型一致 (如果存在于八字节数据中) ; 例如，给定字符串
.q WET0WEST,M3.5.0,M10.5.0/3
那么如果最后一个转换时间是在七月，转换的本地时间类型必须指定一个缩写的夏令时
.q WEST
那是 UT 以东一小时。 此外，如果至少有一个过渡，则时间类型 0 与从不确定的过去到但不包括最早过渡时间的时间段相关联。
.SS "Version 3 format"
对于版本 3 格式的时区文件，POSIX\-TZ 样式的字符串可以使用 POSIX TZ 格式的两个次要扩展名，如 \fBnewtzset\fP(3) 中所述。
首先，其转换时间的小时部分可能是带符号的，范围从 \-167 到 167，而不是 POSIX 要求的从 0 到 24 的无符号值。 其次，如果从 1 月
1 日的 00:00 开始到 12 月 31 日的 24:00 加上夏令时和标准时间之间的差异，则 DST 全年有效。
.SS "Version 4 format"
对于版本 4 格式的 TZif 文件，第一个闰秒记录可以有既不是 + 1 也不是 \-1 的更正，以表示 TZif 文件在开始时被截断。
此外，如果存在两个或多个闰秒转换并且最后一个条目的校正等于前一个，则最后一个条目表示闰秒表而不是闰秒的到期; 此过期后的时间戳是不可靠的，因为
future 版本可能会在过期后添加闰秒条目，而添加的闰秒将改变过期后时间戳的处理方式。
.SS "Interoperability considerations"
Future 对格式的更改可能会，追加，更多数据。
.PP
版本 1 文件被视为旧格式，不应生成，因为它们不支持 2038 年之后的过渡时间。 仅理解版本 1 的 Readers 必须忽略任何超出版本 1
数据块计算结束的数据。
.PP
除了版本 1，writers 应该生成文件数据所需的最低版本号。 例如，writer 只有在其闰秒表过期或在开始时被截断时才应生成版本 4 文件。
同样，只有在需要 TZ 字符串扩展以准确模拟转换时间时，不生成版本 4 文件的 writer 才应生成版本 3 文件。
.PP
版本 1 标题和数据块定义的时间变化序列应该是版本 2 + 标题和数据块以及页脚定义的时间变化的连续子序列。 该指南帮助过时版本 1 readers
与当前 readers 就连续子序列中的时间戳达成一致。 它还允许不支持过时的 readers 的 writers 在版本 1 数据块中使用零的
\fBtzh_timecnt\fP 以节省空间。
.PP
当 TZif 文件包含闰秒表过期时间时，TZif readers 应该拒绝处理过期后时间戳，或者像过期时间不存在一样处理它们 (可能带有错误指示)。
.PP
时区名称应由字母数字集中的至少三个 (3) 且不超过六个 (6) ASCII 字符组成，
.q \*- ,
and
.q + .
这是为了与时区缩写的 POSIX 要求兼容。
.PP
当读取版本 2 或更高版本的文件时，readers 应该忽略版本 1 的标头和数据块，除非是为了跳过它们。
.PP
Readers 应该计算标题和数据块的总长度，并检查它们是否都符合实际文件大小，作为文件有效性检查的一部分。
.PP
当出现正闰秒时，readers 应该在包含闰秒之前的秒的本地分钟上，追加，一秒。 如果在 UTC 偏移量不是 60
秒的倍数时发生这种情况，则闰秒早于本地分钟的最后一秒，并且分钟的剩余本地秒数从 60 开始编号，而不是通常的 59; UTC 偏移量不受影响。
.SS "Common interoperability issues"
本节记录了读取或写入 TZif 文件时的常见问题。 其中大部分是在生成 TZif 文件以供较旧的 readers 使用时出现的问题。 本节的目标是:
.IP * 2
帮助 TZif writers 输出文件，避免旧版或 buggy TZif readers 中的常见陷阱，
.IP *
帮助 TZif readers 在阅读 future TZif writers 生成的文件时避免常见的陷阱，以及
.IP *
帮助任何 future 规范作者了解当 TZif 格式更改时会出现什么样的问题。
.PP
当定义了新版本的 TZif 格式时，设计目标是 reader 可以成功使用 TZif 文件，即使该文件的 TZif 版本比 reader
设计的版本更高。 当未实现完全兼容性时，尝试将故障限制在很少使用的时间戳，并允许在 writers 中进行简单的部分解决方法，旨在生成甚至对旧版本
readers 有用的新版本数据。 本节试图记录这些兼容性问题和解决方法，以及记录 readers 中的其他常见错误。
.PP
TZif 的互操作性问题包括以下内容:
.IP * 2
一些 readers 只检查版本 1 数据。 作为部分解决方法，writer 可以输出尽可能多的版本 1 数据。 但是，reader 应该忽略版本 1
数据，并且应该使用版本 2 + 数据，即使 reader 的原生时间戳只有 32 位。
.IP *
某些为版本 2 设计的 readers 可能会在版本 3 或更高版本文件的最后一次转换后错误处理时间戳，因为它们无法解析 TZ 类字符串中 POSIX
的扩展名。 作为部分解决方法，writer 可以输出比必要更多的转换，因此只有 far\-future 时间戳被版本 2 readers 错误处理。
.IP *
一些为版本 2 设计的 readers 不支持在 24:00 之后转换的永久夏令时 \ (例如，一个 TZ 字符串
.q EST5EDT,0/0,J365/25
表示永久东部夏令时间 (\-04)。 作为解决方法，writer 可以用标准时间代替东部两个时区，例如，
.q XXX3EDT4,0/0,J365/23
对于全年未使用标准时间 (XXX，\-03) 和 negative 夏令时 (EDT，\-04) 的时区。 或者，作为部分解决方法，writer
可以将标准时间替换为下一个时区东部 \(例如，
.q AST4
永久大西洋标准时间 (\-04)。
.IP *
一些 readers 专为版本 2 或 3 设计，并且要求严格遵守 RFC 8536，拒绝版本 4 文件，其闰秒表在开始或到期时间结束时被截断。
.IP *
一些 readers 忽略页脚，而是根据最后一次转换的时间类型预测 future 时间戳。 作为部分解决方法，writer 可以输出比必要更多的转换。
.IP *
一些 readers 在第一次转换之前不使用时间类型 0 作为时间戳，因为它们使用并不总是选择时间类型 0 的启发式方法推断时间类型。
作为部分解决方法，writer 可以在早期输出虚拟 (no\-op) 第一次转换。
.IP *
某些 readers 在时间戳不小于 \- 2**31 的第一个转换之前错误处理时间戳。 仅支持 32 位时间戳的 Readers
可能更容易出现此问题，例如，当它们处理 64 位转换时，只有其中一些可以用 32 位表示。 作为部分解决方法，writer 可以在时间戳 \- 2**31
处输出虚拟转换。
.IP *
如果时间戳具有最小可能的带符号 64 位值，则某些 readers 会错误处理转换。 不建议使用小于 \- 2**59 的时间戳。
.IP *
一些 readers 错误处理包含以下内容的 POSIX 风格的 TZ 字符串
.q <
or
.q > .
作为部分解决方法，writer 可以避免使用
.q <
or
.q >
对于仅包含字母字符的时区缩写。
.IP *
许多 readers 错误处理包含非 ASCII 字符的时区缩写。 不推荐使用这些字符。
.IP *
某些 readers 可能会错误处理包含少于 3 个或多于 6 个字符的时区缩写，或者包含除字母数字以外的 ASCII 字符的时区缩写，
.q \*- ,
and
.q + .
不建议使用这些缩写。
.IP *
某些 readers 错误处理 TZif 文件，这些文件指定的夏令时 UT 偏移量小于相应标准时间的 UT 偏移量。 这些 readers
不支持像爱尔兰这样的位置，它使用相当于 POSIX TZ 字符串
.q IST\*-1GMT0,M10.5.0,M3.5.0/1 ,
夏季遵守标准时间 (IST，+01)，冬季遵守夏令时 (GMT，+00)。 作为部分解决方法，writer 可以输出相当于 POSIX TZ
字符串的数据
.q GMT0IST,M3.5.0/1,M10.5.0 ,
从而交换标准时间和夏令时。 尽管此变通方法错误地识别了一年中的哪个部分使用夏令时，但它正确地记录了 UT 偏移量和时区缩写。
.IP *
当 UTC 偏移量不是 60 秒的倍数时，某些 readers 会为正闰秒生成不明确的时间戳。 例如，在具有 UTC 偏移量 + 01:23:45
和正闰秒 78796801 (1972\-06\-30 23:59:60 UTC) 的时区中，一些 readers 将 map 78796800 和
78796801 到 01:23:45 当地时间第二天而不是将后者映射到 01:23:46，他们将 map 78796815 映射到 01:23:59
而不是 01:23:60。 这还不是一个实际问题，因为自 1972 年引入闰秒以来，没有任何民政当局观察到这样的 UTC 偏移量。
.PP
一些互操作性问题是 reader 错误，在此处列出主要是作为对 readers 开发人员的警告。
.IP * 2
一些 readers 不支持 negative 时间戳。 如果分布式应用程序的开发人员需要处理 1970 年前的数据，则应牢记这一点。
.IP *
某些 readers 在具有非负时间戳的第一个转换之前错误处理时间戳。 不支持 negative 时间戳的 Readers 可能更容易出现此问题。
.IP *
一些 readers 错误处理时区缩写，例如
.q \*-08
包含
.q + ,
.q \*- ,
或数字。
.IP *
一些 readers 错误处理超出 \-12 传统范围的 UT 偏移到 + 12 小时，因此不支持像 Kiritimati 这样超出此范围的位置。
.IP *
一些 readers 错误处理了 UT 的 [\-3599, \-1] 秒范围内的 UT 偏移量，因为它们将偏移量整数除以 3600 得到
0，然后将小时部分显示为
.q +00 .
.IP *
一些 readers 错误处理了不是一小时、15 分钟或 1 分钟的倍数的 UT 偏移量。
.SH "SEE ALSO"
\fBtime\fP(2), \fBlocaltime\fP(3), \fBtzset\fP(3), \fBtzselect\fP(8), \fBzdump\fP(8),
\fBzic\fP(8).
.PP
奥尔森 A、埃格特 P、默奇森 K. 时区信息格式 (TZif)。 2019 年 2 月
.UR https://\:datatracker.ietf.org/\:doc/\:html/\:rfc8536
互联网 RFC 8536
.UE
.UR https://\:doi.org/\:10.17487/\:RFC8536
doi:10.17487/RFC8536
.UE .
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
