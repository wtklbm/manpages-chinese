.\" -*- coding: UTF-8 -*-
'\" t
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH SYSTEMD\&.SERVICE 5 "" "systemd 253" systemd.service
.ie  \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH NAME
systemd.service \- 服务元配置
.SH SYNOPSIS
.PP
\fIservice\fP\&.service
.SH DESCRIPTION
.PP
名称以 "\&.service" 结尾的元配置文件编码有关由 systemd\& 控制和监督的进程的信息。
.PP
此手册页列出了特定于此元类型 \& 的配置选项。所有元配置文件的通用选项见 \fBsystemd.unit\fP(5)\&。通用配置项配置在泛型 [Unit]
和 [Install] 部分 \&。特定于服务的配置选项在 [Service] 部分 \& 中配置。
.PP
\fBsystemd.exec\fP(5) 中列出了其他选项，它定义了执行命令的执行环境，\fBsystemd.kill\fP(5)
中定义了服务进程的终止方式，\fBsystemd.resource\-control\fP(5) 中为服务进程配置资源控制设置 \&.
.PP
如果启用了 SysV init compat，systemd 会自动创建封装 SysV init 脚本的服务单元 (服务名称与脚本名称相同，加上
"\&.service" 后缀) ; 请参见 \fBsystemd\-sysv\-generator\fP(8)\&。
.PP
\fBsystemd\-run\fP(1) 命令允许创建 \&.service 和 \&。从命令行动态和瞬态地使用域单元 \&。
.SH "SERVICE TEMPLATES"
.PP
\fBsystemd\fP 服务可以通过 "\fIservice\fP@\fIargument\fP\&.service" 语法 \& 获取单个参数。这样的服务称为
"instantiated" 服务，而没有 \fIargument\fP 参数的元定义称为 `模板`\&。一个示例可以是 dhcpcd@\&.service
服务模板，它将网络接口作为参数以形成实例化服务 \&。在服务文件中，可以使用 %\-specifiers\& 访问此参数或 "instance
name"。有关详细信息，请参见 \fBsystemd.unit\fP(5)\&。
.SH "AUTOMATIC DEPENDENCIES"
.SS "Implicit Dependencies"
.PP
隐式添加以下依赖项:
.sp
.RS 4
.ie  n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
设置了 \fIType=dbus\fP 的服务自动获取类型 \fIRequires=\fP 和 \fIAfter=\fP 对 dbus\&.socket\& 的依赖。
.RE
.sp
.RS 4
.ie  n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
套接字激活的服务在它们激活 \& 后自动排序。套接字单元通过自动 \fIAfter=\fP 依赖性 \&。服务还通过自动 \fIWants=\fP 和
\fIAfter=\fP 依赖项 \& 引入 \fISockets=\fP 中列出的所有 \&.socket 单元。
.RE
.PP
如 \fBsystemd.exec\fP(5) 和 \fBsystemd.resource\-control\fP(5)\&
中所述，可能会添加额外的隐式依赖项作为执行和资源控制参数的结果。
.SS "Default Dependencies"
.PP
除非设置 \fIDefaultDependencies=no\fP，否则将添加以下依赖项:
.sp
.RS 4
.ie  n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
服务单元将在 sysinit\&.target 上具有类型 \fIRequires=\fP 和 \fIAfter=\fP 的依赖性，在 basic\&.target
上具有类型 \fIAfter=\fP 的依赖性，以及在 shutdown\&.target\& 上具有类型 \fIConflicts=\fP 和
\fIBefore=\fP 的依赖性。这些确保正常的服务单元引入基本的系统初始化，并在系统关闭之前干净地终止
\&。只有涉及提前启动或延迟系统关闭的服务才应禁用此选项 \&。
.RE
.sp
.RS 4
.ie  n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
实例化服务单元 (i\&.e\&. 名称中带有 "@" 的服务单元) 默认分配给每个模板切片元 (参见
\fBsystemd.slice\fP(5))，以模板元命名，包含特定模板的所有实例 \&. 该切片通常在关机时停止，连同所有模板实例
\&。如果不需要，请在模板元中设置 \fIDefaultDependencies=no\fP，然后定义您自己的每个模板切片元文件也设置
\fIDefaultDependencies=no\fP，或者在模板元 \& 中设置 \fISlice=system\&.slice\fP
(或其他合适的切片)。另请详见 \fBsystemd.resource\-control\fP(5)\&。
.RE
.SH OPTIONS
.PP
服务元文件可能包括 [Unit] 和 [Install] 部分，这些部分在 \fBsystemd.unit\fP(5)\& 中进行了描述。
.PP
服务元文件必须包含一个 [Service] 部分，其中包含有关服务及其监督的进程的信息 \&。本节中可能使用的许多选项与其他元类型共享
\&。这些选项记录在 \fBsystemd.exec\fP(5)、\fBsystemd.kill\fP(5) 和
\fBsystemd.resource\-control\fP(5)\& 中。特定于服务单元 [Service] 部分的选项如下:
.PP
\fIType=\fP
.RS 4
配置此服务的进程启动类型元
\&。\fBsimple\fP、\fBexec\fP、\fBforking\fP、\fBoneshot\fP、\fBdbus\fP、\fBnotify\fP、\fBnotify\-reload\fP
或 \fBidle\fP: 之一
.sp
.RS 4
.ie  n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
如果设置为 \fBsimple\fP (如果指定 \fIExecStart=\fP 则为默认值，但 \fIType=\fP 和 \fIBusName=\fP
均未指定)，服务管理器将认为单元在主服务进程被 fork off 后立即启动 \&。期望配置 \fIExecStart=\fP 的进程是服务的主进程
\&。在这种模式下，如果该进程向系统上的其他进程提供功能，则应在服务启动之前安装其通信通道 (例如 systemd
设置的套接字，通过套接字激活)，因为服务管理器将在创建主服务进程之后、执行服务 \*(Aqs binary\&. 请注意，这意味着 \fBsimple\fP
服务的 \fBsystemctl start\fP 命令行将报告成功，即使服务 \*(无法成功调用 Aqs 二进制文件 (例如，因为所选 \fIUser=\fP 不
\* (Aqt 存在，或服务二进制文件丢失) \&。
.RE
.sp
.RS 4
.ie  n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBexec\fP 类型类似于 \fBsimple\fP，但服务管理器会认为在主服务二进制文件执行后立即启动 \&。服务经理将延迟启动后续单元，直到那个时候
\&。(或者换句话说: \fBsimple\fP 在 \fBfork()\fP 返回后立即继续执行进一步的作业，而 \fBexec\fP 在服务进程中的
\fBfork()\fP 和 \fBexecve()\fP 都成功之前不会继续执行 \&。) 请注意，这意味着 \fBexec\fP 服务的 \fBsystemctl start\fP 命令行将在 service\*(Aqs binary 无法调用成功 (比如因为选择的 \fIUser=\fP 没有 \* (Aqt 存在，或者
service binary 缺失) \&.
.RE
.sp
.RS 4
.ie  n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
如果设置为 \fBforking\fP，预计配置有 \fIExecStart=\fP 的进程将调用 \fBfork()\fP 作为它的启动的一部分
\&。当启动完成并且所有通信通道都已设置 \& 时，预计父进程将退出。子进程作为主服务进程继续运行，父进程退出时服务管理器会认为元启动了 \&。这是传统
UNIX 服务的行为 \&。如果使用这个设置，建议也使用 \fIPIDFile=\fP 选项，这样 systemd 可以可靠的识别服务的主进程
\&。一旦父进程退出 \&，systemd 将继续启动后续单元。
.RE
.sp
.RS 4
.ie  n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBoneshot\fP 的行为类似于 \fBsimple\fP; 但是，服务管理器会在主进程退出后考虑单元。然后它将启动后续单元 \&。
\fIRemainAfterExit=\fP 对这种类型的服务特别有用 \&。 如果 \fIType=\fP 和 \fIExecStart=\fP 均未指定 \&，则
\fIType=\fP\fBoneshot\fP 是隐含的默认值。请注意，如果在没有 \fIRemainAfterExit=\fP
的情况下使用此选项，则服务将永远不会进入 "active" 元状态，而是直接从 "activating" 转换到 "deactivating" 或
"dead"，因为没有配置应连续运行的进程 \&。特别是这意味着在运行这种类型的服务 (并且没有设置 \fIRemainAfterExit=\fP)
之后，它不会显示为随后启动，而是显示为死 \&。
.RE
.sp
.RS 4
.ie  n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBdbus\fP 的行为类似于 \fBsimple\fP; 但是，预计该服务会在 D\-Bus 总线上获得一个名称，如 \fIBusName=\fP\&
配置的那样。获取 D\-Bus 总线名称后，systemd 将继续启动后续单元。配置了此选项的服务单元隐式获得对 dbus\&.socket 元 \&
的依赖。如果指定了 \fIBusName=\fP\&，则此类型为默认类型。这种类型的服务元被认为处于激活状态，直到获取到指定的总线名称
\&。当总线名称被占用时，它被认为是激活的
\&。一旦总线名称被释放，服务就被认为不再起作用，这具有服务管理器试图终止属于该服务的任何剩余进程的效果。因此，丢弃其总线名称作为它的关闭逻辑的一部分的服务应准备好接收
\fBSIGTERM\fP (或 \fIKillSignal=\fP) 中配置的任何信号作为结果 \&。
.RE
.sp
.RS 4
.ie  n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBnotify\fP 的行为类似于 \fBexec\fP; 但是，预计该服务在完成启动时通过 \fBsd_notify\fP(3) 或等效的调用发送
"READY=1" 通知消息 \&。发送此通知消息后，systemd 将继续启动后续单元 \&。如果使用此选项，则应设置
\fINotifyAccess=\fP (见下文) 以打开对 systemd\& 提供的通知套接字的访问。如果 \fINotifyAccess=\fP 缺失或设置为
\fBnone\fP，则强制设置为 \fBmain\fP\&。
.RE
.sp
.RS 4
.ie  n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBnotify\-reload\fP 的行为与 \fBnotify\fP\& 相同。但是，它以一种方式扩展了逻辑: \fBSIGHUP\fP UNIX
进程信号发送给服务 \*(当服务被要求重新加载时 Aqs 主进程 \&。(发送的信号可以通过 \fIReloadSignal=\fP 进行调整，见下文
\&。) \&。当启动重新加载过程时，服务将通过 \fBsd_notify\fP(3) 回复一条通知消息，其中包含 "RELOADING=1"
字段以及设置为当前单调时间的 "MONOTONIC_USEC=" (i\&.e\&.  \fBCLOCK_MONOTONIC\fP in
\fBclock_gettime\fP(2)) in \(mcs, formatted as decimal
string\&. 重新加载完成后，必须发送另一条通知消息，其中包含 `READY=1`\&。使用此服务类型并实现此重新加载协议是提供
\fIExecReload=\fP 命令以重新加载服务 \*(Aqs 配置 \&.
.RE
.sp
.RS 4
.ie  n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBidle\fP 的行为与 \fBsimple\fP 非常相似; 然而，服务程序的实际执行被延迟，直到所有活动作业都被分派 \&。这可用于避免 shell
服务的输出与控制台上的状态输出交错 \&。请注意，此类型仅用于改善控制台输出，它不能作为一般的元订购工具使用，并且此服务类型的效果有 5s
超时，之后无论如何都会调用服务程序 \&。
.RE
.sp
通常建议尽可能将 \fIType=\fP\fBsimple\fP 用于长时间运行的服务，因为它是最简单和最快的选项 \&。但是，由于此服务类型不会 \*(Aqt
传播服务启动失败并且不会 \*(Aqt 允许对其他单元进行排序以完成服务初始化 (例如，如果客户端需要通过以下方式连接到服务，这将很有用某种形式的
IPC，并且 IPC 通信仅由服务本身建立 \ (与通过套接字或总线激活或类似方式提前执行此操作相反)，在许多情况下它可能不够
\&。如果是这样，\fBnotify\fP、\fBnotify\-reload\fP 或 \fBdbus\fP (后者仅在服务提供 D\-Bus 接口的情况下)
是首选选项，因为它们允许服务程序代码精确安排何时认为服务已成功启动以及何时继续执行后续操作向上单位
\&。\fBnotify\fP/\fBnotify\-reload\fP 服务类型需要在服务代码库中明确支持 (因为 \fBsd_notify()\fP 或等效 API
需要在适当的时候由服务调用) \(em if it\*(Aqs not supported, then \fBforking\fP is an
alternative: it supports 传统的 UNIX 服务启动协议 \&。最后，\fBexec\fP
可能是一个选项，用于足以确保调用服务二进制文件的情况，以及服务二进制文件本身不执行或执行很少的初始化 (并且其初始化不太可能失败) \&。请注意，使用
\fBsimple\fP 以外的任何类型都可能会延迟启动过程，因为服务管理器需要等待服务初始化完成 \&。因此建议不要不必要地使用 \fBsimple\fP\&
以外的任何类型。(另请注意，通常不建议将 \fBidle\fP 或 \fBoneshot\fP 用于长时间运行的服务 \&。)
.RE
.PP
\fIExitType=\fP
.RS 4
指定经理何时应认为服务已完成 \&。\fBmain\fP 或 \fBcgroup\fP: 之一
.sp
.RS 4
.ie  n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
如果设置为 \fBmain\fP (默认)，当根据 \fIType=\fP 确定的主进程退出 \& 时，服务管理器将认为单元停止。因此，它不能与
\fIType=\fP\fBoneshot\fP\& 一起使用。
.RE
.sp
.RS 4
.ie  n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
如果设置为 \fBcgroup\fP，只要 cgroup 中至少有一个进程没有退出 \&，该服务就会被视为正在运行。
.RE
.sp
当服务具有已知的分叉模型并且可以可靠地确定主进程时，通常建议使用 \fIExitType=\fP\fBmain\fP。 \fIExitType=\fP \fBcgroup\fP
适用于分叉模型事先未知且可能没有特定主进程的应用程序。它非常适合瞬态或自动生成的服务，例如桌面环境中的图形应用程序。
.RE
.PP
\fIRemainAfterExit=\fP
.RS 4
采用一个布尔值，该值指定服务是否应被视为活动，即使它的所有进程都退出 \&。默认为 \fBno\fP\&。
.RE
.PP
\fIGuessMainPID=\fP
.RS 4
采用一个布尔值，指定 systemd 是否应该尝试猜测服务的主 PID，如果它不能可靠地确定 \&。除非设置了 \fBType=forking\fP 且未设置
\fBPIDFile=\fP，否则将忽略此选项，因为对于其他类型或使用明确配置的 PID 文件，主 PID 始终是已知的
\&。如果守护进程由多个进程组成，则猜测算法可能会得出错误的结论。如果无法确定主 PID，则服务的故障检测和自动重启将无法可靠地工作 \&。默认为
\fByes\fP\&。
.RE
.PP
\fIPIDFile=\fP
.RS 4
采用引用服务的 PID 文件的路径 \&。对于 \fIType=\fP 设置为 \fBforking\fP\& 的服务，建议使用此选项。指定的路径通常指向
/run/\& 下面的文件。如果指定了相对路径，则其前缀为 /run/\&。服务启动后，服务管理器会从这个文件中读取服务主进程的
PID。服务管理器不会写入这里配置的文件，但如果它仍然存在，它会在服务关闭后删除该文件 \&。PID
文件不需要由特权用户拥有，但如果它由非特权用户拥有，则会强制执行额外的安全限制: 该文件可能不是指向其他用户拥有所有权的文件的符号链接
(既不直接也不间接)，并且 PID 文件必须引用已经属于该服务的进程 \&。
.sp
请注意，在现代项目中应避免使用 PID 文件。尽可能使用 \fBType=notify\fP、\fBType=notify\-reload\fP 或
\fBType=simple\fP，这样就不需要使用 PID 文件来确定服务的主进程，避免不必要的 forking\&。
.RE
.PP
\fIBusName=\fP
.RS 4
采用此服务应使用的 D\-Bus 目标名称 \&。对于 \fIType=\fP 设置为 \fBdbus\fP\&
的服务，此选项是必需的。如果已知，建议始终设置此属性，以便轻松将服务名称 map 到 D\-Bus 目的地 \&。特别是，\fBsystemctl service\-log\-level/service\-log\-target\fP 动词使用了 this\&。
.RE
.PP
\fIExecStart=\fP
.RS 4
启动此服务时执行的带有参数的命令 \&。根据下面描述的规则 (参见下面的 "Command Lines" 部分) \&，该值被分成零个或多个命令行。
.sp
除非 \fIType=\fP 是 \fBoneshot\fP，否则必须只给出一个命令 \&。当使用 \fIType=oneshot\fP 时，可以指定零个或多个命令
\&。可以通过在同一个指令中提供多个命令行来指定命令，或者，可以多次指定该指令并具有相同的效果
\&。如果将空字符串分配给此选项，将重置要启动的命令列表，此选项的先前分配将无效 \&。如果未指定 \fIExecStart=\fP，则服务必须具有
\fIRemainAfterExit=yes\fP 和至少一个 \fIExecStop=\fP 行集 \&。(缺少 \fIExecStart=\fP 和
\fIExecStop=\fP 的服务无效 \&。)
.sp
对于每个指定的命令，第一个参数必须是可执行文件的绝对路径或没有任何斜线 \& 的简单文件名。可选地，此文件名可以使用一些特殊字符作为前缀:
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
\fBTable\ \&1.\ \&Special executable prefixes\fP
.TS
allbox tab(:);
lB lB.
T{
Prefix
T}:T{
Effect
T}
.T&
l l
l l
l l
l l
l l
l l.
T{
"@"
T}:T{
If the executable path is prefixed with "@", the second specified token will be passed as "argv[0]" to the executed process (instead of the actual filename), followed by the further arguments specified\&.
T}
T{
"\-"
T}:T{
If the executable path is prefixed with "\-", an exit code of the command normally considered a failure (i\&.e\&. non\-zero exit status or abnormal exit due to signal) is recorded, but has no further effect and is considered equivalent to success\&.
T}
T{
":"
T}:T{
If the executable path is prefixed with ":", environment variable substitution (as described by the "Command Lines" section below) is not applied\&.
T}
T{
"+"
T}:T{
If the executable path is prefixed with "+" then the process is executed with full privileges\&. In this mode privilege restrictions configured with \fIUser=\fP, \fIGroup=\fP, \fICapabilityBoundingSet=\fP or the various file system namespacing options (such as \fIPrivateDevices=\fP, \fIPrivateTmp=\fP) are not applied to the invoked command line (but still affect any other \fIExecStart=\fP, \fIExecStop=\fP, \&... lines)\&. However, note that this will not bypass options that apply to the whole control group, such as \fIDevicePolicy=\fP, see \fBsystemd.resource\-control\fP(5) for the full list\&.
T}
T{
"!"
T}:T{
Similar to the "+" character discussed above this permits invoking command lines with elevated privileges\&. However, unlike "+" the "!" character exclusively alters the effect of \fIUser=\fP, \fIGroup=\fP and \fISupplementaryGroups=\fP, i\&.e\&. only the stanzas that affect user and group credentials\&. Note that this setting may be combined with \fIDynamicUser=\fP, in which case a dynamic user/group pair is allocated before the command is invoked, but credential changing is left to the executed process itself\&.
T}
T{
"!!"
T}:T{
This prefix is very similar to "!", however it only has an effect on systems lacking support for ambient process capabilities, i\&.e\&. without support for \fIAmbientCapabilities=\fP\&. It\*(Aqs intended to be used for unit files that take benefit of ambient capabilities to run processes with minimal privileges wherever possible while remaining compatible with systems that lack ambient capabilities support\&. Note that when "!!" is used, and a system lacking ambient capability support is detected any configured \fISystemCallFilter=\fP and \fICapabilityBoundingSet=\fP stanzas are implicitly modified, in order to permit spawned processes to drop credentials and capabilities themselves, even if this is configured to not be allowed\&. Moreover, if this prefix is used and a system lacking ambient capability support is detected \fIAmbientCapabilities=\fP will be skipped and not be applied\&. On systems supporting ambient capabilities, "!!" has no effect and is redundant\&.
T}
.TE
.sp 1
"@"、"\-"、":"、"+"/"!"/"!!" 其中之一可以一起使用，可以任意顺序出现 \&。但是，一次只能使用 "+"、"!"、"!!" 中的一个
\&。请注意，其他命令行设置 i\&.e\& 也支持这些前缀。
\fIExecStartPre=\fP、\fIExecStartPost=\fP、\fIExecReload=\fP、\fIExecStop=\fP 和
\fIExecStopPost=\fP\&。
.sp
如果指定了多个命令，则按照它们在元文件中出现的顺序依次调用这些命令 \&。如果其中一条命令失败 (且没有 "\-" 前缀)，则其他行不执行，单元被认为失败
\&。
.sp
除非设置 \fIType=forking\fP，否则通过此命令行启动的进程将被视为守护进程的主进程 \&。
.RE
.PP
\fIExecStartPre=\fP, \fIExecStartPost=\fP
.RS 4
\fIExecStart=\fP 中的命令之前或之后执行的附加命令，分别为 \&。语法与 \fIExecStart=\fP
相同，除了允许使用多个命令行并且命令一个接一个地执行，串行 \&。
.sp
如果这些命令中的任何一个 (不以 "\-" 为前缀) 失败，则不会执行其余命令，并且元被视为失败 \&。
.sp
\fIExecStart=\fP 命令仅在所有未以 "\-" 为前缀的 \fIExecStartPre=\fP 命令成功退出后运行 \&。
.sp
\fIExecStartPost=\fP 命令仅在 \fIExecStart=\fP 中指定的命令已成功调用后运行，由 \fIType=\fP 确定
(i\&.e\&。对于 \fIType=simple\fP 或 \fIType=idle\fP，进程已启动，最后 \fIExecStart=\fP 进程对于
\fIType=oneshot\fP 成功退出，初始 \fIType=forking\fP
进程退出成功，\fIType=notify\fP/\fIType=notify\-reload\fP 发送 "READY=1"，\fIType=dbus\fP)\& 已占用
\fIBusName=\fP。
.sp
请注意，\fIExecStartPre=\fP 不能用于启动长时间运行的进程 \&。在下一个服务进程运行之前，所有通过 \fIExecStartPre=\fP
调用的进程派生出来的进程都将被杀死。
.sp
请注意，如果 \fIExecStartPre=\fP、\fIExecStart=\fP 或 \fIExecStartPost=\fP 中指定的任何命令失败 (并且没有以
"\-" 为前缀，请参见上文) 或在服务完全启动之前超时，则继续执行 \fIExecStopPost=\fP 中指定的命令，\fIExecStop=\fP
中的命令是跳过 \&。
.sp
请注意，出于 \fIBefore=\fP/\fIAfter=\fP 排序约束 \& 的目的，考虑了 \fIExecStartPost=\fP 的执行。
.RE
.PP
\fIExecCondition=\fP
.RS 4
在 \fIExecStartPre=\fP\& 中的命令之前执行的可选命令。语法与 \fIExecStart=\fP
相同，除了允许使用多个命令行并且命令一个接一个地执行，串行 \&。
.sp
该行为类似于 \fIExecStartPre=\fP 和条件检查的混合体: 当 \fIExecCondition=\fP 命令以退出代码 1 到 254
(inclusive) 退出时，将跳过其余命令，并且元是 \fInot\fP 标记为失败 \&。但是，如果一个 \fIExecCondition=\fP 命令以
255 或异常退出 (例如 \&.g\&. 超时，被信号杀死等 \&.)，则单元将被视为失败 (并且将跳过其余命令) \&。0 或匹配
\fISuccessExitStatus=\fP 的退出代码将继续执行下一个命令 \&。
.sp
关于不要在 \fIExecStartPre=\fP 中运行长时间运行的进程的相同建议也适用于
\fIExecCondition=\fP\&。在任何非零或异常退出的情况下，\fIExecCondition=\fP 还将运行 \fIExecStopPost=\fP
中的命令，作为停止服务的一部分，如上文所述 \&。
.RE
.PP
\fIExecReload=\fP
.RS 4
执行命令以触发服务中的配置重新加载 \&。此参数采用多个命令行，遵循与上述 \fIExecStart=\fP 相同的方案 \&。此设置的使用是可选的
\&。此处支持说明符和环境变量替换，遵循与 \fIExecStart=\fP\& 相同的方案。
.sp
设置了一个额外的特殊环境变量: 如果已知，\fI$MAINPID\fP 将设置为守护进程的主进程，并且可用于如下命令行:
.sp
.if  n \{\
.RS 4
.\}
.nf
ExecReload=kill \-HUP $MAINPID
.fi
.if  n \{\
.RE
.\}
.sp
但是请注意，通过对信号进行排队 (如上面的示例行) 来重新加载守护进程通常不是一个好的选择，因为这是一个异步操作，因此在订购多个服务相互重新加载时不适合
\&。因此强烈建议使用 \fIType=\fP\fBnotify\-reload\fP 代替 \fIExecReload=\fP，或者将 \fIExecReload=\fP
设置为不仅触发守护进程的配置重新加载，而且同步等待它完成 \& 的命令。例如，\fBdbus\-broker\fP(1) 使用以下内容:
.sp
.if  n \{\
.RS 4
.\}
.nf
ExecReload=busctl call org\&.freedesktop\&.DBus \e
        /org/freedesktop/DBus org\&.freedesktop\&.DBus \e
        ReloadConfig
.fi
.if  n \{\
.RE
.\}
.RE
.PP
\fIExecStop=\fP
.RS 4
执行命令以停止通过 \fIExecStart=\fP\& 启动的服务。此参数采用多个命令行，遵循与上面针对 \fIExecStart=\fP 描述的相同方案
\&。此设置的使用是可选的 \&。运行此选项中配置的命令后，暗示该服务已停止，并且根据 \fIKillMode=\fP 设置终止为其保留的任何进程 (请参见
\fBsystemd.kill\fP(5))\&。如果未指定此选项，则进程将终止请求停止服务时发送 \fIKillSignal=\fP 或
\fIRestartKillSignal=\fP 中指定的信号 \&。支持说明符和环境变量替换 (包括 \fI$MAINPID\fP，见上文) \&。
.sp
请注意，为此设置指定仅要求服务终止 (例如，通过向其发送某种形式的终止信号) 但不等待它这样做的命令通常是不够的
\&。由于服务的剩余进程在命令退出后立即根据 \fIKillMode=\fP 和 \fIKillSignal=\fP 或 \fIRestartKillSignal=\fP
被杀死，这可能不会导致干净的停止 \&。因此，指定的命令应该是同步操作，而不是异步操作 \&。
.sp
注意 \fIExecStop=\fP 中指定的命令只有在服务启动成功的时候才会执行 \&。如果服务根本没有启动，或者启动失败，则不会调用它们，例如，因为
\fIExecStart=\fP、\fIExecStartPre=\fP 或 \fIExecStartPost=\fP 中指定的任何命令失败 (并且没有 \* (Aqt
以 "\-" 为前缀，见上文) 或超时 \&。使用 \fIExecStopPost=\fP 在服务启动失败再次关闭时调用命令
\&。另请注意，如果服务成功启动，则始终执行停止操作，即使服务中的进程自行终止或被杀死 \&。停止命令必须准备好处理这种情况 \&。 如果
systemd 知道主进程在调用停止命令时退出 \&，\fI$MAINPID\fP 将被取消设置。
.sp
服务重启请求被实现为停止操作，然后是启动操作 \&。这意味着 \fIExecStop=\fP 和 \fIExecStopPost=\fP 在服务重启操作期间执行
\&。
.sp
建议将此设置用于与请求干净终止的服务通信的命令 \&。对于事后清理步骤，请改用 \fIExecStopPost=\fP\&。
.RE
.PP
\fIExecStopPost=\fP
.RS 4
服务停止后执行的附加命令 \&。这包括使用 \fIExecStop=\fP 中配置的命令、服务未定义任何 \fIExecStop=\fP 或服务意外退出 \&
的情况。此参数采用多个命令行，遵循与 \fIExecStart=\fP\& 所述相同的方案。这些设置的使用是可选的 \&。支持说明符和环境变量替换
\&。请注意，\(en 与 \fIExecStop=\fP 不同 \(en 当服务无法正确启动并再次关闭时，将调用使用此设置指定的命令 \&。
.sp
建议使用此设置进行清理操作，即使服务未能正确启动 \& 也应执行这些操作。使用此设置配置的命令需要能够运行，即使服务中途启动失败并且在 \&
周围留下未完全初始化的数据。由于服务 \* (当执行使用此设置指定的命令时，Aqs 进程已经终止，它们不应尝试与它们通信 \&。
.sp
注意所有配置了这个设置的命令都是用服务的结果码调用的，还有主进程 \*(Aq 退出码和状态，在
\fI$SERVICE_RESULT\fP、\fI$EXIT_CODE\fP 和 \fI$EXIT_STATUS\fP 环境下设置变量，有关详细信息，请参见
\fBsystemd.exec\fP(5)\&。
.sp
请注意，出于 \fIBefore=\fP/\fIAfter=\fP 排序约束 \& 的目的，考虑了 \fIExecStopPost=\fP 的执行。
.RE
.PP
\fIRestartSec=\fP
.RS 4
配置重启服务前的休眠时间 (与 \fIRestart=\fP)\& 配置。以秒为单位取一个较少的值，或时间跨度值，例如 `5min 20s`\&。默认为
100ms\&。
.RE
.PP
\fITimeoutStartSec=\fP
.RS 4
配置等待启动的时间 \&。如果守护服务没有在配置的时间内发出启动完成信号，该服务将被视为失败并再次关闭 \&。精确的动作取决于
\fITimeoutStartFailureMode=\fP 选项 \&。取一个以秒为单位的小于元的值，或者一个时间跨度值，例如 `5min
20s`\&。传递 "infinity" 以禁用超时逻辑 \&。默认为管理器中设置的 \fIDefaultTimeoutStartSec=\fP，使用
\fIType=oneshot\fP 时除外，在这种情况下默认禁用超时 (请参见 \fBsystemd\-system.conf\fP(5))\&.
.sp
如果 \fIType=notify\fP/\fIType=notify\-reload\fP 的服务发送
"EXTEND_TIMEOUT_USEC=\&..."，这可能会导致开始时间延长到 \fITimeoutStartSec=\fP\&
之外。第一次收到此消息必须在超过 \fITimeoutStartSec=\fP 之前发生，一旦启动时间超过
\fITimeoutStartSec=\fP，服务管理器将允许服务继续启动，前提是服务在指定的时间间隔内重复
"EXTEND_TIMEOUT_USEC=\&..."，直到服务启动状态为由 `READY=1`\& 结束。(见 \fBsd_notify\fP(3))\&。
.RE
.PP
\fITimeoutStopSec=\fP
.RS 4
该选项有两个用途 \&。首先，它配置等待每个 \fIExecStop=\fP 命令的时间 \&。如果其中任何一个超时，则跳过后续的 \fIExecStop=\fP
命令，并以 \fBSIGTERM\fP\& 终止服务。如果没有指定 \fIExecStop=\fP 命令，服务会立即获取 \fBSIGTERM\fP\&。可以通过
\fITimeoutStopFailureMode=\fP 选项 \& 更改此默认行为。其次，它配置等待服务自身停止的时间 \&。如果没有 \*(Aqt
在指定时间内终止，会被 \fBSIGKILL\fP 强行终止 (见 \fBsystemd.kill\fP(5)) 中的
\fIKillMode=\fP\&. 取一个以秒为单位的小于元的值，或者一个时间跨度值，例如 `5min 20s`\&。传递 "infinity"
以禁用超时逻辑 \&。默认为管理器配置文件中的 \fIDefaultTimeoutStopSec=\fP (请参见
\fBsystemd\-system.conf\fP(5))\&.
.sp
如果 \fIType=notify\fP/\fIType=notify\-reload\fP 的服务发送
"EXTEND_TIMEOUT_USEC=\&..."，这可能导致停止时间超过 \fITimeoutStopSec=\fP\&。第一次收到此消息必须在超过
\fITimeoutStopSec=\fP 之前发生，一旦停止时间超过
\fITimeoutStopSec=\fP，服务管理器将允许服务继续停止，前提是服务在指定的时间间隔内重复
"EXTEND_TIMEOUT_USEC=\&..."，或者自行终止 (请参见 \fBsd_notify\fP(3))\&。
.RE
.PP
\fITimeoutAbortSec=\fP
.RS 4
此选项配置等待服务终止的时间，因为看门狗超时 (请参见 \fIWatchdogSec=\fP)\&。如果服务有一个短的
\fITimeoutStopSec=\fP，此选项可用于为系统提供更多时间来写入核心转储服务 \&。到期后将被 \fBSIGKILL\fP 强行终止服务 (见
\fBsystemd.kill\fP(5))\& 中的 \fIKillMode=\fP，此时核心文件将被截断 \&。使用 \fITimeoutAbortSec=\fP
为每个服务的核心转储设置一个合理的超时，该超时足够大以写入所有预期数据，同时也足够短以在适当的时候处理服务故障 \&。
.sp
取一个以秒为单位的小于元的值，或者一个时间跨度值，例如 `5min 20s`\&。传递空值以跳过专用看门狗终止超时处理并回退
\fITimeoutStopSec=\fP\&。传递 "infinity" 以禁用超时逻辑 \&。默认为管理器配置文件中的
\fIDefaultTimeoutAbortSec=\fP (请参见 \fBsystemd\-system.conf\fP(5))\&.
.sp
如果 \fIType=notify\fP/\fIType=notify\-reload\fP 的服务自己处理 \fBSIGABRT\fP
(而不是依赖内核编写核心转储)，它可以发送 "EXTEND_TIMEOUT_USEC=\&..." 以将终止时间延长到
\fITimeoutAbortSec=\fP\& 之外。第一次收到此消息必须在超过 \fITimeoutAbortSec=\fP 之前发生，一旦终止时间超过
\fITimeoutAbortSec=\fP，服务管理器将允许服务继续终止，前提是服务在指定的时间间隔内重复
"EXTEND_TIMEOUT_USEC=\&..."，或者自行终止 (请参见 \fBsd_notify\fP(3))\&。
.RE
.PP
\fITimeoutSec=\fP
.RS 4
将 \fITimeoutStartSec=\fP 和 \fITimeoutStopSec=\fP 配置为指定值的简写 \&。
.RE
.PP
\fITimeoutStartFailureMode=\fP, \fITimeoutStopFailureMode=\fP
.RS 4
这些选项分别配置在守护进程服务未在其配置的 \fITimeoutStartSec=\fP 内发出启动信号时所采取的操作，如果它未在
\fITimeoutStopSec=\fP\& 内停止。采用 \fBterminate\fP、\fBabort\fP 和 \fBkill\fP\& 之一。这两个选项默认为
\fBterminate\fP\&。
.sp
如果设置了 \fBterminate\fP，则服务将通过发送 \fIKillSignal=\fP 中指定的信号正常终止 (默认为 \fBSIGTERM\fP，请参见
\fBsystemd.kill\fP(5))\&。如果服务未终止，则在 \fITimeoutStopSec=\fP\& 之后发送
\fIFinalKillSignal=\fP。如果设置了 \fBabort\fP，则发送 \fIWatchdogSignal=\fP instead and
\fITimeoutAbortSec=\fP apply before sending
\fIFinalKillSignal=\fP\&. 此设置可用于分析无法启动或间歇性关闭 \& 的服务。通过使用 \fBkill\fP，服务会通过发送
\fIFinalKillSignal=\fP 立即终止，而不会再超时 \&。此设置可用于加速关闭失败的服务 \&。
.RE
.PP
\fIRuntimeMaxSec=\fP
.RS 4
配置服务运行的最长时间 \&。如果使用它并且服务的活动时间超过指定时间，它将终止并进入故障状态 \&。请注意，此设置对 \fIType=oneshot\fP
服务没有任何影响，因为它们会在激活完成后立即终止 \&。传递 "infinity" (默认值) 以配置无运行时限制 \&。
.sp
如果 \fIType=notify\fP/\fIType=notify\-reload\fP 的服务发送
"EXTEND_TIMEOUT_USEC=\&..."，这可能会导致运行时超出 \fIRuntimeMaxSec=\fP\&。第一次收到此消息必须在超出
\fIRuntimeMaxSec=\fP 之前发生，一旦运行时间超出
\fIRuntimeMaxSec=\fP，服务管理器将允许服务继续运行，前提是服务在指定的时间间隔内重复
"EXTEND_TIMEOUT_USEC=\&..."，直到通过以下方式实现服务关闭 "STOPPING=1" (或终止) \&。(见
\fBsd_notify\fP(3))\&。
.RE
.PP
\fIRuntimeRandomizedExtraSec=\fP
.RS 4
此选项通过将最大运行时间增加 0 和指定值 (以秒为单位) \& 之间均匀分布的持续时间来修改 \fIRuntimeMaxSec=\fP。如果
\fIRuntimeMaxSec=\fP 未指定，则此特性将被禁用 \&。
.RE
.PP
\fIWatchdogSec=\fP
.RS 4
配置服务的看门狗超时 \&。启动完成后看门狗被激活 \&。该服务必须定期调用 \fBsd_notify\fP(3) 和 "WATCHDOG=1"
(i\&.e\&. "keep\-alive ping")\&。如果两次这样的调用之间的时间大于配置的时间，那么服务将被置于失败状态并且它将以
\fBSIGABRT\fP (或 \fIWatchdogSignal=\fP)\& 指定的信号。通过将 \fIRestart=\fP 设置为
\fBon\-failure\fP、\fBon\-watchdog\fP、\fBon\-abnormal\fP 或 \fBalways\fP，服务会自动重启
\&。这里配置的时间会传递给 \fIWATCHDOG_USEC=\fP 环境变量 \&
中执行的服务进程。如果为服务启用看门狗支持，这允许守护进程自动启用保持活动的 ping 逻辑。如果使用此选项，则应设置 \fINotifyAccess=\fP
(见下文) 以打开对 systemd\& 提供的通知套接字的访问。如果未设置 \fINotifyAccess=\fP，它将隐式设置为
\fBmain\fP\&。默认为 0，即禁用此，特性 \&。该服务可以检查服务管理器是否需要看门狗保持活动通知 \&。有关详细信息，请参见
\fBsd_watchdog_enabled\fP(3)\&。 \fBsd_event_set_watchdog\fP(3) 可用于启用自动看门狗通知支持 \&。
.RE
.PP
\fIRestart=\fP
.RS 4
配置当服务进程退出、被终止或达到超时时是否重新启动服务 \&。该服务进程可以是主服务进程，也可以是
\fIExecStartPre=\fP、\fIExecStartPost=\fP、\fIExecStop=\fP、\fIExecStopPost=\fP 或
\fIExecReload=\fP\& 指定的进程之一。当进程死亡是 systemd 操作的结果时 (e\&.g\&.service stop or
restart)，服务不会被重启 \&。超时包括错过看门狗 "keep\-alive ping" 截止时间和服务启动、重新加载和停止操作超时。
.sp
采用
\fBno\fP、\fBon\-success\fP、\fBon\-failure\fP、\fBon\-abnormal\fP、\fBon\-watchdog\fP、\fBon\-abort\fP
或 \fBalways\fP\& 之一。如果设置为 \fBno\fP (默认)，服务将不会重新启动 \&。如果设置为
\fBon\-success\fP，只有服务进程干净退出才会重启 \&。在这种情况下，干净退出意味着以下任何一种情况:
.sp
.RS 4
.ie  n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
退出代码 0;
.RE
.sp
.RS 4
.ie  n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
对于 \fIType=oneshot\fP 以外的类型，信号 \fBSIGHUP\fP、\fBSIGINT\fP、\fBSIGTERM\fP 或 \fBSIGPIPE\fP 之一;
.RE
.sp
.RS 4
.ie  n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fISuccessExitStatus=\fP\& 中指定的退出状态和信号。
.RE
.sp
如果设置为 \fBon\-failure\fP，当进程以非零退出代码退出时，服务将被重新启动，被信号终止 (包括核心转储，但不包括上述四种信号)，当操作
(如服务重新加载) 时超时，并且当配置的看门狗超时被触发时 \&。如果设置为 \fBon\-abnormal\fP，则当进程被信号终止 (包括 on core
dump，不包括上述四种信号)、操作超时或触发看门狗超时 \& 时，将重新启动服务。如果设置为
\fBon\-abort\fP，只有当服务进程因未指定为干净退出状态的未捕获信号而退出时才会重新启动服务 \&。如果设置为
\fBon\-watchdog\fP，只有当服务的看门狗超时到期时才会重启服务 \&。如果设置为
\fBalways\fP，服务将重新启动，无论它是否干净退出、被信号异常终止或超时 \&。
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
\fBTable\ \&2.\ \&Exit causes and the effect of the \fP\fIRestart=\fP 设置
.TS
allbox tab(:);
lB lB lB lB lB lB lB lB.
T{
Restart settings/Exit causes
T}:T{
\fBno\fP
T}:T{
\fBalways\fP
T}:T{
\fBon\-success\fP
T}:T{
\fBon\-failure\fP
T}:T{
\fBon\-abnormal\fP
T}:T{
\fBon\-abort\fP
T}:T{
\fBon\-watchdog\fP
T}
.T&
l l l l l l l l
l l l l l l l l
l l l l l l l l
l l l l l l l l
l l l l l l l l.
T{
Clean exit code or signal
T}:T{
\ \&
T}:T{
X
T}:T{
X
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}
T{
Unclean exit code
T}:T{
\ \&
T}:T{
X
T}:T{
\ \&
T}:T{
X
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}
T{
Unclean signal
T}:T{
\ \&
T}:T{
X
T}:T{
\ \&
T}:T{
X
T}:T{
X
T}:T{
X
T}:T{
\ \&
T}
T{
Timeout
T}:T{
\ \&
T}:T{
X
T}:T{
\ \&
T}:T{
X
T}:T{
X
T}:T{
\ \&
T}:T{
\ \&
T}
T{
Watchdog
T}:T{
\ \&
T}:T{
X
T}:T{
\ \&
T}:T{
X
T}:T{
X
T}:T{
\ \&
T}:T{
X
T}
.TE
.sp 1
作为上述设置的例外情况，如果在 \fIRestartPreventExitStatus=\fP (见下文) 中指定退出代码或信号，或者使用
\fBsystemctl stop\fP 或等效操作 \& 停止服务，则不会重新启动服务。此外，如果在 \fIRestartForceExitStatus=\fP
(见下文) \& 中指定了退出代码或信号，则服务将始终重新启动。
.sp
注意服务重启受 \fIStartLimitIntervalSec=\fP 和 \fIStartLimitBurst=\fP
配置的元启动速率限制，有关详细信息，请参见 \fBsystemd.unit\fP(5)\&。只有在达到启动限制后，重新启动的服务才会进入失败状态。\&。
.sp
将此设置为 \fBon\-failure\fP 是长期运行服务的推荐选择，以便通过尝试从错误中自动恢复来提高可靠性。对于应该能够自行选择终止的服务 (并避免
immediate 重新启动)，\fBon\-abnormal\fP 是一个替代选择 \&。
.RE
.PP
\fISuccessExitStatus=\fP
.RS 4
采用退出状态定义的列表，当主服务进程返回时，将被视为成功终止，除了正常的成功退出状态 0 和 \fIType=oneshot\fP 之外的信号
\fBSIGHUP\fP、\fBSIGINT\fP、\fBSIGTERM\fP 和
\fBSIGPIPE\fP\&. 退出状态定义可以是数字终止状态、终止状态名称或终止信号名称，以空格 \& 分隔。请参见 \fBsystemd.exec\fP(5)
中的进程退出代码部分以获取终止状态名称列表 (对于此设置，仅应使用没有 "EXIT_" 或 "EX_" 前缀的部分) \&。请参见
\fBsignal\fP(7) 以获取信号名称列表 \&。
.sp
请注意，此设置不会更改数字退出状态与其名称 i\&.e\& 之间的映射。无论此设置如何使用，0 仍将映射到 "SUCCESS"
(因此在工具输出中通常显示为 "0/SUCCESS")，1 仍将映射到 "FAILURE" (因此通常显示为 "1/FAILURE")，依此类推
\&。它只控制作为这些退出状态的影响而发生的事情，以及它如何传播到整个服务的状态 \&。
.sp
这个选项可能出现不止一次，在这种情况下，成功退出状态的列表被合并 \&。如果将空字符串分配给此选项，则列表将被重置，此选项的所有先前分配都将无效 \&。
.PP
\fBExample\ \&1.\ \&A service with the \fP\fISuccessExitStatus=\fP 设定
.sp
.if  n \{\
.RS 4
.\}
.nf
SuccessExitStatus=TEMPFAIL 250 SIGKILL
.fi
.if  n \{\
.RE
.\}
.sp
退出状态 75 (\fBTEMPFAIL\fP)、250 和终止信号 \fBSIGKILL\fP 被认为是干净的服务终止 \&。

Note: \fBsystemd\-analyze exit\-status\fP 可用于列出退出状态并在数字状态值和名称之间进行转换 \&。
.RE
.PP
\fIRestartPreventExitStatus=\fP
.RS 4
采用退出状态定义列表，当主服务进程返回时，将阻止自动服务重新启动，而不管使用 \fIRestart=\fP\&
配置的重新启动设置。退出状态定义可以是数字退出代码或终止信号名称，并以空格 \& 分隔。默认为空列表，因此默认情况下，配置的重启逻辑不排除任何退出状态
\&。例如:
.sp
.if  n \{\
.RS 4
.\}
.nf
RestartPreventExitStatus=1 6 SIGABRT
.fi
.if  n \{\
.RE
.\}
.sp
确保退出代码 1 和 6 以及终止信号 \fBSIGABRT\fP 不会导致服务自动重启 \&。该选项可能出现多次，在这种情况下，防止重启状态的列表被合并
\&。如果将空字符串分配给此选项，则会重置列表，并且此选项的所有先前分配都将无效 \&。
.sp
请注意，此设置对通过 \fIExecStartPre=\fP、\fIExecStartPost=\fP、\fIExecStop=\fP、\fIExecStopPost=\fP
或 \fIExecReload=\fP 配置的进程没有影响，但仅对主服务进程 i\&.e\& 有影响。由 \fIExecStart=\fP 调用的那个或 (取决于
\fIType=\fP、\fIPIDFile=\fP、\&...) 另外配置的主进程 \&。
.RE
.PP
\fIRestartForceExitStatus=\fP
.RS 4
获取退出状态定义的列表，当主服务进程返回时，将强制自动服务重新启动，而不管使用 \fIRestart=\fP\& 配置的重新启动设置。参数格式类似于
\fIRestartPreventExitStatus=\fP\&。
.RE
.PP
\fIRootDirectoryStartOnly=\fP
.RS 4
采用布尔型参数 \&。如果为 true，则根目录，如使用 \fIRootDirectory=\fP 选项配置的 (有关更多信息，请参见
\fBsystemd.exec\fP(5))，仅适用于使用 \fIExecStart=\fP 启动的进程，而不适用于各种其他
\fIExecStartPre=\fP、\fIExecStartPost=\fP、\fIExecReload=\fP、\fIExecStop=\fP 和
\fIExecStopPost=\fP 命令 \&. 如果为 false，该设置将以相同的方式应用于所有已配置的命令 \&。默认为 false\&。
.RE
.PP
\fINonBlocking=\fP
.RS 4
为通过基于套接字的激活传递的所有文件描述符设置 \fBO_NONBLOCK\fP 标志。如果为真，所有文件描述符 >= 3 (i\&.e\&. all
except stdin, stdout, 标准错误)，不包括那些通过文件描述符存储逻辑传入的文件描述符 (详见
\fIFileDescriptorStoreMax=\fP)，将设置 \fBO_NONBLOCK\fP 标志因此处于非阻塞模式
\&。此选项仅与套接字单元结合使用，如 \fBsystemd.socket\fP(5) 中所述，并且对先前保存在文件描述符存储中的文件描述符没有影响，例如
\&。默认为 false\&。
.RE
.PP
\fINotifyAccess=\fP
.RS 4
控制对服务状态通知套接字的访问，可通过 \fBsd_notify\fP(3) 调用 \& 访问。采用 \fBnone\fP (默认)、\fBmain\fP、\fBexec\fP
或 \fBall\fP\& 之一。如果 \fBnone\fP，没有从服务进程接受守护进程状态更新，所有状态更新消息都被忽略 \&。如果为
\fBmain\fP，则只接受服务主进程发送的服务更新 \&。如果是 \fBexec\fP，则仅接受源自 \fIExec*=\fP
命令之一的任何主进程或控制进程发送的服务更新 \&。如果 \fBall\fP，所有服务更新来自服务的所有成员 \* (接受 Aqs 控制组 \&。使用
\fIType=notify\fP/\fIType=notify\-reload\fP 或 \fIWatchdogSec=\fP (见上文) \&
时，应设置此选项以打开对通知套接字的访问。如果使用这些选项但未配置 \fINotifyAccess=\fP，它将隐式设置为 \fBmain\fP\&。
.sp
请注意，仅当发送进程在 PID 1 处理消息时仍然存在，或者发送进程由服务管理器显式运行时跟踪时，\fBsd_notify()\fP
通知才可能正确地归因于单元。后者是服务管理器最初分叉进程的情况，i\&.e\&。在匹配 \fBmain\fP 或 \fBexec\fP\&
的所有进程上。反之，如果单元的一个辅助进程发送一个 \fBsd_notify()\fP
消息并立即退出，服务管理器可能无法正确地将消息归因于单元，因此将忽略它，即使为它设置了 \fINotifyAccess=\fP\fBall\fP\&。
.sp
因此，为了消除所有涉及客户端查找的竞争状态 \*(Aqs 元和正确地将通知归因于单位，可以使用
\fBsd_notify_barrier()\fP\&。这个调用作为一个同步点，确保在这个调用之前发送的所有通知在它成功返回时都被服务管理器接收到。对于不是由服务管理器调用的客户端，需要使用
\fBsd_notify_barrier()\fP，否则这种同步机制对于将通知归因于元 \& 是不必要的。
.RE
.PP
\fISockets=\fP
.RS 4
指定此服务应从服务启动时继承套接字文件描述符的套接字单元的名称 \&。通常，没有必要使用此设置，因为其元与服务共享相同名称的所有套接字文件描述符
(当然受制于不同的元名称后缀) 都被传递给生成的进程 \&。
.sp
请注意，相同的套接字文件描述符可能会同时传递给多个进程
\&。另请注意，与最终配置为继承套接字文件描述符的服务相比，传入套接字流量可能会激活不同的服务。或者，换句话说: \&.socket 单元的
\fIService=\fP 设置不必与它引用的 \&.service 的 \fISockets=\fP 设置相反。
.sp
这个选项可能出现不止一次，在这种情况下，套接字单元列表被合并 \&。请注意，一旦设置，不支持再次清除套接字列表 (例如，通过将空字符串分配给该选项)
\&。
.RE
.PP
\fIFileDescriptorStoreMax=\fP
.RS 4
使用 \fBsd_pid_notify_with_fds\fP(3)\*(Aqs "FDSTORE=1" messages\&
配置可以在服务管理器中存储多少文件描述符。这对于实现可以在显式请求或崩溃后重新启动而不会丢失状态的服务很有用。在重新启动期间不应关闭的任何打开的套接字和其他文件描述符都可以以这种方式存储
\&。应用程序状态可以序列化为 /run / 中的文件，或者更好地存储在 \fBmemfd_create\fP(2) 内存文件描述符 \& 中。默认为
0，i\&.e\&。服务管理器中不能存储文件描述符 \&。从特定服务传递给服务管理器的所有文件描述符都传递回服务 \* (下次服务重启时的 Aqs
主进程 (有关使用的精确协议和文件描述符传递顺序的详细信息，请参见 \fBsd_listen_fds\fP(3))
\&。任何传递给服务管理器的文件描述符在看到 \fBPOLLHUP\fP 或 \fBPOLLERR\fP 时自动关闭，或者当服务完全停止并且没有作业排队或正在执行时
\&。如果使用此选项，则应设置 \fINotifyAccess=\fP (见上文) 以打开对 systemd\& 提供的通知套接字的访问。如果未设置
\fINotifyAccess=\fP，它将隐式设置为 \fBmain\fP\&。
.RE
.PP
\fIUSBFunctionDescriptors=\fP
.RS 4
配置包含 \m[blue]\fBUSB FunctionFS\fP\m[]\&\s-2\u[1]\d\s+2 描述符的文件的位置，以实现 USB gadget
函数 \&。这仅与配置了 \fIListenUSBFunction=\fP\& 的套接字元一起使用。这个文件的内容在打开后写入 ep0 文件 \&。
.RE
.PP
\fIUSBFunctionStrings=\fP
.RS 4
配置包含 USB FunctionFS 字符串 \& 的文件的位置。行为类似于上面的 \fIUSBFunctionDescriptors=\fP\&。
.RE
.PP
\fIOOMPolicy=\fP
.RS 4
配置内核内存不足 (OOM) 查杀策略和用户空间 OOM killer \fBsystemd\-oomd.service\fP(8)\&。在 Linux
上，当内存变得稀缺以至于内核无法为自己分配内存时，它可能会决定终止正在运行的进程以释放内存并减少内存压力
\&。请注意，systemd\-oomd\&.service
是一种更灵活的解决方案，旨在通过尝试在内核必须采取行动之前尽早终止服务来防止用户空间内存不足的情况，而不仅仅是内核。
.sp
此设置采用 \fBcontinue\fP、\fBstop\fP 或 \fBkill\fP\& 之一。如果设置为 \fBcontinue\fP 并且单元中的进程被 OOM
杀手杀死，这将被记录但单元继续运行 \&。如果设置为 \fBstop\fP，则记录事件，但元被服务管理器干净地终止 \&。如果设置为 \fBkill\fP 和元
\*(Aqs 进程之一被 OOM 杀手杀死，则指示内核通过将 memory\&.oom\&.group 属性设置为 \fB1\fP 来杀死所有剩余的元进程;
另请详见 \m[blue]\fBkernel documentation\fP\m[]\&\s-2\u[2]\d\s+2\&。
.sp
默认为 \fBsystemd\-system.conf\fP(5) 中的设置 \fIDefaultOOMPolicy=\fP 设置为，除了 \fIDelegate=\fP
打开的单元外，它默认为 \fBcontinue\fP\&。
.sp
使用 \fIOOMScoreAdjust=\fP 设置来配置元进程是否应被 Linux OOM 杀手逻辑视为进程终止的首选或次首选候选者
\&。有关详细信息，请参见 \fBsystemd.exec\fP(5)\&。
.sp
此设置也适用于 \fBsystemd\-oomd\fP\&。与内核 OOM 终止类似，此设置决定了 \fBsystemd\-oomd\fP 终止与之关联的 cgroup
后单元的状态 \&。
.RE
.PP
\fIOpenFile=\fP
.RS 4
采用 "path[\fI:fd\-name:options\fP]" 形式的参数，其中:
.sp
.RS 4
.ie  n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
"path" 是文件路径或文件系统中的 \fBAF_UNIX\fP 套接字;
.RE
.sp
.RS 4
.ie  n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
"fd\-name" 是将与文件描述符关联的名称; 名称可以包含任何 ASCII 字符，但必须排除控制字符和 ":"，并且长度最多为 255 个字符;
它是可选的，如果未提供，则默认为文件名;
.RE
.sp
.RS 4
.ie  n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
"options" 是以逗号分隔的访问选项列表; 可能的值为 "read\-only"、"append"、"truncate"、"graceful";
如果不指定，文件将以 \fBrw\fP 模式打开; 如果指定 "graceful"，则忽略 file/socket 打开过程中的错误
\&。多次指定相同的选项被视为错误 \&。
.RE
.sp
文件或套接字由服务管理器打开，并将文件描述符传递给服务 \&。如果路径是一个套接字，我们在它上面调用
\fBconnect()\fP\&。有关如何检索这些文件描述符 \& 的更多详细信息，请参见 \fBsd_listen_fds\fP(3)。
.sp
此设置对于允许服务访问它们可以访问的 files/sockets 非常有用 \* (Aqt 访问自己
(由于在单独的挂载命名空间中运行，没有特权，\&.\&.\&.) \&。
.sp
可以多次指定此设置，在这种情况下，将打开所有指定的路径并将文件描述符传递给服务 \&。如果分配了空字符串，则重置在此之前定义的整个打开文件列表 \&。
.RE
.PP
\fIReloadSignal=\fP
.RS 4
配置 UNIX 进程信号发送给服务 \*(Aqs 主进程当被要求重新加载服务 \*(Aqs 配置 \&. 默认为 \fBSIGHUP\fP\&。除非使用
\fIType=\fP\fBnotify\-reload\fP，否则此选项无效，请参见上文 \&。
.RE
.PP
检查 \fBsystemd.unit\fP(5)、\fBsystemd.exec\fP(5) 和 \fBsystemd.kill\fP(5) 以获得更多设置 \&。
.SH "COMMAND LINES"
.PP
本节介绍
\fIExecStart=\fP、\fIExecStartPre=\fP、\fIExecStartPost=\fP、\fIExecReload=\fP、\fIExecStop=\fP
和 \fIExecStopPost=\fP 选项 \& 的命令行解析以及变量和说明符替换。
.PP
多个命令行可以连接在一个指令中，方法是用分号分隔它们 (这些分号必须作为单独的单词传递) \&。单独的分号可以转义为 `\e;`\&。
.PP
使用 \fBsystemd.syntax\fP(7)\& 的 "Quoting"
部分中描述的规则，每个命令行都没有被引用。第一项成为要执行的命令，随后的一项成为参数 \&。
.PP
该语法受 shell 语法的启发，但仅理解以下段落中描述的元字符和扩展，而变量的扩展与 \& 不同。具体来说，重定向使用
"<"、"<<"、">" 和 ">>"，管道使用 "|"，后台运行程序使用 "&" 和 \fIother elements of shell syntax are not supported\fP\&。
.PP
要执行的命令可以包含空格，但不允许使用控制字符 \&。
.PP
命令行接受 "%" 说明符，如 \fBsystemd.unit\fP(5)\& 中所述。
.PP
支持基本环境变量替换 \&。在命令行上将 "${FOO}" 用作单词的一部分，或作为单词本身，在这种情况下，它将是 erased 并替换为环境变量
(如果有) 的确切值，包括它包含的所有空格，总是结果在一个完整的参数 \& 中。在命令行上使用 "$FOO"
作为单独的词，在这种情况下，它将被替换为以空格分隔的环境变量的值，从而导致零个或多个参数 \&。对于这种类型的扩展，在拆分为单词时会考虑引号，然后删除
\&。
.PP
如果命令不是完整的 (absolute) 路径，它将使用编译时确定的固定搜索路径解析为完整路径 \&。在使用拆分 /usr/bin/ 和 /bin /
目录的系统上，搜索的目录包括 /usr/local/bin/、/usr/bin/、/bin/，以及在使用拆分 bin / 和 sbin/\&
的系统上搜索的对应目录 sbin/。因此，如果可执行文件位于任何 "standard"
目录中，则仅使用可执行文件名称是安全的，而在其他情况下必须使用绝对路径 \&。建议使用绝对路径以避免歧义 \&。提示: 可以使用
\fBsystemd\-path search\-binaries\-default\fP\& 查询此搜索路径。
.PP
Example:
.sp
.if  n \{\
.RS 4
.\}
.nf
Environment="ONE=one" \*(AqTWO=two two\*(Aq
ExecStart=echo $ONE $TWO ${TWO}
.fi
.if  n \{\
.RE
.\}
.PP
这将执行带有四个参数的 \fB/bin/echo\fP: "one"、"two"、"two" 和 `二二`\&。
.PP
Example:
.sp
.if  n \{\
.RS 4
.\}
.nf
Environment=ONE=\*(Aqone\*(Aq "TWO=\*(Aqtwo\ \&two\*(Aq\ \&too" THREE=
ExecStart=/bin/echo ${ONE} ${TWO} ${THREE}
ExecStart=/bin/echo $ONE $TWO $THREE
.fi
.if  n \{\
.RE
.\}
.PP
这导致 /bin/echo 被调用了两次，第一次是参数 "\*(Aqone\*(Aq"、"\*(Aqtwo\ \&two\*(Aq\ \&too"、""，第二次是参数 "one"、"two\ \&two"、"too"\&。
.PP
要传递字面量美元符号，请使用 `$$`\&。展开时其值未知的变量被视为空字符串 \&。请注意，第一个参数 (i\&.e\&。要执行的程序) 可能不是变量
\&。
.PP
以这种方式使用的变量可以通过 \fIEnvironment=\fP 和 \fIEnvironmentFile=\fP\& 来定义。此外，在
\fBsystemd.exec\fP(5) 中的 "Environment variables in spawned processes"
部分中列出的变量，被认为是 "static configuration"，可以使用 (这包括 e\&.g\&. \fI$USER\fP，但不包括
\fI$TERM\fP)\&。
.PP
请注意，不直接支持 shell 命令行 \&。如果要使用 shell 命令行，则需要将它们显式传递给某种 shell 实现 \&。Example:
.sp
.if  n \{\
.RS 4
.\}
.nf
ExecStart=sh \-c \*(Aqdmesg | tac\*(Aq
.fi
.if  n \{\
.RE
.\}
.PP
Example:
.sp
.if  n \{\
.RS 4
.\}
.nf
ExecStart=echo one ; echo "two two"
.fi
.if  n \{\
.RE
.\}
.PP
这将执行两次 \fBecho\fP，每次执行一个参数: 分别为 "one" 和 "two two"\&。因为指定了两个命令，所以必须使用
\fIType=oneshot\fP\&。
.PP
Example:
.sp
.if  n \{\
.RS 4
.\}
.nf
ExecStart=echo / >/dev/null & \e; \e
ls
.fi
.if  n \{\
.RE
.\}
.PP
这将执行带有五个参数的 \fBecho\fP: "/"、">/dev/null"、"&"、";" 和 `ls`\&。
.SH EXAMPLES
.PP
\fBExample\ \&2.\ \&Simple service\fP
.PP
以下元文件创建一个将执行 /usr/foo\-daemon\& 的服务。由于未指定 \fIType=\fP，因此将采用默认的
\fIType=\fP\fBsimple\fP\&。systemd 将假设元在程序开始执行后立即启动 \&。
.sp
.if  n \{\
.RS 4
.\}
.nf
[Unit]
Description=Foo

[Service]
ExecStart=/usr/sbin/foo\-daemon

[Install]
WantedBy=multi\-user\&.target
.fi
.if  n \{\
.RE
.\}
.PP
请注意，systemd 在这里假设由 systemd 启动的进程将继续运行，直到服务终止 \&。如果程序自行守护 (i\&.e\&.forks)，请改用
\fIType=\fP\fBforking\fP\&。
.PP
由于没有指定 \fIExecStop=\fP，systemd 将向所有从此服务启动的进程发送 SIGTERM，并且在超时后还会发送
SIGKILL\&。可以修改此行为，有关详细信息，请参见 \fBsystemd.kill\fP(5)\&。
.PP
请注意，此元类型不包括服务已完成初始化时的任何类型的通知 \&。为此，您应该使用其他元类型，例如
\fIType=\fP\fBnotify\fP/\fIType=\fP\fBnotify\-reload\fP 如果服务理解 systemd\*(Aqs
通知协议，\fIType=\fP\fBforking\fP 如果服务可以后台自身或 \fIType=\fP\fBdbus\fP 如果元在初始化完成后获取 DBus 名称
\&。见下文 \&。
.PP
\fBExample\ \&3.\ \&Oneshot service\fP
.PP
有时，单元应该只执行一个动作而不保持活动进程，例如文件系统检查或启动时的清理动作。为此，\fIType=\fP\fBoneshot\fP 存在
\&。这种类型的单元将等到指定的进程终止，然后退回到非活动状态 \&。以下元将执行清理操作:
.sp
.if  n \{\
.RS 4
.\}
.nf
[Unit]
Description=Cleanup old Foo data

[Service]
Type=oneshot
ExecStart=/usr/sbin/foo\-cleanup

[Install]
WantedBy=multi\-user\&.target
.fi
.if  n \{\
.RE
.\}
.PP
请注意，在程序终止之前，systemd 会认为单元处于 "starting" 状态，因此有序依赖项将等待程序完成，然后再启动它们自己
\&。元元执行完成后会恢复到 "inactive" 状态，永远不会达到 "active" 状态 \&。这意味着另一个启动单元的请求将再次执行该操作
\&。
.PP
\fIType=\fP\fBoneshot\fP 是唯一可以指定多个 \fIExecStart=\fP 的服务单元。对于有多个指令 (\fIType=oneshot\fP)
的单元，所有指令都会重新运行 \&。
.PP
对于 \fIType=oneshot\fP，\fIRestart=\fP\fBalways\fP 和 \fIRestart=\fP\fBon\-success\fP 是 \fInot\fP
allowed\&。
.PP
\fBExample\ \&4.\ \&Stoppable oneshot service\fP
.PP
与 oneshot 服务类似，有时有些单元需要执行一个程序来设置某些东西，然后执行另一个程序来关闭它，但是当它们被视为 `启动`\&
时，没有进程保持活动状态。网络配置有时属于此类 \&。另一个用例是，如果 oneshot 服务在作为依赖项被拉入时不应每次都执行，而只是第一次 \&。
.PP
为此，systemd 知道设置 \fIRemainAfterExit=\fP\fByes\fP，如果启动操作成功退出，这会导致 systemd 认为元处于活动状态
\&。该指令可用于所有类型，但最适用于 \fIType=\fP\fBoneshot\fP 和 \fIType=\fP\fBsimple\fP\&。对于
\fIType=\fP\fBoneshot\fP，systemd 会等到启动操作完成后才会认为元处于活动状态，因此依赖项仅在启动操作成功后才启动 \&。使用
\fIType=\fP\fBsimple\fP，依赖项将在启动操作被调度后立即启动 \&。下面的元提供了一个简单的静态防火墙的例子 \&。
.sp
.if  n \{\
.RS 4
.\}
.nf
[Unit]
Description=Simple firewall

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/usr/local/sbin/simple\-firewall\-start
ExecStop=/usr/local/sbin/simple\-firewall\-stop

[Install]
WantedBy=multi\-user\&.target
.fi
.if  n \{\
.RE
.\}
.PP
由于单元被认为在启动操作退出后正在运行，因此再次调用该单元上的 \fBsystemctl start\fP 将导致不采取任何操作 \&。
.PP
\fBExample\ \&5.\ \&Traditional forking services\fP
.PP
许多传统的 daemons/services 后台 (i\&.e\&. fork, daemonize) 在启动时自己运行 \&。在服务中设置
\fIType=\fP\fBforking\fP\*(Aqs 元文件支持这种运行方式 \&. systemd 会认为服务处于初始化过程中，而原始程序仍在运行
\&。一旦它成功退出并且至少保留了一个进程 (并且 \fIRemainAfterExit=\fP\fBno\fP)，则该服务被认为已启动 \&。
.PP
通常，一个传统的守护进程只包含一个进程 \&。因此，如果原进程终止后只剩下一个进程，systemd 会认为该进程是服务的主进程
\&。在这种情况下，\fI$MAINPID\fP 变量将在 \fIExecReload=\fP、\fIExecStop=\fP 等 \& 中可用。
.PP
如果存在多个进程，systemd 将无法确定主进程，因此它不会假设有一个 \&。在那种情况下，\fI$MAINPID\fP 不会扩展为任何内容
\&。但是，如果进程决定写入传统的 PID 文件，systemd 将能够从那里读取主 PID\&。请相应地设置
\fIPIDFile=\fP\&。请注意，守护进程应该在完成初始化之前写入该文件。否则，systemd 可能会在文件存在之前尝试读取它 \&。
.PP
以下示例显示了一个简单的守护进程，它分叉并仅在后台启动一个进程:
.sp
.if  n \{\
.RS 4
.\}
.nf
[Unit]
Description=Some simple daemon

[Service]
Type=forking
ExecStart=/usr/sbin/my\-simple\-daemon \-d

[Install]
WantedBy=multi\-user\&.target
.fi
.if  n \{\
.RE
.\}
.PP
有关如何影响 systemd 终止服务的方式的详细信息，请参见 \fBsystemd.kill\fP(5)。
.PP
\fBExample\ \&6.\ \&DBus services\fP
.PP
对于在 DBus 系统总线上获取名称的服务，使用 \fIType=\fP\fBdbus\fP 并相应地设置 \fIBusName=\fP\&。该服务不应 fork
(守护进程) \&。一旦在系统总线上获取了名称，systemd 将认为该服务已初始化 \&。以下示例显示了一个典型的 DBus 服务:
.sp
.if  n \{\
.RS 4
.\}
.nf
[Unit]
Description=Simple DBus service

[Service]
Type=dbus
BusName=org\&.example\&.simple\-dbus\-service
ExecStart=/usr/sbin/simple\-dbus\-service

[Install]
WantedBy=multi\-user\&.target
.fi
.if  n \{\
.RE
.\}
.PP
对于 \fIbus\-activatable\fP 服务，不要在 systemd 服务文件中包含 [Install] 部分，而是在相应的 DBus
服务文件中使用 \fISystemdService=\fP 选项，例如
(/usr/share/dbus\-1/system\-services/org\&.example\&.simple\-dbus\-service\&.service):
.sp
.if  n \{\
.RS 4
.\}
.nf
[D\-BUS Service]
Name=org\&.example\&.simple\-dbus\-service
Exec=/usr/sbin/simple\-dbus\-service
User=root
SystemdService=simple\-dbus\-service\&.service
.fi
.if  n \{\
.RE
.\}
.PP
有关如何影响 systemd 终止服务的方式的详细信息，请参见 \fBsystemd.kill\fP(5)。
.PP
\fBExample\ \&7.\ \&Services that notify systemd about their initialization\fP
.PP
\fIType=\fP\fBsimple\fP 服务真的很容易编写，但是 systemd 的主要缺点是无法判断给定服务的初始化何时完成
\&。出于这个原因，systemd 支持一个简单的通知协议，该协议允许守护进程让 systemd 知道它们已完成初始化 \&。为此使用
\fIType=\fP\fBnotify\fP 或 \fIType=\fP\fBnotify\-reload\fP\&。这种守护进程的典型服务文件如下所示:
.sp
.if  n \{\
.RS 4
.\}
.nf
[Unit]
Description=Simple notifying service

[Service]
Type=notify
ExecStart=/usr/sbin/simple\-notifying\-service

[Install]
WantedBy=multi\-user\&.target
.fi
.if  n \{\
.RE
.\}
.PP
请注意，守护进程必须支持 systemd\*(Aqs 通知协议，否则 systemd 会认为该服务尚未启动并在超时后将其杀死
\&。有关如何更新守护进程以透明地支持此协议的示例，请查看 \fBsd_notify\fP(3)\&。systemd 将认为元处于
\*(Aqstarting\*(Aq 状态，直到准备就绪通知到达 \&。
.PP
有关如何影响 systemd 终止服务的方式的详细信息，请参见 \fBsystemd.kill\fP(5)。
.SH "SEE ALSO"
.PP
\fBsystemd\fP(1), \fBsystemctl\fP(1), \fBsystemd\-system.conf\fP(5),
\fBsystemd.unit\fP(5), \fBsystemd.exec\fP(5), \fBsystemd.resource\-control\fP(5),
\fBsystemd.kill\fP(5), \fBsystemd.directives\fP(7), \fBsystemd\-run\fP(1)
.SH NOTES
.IP " 1." 4
USB 功能 FS
.RS 4
\%https://docs.kernel.org/usb/functionfs.html
.RE
.IP " 2." 4
内核文档
.RS 4
\%https://docs.kernel.org/admin\-guide/cgroup\-v2.html
.RE
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
