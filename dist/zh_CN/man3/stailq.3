.\" -*- coding: UTF-8 -*-
.\" Copyright (c) 1993
.\"    The Regents of the University of California.  All rights reserved.
.\" and Copyright (c) 2020 by Alejandro Colomar <alx@kernel.org>
.\"
.\" SPDX-License-Identifier: BSD-3-Clause
.\"
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH STAILQ 3 2023\-02\-05 "Linux man\-pages 6.03" 
.SH NAME
.\"SIMPLEQ_CONCAT,
.\"SIMPLEQ_FOREACH_FROM,
.\"SIMPLEQ_FOREACH_FROM_SAFE,
.\"SIMPLEQ_FOREACH_SAFE,
.\"SIMPLEQ_LAST,
.\"SIMPLEQ_REMOVE_AFTER,
.\"SIMPLEQ_SWAP,
.\"STAILQ_FOREACH_FROM,
.\"STAILQ_FOREACH_FROM_SAFE,
.\"STAILQ_FOREACH_SAFE,
.\"STAILQ_LAST,
.\"STAILQ_REMOVE_AFTER,
.\"STAILQ_SWAP
SIMPLEQ_EMPTY, SIMPLEQ_ENTRY, SIMPLEQ_FIRST, SIMPLEQ_FOREACH, SIMPLEQ_HEAD,
SIMPLEQ_HEAD_INITIALIZER, SIMPLEQ_INIT, SIMPLEQ_INSERT_AFTER,
SIMPLEQ_INSERT_HEAD, SIMPLEQ_INSERT_TAIL, SIMPLEQ_NEXT, SIMPLEQ_REMOVE,
SIMPLEQ_REMOVE_HEAD, STAILQ_CONCAT, STAILQ_EMPTY, STAILQ_ENTRY,
STAILQ_FIRST, STAILQ_FOREACH, STAILQ_HEAD, STAILQ_HEAD_INITIALIZER,
STAILQ_INIT, STAILQ_INSERT_AFTER, STAILQ_INSERT_HEAD, STAILQ_INSERT_TAIL,
STAILQ_NEXT, STAILQ_REMOVE, STAILQ_REMOVE_HEAD,\- 单链尾队列的实现
.SH LIBRARY
标准 C 库 (\fIlibc\fP、\fI\-lc\fP)
.SH SYNOPSIS
.nf
\fB#include <sys/queue.h>\fP
.PP
\fBSTAILQ_ENTRY(TYPE);\fP
.PP
\fBSTAILQ_HEAD(HEADNAME, TYPE);\fP
\fBSTAILQ_HEAD STAILQ_HEAD_INITIALIZER(STAILQ_HEAD \fP\fIhead\fP\fB);\fP
\fBvoid STAILQ_INIT(STAILQ_HEAD *\fP\fIhead\fP\fB);\fP
.PP
\fBint STAILQ_EMPTY(STAILQ_HEAD *\fP\fIhead\fP\fB);\fP
.PP
\fBvoid STAILQ_INSERT_HEAD(STAILQ_HEAD *\fP\fIhead\fP\fB,\fP
\fB                         struct TYPE *\fP\fIelm\fP\fB, STAILQ_ENTRY \fP\fINAME\fP\fB);\fP  
\fBvoid STAILQ_INSERT_TAIL(STAILQ_HEAD *\fP\fIhead\fP\fB,\fP
\fB                         struct TYPE *\fP\fIelm\fP\fB, STAILQ_ENTRY \fP\fINAME\fP\fB);\fP
\fBvoid STAILQ_INSERT_AFTER(STAILQ_HEAD *\fP\fIhead\fP\fB, struct TYPE *\fP\fIlistelm\fP\fB,\fP
\fB                         struct TYPE *\fP\fIelm\fP\fB, STAILQ_ENTRY \fP\fINAME\fP\fB);\fP
.PP
.\" .BI "struct TYPE *STAILQ_LAST(STAILQ_HEAD *" head ", struct TYPE *" elm ,
.\" .BI "                          STAILQ_ENTRY " NAME );
\fBstruct TYPE *STAILQ_FIRST(STAILQ_HEAD *\fP\fIhead\fP\fB);\fP
\fBstruct TYPE *STAILQ_NEXT(struct TYPE *\fP\fIelm\fP\fB, STAILQ_ENTRY \fP\fINAME\fP\fB);\fP
.PP
.\" .BI "STAILQ_FOREACH_FROM(struct TYPE *" var ", STAILQ_HEAD *" head ,
.\" .BI "                          STAILQ_ENTRY " NAME );
.\" .PP
.\" .BI "STAILQ_FOREACH_SAFE(struct TYPE *" var ", STAILQ_HEAD *" head ,
.\" .BI "                          STAILQ_ENTRY " NAME ", struct TYPE *" temp_var );
.\" .BI "STAILQ_FOREACH_FROM_SAFE(struct TYPE *" var ", STAILQ_HEAD *" head ,
.\" .BI "                          STAILQ_ENTRY " NAME ", struct TYPE *" temp_var );
\fBSTAILQ_FOREACH(struct TYPE *\fP\fIvar\fP\fB, STAILQ_HEAD *\fP\fIhead\fP\fB, STAILQ_ENTRY \fP\fINAME\fP\fB);\fP
.PP
.\" .BI "void STAILQ_REMOVE_AFTER(STAILQ_HEAD *" head ", struct TYPE *" elm ,
.\" .BI "                          STAILQ_ENTRY " NAME );
\fBvoid STAILQ_REMOVE(STAILQ_HEAD *\fP\fIhead\fP\fB, struct TYPE *\fP\fIelm\fP\fB, TYPE,\fP
\fB                         STAILQ_ENTRY \fP\fINAME\fP\fB);\fP
\fBvoid STAILQ_REMOVE_HEAD(STAILQ_HEAD *\fP\fIhead\fP\fB,\fP
\fB                         STAILQ_ENTRY \fP\fINAME\fP\fB);\fP
.PP
.\" .BI "void STAILQ_SWAP(STAILQ_HEAD *" head1 ", STAILQ_HEAD *" head2 ,
.\" .BI "                          STAILQ_ENTRY " NAME );
\fBvoid STAILQ_CONCAT(STAILQ_HEAD *\fP\fIhead1\fP\fB, STAILQ_HEAD *\fP\fIhead2\fP\fB);\fP
.fi
\fINote\fP: 存在前缀为 SIMPLEQ 而不是 STAILQ 的相同宏; 见注释。
.SH DESCRIPTION
这些宏定义单链接尾队列并对其进行操作。
.PP
在宏定义中，\fITYPE\fP 是用户定义的结构体的名称，它必须包含一个 \fISTAILQ_ENTRY\fP 类型的字段，名为 \fINAME\fP。 参数
\fIHEADNAME\fP 是必须使用宏 \fBSTAILQ_HEAD\fP() 声明的用户定义结构体的名称。
.SS Creation
单链接尾队列由 \fBSTAILQ_HEAD\fP() 宏定义的结构体领导。
这个结构体包含一对指针，一个指向尾队列中的第一个元素，另一个指向尾队列中的最后一个元素。
这些元素被单独链接以最小化空间和指针操作开销，但以删除任意元素的 O(n) 为代价。
可以在现有元素之后、尾队列的头部或尾队列的末尾将新元素添加到尾队列。 \fISTAILQ_HEAD\fP 结构体声明如下:
.PP
.in +4
.EX
STAILQ_HEAD(HEADNAME, TYPE) 头;
.EE
.in
.PP
其中 \fIstruct HEADNAME\fP 是要定义的结构体，\fIstruct TYPE\fP 是要链接到尾队列的元素类型。
指向尾队列头部的指针稍后可以声明为:
.PP
.in +4
.EX
struct HEADNAME *headp;
.EE
.in
.PP
(名称 \fIhead\fP 和 \fIheadp\fP 可由用户选择。)
.PP
\fBSTAILQ_ENTRY\fP() 声明了一个连接尾队列中元素的结构体。
.PP
\fBSTAILQ_HEAD_INITIALIZER\fP() 的计算结果为尾队列 \fIhead\fP 的初始化。
.PP
\fBSTAILQ_INIT\fP() 初始化 \fIhead\fP 引用的尾队列。
.PP
如果尾队列中没有项，则 \fBSTAILQ_EMPTY\fP() 的计算结果为真。
.SS Insertion
\fBSTAILQ_INSERT_HEAD\fP() 在尾队列的头部插入新元素 \fIelm\fP。
.PP
\fBSTAILQ_INSERT_TAIL\fP() 在尾队列的末尾插入新元素 \fIelm\fP。
.PP
\fBSTAILQ_INSERT_AFTER\fP() 在元素 \fIlistelm\fP 之后插入新元素 \fIelm\fP。
.SS Traversal
.\" .PP
.\" .BR STAILQ_LAST ()
.\" returns the last item on the tail queue.
.\" If the tail queue is empty the return value is NULL .
\fBSTAILQ_FIRST\fP() 返回尾队列的第一项，如果尾队列为空则返回 NULL。
.PP
\fBSTAILQ_NEXT\fP() 返回尾队列中的下一项，或 NULL 本项是最后一项。
.PP
.\" .PP
.\" .BR STAILQ_FOREACH_FROM ()
.\" behaves identically to
.\" .BR STAILQ_FOREACH ()
.\" when
.\" .I var
.\" is NULL, else it treats
.\" .I var
.\" as a previously found STAILQ element and begins the loop at
.\" .I var
.\" instead of the first element in the STAILQ referenced by
.\" .IR head .
.\" .PP
.\" .BR STAILQ_FOREACH_SAFE ()
.\" traverses the tail queue referenced by
.\" .I head
.\" in the forward direction, assigning each element
.\" in turn to
.\" .IR var .
.\" However, unlike
.\" .BR STAILQ_FOREACH ()
.\" here it is permitted to both remove
.\" .I var
.\" as well as free it from within the loop safely without interfering with the
.\" traversal.
.\" .PP
.\" .BR STAILQ_FOREACH_FROM_SAFE ()
.\" behaves identically to
.\" .BR STAILQ_FOREACH_SAFE ()
.\" when
.\" .I var
.\" is NULL, else it treats
.\" .I var
.\" as a previously found STAILQ element and begins the loop at
.\" .I var
.\" instead of the first element in the STAILQ referenced by
.\" .IR head .
\fBSTAILQ_FOREACH\fP() 正向遍历 \fIhead\fP 引用的尾队列，依次将每个元素赋值给 \fIvar\fP。
.SS Removal
\fBSTAILQ_REMOVE\fP() 从尾队列中移除元素 \fIelm\fP。
.PP
.\" .PP
.\" .BR STAILQ_REMOVE_AFTER ()
.\" removes the element after
.\" .I elm
.\" from the tail queue.
.\" Unlike
.\" .BR STAILQ_REMOVE (),
.\" this macro does not traverse the entire tail queue.
\fBSTAILQ_REMOVE_HEAD\fP() 删除尾队列头部的元素。 为了获得最佳效率，从尾队列头部移除的元素应明确使用此宏而不是泛型
\fBSTAILQ_REMOVE\fP() 宏。
.SS "Other features"
.\" .PP
.\" .BR STAILQ_SWAP ()
.\" swaps the contents of
.\" .I head1
.\" and
.\" .IR head2 .
\fBSTAILQ_CONCAT\fP() 将以 \fIhead2\fP 为首的尾队列连接到以 \fIhead1\fP 为首的尾队列的末尾，删除前者的所有条目。
.SH "RETURN VALUE"
如果队列为空，则 \fBSTAILQ_EMPTY\fP() 返回非零; 如果队列包含至少一个条目，则返回零。
.PP
\fBSTAILQ_FIRST\fP() 和 \fBSTAILQ_NEXT\fP() 分别返回指向第一个或下一个 \fITYPE\fP 结构体的指针。
.PP
\fBSTAILQ_HEAD_INITIALIZER\fP() 返回一个可以分配给队列 \fIhead\fP 的初始化。
.SH STANDARDS
不在 POSIX.1、POSIX.1\-2001 或 POSIX.1\-2008 中。 出现在 BSD 上 (STAILQ 宏首次出现在 4.4BSD
中)。
.SH NOTES
一些 BSD 提供 SIMPLEQ 而不是 STAILQ。 它们是相同的，但由于历史原因，它们在不同的 BSD 上的名称不同。 STAILQ 起源于
FreeBSD，SIMPLEQ 起源于 NetBSD。 出于兼容性原因，某些系统同时提供两组宏。 glibc 提供 STAILQ 和
SIMPLEQ，它们除了缺少一个等同于 \fBSTAILQ_CONCAT\fP() 的 SIMPLEQ 之外是相同的。
.SH BUGS
\fBSTAILQ_FOREACH\fP() 不允许在循环内删除或释放 \fIvar\fP，因为它会干扰遍历。 \fBSTAILQ_FOREACH_SAFE\fP()
存在于 BSD 中但不存在于 glibc 中，它通过允许 \fIvar\fP 安全地从列表中删除并从循环中释放而不干扰遍历来修复此限制。
.SH EXAMPLES
.\" SRC BEGIN (stailq.c)
.EX
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/queue.h>

struct entry {
    int data;
    STAILQ_ENTRY(entry) entries;        /* Singly linked tail queue */
};

STAILQ_HEAD(stailhead, entry);

int
main(void)
{
    struct entry *n1, *n2, *n3, *np;
    struct stailhead head;                   /* Singly linked tail queue
                                               head */

    STAILQ_INIT(&head);                     /* Initialize the queue */

    n1 = malloc(sizeof(struct entry));      /* Insert at the head */
    STAILQ_INSERT_HEAD(&head, n1, entries);

    n1 = malloc(sizeof(struct entry));      /* Insert at the tail */
    STAILQ_INSERT_TAIL(&head, n1, entries);

    n2 = malloc(sizeof(struct entry));      /* Insert after */
    STAILQ_INSERT_AFTER(&head, n1, n2, entries);

    STAILQ_REMOVE(&head, n2, entry, entries); /* Deletion */
    free(n2);

    n3 = STAILQ_FIRST(&head);
    STAILQ_REMOVE_HEAD(&head, entries);     /* Deletion from the head */
    free(n3);

    n1 = STAILQ_FIRST(&head);
    n1\->data = 0;
    for (unsigned int i = 1; i < 5; i++) {
        n1 = malloc(sizeof(struct entry));
        STAILQ_INSERT_HEAD(&head, n1, entries);
        n1\->data = i;
    }
                                            /* Forward traversal */
    STAILQ_FOREACH(np, &head, entries)
        printf("%i\en", np\->data);
                                            /* TailQ deletion */
    n1 = STAILQ_FIRST(&head);
    while (n1 != NULL) {
        n2 = STAILQ_NEXT(n1, entries);
        free(n1);
        n1 = n2;
    }
    STAILQ_INIT(&head);

    exit(EXIT_SUCCESS);
}
.EE
.\" SRC END
.SH "SEE ALSO"
\fBinsque\fP(3), \fBqueue\fP(7)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
