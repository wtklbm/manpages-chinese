.\" -*- coding: UTF-8 -*-
.\" Copyright (C) 2006 Michael Kerrisk
.\" and Copyright (C) 2008 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" SPDX-License-Identifier: Linux-man-pages-copyleft
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH CPU_SET 3 2022\-10\-09 "Linux man\-pages 6.03" 
.SH NAME
CPU_SET, CPU_CLR, CPU_ISSET, CPU_ZERO, CPU_COUNT, CPU_AND, CPU_OR, CPU_XOR,
CPU_EQUAL, CPU_ALLOC, CPU_ALLOC_SIZE, CPU_FREE, CPU_SET_S, CPU_CLR_S,
CPU_ISSET_S, CPU_ZERO_S, CPU_COUNT_S, CPU_AND_S, CPU_OR_S, CPU_XOR_S,
CPU_EQUAL_S 用于操作的宏集
.SH LIBRARY
标准 C 库 (\fIlibc\fP、\fI\-lc\fP)
.SH SYNOPSIS
.nf
\fB#define _GNU_SOURCE\fP             /* See feature_test_macros(7) */
\fB#include <sched.h>\fP
.PP
\fBvoid CPU_ZERO(cpu_set_t *\fP\fIset\fP\fB);\fP
.PP
\fBvoid CPU_SET(int \fP\fIcpu\fP\fB, cpu_set_t *\fP\fIset\fP\fB);\fP
\fBvoid CPU_CLR(int \fP\fIcpu\fP\fB, cpu_set_t *\fP\fIset\fP\fB);\fP
\fBint  CPU_ISSET(int \fP\fIcpu\fP\fB, cpu_set_t *\fP\fIset\fP\fB);\fP
.PP
\fBint  CPU_COUNT(cpu_set_t *\fP\fIset\fP\fB);\fP
.PP
\fBvoid CPU_AND(cpu_set_t *\fP\fIdestset\fP\fB,\fP
\fB             cpu_set_t *\fP\fIsrcset1\fP\fB, cpu_set_t *\fP\fIsrcset2\fP\fB);\fP  
\fBvoid CPU_OR(cpu_set_t *\fP\fIdestset\fP\fB,\fP
\fB             cpu_set_t *\fP\fIsrcset1\fP\fB, cpu_set_t *\fP\fIsrcset2\fP\fB);\fP
\fBvoid CPU_XOR(cpu_set_t *\fP\fIdestset\fP\fB,\fP
\fB             cpu_set_t *\fP\fIsrcset1\fP\fB, cpu_set_t *\fP\fIsrcset2\fP\fB);\fP
.PP
\fBint  CPU_EQUAL(cpu_set_t *\fP\fIset1\fP\fB, cpu_set_t *\fP\fIset2\fP\fB);\fP
.PP
\fBcpu_set_t *CPU_ALLOC(int \fP\fInum_cpus\fP\fB);\fP
\fBvoid CPU_FREE(cpu_set_t *\fP\fIset\fP\fB);\fP
\fBsize_t CPU_ALLOC_SIZE(int \fP\fInum_cpus\fP\fB);\fP
.PP
\fBvoid CPU_ZERO_S(size_t \fP\fIsetsize\fP\fB, cpu_set_t *\fP\fIset\fP\fB);\fP
.PP
\fBvoid CPU_SET_S(int \fP\fIcpu\fP\fB, size_t \fP\fIsetsize\fP\fB, cpu_set_t *\fP\fIset\fP\fB);\fP
\fBvoid CPU_CLR_S(int \fP\fIcpu\fP\fB, size_t \fP\fIsetsize\fP\fB, cpu_set_t *\fP\fIset\fP\fB);\fP
\fBint  CPU_ISSET_S(int \fP\fIcpu\fP\fB, size_t \fP\fIsetsize\fP\fB, cpu_set_t *\fP\fIset\fP\fB);\fP
.PP
\fBint  CPU_COUNT_S(size_t \fP\fIsetsize\fP\fB, cpu_set_t *\fP\fIset\fP\fB);\fP
.PP
\fBvoid CPU_AND_S(size_t \fP\fIsetsize\fP\fB, cpu_set_t *\fP\fIdestset\fP\fB,\fP
\fB             cpu_set_t *\fP\fIsrcset1\fP\fB, cpu_set_t *\fP\fIsrcset2\fP\fB);\fP  
\fBvoid CPU_OR_S(size_t \fP\fIsetsize\fP\fB, cpu_set_t *\fP\fIdestset\fP\fB,\fP
\fB             cpu_set_t *\fP\fIsrcset1\fP\fB, cpu_set_t *\fP\fIsrcset2\fP\fB);\fP
\fBvoid CPU_XOR_S(size_t \fP\fIsetsize\fP\fB, cpu_set_t *\fP\fIdestset\fP\fB,\fP
\fB             cpu_set_t *\fP\fIsrcset1\fP\fB, cpu_set_t *\fP\fIsrcset2\fP\fB);\fP
.PP
\fBint  CPU_EQUAL_S(size_t \fP\fIsetsize\fP\fB, cpu_set_t *\fP\fIset1\fP\fB, cpu_set_t *\fP\fIset2\fP\fB);\fP
.fi
.SH DESCRIPTION
\fIcpu_set_t\fP 数据结构体代表一组 CPU。 CPU 集由 \fBsched_setaffinity\fP(2) 和类似接口使用。
.PP
\fIcpu_set_t\fP 数据类型被实现为位掩码。 然而，数据结构体应该被视为不透明的: CPU 集的所有操作都应该通过本页中描述的宏来完成。
.PP
提供以下宏操作 CPU 组 \fIset\fP:
.TP 
\fBCPU_ZERO\fP()
清除 \fIset\fP，使其不包含 CPU。
.TP 
\fBCPU_SET\fP()
将 CPU \fIcpu\fP 添加到 \fIset\fP。
.TP 
\fBCPU_CLR\fP()
从 \fIset\fP 中移除 CPU \fIcpu\fP。
.TP 
\fBCPU_ISSET\fP()
测试 CPU \fIcpu\fP 是否是 \fIset\fP 的成员。
.TP 
\fBCPU_COUNT\fP()
返回 \fIset\fP 中的 CPU 数量。
.PP
在指定 \fIcpu\fP 参数的情况下，它不应产生副作用，因为上述宏可能会多次计算参数。
.PP
系统上的第一个 CPU 对应的 \fIcpu\fP 值为 0，下一个 CPU 对应的 \fIcpu\fP 值为 1，依此类推。 不应假设特定 CPU 可用或 CPU
集是连续的，因为 CPU 可以动态脱机或不存在。 常量 \fBCPU_SETSIZE\fP (当前为 1024) 指定一个比 \fIcpu_set_t\fP
中可存储的最大 CPU 数大 1 的值。
.PP
以下宏在 CPU 集上执行逻辑操作:
.TP 
\fBCPU_AND\fP()
将集合 \fIsrcset1\fP 和 \fIsrcset2\fP 的交集存储在 \fIdestset\fP (可能是源集合之一) 中。
.TP 
\fBCPU_OR\fP()
将集合 \fIsrcset1\fP 和 \fIsrcset2\fP 的 union 存储在 \fIdestset\fP (可能是源集合之一) 中。
.TP 
\fBCPU_XOR\fP()
将集合 \fIsrcset1\fP 和 \fIsrcset2\fP 的 XOR 存储在 \fIdestset\fP (可能是源集合之一) 中。 XOR 表示
\fIsrcset1\fP 或 \fIsrcset2\fP 中的一组 CPU，但不是两者。
.TP 
\fBCPU_EQUAL\fP()
测试两个 CPU 集是否包含完全相同的 CPU。
.SS "Dynamically sized CPU sets"
因为某些应用程序可能需要动态调整 CPU 集大小的能力 (例如，分配比标准 \fIcpu_set_t\fP 数据类型定义的集更大的集)，glibc
现在提供了一组宏来支持这一点。
.PP
以下宏用于分配和释放 CPU 集:
.TP 
\fBCPU_ALLOC\fP()
分配一个足够大的 CPU 集来容纳 0 到 \fInum_cpus\-1\fP 范围内的 CPU。
.TP 
\fBCPU_ALLOC_SIZE\fP()
返回将 CPU 保持在 0 到 \fInum_cpus\-1\fP 范围内所需的 CPU 集的大小 (以字节为单位)。 这个宏提供了可以用于下面描述的
\fBCPU_*_S\fP() 宏中的 \fIsetsize\fP 参数的值。
.TP 
\fBCPU_FREE\fP()
释放之前由 \fBCPU_ALLOC\fP() 分配的 CPU 集。
.PP
名称以 "_S" 结尾的宏与没有后缀的类似名称的宏类似。 这些宏执行与其类似物相同的任务，但在大小为 \fIsetsize\fP 字节的动态分配的 CPU
set(s) 上运行。
.SH "RETURN VALUE"
如果 \fIcpu\fP 在 \fIset\fP 中，则 \fBCPU_ISSET\fP() 和 \fBCPU_ISSET_S\fP() 返回非零; 否则，它返回 0.
.PP
\fBCPU_COUNT\fP() 和 \fBCPU_COUNT_S\fP() 返回 \fIset\fP 中的 CPU 数量。
.PP
如果两个 CPU 集相等，则 \fBCPU_EQUAL\fP() 和 \fBCPU_EQUAL_S\fP() 返回非零值; 否则他们返回 0.
.PP
\fBCPU_ALLOC\fP() 成功时返回一个指针，失败时返回 NULL。 (错误与 \fBmalloc\fP(3).)
.PP
\fBCPU_ALLOC_SIZE\fP() 返回存储指定基数的 CPU 集所需的字节数。
.PP
其他函数不返回值。
.SH VERSIONS
在 glibc 2.3.3 中添加了 \fBCPU_ZERO\fP()、\fBCPU_SET\fP()、\fBCPU_CLR\fP() 和 \fBCPU_ISSET\fP()
宏。
.PP
\fBCPU_COUNT\fP() 最早出现在 glibc 2.6 中。
.PP
\fBCPU_AND\fP()、\fBCPU_OR\fP()、\fBCPU_XOR\fP()、\fBCPU_EQUAL\fP()、\fBCPU_ALLOC\fP()、\fBCPU_ALLOC_SIZE\fP()、\fBCPU_FREE\fP()、\fBCPU_ZERO_S\fP()、\fBCPU_SET_S\fP()、\fBCPU_CLR_S\fP()、\fBCPU_ISSET_S\fP()、\fBCPU_AND_S\fP()、\fBCPU_OR_S\fP()、\fBCPU_XOR_S\fP()
和 \fBCPU_EQUAL_S\fP() 首次出现在 glibc 2.7 中。
.SH STANDARDS
这些接口是特定于 Linux 的。
.SH NOTES
要复制 CPU 集，请使用 \fBmemcpy\fP(3)。
.PP
由于 CPU 集是以长字为单位分配的位掩码，因此动态分配的 CPU 集中的实际 CPU 数量将四舍五入到下一个 \fIsizeof(unsigned long)\fP 的倍数。 应用程序应将这些额外位的内容视为未定义。
.PP
尽管名称相似，但请注意，常量 \fBCPU_SETSIZE\fP 表示 \fIcpu_set_t\fP 数据类型中的 CPU 数量
(因此，它实际上是位掩码中的位计数)，而 \fBCPU_*_S\fP() 宏的 \fIsetsize\fP 参数是一个大小以字节为单位。
.PP
SYNOPSIS 中显示的参数的数据类型和返回值暗示了在每种情况下预期的结果。
但是，由于这些接口是作为宏实现的，如果您违反建议，编译器不一定会捕获所有类型错误。
.SH BUGS
.\" http://sourceware.org/bugzilla/show_bug.cgi?id=7029
在具有 glibc 2.8 和更早版本的 32 位平台上，\fBCPU_ALLOC\fP() 分配的空间是所需空间的两倍，而
\fBCPU_ALLOC_SIZE\fP() 返回的值是应有的两倍。 此错误不应影响程序的语义，但会导致内存浪费和在动态分配的 CPU
集上运行的宏的运行效率降低。 这些错误已在 glibc 2.9 中修复。
.SH EXAMPLES
下面的程序演示了一些用于动态分配 CPU 集的宏的使用。
.PP
.\" SRC BEGIN (CPU_SET.c)
.EX
#define _GNU_SOURCE
#include <sched.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#include <assert.h>

int
main(int argc, char *argv[])
{
    cpu_set_t *cpusetp;
    size_t size, num_cpus;

    if (argc < 2) {
        fprintf(stderr, "Usage: %s <num\-cpus>\en", argv[0]);
        exit(EXIT_FAILURE);
    }

    num_cpus = atoi(argv[1]);

    cpusetp = CPU_ALLOC(num_cpus);
    if (cpusetp == NULL) {
        perror("CPU_ALLOC");
        exit(EXIT_FAILURE);
    }

    size = CPU_ALLOC_SIZE(num_cpus);

    CPU_ZERO_S(size, cpusetp);
    for (size_t cpu = 0; cpu < num_cpus; cpu += 2)
        CPU_SET_S(cpu, size, cpusetp);

    printf("CPU_COUNT() of set:    %d\en", CPU_COUNT_S(size, cpusetp));

    CPU_FREE(cpusetp);
    exit(EXIT_SUCCESS);
}
.EE
.\" SRC END
.SH "SEE ALSO"
\fBsched_setaffinity\fP(2), \fBpthread_attr_setaffinity_np\fP(3),
\fBpthread_setaffinity_np\fP(3), \fBcpuset\fP(7)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
