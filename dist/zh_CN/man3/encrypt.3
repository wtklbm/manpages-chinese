.\" -*- coding: UTF-8 -*-
'\" t
.\" Copyright 2000 Nicolás Lichtmaier <nick@debian.org>
.\" Created 2000-07-22 00:52-0300
.\"
.\" SPDX-License-Identifier: GPL-2.0-or-later
.\"
.\" Modified 2002-07-23 19:21:35 CEST 2002 Walter Harms
.\" <walter.harms@informatik.uni-oldenburg.de>
.\"
.\" Modified 2003-04-04, aeb
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH encrypt 3 2023\-02\-05 "Linux man\-pages 6.03" 
.SH NAME
encrypt, setkey, encrypt_r, setkey_r \- 加密 64 位消息
.SH LIBRARY
加解密库 (\fIlibcrypto\fP、\fI\-lcrypto\fP)
.SH SYNOPSIS
.nf
\fB#define _XOPEN_SOURCE\fP       /* See feature_test_macros(7) */
\fB#include <unistd.h>\fP
.PP
\fB[[deprecated]] void encrypt(char \fP\fIblock\fP\fB[64], int \fP\fIedflag\fP\fB);\fP
.PP
\fB#define _XOPEN_SOURCE\fP       /* See feature_test_macros(7) */
\fB#include <stdlib.h>\fP
.PP
\fB[[deprecated]] void setkey(const char *\fP\fIkey\fP\fB);\fP
.PP
\fB#define _GNU_SOURCE\fP         /* See feature_test_macros(7) */
\fB#include <crypt.h>\fP
.PP
\fB[[deprecated]] void setkey_r(const char *\fP\fIkey\fP\fB, struct crypt_data *\fP\fIdata\fP\fB);\fP
\fB[[deprecated]] void encrypt_r(char *\fP\fIblock\fP\fB, int \fP\fIedflag\fP\fB,\fP
\fB                              struct crypt_data *\fP\fIdata\fP\fB);\fP
.fi
.SH DESCRIPTION
这些函数加密和解密 64 位消息。 \fBsetkey\fP() 函数设置 \fBencrypt\fP() 使用的密钥。 这里使用的 \fIkey\fP 参数是一个 64
字节的数组，每个字节的数值为 1 或 0。 n=8*i\-1 的字节 key[n] 被忽略，因此有效密钥长度为 56 位。
.PP
\fBencrypt\fP() 函数修改传递的缓冲区，如果 \fIedflag\fP 为 0 则编码，如果传递 1 则解码。 与 \fIkey\fP
参数一样，\fIblock\fP 也是编码的实际值的位 vector 表示。 结果在同一个 vector 中返回。
.PP
这两个函数是不可重入的，即关键数据保存在静态存储中。 函数 \fBsetkey_r\fP() 和 \fBencrypt_r\fP() 是可重入版本。
他们使用以下结构体来保存关键数据:
.PP
.in +4n
.EX
struct crypt_data {
    char keysched[16 * 8];
    char sb0[32768];
    char sb1[32768];
    char sb2[32768];
    char sb3[32768];
    char crypt_3_buf[14];
    char current_salt[2];
    long current_saltbits;
    int  direction;
    int  initialized;
};
.EE
.in
.PP
在调用 \fBsetkey_r\fP() 之前将 \fIdata\->initialized\fP 设置为零。
.SH "RETURN VALUE"
这些函数不返回任何值。
.SH ERRORS
在调用上面的函数之前将 \fIerrno\fP 设置为零。 成功时，\fIerrno\fP 不变。
.TP 
\fBENOSYS\fP
未提供函数。 (例如，由于以前的美国出口限制。)
.SH VERSIONS
因为它们使用不再被认为是安全的 DES 分组密码，所以在 glibc 2.28 中删除了
\fBencrypt\fP()、\fBencrypt_r\fP()、\fBsetkey\fP() 和 \fBsetkey_r\fP()。 应用程序应切换到现代加密库，例如
\fBlibgcrypt\fP。
.SH ATTRIBUTES
有关本节中使用的术语的解释，请参见 \fBattributes\fP(7)。
.ad l
.nh
.TS
allbox;
lbx lb lb
l l l.
Interface	Attribute	Value
T{
\fBencrypt\fP(),
\fBsetkey\fP()
T}	Thread safety	MT\-Unsafe race:crypt
T{
\fBencrypt_r\fP(),
\fBsetkey_r\fP()
T}	Thread safety	MT\-Safe
.TE
.hy
.ad
.sp 1
.SH STANDARDS
\fBencrypt\fP(), \fBsetkey\fP(): POSIX.1\-2001, POSIX.1\-2008, SUS, SVr4.
.PP
函数 \fBencrypt_r\fP() 和 \fBsetkey_r\fP() 是 GNU 扩展。
.SH NOTES
.SS "Availability in glibc"
请参见 \fBcrypt\fP(3)。
.SS "Features in glibc"
在 glibc 2.2 中，这些函数使用的是 DES 算法。
.SH EXAMPLES
.\" [[deprecated]] SRC BEGIN (encrypt.c)
.EX
#define _XOPEN_SOURCE
#include <crypt.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int
main(void)
{
    char key[64];
    char orig[9] = "eggplant";
    char buf[64];
    char txt[9];

    for (size_t i = 0; i < 64; i++) {
        key[i] = rand() & 1;
    }

    for (size_t i = 0; i < 8; i++) {
        for (size_t j = 0; j < 8; j++) {
            buf[i * 8 + j] = orig[i] >> j & 1;
        }
        setkey(key);
    }
    printf("Before encrypting: %s\en", orig);

    encrypt(buf, 0);
    for (size_t i = 0; i < 8; i++) {
        for (size_t j = 0, txt[i] = \[aq]\e0\[aq]; j < 8; j++) {
            txt[i] |= buf[i * 8 + j] << j;
        }
        txt[8] = \[aq]\e0\[aq];
    }
    printf("After encrypting:  %s\en", txt);

    encrypt(buf, 1);
    for (size_t i = 0; i < 8; i++) {
        for (size_t j = 0, txt[i] = \[aq]\e0\[aq]; j < 8; j++) {
            txt[i] |= buf[i * 8 + j] << j;
        }
        txt[8] = \[aq]\e0\[aq];
    }
    printf("After decrypting:  %s\en", txt);
    exit(EXIT_SUCCESS);
}
.EE
.\" SRC END
.SH "SEE ALSO"
\fBcbc_crypt\fP(3), \fBcrypt\fP(3), \fBecb_crypt\fP(3)
.\" .BR fcrypt (3)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
