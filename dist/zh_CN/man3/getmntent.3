.\" -*- coding: UTF-8 -*-
'\" t
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" SPDX-License-Identifier: Linux-man-pages-copyleft
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 21:46:57 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified 961109, 031115, aeb
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH getmntent 3 2023\-02\-05 "Linux man\-pages 6.03" 
.SH NAME
getmntent、setmntent、addmntent、endmntent、hasmntopt、getmntent_r \-
获取文件系统描述符文件条目
.SH LIBRARY
标准 C 库 (\fIlibc\fP、\fI\-lc\fP)
.SH SYNOPSIS
.nf
\fB#include <stdio.h>\fP
\fB#include <mntent.h>\fP
.PP
\fBFILE *setmntent(const char *\fP\fIfilename\fP\fB, const char *\fP\fItype\fP\fB);\fP
.PP
\fBstruct mntent *getmntent(FILE *\fP\fIstream\fP\fB);\fP
.PP
\fBint addmntent(FILE *restrict \fP\fIstream\fP\fB,\fP
\fB              const struct mntent *restrict \fP\fImnt\fP\fB);\fP
.PP
\fBint endmntent(FILE *\fP\fIstreamp\fP\fB);\fP
.PP
\fBchar *hasmntopt(const struct mntent *\fP\fImnt\fP\fB, const char *\fP\fIopt\fP\fB);\fP
.PP
/* GNU extension */
\fB#include <mntent.h>\fP
.PP
\fBstruct mntent *getmntent_r(FILE *restrict \fP\fIstreamp\fP\fB,\fP
\fB              struct mntent *restrict \fP\fImntbuf\fP\fB,\fP
\fB              char \fP\fIbuf\fP\fB[restrict .\fP\fIbuflen\fP\fB], int \fP\fIbuflen\fP\fB);\fP
.fi
.PP
.RS -4
特性测试宏 glibc 的要求 (参见 \fBfeature_test_macros\fP(7)):
.RE
.PP
\fBgetmntent_r\fP():
.nf
    由于 glibc 2.19:
        _DEFAULT_SOURCE
    glibc 2.19 及更早版本:
        _BSD_SOURCE || _SVID_SOURCE
.fi
.SH DESCRIPTION
这些例程用于访问文件系统描述文件 \fI/etc/fstab\fP 和挂载的文件系统描述文件 \fI/etc/mtab\fP。
.PP
\fBsetmntent\fP() 函数打开文件系统描述文件 \fIfilename\fP 并返回一个可供 \fBgetmntent\fP() 使用的文件指针。 参数
\fItype\fP 是所需的访问类型，可以采用与 \fBfopen\fP(3) 的 \fImode\fP 参数相同的值。 应使用 \fBendmntent\fP() 而不是
\fBfclose\fP(3) 关闭返回的流。
.PP
\fBgetmntent\fP() 函数从 \fIstream\fP 读取文件系统描述文件的下一行，并返回一个指向结构体的指针，该结构体包含文件中一行的断开字段。
该指针指向一个静态内存区域，该区域会被随后对 \fBgetmntent\fP() 的调用覆盖。
.PP
\fBaddmntent\fP() 函数在开放的 \fIstream\fP 末尾添加了 \fImntent\fP 结构体 \fImnt\fP。
.PP
\fBendmntent\fP() 函数关闭与文件系统描述文件关联的 \fIstream\fP。
.PP
\fBhasmntopt\fP() 函数扫描 \fImntent\fP 结构体 \fImnt\fP 的 \fImnt_opts\fP 字段 (见下文) 以查找与 \fIopt\fP
匹配的子字符串。 有关有效的安装选项，请参见 \fI<mntent.h>\fP 和 \fBmount\fP(8)。
.PP
可重入的 \fBgetmntent_r\fP() 函数类似于 \fBgetmntent\fP()，但将 \fImntent\fP 结构体存储在提供的 \fI*mntbuf\fP
中，并将该结构体中的条目指向的字符串存储在提供的大小为 \fIbuflen\fP 的数组 \fIbuf\fP 中。
.PP
\fImntent\fP 结构体在 \fI<mntent.h>\fP 中定义如下:
.PP
.in +4n
.EX
struct mntent {
    char *mnt_fsname;   /* name of mounted filesystem */
    char *mnt_dir;      /* filesystem path prefix */
    char *mnt_type;     /* mount type (see mntent.h) */
    char *mnt_opts;     /* mount options (see mntent.h) */
    int   mnt_freq;     /* dump frequency in days */
    int   mnt_passno;   /* pass number on parallel fsck */
};
.EE
.in
.PP
由于 mtab 和 fstab 文件中的字段由空格分隔，当它们出现在 \fImntent\fP
结构体中的四个字符串之一中时，八进制转义用于表示这些文件中的字符空格 (\e040)、制表符 (\e011)、换行符 (\e012) 和反斜杠
(\e\e) .  例程 \fBaddmntent\fP() 和 \fBgetmntent\fP() 将从字符串表示形式转换为转义表示形式并返回。
从转义表示形式转换时，序列 \e134 也被转换为反斜杠。
.SH "RETURN VALUE"
\fBgetmntent\fP() 和 \fBgetmntent_r\fP() 函数返回一个指向 \fImntent\fP 结构体的指针，或者在失败时返回 NULL。
.PP
\fBaddmntent\fP() 函数成功返回 0，失败返回 1。
.PP
\fBendmntent\fP() 函数总是返回 1.
.PP
如果找到匹配项，则 \fBhasmntopt\fP() 函数返回子字符串的地址，否则返回 NULL。
.SH FILES
.TP 
\fI/etc/fstab\fP
文件系统描述文件
.TP 
\fI/etc/mtab\fP
挂载的文件系统描述文件
.SH ATTRIBUTES
有关本节中使用的术语的解释，请参见 \fBattributes\fP(7)。
.ad l
.nh
.TS
allbox;
lb lb lbx
l l l.
Interface	Attribute	Value
T{
\fBsetmntent\fP(),
\fBendmntent\fP(),
\fBhasmntopt\fP()
T}	Thread safety	MT\-Safe
T{
\fBgetmntent\fP()
T}	Thread safety	T{
MT\-Unsafe race:mntentbuf locale
T}
T{
\fBaddmntent\fP()
T}	Thread safety	T{
MT\-Safe race:stream locale
T}
T{
\fBgetmntent_r\fP()
T}	Thread safety	MT\-Safe locale
.TE
.hy
.ad
.sp 1
.SH STANDARDS
不可重入的函数来自 SunOS 4.1.3。 HP\-UX 10 中引入了例程 \fBgetmntent_r\fP()，但它返回 \fIint\fP。
上面显示的原型是 glibc\-only。
.SH NOTES
System V 也有一个 \fBgetmntent\fP() 函数但调用顺序不同，返回的结构体也不同。 在 System V 下使用
\fI/etc/mnttab\fP。 4.4BSD 和 Digital UNIX 有一个例程 \fBgetmntinfo\fP()，它是系统调用
\fBgetfsstat\fP() 的包装器。
.SH "SEE ALSO"
\fBfopen\fP(3), \fBfstab\fP(5), \fBmount\fP(8)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
