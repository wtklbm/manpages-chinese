.\" -*- coding: UTF-8 -*-
'\" t
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\" and Copyright 2014 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" SPDX-License-Identifier: GPL-2.0-or-later
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH mbstowcs 3 2023\-02\-05 "Linux man\-pages 6.03" 
.SH NAME
mbstowcs \- 将多字节字符串转换为宽字符字符串
.SH LIBRARY
标准 C 库 (\fIlibc\fP、\fI\-lc\fP)
.SH SYNOPSIS
.nf
\fB#include <stdlib.h>\fP
.PP
\fBsize_t mbstowcs(wchar_t \fP\fIdest\fP\fB[restrict .\fP\fIn\fP\fB], const char *restrict \fP\fIsrc\fP\fB,\fP
\fB                size_t \fP\fIn\fP\fB);\fP
.fi
.SH DESCRIPTION
如果 \fIdest\fP 不为 NULL，则 \fBmbstowcs\fP() 函数将多字节字符串 \fIsrc\fP 转换为从 \fIdest\fP 开始的宽字符字符串。
\fIdest\fP 最多写入 \fIn\fP 个宽字符。 字符串 \fIsrc\fP 中的字符序列应从初始移位状态开始。 转换可能因三个原因而停止:
.IP \[bu] 3
遇到无效的多字节序列。 在这种情况下，返回 \fI(size_t)\ \-1\fP。
.IP \[bu]
\fIn\fP 非 L\[aq]\e0\[aq] 宽字符已存储在 \fIdest\fP。 在这种情况下，返回写入 \fIdest\fP 的宽字符数，但此时的移位状态丢失。
.IP \[bu]
多字节字符串已完全转换，包括终止空字符 (\[aq]\e0\[aq])。 在这种情况下，返回写入 \fIdest\fP 的宽字符数，不包括终止空宽字符。
.PP
程序员必须确保在 \fIdest\fP 处至少有 \fIn\fP 宽字符的空间。
.PP
如果 \fIdest\fP 为 NULL，则 \fIn\fP 被忽略，转换如上进行，只是转换后的宽字符不写出到内存，并且不存在长度限制。
.PP
为避免上述情况 2，程序员应确保 \fIn\fP 大于或等于 \fImbstowcs(NULL,src,0)+1\fP。
.SH "RETURN VALUE"
\fBmbstowcs\fP() 函数返回构成宽字符字符串转换部分的宽字符数，不包括终止空宽字符。 如果遇到无效的多字节序列，则返回 \fI(size_t)\ \-1\fP。
.SH ATTRIBUTES
有关本节中使用的术语的解释，请参见 \fBattributes\fP(7)。
.ad l
.nh
.TS
allbox;
lbx lb lb
l l l.
Interface	Attribute	Value
T{
\fBmbstowcs\fP()
T}	Thread safety	MT\-Safe
.TE
.hy
.ad
.sp 1
.SH STANDARDS
POSIX.1\-2001, POSIX.1\-2008, C99.
.SH NOTES
\fBmbstowcs\fP() 的行为取决于当前语言环境的 \fBLC_CTYPE\fP 类别。
.PP
函数 \fBmbsrtowcs\fP(3) 为相同的功能提供了更好的界面。
.SH EXAMPLES
下面的程序说明了 \fBmbstowcs\fP() 的使用，以及一些宽字符分类函数。 运行示例如下:
.PP
.in +4n
.EX
$ ./t_mbstowcs de_DE.UTF\-8 Grüße!
源字符串的长度 (不包括终止符) :
    8 bytes
    6 multibyte characters

Wide character string is: Grüße!  (6 characters)
    G alpha upper
    r alpha lower
    ü alpha lower
    ß alpha lower
    e alpha lower
    ! !alpha
.EE
.in
.SS "Program source"
.\" SRC BEGIN (mbstowcs.c)
\&
.EX
#include <locale.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <wchar.h>
#include <wctype.h>

int
main(int argc, char *argv[])
{
    size_t mbslen;      /* Number of multibyte characters in source */
    wchar_t *wcs;       /* Pointer to converted wide character string */

    if (argc < 3) {
        fprintf(stderr, "Usage: %s <locale> <string>\en", argv[0]);
        exit(EXIT_FAILURE);
    }

    /* Apply the specified locale. */

    if (setlocale(LC_ALL, argv[1]) == NULL) {
        perror("setlocale");
        exit(EXIT_FAILURE);
    }

    /* Calculate the length required to hold argv[2] converted to
       a wide character string. */

    mbslen = mbstowcs(NULL, argv[2], 0);
    if (mbslen == (size_t) \-1) {
        perror("mbstowcs");
        exit(EXIT_FAILURE);
    }

    /* Describe the source string to the user. */

    printf("Length of source string (excluding terminator):\en");
    printf("    %zu bytes\en", strlen(argv[2]));
    printf("    %zu multibyte characters\en\en", mbslen);

    /* Allocate wide character string of the desired size.  Add 1
       to allow for terminating null wide character (L\[aq]\e0\[aq]). */

    wcs = calloc(mbslen + 1, sizeof(*wcs));
    if (wcs == NULL) {
        perror("calloc");
        exit(EXIT_FAILURE);
    }

    /* Convert the multibyte character string in argv[2] to a
       wide character string. */

    if (mbstowcs(wcs, argv[2], mbslen + 1) == (size_t) \-1) {
        perror("mbstowcs");
        exit(EXIT_FAILURE);
    }

    printf("Wide character string is: %ls (%zu characters)\en",
           wcs, mbslen);

    /* Now do some inspection of the classes of the characters in
       the wide character string. */

    for (wchar_t *wp = wcs; *wp != 0; wp++) {
        printf("    %lc ", (wint_t) *wp);

        if (!iswalpha(*wp))
            printf("!");
        printf("alpha ");

        if (iswalpha(*wp)) {
            if (iswupper(*wp))
                printf("upper ");

            if (iswlower(*wp))
                printf("lower ");
        }

        putchar(\[aq]\en\[aq]);
    }

    exit(EXIT_SUCCESS);
}
.EE
.\" SRC END
.SH "SEE ALSO"
\fBmblen\fP(3), \fBmbsrtowcs\fP(3), \fBmbtowc\fP(3), \fBwcstombs\fP(3), \fBwctomb\fP(3)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
