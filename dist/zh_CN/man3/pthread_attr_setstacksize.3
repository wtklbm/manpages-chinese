.\" -*- coding: UTF-8 -*-
'\" t
.\" Copyright (c) 2008 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" SPDX-License-Identifier: Linux-man-pages-copyleft
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH pthread_attr_setstacksize 3 2022\-12\-15 "Linux man\-pages 6.03" 
.SH NAME
pthread_attr_setstacksize、pthread_attr_getstacksize \- 线程属性对象中的 set/get 栈大小属性
.SH LIBRARY
POSIX 线程库 (\fIlibpthread\fP, \fI\-lpthread\fP)
.SH SYNOPSIS
.nf
\fB#include <pthread.h>\fP
.PP
\fBint pthread_attr_setstacksize(pthread_attr_t *\fP\fIattr\fP\fB, size_t \fP\fIstacksize\fP\fB);\fP
\fBint pthread_attr_getstacksize(const pthread_attr_t *restrict \fP\fIattr\fP\fB,\fP
\fB                              size_t *restrict \fP\fIstacksize\fP\fB);\fP
.fi
.SH DESCRIPTION
\fBpthread_attr_setstacksize\fP() 函数将 \fIattr\fP 引用的线程属性对象的栈大小属性设置为 \fIstacksize\fP
中指定的值。
.PP
栈大小属性确定将为使用线程属性对象 \fIattr\fP 创建的线程分配的最小大小 (以字节为单位)。
.PP
\fBpthread_attr_getstacksize\fP() 函数返回 \fIattr\fP 所指的线程属性对象在 \fIstacksize\fP
指向的缓冲区中的栈大小属性。
.SH "RETURN VALUE"
成功时，这些函数返回 0; 出错时，它们返回一个非零错误号。
.SH ERRORS
\fBpthread_attr_setstacksize\fP() 可能会因以下错误而失败:
.TP 
\fBEINVAL\fP
栈大小小于 \fBPTHREAD_STACK_MIN\fP (16384) 字节。
.PP
.\" e.g., MacOS
在某些系统上，如果 \fIstacksize\fP 不是系统页面大小的倍数，则 \fBpthread_attr_setstacksize\fP()
可能会失败并显示错误 \fBEINVAL\fP。
.SH VERSIONS
这些函数是从 glibc 2.1 开始提供的。
.SH ATTRIBUTES
有关本节中使用的术语的解释，请参见 \fBattributes\fP(7)。
.ad l
.nh
.TS
allbox;
lbx lb lb
l l l.
Interface	Attribute	Value
T{
\fBpthread_attr_setstacksize\fP(),
\fBpthread_attr_getstacksize\fP()
T}	Thread safety	MT\-Safe
.TE
.hy
.ad
.sp 1
.SH STANDARDS
POSIX.1\-2001, POSIX.1\-2008.
.SH NOTES
有关新线程的默认栈大小的详细信息，请参见 \fBpthread_create\fP(3)。
.PP
线程的栈大小在线程创建时是固定的。 只有主线程可以动态增长它的栈。
.PP
\fBpthread_attr_setstack\fP(3) 函数允许应用程序设置线程使用的调用者分配栈的大小和位置。
.SH BUGS
与 glibc 2.8 一样，如果指定的 \fIstacksize\fP 不是 \fBSTACK_ALIGN\fP 的倍数 (在大多数体系结构上为 16
字节)，它可能会四舍五入为 \fIdownward\fP，这违反了 POSIX.1，这表示分配的栈将至少为 \fIstacksize\fP 字节。
.SH EXAMPLES
请参见 \fBpthread_create\fP(3)。
.SH "SEE ALSO"
\fBgetrlimit\fP(2), \fBpthread_attr_init\fP(3), \fBpthread_attr_setguardsize\fP(3),
\fBpthread_attr_setstack\fP(3), \fBpthread_create\fP(3), \fBpthreads\fP(7)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
