.\" -*- coding: UTF-8 -*-
'\" t
.\" Copyright (c) 1980, 1991 Regents of the University of California.
.\" All rights reserved.
.\"
.\" SPDX-License-Identifier: BSD-4-Clause-UC
.\"
.\"     @(#)alloca.3	5.1 (Berkeley) 5/2/91
.\"
.\" Converted Mon Nov 29 11:05:55 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Tue Oct 22 23:41:56 1996 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 2002-07-17, aeb
.\" 2008-01-24, mtk:
.\"     Various rewrites and additions (notes on longjmp() and SIGSEGV).
.\"     Weaken warning against use of alloca() (as per Debian bug 461100).
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH alloca 3 2022\-12\-15 "Linux man\-pages 6.03" 
.SH NAME
alloca \- 分配自动释放的内存
.SH LIBRARY
标准 C 库 (\fIlibc\fP、\fI\-lc\fP)
.SH SYNOPSIS
.nf
\fB#include <alloca.h>\fP
.PP
\fBvoid *alloca(size_t \fP\fIsize\fP\fB);\fP
.fi
.SH DESCRIPTION
\fBalloca\fP() 函数在调用者的栈帧中分配 \fIsize\fP 字节的空间。 当调用 \fBalloca\fP()
的函数返回给它的调用者时，这个临时空间会自动释放。
.SH "RETURN VALUE"
\fBalloca\fP() 函数返回指向已分配空间开头的指针。 如果分配导致栈溢出，则程序行为未定义。
.SH ATTRIBUTES
有关本节中使用的术语的解释，请参见 \fBattributes\fP(7)。
.ad l
.nh
.TS
allbox;
lbx lb lb
l l l.
Interface	Attribute	Value
T{
\fBalloca\fP()
T}	Thread safety	MT\-Safe
.TE
.hy
.ad
.sp 1
.SH STANDARDS
这个函数不在 POSIX.1 中。
.PP
\fBalloca\fP() 起源于 PWB 和 32V，出现在它们所有的衍生品中。
.SH NOTES
\fBalloca\fP() 函数依赖于机器和编译器。 因为它从栈分配，所以它比 \fBmalloc\fP(3) 和 \fBfree\fP(3) 快。
在某些情况下，它还可以简化使用 \fBlongjmp\fP(3) 或 \fBsiglongjmp\fP(3) 的应用程序中的内存释放。 否则，不鼓励使用它。
.PP
因为由 \fBalloca\fP() 分配的空间是在栈帧内分配的，所以如果函数返回由调用跳过到 \fBlongjmp\fP(3) 或
\fBsiglongjmp\fP(3)，则该空间将自动释放。
.PP
\fBalloca\fP() 分配的空间是 \fInot\fP 自动释放，如果引用它的指针简单地离开作用域。
.PP
不要试图将 \fBfree\fP(3) 空间分配到 \fBalloca\fP()!
.PP
必然地，\fBalloca\fP() 是一个内置的编译器，也称为 \fB__builtin_alloca\fP()。 默认情况下，现代编译器会自动将
\fBalloca\fP() 的所有使用翻译成内置的，但如果要求 (\fI\-ansi\fP、\fI\-std=c*\fP) 符合标准，则禁止这样做，在这种情况下，需要
\fI<alloca.h>\fP，以免发出符号依赖性。
.PP
\fBalloca\fP() 是内置的这一事实意味着不可能获取其地址或通过链接到不同的库来更改其行为。
.PP
可变长度数组 (VLAs) 是 C99 标准的一部分，从 C11 开始是可选的，并且可以用于类似的目的。 但是，它们不移植到标准
C++，并且作为变量，存在于它们的块作用域中并且没有类似分配器的接口，这使得它们不适合实现像 \fBstrdupa\fP(3) 这样的功能。
.SH BUGS
由于栈的性质，无法检查分配是否会溢出可用空间，因此，两者都不会指示错误。 (但是，如果程序试图访问不可用空间，它可能会收到 \fBSIGSEGV\fP
信号。)
.PP
在许多系统上，\fBalloca\fP() 不能在函数调用的参数列表中使用，因为 \fBalloca\fP() 保留的栈空间会出现在栈中函数函数参数空间的中间。
.SH "SEE ALSO"
\fBbrk\fP(2), \fBlongjmp\fP(3), \fBmalloc\fP(3)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
