.\" -*- coding: UTF-8 -*-
'\" t
.\" Copyright 1993 Ulrich Drepper (drepper@karlsruhe.gmd.de)
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" SPDX-License-Identifier: GPL-2.0-or-later
.\"
.\" References consulted:
.\"     SunOS 4.1.1 man pages
.\" Modified Sat Sep 30 21:52:01 1995 by Jim Van Zandt <jrv@vanzandt.mv.com>
.\" Remarks from dhw@gamgee.acad.emich.edu Fri Jun 19 06:46:31 1998
.\" Modified 2001-12-26, 2003-11-28, 2004-05-20, aeb
.\" 2008-09-02, mtk: various additions and rewrites
.\" 2008-09-03, mtk, restructured somewhat, in part after suggestions from
.\"     Timothy S. Nelson <wayland@wayland.id.au>
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH hsearch 3 2022\-12\-15 "Linux man\-pages 6.03" 
.SH NAME
hcreate、hdestroy、hsearch、hcreate_r、hdestroy_r、hsearch_r \- 哈希表管理
.SH LIBRARY
标准 C 库 (\fIlibc\fP、\fI\-lc\fP)
.SH SYNOPSIS
.nf
\fB#include <search.h>\fP
.PP
\fBint hcreate(size_t \fP\fInel\fP\fB);\fP
\fBvoid hdestroy(void);\fP
.PP
\fBENTRY *hsearch(ENTRY \fP\fIitem\fP\fB, ACTION \fP\fIaction\fP\fB);\fP
.PP
\fB#define _GNU_SOURCE\fP         /* See feature_test_macros(7) */
\fB#include <search.h>\fP
.PP
\fBint hcreate_r(size_t \fP\fInel\fP\fB, struct hsearch_data *\fP\fIhtab\fP\fB);\fP
\fBvoid hdestroy_r(struct hsearch_data *\fP\fIhtab\fP\fB);\fP
.PP
\fBint hsearch_r(ENTRY \fP\fIitem\fP\fB, ACTION \fP\fIaction\fP\fB, ENTRY **\fP\fIretval\fP\fB,\fP
\fB              struct hsearch_data *\fP\fIhtab\fP\fB);\fP
.fi
.SH DESCRIPTION
三个函数 \fBhcreate\fP()、\fBhsearch\fP() 和 \fBhdestroy\fP() 允许调用者创建和管理包含由键 (字符串)
和关联数据组成的条目的哈希搜索表。 使用这些函数，一次只能使用一个哈希表。
.PP
\fBhcreate_r\fP()、\fBhsearch_r\fP()、\fBhdestroy_r\fP() 这三个函数是可重入版本，允许一个程序同时使用多个哈希搜索表。
最后一个参数，\fIhtab\fP，指向一个结构体，它描述了函数要在其上操作的表。 程序人员应将此结构体视为不透明的
(即，不要尝试直接访问或修改此结构体中的字段)。
.PP
.\" e.g., in glibc it is raised to the next higher prime number
首先必须使用 \fBhcreate\fP() 创建哈希表。 参数 \fInel\fP 指定表中的最大条目数。 (此最大值以后无法更改，因此请明智地选择它。)
实现可能会向上调整此值以提高生成的哈希表的性能。
.PP
\fBhcreate_r\fP() 函数执行与 \fBhcreate\fP() 相同的任务，但用于结构体 \fI*htab\fP 描述的表。 \fIhtab\fP
指向的结构体必须在第一次调用 \fBhcreate_r\fP() 之前清零。
.PP
函数 \fBhdestroy\fP() 释放由 \fBhcreate\fP() 创建的哈希表占用的内存。 调用 \fBhdestroy\fP() 后，可以使用
\fBhcreate\fP() 创建一个新的哈希表。 \fBhdestroy_r\fP() 函数对 \fI*htab\fP 描述的哈希表执行类似的任务，该哈希表之前是使用
\fBhcreate_r\fP() 创建的。
.PP
\fBhsearch\fP() 函数在哈希表中查找与 \fIitem\fP 具有相同键的项 (其中 "the same" 是使用 \fBstrcmp\fP(3))
确定的，如果成功则返回指向它的指针。
.PP
参数 \fIitem\fP 是 \fIENTRY\fP 类型，在 \fI<search.h>\fP 中定义如下:
.PP
.in +4n
.EX
typedef struct entry {
    char *key;
    void *data;
} ENTRY;
.EE
.in
.PP
字段 \fIkey\fP 指向一个以 null 结尾的字符串，它是搜索关键字。 字段 \fIdata\fP 指向与该键关联的数据。
.PP
参数 \fIaction\fP 决定了 \fBhsearch\fP() 在搜索失败后做什么。 此参数必须具有值 \fBENTER\fP，表示插入 \fIitem\fP 的副本
(并返回指向新哈希表条目的指针作为函数结果)，或值 \fBFIND\fP，表示应返回 NULL。 (如果 \fIaction\fP 是 \fBFIND\fP，则忽略
\fIdata\fP。)
.PP
\fBhsearch_r\fP() 函数类似于 \fBhsearch\fP()，但在 \fI*htab\fP 描述的哈希表上运行。 \fBhsearch_r\fP() 函数与
\fBhsearch\fP() 的不同之处在于，在 \fI*retval\fP 中返回指向找到的项的指针，而不是作为函数结果。
.SH "RETURN VALUE"
\fBhcreate\fP() 和 \fBhcreate_r\fP() 成功时返回非零值。 它们在错误时返回 0，\fIerrno\fP 设置为指示错误。
.PP
成功时，\fBhsearch\fP() 返回一个指向哈希表中条目的指针。 \fBhsearch\fP() 返回 NULL 错误，即如果 \fIaction\fP 是
\fBENTER\fP 并且哈希表已满，或者 \fIaction\fP 是 \fBFIND\fP 并且在哈希表中找不到 \fIitem\fP。 \fBhsearch_r\fP()
成功时返回非零值，错误时返回 0。 出现错误时，这两个函数设置 \fIerrno\fP 来指示错误。
.SH ERRORS
\fBhcreate_r\fP() 和 \fBhdestroy_r\fP() 可能因以下原因而失败:
.TP 
\fBEINVAL\fP
\fIhtab\fP 为空。
.PP
\fBhsearch\fP() 和 \fBhsearch_r\fP() 可能因以下原因而失败:
.TP 
\fBENOMEM\fP
\fIaction\fP 是 \fBENTER\fP，表中找不到 \fIkey\fP，表中没有空间可以添加新条目。
.TP 
\fBESRCH\fP
\fIaction\fP 是 \fBFIND\fP，表中没有找到 \fIkey\fP。
.PP
.\" PROX.1-2001, POSIX.1-2008
POSIX.1 仅指定 \fBENOMEM\fP 错误。
.SH ATTRIBUTES
有关本节中使用的术语的解释，请参见 \fBattributes\fP(7)。
.ad l
.nh
.TS
allbox;
lbx lb lb
l l l.
Interface	Attribute	Value
T{
\fBhcreate\fP(),
\fBhsearch\fP(),
\fBhdestroy\fP()
T}	Thread safety	MT\-Unsafe race:hsearch
T{
\fBhcreate_r\fP(),
\fBhsearch_r\fP(),
\fBhdestroy_r\fP()
T}	Thread safety	MT\-Safe race:htab
.TE
.hy
.ad
.sp 1
.SH STANDARDS
函数 \fBhcreate\fP()、\fBhsearch\fP() 和 \fBhdestroy\fP() 来自 SVr4，并在 POSIX.1\-2001 和
POSIX.1\-2008 中进行了描述。
.PP
函数 \fBhcreate_r\fP()、\fBhsearch_r\fP() 和 \fBhdestroy_r\fP() 是 GNU 扩展。
.SH NOTES
当表包含足够的可用空间以最大程度地减少冲突时，哈希表实现通常会更有效。 通常，这意味着 \fInel\fP 应至少比调用方期望存储在表中的最大元素数大
25%。
.PP
\fBhdestroy\fP() 和 \fBhdestroy_r\fP() 函数不释放哈希表条目的 \fIkey\fP 和 \fIdata\fP 元素指向的缓冲区。
(它不能这样做，因为它不知道这些缓冲区是否是动态分配的。) 如果这些缓冲区需要被释放
(可能是因为程序重复创建和销售哈希表，而不是创建一个单独的表，其生命周期与程序匹配)，那么程序必须维护允许它释放它们的记录数据结构。
.SH BUGS
SVr4 和 POSIX.1\-2001 指定 \fIaction\fP 仅对不成功的搜索有意义，因此 \fBENTER\fP 不应对成功的搜索做任何事情。 在
libc 和 glibc (在 glibc 2.3 之前) 中，实现违反了规范，在这种情况下为给定的 \fIkey\fP 更新了 \fIdata\fP。
.PP
可以添加单个哈希表条目，但不能删除。
.SH EXAMPLES
下面的程序将 24 项插入到哈希表中，然后打印其中的一些。
.PP
.\" SRC BEGIN (hsearch.c)
.EX
#include <search.h>
#include <stdio.h>
#include <stdlib.h>

static char *data[] = { "alpha", "bravo", "charlie", "delta",
     "echo", "foxtrot", "golf", "hotel", "india", "juliet",
     "kilo", "lima", "mike", "november", "oscar", "papa",
     "quebec", "romeo", "sierra", "tango", "uniform",
     "victor", "whisky", "x\-ray", "yankee", "zulu"
};

int
main(void)
{
    ENTRY e;
    ENTRY *ep;

    hcreate(30);

    for (size_t i = 0; i < 24; i++) {
        e.key = data[i];
        /* 数据只是一个整数，而不是一个
           指向某物的指针 */
        e.data = (void *) i;
        ep = hsearch(e, ENTER);
        /* there should be no failures */
        if (ep == NULL) {
            fprintf(stderr, "entry failed\en");
            exit(EXIT_FAILURE);
        }
    }

    for (size_t i = 22; i < 26; i++) {
        /* 打印表中的两个条目，以及
           显示两个不在表中 */
        e.key = data[i];
        ep = hsearch(e, FIND);
        printf("%9.9s \-> %9.9s:%d\en", e.key,
               ep ? ep\->key : "NULL", ep ? (int)(ep\->data) : 0);
    }
    hdestroy();
    exit(EXIT_SUCCESS);
}
.EE
.\" SRC END
.SH "SEE ALSO"
\fBbsearch\fP(3), \fBlsearch\fP(3), \fBmalloc\fP(3), \fBtsearch\fP(3)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
