.\" -*- coding: UTF-8 -*-
.\" From dholland@burgundy.eecs.harvard.edu Tue Mar 24 18:08:15 1998
.\"
.\" This man page was written in 1998 by David A. Holland
.\" Polished a bit by aeb.
.\"
.\" %%%LICENSE_START(PUBLIC_DOMAIN)
.\" Placed in the Public Domain.
.\" %%%LICENSE_END
.\"
.\" 2005-06-16 mtk, mentioned freopen()
.\" 2007-12-08, mtk, Converted from mdoc to man macros
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH stdin 3 2022\-12\-29 "Linux man\-pages 6.03" 
.SH NAME
stdin, stdout, 标准错误 \- 标准 I/O 流
.SH LIBRARY
标准 C 库 (\fIlibc\fP、\fI\-lc\fP)
.SH SYNOPSIS
.nf
\fB#include <stdio.h>\fP
.PP
\fBextern FILE *\fP\fIstdin\fP\fB;\fP
\fBextern FILE *\fP\fIstdout\fP\fB;\fP
\fBextern FILE *\fP\fIstderr\fP\fB;\fP
.fi
.SH DESCRIPTION
在正常情况下，每个 UNIX 程序在启动时都会为其打开三个流，一个用于输入，一个用于输出，一个用于打印诊断或错误消息。 这些通常附加到用户的终端
(请参见 \fBtty\fP(4))，但可能会引用文件或其他设备，具体取决于父进程选择设置的内容。 (另见 \fBsh\fP(1).) 的
"Redirection" 部分
.PP
输入流记为 "standard input"; 输出流被称为 "standard output"; 错误流称为 "standard error"。
这些术语缩写为用于指代这些文件的符号，即 \fIstdin\fP、\fIstdout\fP 和 \fIstderr\fP。
.PP
这些符号中的每一个都是指向 \fIFILE\fP 的类型指针的 \fBstdio\fP(3) 宏，并且可以像 \fBfprintf\fP(3) 或 \fBfread\fP(3)
一样与函数一起使用。
.PP
由于 \fIFILE\fPs 是围绕 UNIX 文件描述符的缓冲包装器，因此也可以使用原始 UNIX 文件接口访问相同的底层文件，即 \fBread\fP(2) 和
\fBlseek\fP(2) 之类的函数。
.PP
在程序启动时，与流 \fIstdin\fP、\fIstdout\fP 和 \fIstderr\fP 关联的整数文件描述符分别为 0、1 和 2。 预处理器符号
\fBSTDIN_FILENO\fP、\fBSTDOUT_FILENO\fP 和 \fBSTDERR_FILENO\fP 在 \fI<unistd.h>\fP
中使用这些值定义。 (将 \fBfreopen\fP(3) 应用于这些流之一可以更改与流关联的文件描述符编号。)
.PP
请注意，混合使用 \fIFILE\fPs 和原始文件描述符会产生意外结果，通常应避免。 (对于您们中间的受虐狂: POSIX.1，8.2.3
节，详细描述了这种交互应该如何工作。) 一般规则是文件描述符在内核中处理，而标准输入输出只是一个库。 这意味着，例如，在 \fBexec\fP(3)
之后，子级继承所有打开的文件描述符，但所有旧流都变得不可访问。
.PP
由于符号 \fIstdin\fP、\fIstdout\fP 和 \fIstderr\fP 被指定为宏，因此分配给它们是不可移植的。 借助库函数
\fBfreopen\fP(3)，可以使标准流引用不同的文件，该库专门引入以使得重新分配 \fIstdin\fP、\fIstdout\fP 和 \fIstderr\fP
成为可能。 标准流通过对 \fBexit\fP(3) 的调用和正常的程序终止来关闭。
.SH STANDARDS
\fIstdin\fP、\fIstdout\fP、\fIstderr\fP 宏符合 C99，该标准也规定这三个流在程序启动时打开。
.SH NOTES
流 \fIstderr\fP 是无缓冲的。 当流 \fIstdout\fP 指向终点时，它是行缓冲的。 在调用 \fBfflush\fP(3) 或 \fBexit\fP(3)
或打印换行符之前，部分行不会出现。 这会产生意想不到的结果，尤其是调试输出。 可以使用 \fBsetbuf\fP(3) 或 \fBsetvbuf\fP(3)
调用更改标准流 (或任何其他流) 的缓冲模式。 请注意，如果 \fIstdin\fP
与最终端相关联，则最终端驱动程序中也可能存在输入缓冲，与标准输入输出缓冲完全无关。 (事实上，通常最终输入在内核中是行缓冲的。) 可以使用像
\fBtcsetattr\fP(3) 这样的调用来修改内核输入处理; 另请参见 \fBstty\fP(1) 和 \fBtermios\fP(3)。
.SH "SEE ALSO"
\fBcsh\fP(1), \fBsh\fP(1), \fBopen\fP(2), \fBfopen\fP(3), \fBstdio\fP(3)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
