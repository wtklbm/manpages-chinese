.\" -*- coding: UTF-8 -*-
'\" t
.\" Copyright (C) 2006 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" SPDX-License-Identifier: Linux-man-pages-copyleft
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH mq_open 3 2022\-12\-15 "Linux man\-pages 6.03" 
.SH NAME
mq_open \- 打开消息队列
.SH LIBRARY
实时库 (\fIlibrt\fP、\fI\-lrt\fP)
.SH SYNOPSIS
.nf
\fB#include <fcntl.h>\fP           /* For O_* constants */
\fB#include <sys/stat.h>\fP        /* For mode constants */
\fB#include <mqueue.h>\fP
.PP
\fBmqd_t mq_open(const char *\fP\fIname\fP\fB, int \fP\fIoflag\fP\fB);\fP
\fBmqd_t mq_open(const char *\fP\fIname\fP\fB, int \fP\fIoflag\fP\fB, mode_t \fP\fImode\fP\fB,\fP
\fB              struct mq_attr *\fP\fIattr\fP\fB);\fP
.fi
.SH DESCRIPTION
\fBmq_open\fP() 创建新的 POSIX 消息队列或打开现有队列。 该队列由 \fIname\fP 标识。 \fIname\fP 的构造详见
\fBmq_overview\fP(7)。
.PP
\fIoflag\fP 参数指定控制调用操作的标志。 (标志值的定义可以通过包含 \fI<fcntl.h>\fP.) 来获得 \fIoflag\fP:
中必须指定以下内容之一
.TP 
\fBO_RDONLY\fP
打开队列以仅接收消息。
.TP 
\fBO_WRONLY\fP
打开队列以仅发送消息。
.TP 
\fBO_RDWR\fP
打开队列以发送和接收消息。
.PP
以下标志中的零个或多个可以在 \fIoflag\fP: 中附加为 \fIOR\fPed
.TP 
\fBO_CLOEXEC\fP (since Linux 2.6.26)
.\" commit 269f21344b23e552c21c9e2d7ca258479dcd7a0a
为消息队列描述符设置 close\-on\-exec 标志。 有关此标志为何有用的讨论，请参见 \fBopen\fP(2)。
.TP 
\fBO_CREAT\fP
.\" In reality the filesystem IDs are used on Linux.
如果不存在则创建消息队列。 消息队列的所有者 (用户 ID) 设置为调用进程的有效用户 ID。 组所有权 (组 ID) 设置为调用进程的有效组 ID。
.TP 
\fBO_EXCL\fP
如果在 \fIoflag\fP 中指定了 \fBO_CREAT\fP，并且具有给定 \fIname\fP 的队列已经存在，则失败并显示错误 \fBEEXIST\fP。
.TP 
\fBO_NONBLOCK\fP
以非阻塞模式打开队列。 在 \fBmq_receive\fP(3) 和 \fBmq_send\fP(3) 通常会阻塞的情况下，这些函数反而会失败并显示错误
\fBEAGAIN\fP。
.PP
如果在 \fIoflag\fP 中指定了 \fBO_CREAT\fP，则必须提供两个额外的参数。 \fImode\fP 参数指定要放置在新队列上的权限，对于
\fBopen\fP(2)。 (权限位的符号定义可以通过包含 \fI<sys/stat.h>\fP.) 获得。权限设置针对进程 umask
进行屏蔽。
.PP
指向 \fIattr\fP 的 \fIstruct mq_attr\fP 字段指定队列允许的最大消息数和最大消息大小。 这个结构体定义如下:
.PP
.in +4n
.EX
struct mq_attr {
    long mq_flags;       /* Flags (忽略 mq_open()) */
    long mq_maxmsg;      /* Max. # of messages on queue */
    long mq_msgsize;     /* Max. message size (bytes) */
    long mq_curmsgs;     /* # of messages currently in queue
                            (ignored for mq_open()) */
};
.EE
.in
.PP
调用 \fBmq_open\fP() 时只使用 \fImq_maxmsg\fP 和 \fImq_msgsize\fP 字段; 其余字段中的值将被忽略。
.PP
如果 \fIattr\fP 为 NULL，则使用实现定义的默认属性创建队列。 从 Linux 3.5 开始，可以使用两个 \fI/proc\fP
文件来控制这些默认值; 详见 \fBmq_overview\fP(7)。
.SH "RETURN VALUE"
成功时，\fBmq_open\fP() 返回一个消息队列描述符，供其他消息队列函数使用。 出错时，\fBmq_open\fP() 返回 \fI(mqd_t)\ \-1\fP，并设置 \fIerrno\fP 以指示错误。
.SH ERRORS
.TP 
\fBEACCES\fP
队列存在，但调用者无权以指定模式打开它。
.TP 
\fBEACCES\fP
.\" Note that this isn't consistent with the same case for sem_open()
\fIname\fP 包含一个以上的斜杠。
.TP 
\fBEEXIST\fP
\fBO_CREAT\fP 和 \fBO_EXCL\fP 都在 \fIoflag\fP 中指定，但具有此 \fIname\fP 的队列已经存在。
.TP 
\fBEINVAL\fP
.\" glibc checks whether the name starts with a "/" and if not,
.\" gives this error
\fIname\fP 不遵循 \fBmq_overview\fP(7) 中的格式。
.TP 
\fBEINVAL\fP
\fIoflag\fP 中指定了 \fBO_CREAT\fP，\fIattr\fP 不为 NULL，但 \fIattr\->mq_maxmsg\fP 或
\fIattr\->mq_msqsize\fP 无效。 这两个字段都必须大于零。 在非特权进程 (不具备 \fBCAP_SYS_RESOURCE\fP 能力)
中，\fIattr\->mq_maxmsg\fP 必须小于或等于 \fImsg_max\fP 限制，\fIattr\->mq_msgsize\fP
必须小于或等于 \fImsgsize_max\fP 限制。 此外，即使在特权进程中，\fIattr\->mq_maxmsg\fP 也不能超过
\fBHARD_MAX\fP 限制。 (有关这些限制的详细信息，请参见 \fBmq_overview\fP(7)。)
.TP 
\fBEMFILE\fP
已达到打开文件和消息队列描述符的每个进程限制 (参见 \fBgetrlimit\fP(2)).\fBRLIMIT_NOFILE\fP 中的描述)。
.TP 
\fBENAMETOOLONG\fP
\fIname\fP 太长了。
.TP 
\fBENFILE\fP
已达到打开文件和消息队列总数的系统范围限制。
.TP 
\fBENOENT\fP
\fIoflag\fP 中未指定 \fBO_CREAT\fP 标志，并且不存在具有此 \fIname\fP 的队列。
.TP 
\fBENOENT\fP
.\" Note that this isn't consistent with the same case for sem_open()
\fIname\fP 只是 "/"，后面没有其他字符。
.TP 
\fBENOMEM\fP
内存不足。
.TP 
\fBENOSPC\fP
空间不足，无法创建新的消息队列。 这可能是因为遇到了 \fIqueues_max\fP 限制; 请参见 \fBmq_overview\fP(7)。
.SH ATTRIBUTES
有关本节中使用的术语的解释，请参见 \fBattributes\fP(7)。
.ad l
.nh
.TS
allbox;
lbx lb lb
l l l.
Interface	Attribute	Value
T{
\fBmq_open\fP()
T}	Thread safety	MT\-Safe
.TE
.hy
.ad
.sp 1
.SH STANDARDS
POSIX.1\-2001, POSIX.1\-2008.
.SH NOTES
.SS "C library/kernel differences"
\fBmq_open\fP() 库函数是在同名系统调用之上实现的。 库函数执行检查 \fIname\fP 是否以斜杠 (/) 开头，如果不是则给出
\fBEINVAL\fP 错误。 内核系统调用期望 \fIname\fP 不包含前面的斜杠，因此 C 库函数传递 \fIname\fP 时没有前面的斜杠
(即，\fIname+1\fP) 到系统调用。
.SH BUGS
在 Linux 2.6.14 之前，进程 umask 没有应用到 \fImode\fP 指定的权限。
.SH "SEE ALSO"
\fBmq_close\fP(3), \fBmq_getattr\fP(3), \fBmq_notify\fP(3), \fBmq_receive\fP(3),
\fBmq_send\fP(3), \fBmq_unlink\fP(3), \fBmq_overview\fP(7)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
