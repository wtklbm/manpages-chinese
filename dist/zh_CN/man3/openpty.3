.\" -*- coding: UTF-8 -*-
'\" t
.\" Copyright (c) OpenBSD Group
.\" All rights reserved.
.\"
.\" SPDX-License-Identifier: BSD-3-Clause
.\"
.\" Converted into a manpage again by Martin Schulze <joey@infodrom.org>
.\"
.\" Added -lutil remark, 030718
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH openpty 3 2022\-12\-15 "Linux man\-pages 6.03" 
.SH NAME
openpty, login_tty, forkpty \- 最终实用函数数
.SH LIBRARY
系统实用工具库 (\fIlibutil\fP, \fI\-lutil\fP)
.SH SYNOPSIS
.nf
\fB#include <pty.h>\fP
.PP
\fBint openpty(int *\fP\fIamaster\fP\fB, int *\fP\fIaslave\fP\fB, char *\fP\fIname\fP\fB,\fP
\fB              const struct termios *\fP\fItermp\fP\fB,\fP
\fB              const struct winsize *\fP\fIwinp\fP\fB);\fP
\fBpid_t forkpty(int *\fP\fIamaster\fP\fB, char *\fP\fIname\fP\fB,\fP
\fB              const struct termios *\fP\fItermp\fP\fB,\fP
\fB              const struct winsize *\fP\fIwinp\fP\fB);\fP
.PP
\fB#include <utmp.h>\fP
.PP
\fBint login_tty(int \fP\fIfd\fP\fB);\fP
.fi
.SH DESCRIPTION
\fBopenpty\fP() 函数找到一个可用的伪终端并返回 \fIamaster\fP 和 \fIaslave\fP 中主从的文件描述符。 如果 \fIname\fP 不为
NULL，则在 \fIname\fP 中返回从站的文件名。 如果 \fItermp\fP 不为 NULL，则从站的终端参数将设置为 \fItermp\fP 中的值。 如果
\fIwinp\fP 不为 NULL，则从站的窗口大小将设置为 \fIwinp\fP 中的值。
.PP
\fBlogin_tty\fP() 号码准备在文件描述符 \fIfd\fP 引用的终端上登录 (它可能是一个真正的终端设备，或者是 \fBopenpty\fP())
通过创建新会话返回的伪终端的从机，使 \fIfd\fP 成为调用的控制终端进程，设置 \fIfd\fP 为当前进程的标准输入、输出和错误流，关闭 \fIfd\fP。
.PP
\fBforkpty\fP() 函数结合了 \fBopenpty\fP()、\fBfork\fP(2) 和 \fBlogin_tty\fP() 以创建在伪终端中运行的新进程。
在 \fIamaster\fP 中返回一个指向伪终端主机端的文件描述符。 如果 \fIname\fP 不为 NULL，则它指向的缓冲区用于返回从站的文件名。
\fItermp\fP 和 \fIwinp\fP 参数如果不为 NULL，将决定伪终端从端的终端属性和窗口大小。
.SH "RETURN VALUE"
如果对 \fBopenpty\fP()、\fBlogin_tty\fP() 或 \fBforkpty\fP() 的调用不成功，则返回 \-1 并设置 \fIerrno\fP
以指示错误。 否则，\fBopenpty\fP()、\fBlogin_tty\fP()、\fBforkpty\fP() 的子进程返回 0，\fBforkpty\fP()
的父进程返回子进程的进程 ID。
.SH ERRORS
如果出现以下情况，\fBopenpty\fP() 将失败:
.TP 
\fBENOENT\fP
没有可用的终端。
.PP
如果 \fBioctl\fP(2) 未能将 \fIfd\fP 设置为调用进程的控制端，则 \fBlogin_tty\fP() 失败。
.PP
如果 \fBopenpty\fP() 或 \fBfork\fP(2) 失败，则 \fBforkpty\fP() 失败。
.SH ATTRIBUTES
有关本节中使用的术语的解释，请参见 \fBattributes\fP(7)。
.ad l
.nh
.TS
allbox;
lbx lb lb
l l l.
Interface	Attribute	Value
T{
\fBforkpty\fP(),
\fBopenpty\fP()
T}	Thread safety	MT\-Safe locale
T{
\fBlogin_tty\fP()
T}	Thread safety	MT\-Unsafe race:ttyname
.TE
.hy
.ad
.sp 1
.SH STANDARDS
这些是 BSD 函数，存在于 glibc 中。 它们在 POSIX 中没有标准化。
.SH NOTES
在 glibc 2.8 中 \fBopenpty\fP() 和 \fBforkpty\fP() 的结构体指针参数中添加了 \fBconst\fP 修饰符。
.PP
在 glibc 2.0.92 之前，\fBopenpty\fP() 返回 BSD 伪终端对的文件描述符; 从 glibc 2.0.92 开始，它首先尝试打开
UNIX 98 伪终端对，如果失败则回退到打开 BSD 伪终端对。
.SH BUGS
没有人知道应该为 \fIname\fP 保留多少空间。 因此，使用非 NULL \fIname\fP 调用 \fBopenpty\fP() 或 \fBforkpty\fP()
可能不安全。
.SH "SEE ALSO"
\fBfork\fP(2), \fBttyname\fP(3), \fBpty\fP(7)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
