.\" -*- coding: UTF-8 -*-
'\" t
.\" Copyright (C) 2006 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" SPDX-License-Identifier: Linux-man-pages-copyleft
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH mq_notify 3 2022\-12\-15 "Linux man\-pages 6.03" 
.SH NAME
mq_notify \- 在消息可用时注册通知
.SH LIBRARY
实时库 (\fIlibrt\fP、\fI\-lrt\fP)
.SH SYNOPSIS
.nf
\fB#include <mqueue.h>\fP
\fB#include <signal.h>           \fP/* Definition of SIGEV_* constants */
.PP
\fBint mq_notify(mqd_t \fP\fImqdes\fP\fB, const struct sigevent *\fP\fIsevp\fP\fB);\fP
.fi
.SH DESCRIPTION
当新消息到达消息队列描述符 \fImqdes\fP 引用的空消息队列时，\fBmq_notify\fP() 允许调用进程注册或注销异步通知的传递。
.PP
\fIsevp\fP 参数是指向 \fIsigevent\fP 结构体的指针。 有关此结构体的定义和一般详细信息，请参见 \fBsigevent\fP(7)。
.PP
如果 \fIsevp\fP 是一个非空指针，那么 \fBmq_notify\fP() 注册调用进程接收消息通知。 \fIsevp\fP 指向的 \fIsigevent\fP
结构体的 \fIsigev_notify\fP 字段指定如何执行通知。 该字段具有以下值之一:
.TP 
\fBSIGEV_NONE\fP
.\" When is SIGEV_NONE useful?
"null" 通知: 调用进程被注册为通知目标，但是当消息到达时，没有发送通知。
.TP 
\fBSIGEV_SIGNAL\fP
.\" I don't know of other implementations that set
.\" si_pid and si_uid -- MTK
通过发送 \fIsigev_signo\fP 中指定的信号通知进程。 有关一般详细信息，请参见 \fBsigevent\fP(7)。 \fIsiginfo_t\fP
结构体的 \fIsi_code\fP 字段将设置为 \fBSI_MESGQ\fP。 此外，\fIsi_pid\fP 将被设置为发送消息的进程的 PID，而
\fIsi_uid\fP 将被设置为发送进程的真实用户 ID。
.TP 
\fBSIGEV_THREAD\fP
消息传递后，调用 \fIsigev_notify_function\fP，就好像它是新线程的开始号码一样。 有关详细信息，请参见
\fBsigevent\fP(7)。
.PP
只能注册一个进程来接收来自消息队列的通知。
.PP
如果 \fIsevp\fP 为 NULL，并且调用进程当前已注册接收此消息队列的通知，则取消注册; 然后另一个进程可以注册接收该队列的消息通知。
.PP
消息通知仅在新消息到达且队列先前为空时发生。 如果调用 \fBmq_notify\fP() 时队列不为空，则只有在队列清空且有新消息到达后才会发出通知。
.PP
如果另一个进程或线程正在等待使用 \fBmq_receive\fP(3) 从空队列中读取消息，则忽略任何消息通知注册: 消息被传递给调用
\fBmq_receive\fP(3) 的进程或线程，消息通知注册仍然有效。
.PP
通知发生一次: 通知发送后，通知注册被移除，另一个进程可以注册消息通知。 如果被通知的进程希望收到下一个通知，它可以使用 \fBmq_notify\fP()
来请求进一步的通知。 这应该在清空队列中所有未读消息之前完成。 (将队列置于非阻塞模式对于清空消息队列非常有用，一旦它为空就不会阻塞。)
.SH "RETURN VALUE"
成功时 \fBmq_notify\fP() 返回 0; 出错时返回 \-1，并设置 \fIerrno\fP 以指示错误。
.SH ERRORS
.TP 
\fBEBADF\fP
\fImqdes\fP 中指定的消息队列描述符无效。
.TP 
\fBEBUSY\fP
另一个进程已经注册接收此消息队列的通知。
.TP 
\fBEINVAL\fP
\fIsevp\->sigev_notify\fP 不是允许值之一; 或者 \fIsevp\->sigev_notify\fP 是
\fBSIGEV_SIGNAL\fP 而 \fIsevp\->sigev_signo\fP 不是有效的信号编号。
.TP 
\fBENOMEM\fP
内存不足。
.PP
.\" Linux does not do this
POSIX.1\-2008 表示，如果 \fIsevp\fP 为 NULL，则实现 \fImay\fP 会生成 \fBEINVAL\fP
错误，并且调用者当前未注册以接收队列 \fImqdes\fP 的通知。
.SH ATTRIBUTES
有关本节中使用的术语的解释，请参见 \fBattributes\fP(7)。
.ad l
.nh
.TS
allbox;
lbx lb lb
l l l.
Interface	Attribute	Value
T{
\fBmq_notify\fP()
T}	Thread safety	MT\-Safe
.TE
.hy
.ad
.sp 1
.SH STANDARDS
POSIX.1\-2001.
.SH NOTES
.\"
.SS "C library/kernel differences"
在 glibc 实现中，\fBmq_notify\fP() 库函数是在同名系统调用之上实现的。 当 \fIsevp\fP 为 NULL，或指定
\fBSIGEV_THREAD\fP 以外的通知机制时，库函数直接调用系统调用。 对于 \fBSIGEV_THREAD\fP，大部分实现驻留在库中，而不是内核中。
(这是必然的，因为涉及处理通知的线程必须由 C 库 POSIX 线程实现管理。) 该实现涉及使用原始 \fBnetlink\fP(7)
套接字并为传递的每个通知创建一个新线程到过程。
.SH EXAMPLES
以下程序为在其命令行参数中命名的消息队列注册一个通知请求。 通知是通过创建线程来执行的。 线程执行一个函数，从队列中读取一条消息，然后终止进程。
.SS "Program source"
.\" SRC BEGIN (mq_notify.c)
.EX
#include <mqueue.h>
#include <pthread.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define handle_error(msg) \e
    do { perror(msg); exit(EXIT_FAILURE); } while (0)

static void                     /* Thread start function */
tfunc(union sigval sv)
{
    struct mq_attr attr;
    ssize_t nr;
    void *buf;
    mqd_t mqdes = *((mqd_t *) sv.sival_ptr);

    /* Determine max. msg size; allocate buffer to receive msg */

    if (mq_getattr(mqdes, &attr) == \-1)
        handle_error("mq_getattr");
    buf = malloc(attr.mq_msgsize);
    if (buf == NULL)
        handle_error("malloc");

    nr = mq_receive(mqdes, buf, attr.mq_msgsize, NULL);
    if (nr == \-1)
        handle_error("mq_receive");

    printf("Read %zd bytes from MQ\en", nr);
    free(buf);
    exit(EXIT_SUCCESS);         /* Terminate the process */
}

int
main(int argc, char *argv[])
{
    mqd_t mqdes;
    struct sigevent sev;

    if (argc != 2) {
        fprintf(stderr, "Usage: %s <mq\-name>\en", argv[0]);
        exit(EXIT_FAILURE);
    }

    mqdes = mq_open(argv[1], O_RDONLY);
    if (mqdes == (mqd_t) \-1)
        handle_error("mq_open");

    sev.sigev_notify = SIGEV_THREAD;
    sev.sigev_notify_function = tfunc;
    sev.sigev_notify_attributes = NULL;
    sev.sigev_value.sival_ptr = &mqdes;   /* Arg.  to thread func.  */
    if (mq_notify(mqdes, &sev) == \-1)
        handle_error("mq_notify");

    pause();    /* Process will be terminated by thread function */
}
.EE
.\" SRC END
.SH "SEE ALSO"
\fBmq_close\fP(3), \fBmq_getattr\fP(3), \fBmq_open\fP(3), \fBmq_receive\fP(3),
\fBmq_send\fP(3), \fBmq_unlink\fP(3), \fBmq_overview\fP(7), \fBsigevent\fP(7)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
