.\" -*- coding: UTF-8 -*-
'\" t
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" SPDX-License-Identifier: Linux-man-pages-copyleft
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\"	Single UNIX Specification, Version 2
.\" Modified Thu Apr  8 15:00:12 1993, David Metcalfe
.\" Modified Sat Jul 24 18:44:45 1993, Rik Faith (faith@cs.unc.edu)
.\" Modified Fri Feb 14 21:47:50 1997 by Andries Brouwer (aeb@cwi.nl)
.\" Modified Mon Oct 11 11:11:11 1999 by Andries Brouwer (aeb@cwi.nl)
.\" Modified Wed Nov 10 00:02:26 1999 by Andries Brouwer (aeb@cwi.nl)
.\" Modified Sun May 20 22:17:20 2001 by Andries Brouwer (aeb@cwi.nl)
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH putenv 3 2023\-02\-05 "Linux man\-pages 6.03" 
.SH NAME
putenv \- 更改或添加环境变量
.SH LIBRARY
标准 C 库 (\fIlibc\fP、\fI\-lc\fP)
.SH SYNOPSIS
.nf
\fB#include <stdlib.h>\fP
.PP
.\" Not: const char *
\fBint putenv(char *\fP\fIstring\fP\fB);\fP
.fi
.PP
.RS -4
特性测试宏 glibc 的要求 (参见 \fBfeature_test_macros\fP(7)):
.RE
.PP
\fBputenv\fP():
.nf
    _XOPEN_SOURCE
        || /* glibc >= 2.19: */ _DEFAULT_SOURCE
        || /* glibc <= 2.19: */ _SVID_SOURCE
.fi
.SH DESCRIPTION
\fBputenv\fP() 函数增加或改变环境变量的值。 参数 \fIstring\fP 的形式为 \fIname\fP=\fIvalue\fP。 如果环境中尚不存在
\fIname\fP，则将 \fIstring\fP 添加到环境中。 如果 \fIname\fP 确实存在，则将环境中 \fIname\fP 的值更改为 \fIvalue\fP。
\fIstring\fP 指向的字符串成为环境的一部分，因此改变字符串会改变环境。
.SH "RETURN VALUE"
\fBputenv\fP() 函数成功返回零。 失败时，它返回一个非零值，并设置 \fIerrno\fP 以指示错误。
.SH ERRORS
.TP 
\fBENOMEM\fP
空间不足，无法分配新环境。
.SH ATTRIBUTES
有关本节中使用的术语的解释，请参见 \fBattributes\fP(7)。
.ad l
.nh
.TS
allbox;
lbx lb lb
l l l.
Interface	Attribute	Value
T{
\fBputenv\fP()
T}	Thread safety	MT\-Unsafe const:env
.TE
.hy
.ad
.sp 1
.SH STANDARDS
POSIX.1\-2001, POSIX.1\-2008, SVr4, 4.3BSD.
.SH NOTES
.\" .LP
.\" Description for libc4, libc5, glibc:
.\" If the argument \fIstring\fP is of the form \fIname\fP,
.\" and does not contain an \[aq]=\[aq] character, then the variable \fIname\fP
.\" is removed from the environment.
.\" If
.\" .BR putenv ()
.\" has to allocate a new array \fIenviron\fP,
.\" and the previous array was also allocated by
.\" .BR putenv (),
.\" then it will be freed.
.\" In no case will the old storage associated
.\" to the environment variable itself be freed.
\fBputenv\fP() 函数不需要可重入，glibc 2.0 中的不需要，但 glibc 2.1 版本是。
.PP
从 glibc 2.1.2 开始，glibc 实现符合 SUSv2: 使用给 \fBputenv\fP() 的指针 \fIstring\fP。
特别是，这个字符串成为环境的一部分; 以后改变它会改变环境。 (因此，使用自动变量作为参数调用 \fBputenv\fP() 是错误的，然后从调用函数返回，而
\fIstring\fP 仍然是环境的一部分。) 但是，从 glibc 2.0 到 glibc 2.1.1，它不同: ra copy of the
使用字符串。 一方面这会导致内存泄漏，另一方面又违反了 SUSv2。
.PP
4.4BSD 版本和 glibc 2.0 一样，使用了一份。
.PP
SUSv2 从原型中删除了 \fIconst\fP，glibc 2.1.3 也是如此。
.PP
GNU C 库实现提供了一个非标准扩展。 如果 \fIstring\fP 不包含等号:
.PP
.in +4n
.EX
putenv("NAME");
.EE
.in
.PP
然后从调用者的环境中删除命名变量。
.SH "SEE ALSO"
\fBclearenv\fP(3), \fBgetenv\fP(3), \fBsetenv\fP(3), \fBunsetenv\fP(3), \fBenviron\fP(7)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
