.\" -*- coding: UTF-8 -*-
'\" t
.\" Copyright (C) 2016 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" SPDX-License-Identifier: GPL-2.0-or-later
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH setjmp 3 2023\-02\-05 "Linux man\-pages 6.03" 
.SH NAME
setjmp、sigsetjmp、longjmp、siglongjmp \- 执行非本地转到
.SH LIBRARY
标准 C 库 (\fIlibc\fP、\fI\-lc\fP)
.SH SYNOPSIS
.nf
\fB#include <setjmp.h>\fP
.PP
\fBint setjmp(jmp_buf \fP\fIenv\fP\fB);\fP
\fBint sigsetjmp(sigjmp_buf \fP\fIenv\fP\fB, int \fP\fIsavesigs\fP\fB);\fP
.PP
\fB[[noreturn]] void longjmp(jmp_buf \fP\fIenv\fP\fB, int \fP\fIval\fP\fB);\fP
\fB[[noreturn]] void siglongjmp(sigjmp_buf \fP\fIenv\fP\fB, int \fP\fIval\fP\fB);\fP
.fi
.PP
.RS -4
特性测试宏 glibc 的要求 (参见 \fBfeature_test_macros\fP(7)):
.RE
.PP
\fBsetjmp\fP(): 见注释。
.PP
\fBsigsetjmp\fP():
.nf
    _POSIX_C_SOURCE
.fi
.SH DESCRIPTION
本页描述的函数用于执行 "nonlocal gotos": 将执行从一个函数转移到另一个函数中的预定位置。 \fBsetjmp\fP()
函数动态建立稍后将控制转移到的目标，\fBlongjmp\fP() 执行转移执行。
.PP
\fBsetjmp\fP() 函数将有关调用环境的各种信息 (通常是栈指针、指令指针，可能还有其他寄存器的值和信号掩码) 保存在缓冲区 \fIenv\fP 中，供
\fBlongjmp\fP() 稍后使用。 在这种情况下，\fBsetjmp\fP() 返回 0.
.PP
\fBlongjmp\fP() 函数使用 \fIenv\fP 中保存的信息将控制权转移回调用 \fBsetjmp\fP() 的位置，并将 ("rewind") 栈恢复到
\fBsetjmp\fP() 调用时的状态。 此外，根据实现情况 (见注释)，一些其他寄存器的值和过程信号掩码可能会恢复到它们在 \fBsetjmp\fP()
调用时的状态。
.PP
\fBlongjmp\fP() 成功后，继续执行，就好像 \fBsetjmp\fP() 已第二次返回一样。 此 "fake" 返回值可以与真正的
\fBsetjmp\fP() 调用区分开来，因为 "fake" 返回值返回 \fIval\fP 中提供的值。 如果程序员错误地将值 0 传递给
\fIval\fP，"fake" 返回将改为返回 1.
.SS "sigsetjmp() and siglongjmp()"
\fBsigsetjmp\fP() 和 \fBsiglongjmp\fP() 也执行非本地 goto，但提供对进程信号掩码的可预测处理。
.PP
如果且仅当提供给 \fBsigsetjmp\fP() 的 \fIsavesigs\fP 参数不为零时，进程的当前信号掩码将保存在 \fIenv\fP
中，并且如果稍后使用此 \fIenv\fP 执行 \fBsiglongjmp\fP() 将恢复。
.SH "RETURN VALUE"
\fBsetjmp\fP() 和 \fBsigsetjmp\fP() 直接调用返回 0; 在 \fBlongjmp\fP() 或 \fBsiglongjmp\fP()
之后发生的 "fake" 返回上，返回 \fIval\fP 中指定的非零值。
.PP
\fBlongjmp\fP() 或 \fBsiglongjmp\fP() 函数不返回。
.SH ATTRIBUTES
有关本节中使用的术语的解释，请参见 \fBattributes\fP(7)。
.ad l
.nh
.TS
allbox;
lbx lb lb
l l l.
Interface	Attribute	Value
T{
\fBsetjmp\fP(),
\fBsigsetjmp\fP()
T}	Thread safety	MT\-Safe
T{
\fBlongjmp\fP(),
\fBsiglongjmp\fP()
T}	Thread safety	MT\-Safe
.TE
.hy
.ad
.sp 1
.SH STANDARDS
\fBsetjmp\fP(), \fBlongjmp\fP(): POSIX.1\-2001, POSIX.1\-2008, C99.
.PP
\fBsigsetjmp\fP(), \fBsiglongjmp\fP(): POSIX.1\-2001, POSIX.1\-2008.
.SH NOTES
.\" so that _FAVOR_BSD is triggered
.\" .BR _XOPEN_SOURCE_EXTENDED ,
POSIX 没有指定 \fBsetjmp\fP() 是否会保存信号屏蔽 (稍后在 \fBlongjmp\fP()).  在 System V 中它不会。 在
4.3BSD 会，有一个函数 \fB_setjmp\fP() 不会。 Linux 下的行为取决于 glibc 版本和特性测试宏的设置。 在 glibc
2.19 之前，\fBsetjmp\fP() 默认遵循 System V 行为，但如果显式定义了 \fB_BSD_SOURCE\fP 特性测试宏并且没有定义
\fB_POSIX_SOURCE\fP、\fB_POSIX_C_SOURCE\fP、\fB_XOPEN_SOURCE\fP、\fB_GNU_SOURCE\fP 或
\fB_SVID_SOURCE\fP，则提供 BSD 行为。 自 glibc 2.19 以来，\fI<setjmp.h>\fP 仅公开
\fBsetjmp\fP() 的 System V 版本。 需要 BSD 语义的程序应将对 \fBsetjmp\fP() 的调用替换为对具有非零
\fIsavesigs\fP 参数的 \fBsigsetjmp\fP() 的调用。
.PP
\fBsetjmp\fP() 和 \fBlongjmp\fP()
可用于处理深度嵌套的函数调用中的错误，或允许信号处理程序将控制权传递到程序中的特定点，而不是返回到处理程序中断主程序的点。
在后一种情况下，如果您想要可移植地保存和恢复信号掩码，请使用 \fBsigsetjmp\fP() 和 \fBsiglongjmp\fP()。
另请详见下面关于程序可读性的讨论。
.PP
编译器可能会将变量优化成寄存器，\fBlongjmp\fP() 可能会恢复除栈指针和程序计数器之外的其他寄存器的值。
因此，如果满足以下所有条件，自动变量的值在调用到 \fBlongjmp\fP() 后未指定:
.IP \[bu] 3
它们是制作相应 \fBsetjmp\fP() 调用的函数的本地;
.IP \[bu]
它们的值在调用 \fBsetjmp\fP() 和 \fBlongjmp\fP() 之间改变; and
.IP \[bu]
它们未声明为 \fIvolatile\fP。
.PP
.\"
类似的评论适用于 \fBsiglongjmp\fP()。
.SS "Nonlocal gotos and program readability"
虽然它可能被滥用，但传统的 C "goto" 语句至少有一个好处，即词汇提示 (goto 语句和目标标签) 允许程序员轻松感知控制流。 非本地 goto
不提供这样的提示: 多个 \fBsetjmp\fP() 调用可能使用相同的 \fIjmp_buf\fP 变量，因此变量的内容可能会在应用程序的生命周期内发生变化。
因此，程序人员可能被迫执行代码的详细阅读以确定特定 \fBlongjmp\fP() 调用的动态目标。 (为了让程序员的生活更轻松，每个 \fBsetjmp\fP()
调用都应该使用一个唯一的 \fIjmp_buf\fP 变量。)
.PP
更加困难的是，\fBsetjmp\fP() 和 \fBlongjmp\fP() 调用甚至可能不在同一个源代码模块中。
.PP
.\"
在总结中，非本地 goto 会使程序更难理解和维护，如果可能，应使用替代方法。
.SS Caveats
如果调用 \fBsetjmp\fP() 的函数在调用 \fBlongjmp\fP() 之前返回，则行为未定义。 一定会导致某种微妙或不微妙的混乱。
.PP
.\"
.\" The following statement appeared in versions up to POSIX.1-2008 TC1,
.\" but is set to be removed in POSIX.1-2008 TC2:
.\"
.\"     According to POSIX.1, if a
.\"     .BR longjmp ()
.\"     call is performed from a nested signal handler
.\"     (i.e., from a handler that was invoked in response to a signal that was
.\"     generated while another signal was already in the process of being
.\"     handled), the behavior is undefined.
如果在多线程程序中，\fBlongjmp\fP() 调用使用 \fIenv\fP 缓冲区，该缓冲区由不同线程中的调用初始化为 \fBsetjmp\fP()，则行为未定义。
.PP
.\" http://austingroupbugs.net/view.php?id=516#c1195
POSIX.1\-2008 Technical Corrigendum 2 将 \fBlongjmp\fP() 和 \fBsiglongjmp\fP() 添加到
async\-signal\-safe 函数列表中。
然而，该标准建议避免在信号处理程序中使用这些函数，并继续指出，如果这些函数是从中断调用的信号处理程序调用到非异步信号安全函数
(或某些等效的，例如作为等同于从初始调用返回到 \fImain\fP()) 时发生的 \fBexit\fP(3)
的步骤，如果程序随后对非异步信号安全函数调用，则行为未定义。 避免未定义行为的唯一方法是确保以下之一:
.IP \[bu] 3
从信号处理程序长跳转后，程序不会调用任何非异步信号安全的函数，也不会从初始调用返回到 \fImain\fP()。
.IP \[bu]
任何其处理程序执行长跳转的信号必须在 \fIevery\fP 调用到非异步信号安全函数期间被阻塞，并且在从初始调用返回到 \fImain\fP()
后不会调用非异步信号安全函数。
.SH "SEE ALSO"
\fBsignal\fP(7), \fBsignal\-safety\fP(7)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
