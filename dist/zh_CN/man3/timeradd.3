.\" -*- coding: UTF-8 -*-
.\" Copyright (c) 2007 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" SPDX-License-Identifier: Linux-man-pages-copyleft
.\"
.\" 2007-07-31, mtk, Created
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH timeradd 3 2023\-02\-05 "Linux man\-pages 6.03" 
.SH NAME
timeradd、timersub、timercmp、timerclear、timerisset\-timeval 操作
.SH LIBRARY
标准 C 库 (\fIlibc\fP、\fI\-lc\fP)
.SH SYNOPSIS
.nf
\fB#include <sys/time.h>\fP
.PP
\fBvoid timeradd(struct timeval *\fP\fIa\fP\fB, struct timeval *\fP\fIb\fP\fB,\fP
\fB              struct timeval *\fP\fIres\fP\fB);\fP
\fBvoid timersub(struct timeval *\fP\fIa\fP\fB, struct timeval *\fP\fIb\fP\fB,\fP
\fB              struct timeval *\fP\fIres\fP\fB);\fP
.PP
\fBvoid timerclear(struct timeval *\fP\fItvp\fP\fB);\fP
\fBint timerisset(struct timeval *\fP\fItvp\fP\fB);\fP
.PP
\fBint timercmp(struct timeval *\fP\fIa\fP\fB, struct timeval *\fP\fIb\fP\fB, \fP\fICMP\fP\fB);\fP
.fi
.PP
.RS -4
特性测试宏 glibc 的要求 (参见 \fBfeature_test_macros\fP(7)):
.RE
.PP
以上所有函数:
.nf
    由于 glibc 2.19:
        _DEFAULT_SOURCE
    glibc 2.19 及更早版本:
        _BSD_SOURCE
.fi
.SH DESCRIPTION
提供宏以对 \fItimeval\fP 结构进行操作，在 \fI<sys/time.h>\fP 中定义为:
.PP
.in +4n
.EX
struct timeval {
    time_t      tv_sec;     /* seconds */
    suseconds_t tv_usec;    /* microseconds */
};
.EE
.in
.PP
\fBtimeradd\fP() 将 \fIa\fP 和 \fIb\fP 中的时间值相加，并将和放在 \fIres\fP 指向的 \fItimeval\fP 中。 结果被归一化，使得
\fIres\->tv_usec\fP 的值在 0 到 999,999 范围内。
.PP
\fBtimersub\fP() 用 \fIa\fP 中的时间值减去 \fIb\fP 中的时间值，结果放在 \fIres\fP 指向的 \fItimeval\fP 中。
结果被归一化，使得 \fIres\->tv_usec\fP 的值在 0 到 999,999 范围内。
.PP
\fBtimerclear\fP() 将 \fItvp\fP 指向的 \fItimeval\fP 结构体归零，使其代表 Epoch: 1970\-01\-01
00:00:00 +0000 (UTC)。
.PP
如果 \fItvp\fP 指向的 \fItimeval\fP 结构体的任一字段包含非零值，则 \fBtimerisset\fP() 返回真 (nonzero)。
.PP
.\" HP-UX, Tru64, Irix have a definition like:
.\"#define timercmp(tvp, uvp, cmp) \
.\"    ((tvp)->tv_sec cmp (uvp)->tv_sec || \
.\"    (tvp)->tv_sec == (uvp)->tv_sec && (tvp)->tv_usec cmp (uvp)->tv_usec)
\fBtimercmp\fP() 使用比较运算符 \fICMP\fP 比较 \fIa\fP 和 \fIb\fP 中的定时器值，并根据比较结果返回真 (nonzero) 或假
(0)。 某些系统 (但不是 Linux/glibc) 具有损坏的 \fBtimercmp\fP() 实现，其中 \fI>=\fP、\fI<=\fP 和
\fI==\fP 的 \fICMP\fP 不工作; 便携式应用程序可以改为使用
.PP
.in +4n
.EX
!timercmp(..., <)
!timercmp(..., >)
!timercmp(..., !=)
.EE
.in
.SH "RETURN VALUE"
\fBtimerisset\fP() 和 \fBtimercmp\fP() 返回真 (nonzero) 或假 (0)。
.SH ERRORS
没有定义错误。
.SH STANDARDS
不在 POSIX.1 中。 存在于大多数 BSD 衍生产品中。
.SH "SEE ALSO"
\fBgettimeofday\fP(2), \fBtime\fP(7)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
