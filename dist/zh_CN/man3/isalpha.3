.\" -*- coding: UTF-8 -*-
'\" t
.\" Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\"
.\" SPDX-License-Identifier: Linux-man-pages-copyleft
.\"
.\" Modified Sat Jul 24 19:10:00 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Sun Aug 21 17:51:50 1994 by Rik Faith (faith@cs.unc.edu)
.\" Modified Sat Sep  2 21:52:01 1995 by Jim Van Zandt <jrv@vanzandt.mv.com>
.\" Modified Mon May 27 22:55:26 1996 by Martin Schulze (joey@linux.de)
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH isalpha 3 2023\-02\-05 "Linux man\-pages 6.03" 
.SH NAME
isalnum, isalpha, isascii, isblank, iscntrl, isdigit, isgraph, islower,
isprint, ispunct, isspace, isupper, isxdigit, isalnum_l, isalpha_l,
isascii_l, isblank_l, iscntrl_l, isdigit_l, isgraph_l, islower_l, isprint_l,
ispunct_l, isspace_l, isupper_l, isxdigit_l \- 字符分类函数
.SH LIBRARY
标准 C 库 (\fIlibc\fP、\fI\-lc\fP)
.SH SYNOPSIS
.nf
\fB#include <ctype.h>\fP
.PP
\fBint isalnum(int \fP\fIc\fP\fB);\fP
\fBint isalpha(int \fP\fIc\fP\fB);\fP
\fBint iscntrl(int \fP\fIc\fP\fB);\fP
\fBint isdigit(int \fP\fIc\fP\fB);\fP
\fBint isgraph(int \fP\fIc\fP\fB);\fP
\fBint islower(int \fP\fIc\fP\fB);\fP
\fBint isprint(int \fP\fIc\fP\fB);\fP
\fBint ispunct(int \fP\fIc\fP\fB);\fP
\fBint isspace(int \fP\fIc\fP\fB);\fP
\fBint isupper(int \fP\fIc\fP\fB);\fP
\fBint isxdigit(int \fP\fIc\fP\fB);\fP
.PP
\fBint isascii(int \fP\fIc\fP\fB);\fP
\fBint isblank(int \fP\fIc\fP\fB);\fP
.PP
\fBint isalnum_l(int \fP\fIc\fP\fB, locale_t \fP\fIlocale\fP\fB);\fP
\fBint isalpha_l(int \fP\fIc\fP\fB, locale_t \fP\fIlocale\fP\fB);\fP
\fBint isblank_l(int \fP\fIc\fP\fB, locale_t \fP\fIlocale\fP\fB);\fP
\fBint iscntrl_l(int \fP\fIc\fP\fB, locale_t \fP\fIlocale\fP\fB);\fP
\fBint isdigit_l(int \fP\fIc\fP\fB, locale_t \fP\fIlocale\fP\fB);\fP
\fBint isgraph_l(int \fP\fIc\fP\fB, locale_t \fP\fIlocale\fP\fB);\fP
\fBint islower_l(int \fP\fIc\fP\fB, locale_t \fP\fIlocale\fP\fB);\fP
\fBint isprint_l(int \fP\fIc\fP\fB, locale_t \fP\fIlocale\fP\fB);\fP
\fBint ispunct_l(int \fP\fIc\fP\fB, locale_t \fP\fIlocale\fP\fB);\fP
\fBint isspace_l(int \fP\fIc\fP\fB, locale_t \fP\fIlocale\fP\fB);\fP
\fBint isupper_l(int \fP\fIc\fP\fB, locale_t \fP\fIlocale\fP\fB);\fP
\fBint isxdigit_l(int \fP\fIc\fP\fB, locale_t \fP\fIlocale\fP\fB);\fP
.PP
\fBint isascii_l(int \fP\fIc\fP\fB, locale_t \fP\fIlocale\fP\fB);\fP
.fi
.PP
.RS -4
特性测试宏 glibc 的要求 (参见 \fBfeature_test_macros\fP(7)):
.RE
.ad l
.PP
\fBisascii\fP():
.nf
    _XOPEN_SOURCE
        || /* glibc >= 2.19: */ _DEFAULT_SOURCE
        || /* glibc <= 2.19: */ _SVID_SOURCE
.fi
.PP
\fBisblank\fP():
.nf
    _ISOC99_ 源 ||_POSIX_C_SOURCE >= 200112L
.fi
.nh
.PP
\fBisalnum_l\fP(), \fBisalpha_l\fP(), \fBisblank_l\fP(), \fBiscntrl_l\fP(),
\fBisdigit_l\fP(), \fBisgraph_l\fP(), \fBislower_l\fP(), \fBisprint_l\fP(),
\fBispunct_l\fP(), \fBisspace_l\fP(), \fBisupper_l\fP(), \fBisxdigit_l\fP():
.hy
.nf
    由于 glibc 2.10:
        _XOPEN_SOURCE >= 700
    在 glibc 2.10 之前:
        _GNU_SOURCE
.fi
.PP
\fBisascii_l\fP():
.nf
    由于 glibc 2.10:
        _XOPEN_SOURCE >= 700 && (_SVID_SOURCE || _BSD_SOURCE)
    在 glibc 2.10 之前:
        _GNU_SOURCE
.fi
.ad
.SH DESCRIPTION
这些函数根据指定的语言环境检查 \fIc\fP (必须具有 \fIunsigned char\fP 或 \fBEOF\fP 的值) 是否属于特定字符类。 没有 "_l"
后缀的函数根据当前语言环境执行检查。
.PP
带有 "_l" 后缀的函数根据 locale 对象 \fIlocale\fP 指定的 locale 执行检查。 如果 \fIlocale\fP 是特殊的语言环境对象
\fBLC_GLOBAL_LOCALE\fP (请参见 \fBduplocale\fP(3)) 或不是有效的语言环境对象句柄)，则这些函数的行为是未定义的。
.PP
下面的列表解释了没有 "_l" 后缀的函数的操作; 带有 "_l" 后缀的函数的不同之处仅在于使用区域设置对象 \fIlocale\fP 而不是当前区域设置。
.TP 
\fBisalnum\fP()
检查字母数字字符; 它相当于 \fB(isalpha(\fP\fIc\fP\fB) || isdigit(\fP\fIc\fP\fB))\fP。
.TP 
\fBisalpha\fP()
检查字母字符; 在标准 \fB"C"\fP 语言环境中，它等同于 \fB(isupper(\fP\fIc\fP\fB) || islower(\fP\fIc\fP\fB))\fP。
在某些语言环境中，可能存在 \fBisalpha\fP() 为真的其他字符 \[em] 既不是大写也不是小写的字母。
.TP 
\fBisascii\fP()
检查 \fIc\fP 是否是适合 ASCII 字符集的 7 位 \fIunsigned char\fP 值。
.TP 
\fBisblank\fP()
检查空白字符; 即，空格或制表符。
.TP 
\fBiscntrl\fP()
检查控制字符。
.TP 
\fBisdigit\fP()
检查数字 (0 到 9)。
.TP 
\fBisgraph\fP()
检查除空格外的任何可打印字符。
.TP 
\fBislower\fP()
检查小写字符。
.TP 
\fBisprint\fP()
检查任何可打印字符，包括空格。
.TP 
\fBispunct\fP()
检查任何不是空格或字母数字字符的可打印字符。
.TP 
\fBisspace\fP()
检查空白字符。 在 \fB"C"\fP 和 \fB"POSIX"\fP 语言环境中，它们是: 空格、换页符 (\fB\[aq]\ef\[aq]\fP)、换行符
(\fB\[aq]\en\[aq]\fP)、回车符 (\fB\[aq]\er\[aq]\fP)、水平制表符 (\fB\[aq]\et\[aq]\fP) 和垂直制表符
(\fB\[aq]\ev\[aq]\fP)。
.TP 
\fBisupper\fP()
检查大写字母。
.TP 
\fBisxdigit\fP()
检查十六进制数字，即其中之一
.br
\fB0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F\fP.
.SH "RETURN VALUE"
如果字符 \fIc\fP 属于测试类，则返回值为非零，否则为零。
.SH VERSIONS
\fBisalnum_l\fP()、\fBisalpha_l\fP()、\fBisblank_l\fP()、\fBiscntrl_l\fP()、\fBisdigit_l\fP()、\fBisgraph_l\fP()、\fBislower_l\fP()、\fBisprint_l\fP()、\fBispunct_l\fP()、\fBisspace_l\fP()、\fBisupper_l\fP()、\fBisxdigit_l\fP()
和 \fBisascii_l\fP() 自 glibc 2.3 起可用。
.SH ATTRIBUTES
有关本节中使用的术语的解释，请参见 \fBattributes\fP(7)。
.ad l
.nh
.TS
allbox;
lbx lb lb
l l l.
Interface	Attribute	Value
T{
\fBisalnum\fP(),
\fBisalpha\fP(),
\fBisascii\fP(),
\fBisblank\fP(),
\fBiscntrl\fP(),
\fBisdigit\fP(),
\fBisgraph\fP(),
\fBislower\fP(),
\fBisprint\fP(),
\fBispunct\fP(),
\fBisspace\fP(),
\fBisupper\fP(),
\fBisxdigit\fP()
T}	Thread safety	MT\-Safe
.TE
.hy
.ad
.sp 1
.\" FIXME: need a thread-safety statement about the *_l functions
.SH STANDARDS
POSIX.1\-2001 指定
\fBisalnum\fP()、\fBisalpha\fP()、\fBisblank\fP()、\fBiscntrl\fP()、\fBisdigit\fP()、\fBisgraph\fP()、\fBislower\fP()、\fBisprint\fP()、\fBispunct\fP()、\fBisspace\fP()、\fBisupper\fP()
和 \fBisxdigit\fP()，以及 \fBisascii\fP() (作为 XSI 扩展)。 C99 指定前面所有的函数，\fBisascii\fP() 除外。
.PP
POSIX.1\-2008 将 \fBisascii\fP() 标记为已过时，指出它不能在本地化应用程序中可移植地使用。
.PP
POSIX.1\-2008 指定
\fBisalnum_l\fP()、\fBisalpha_l\fP()、\fBisblank_l\fP()、\fBiscntrl_l\fP()、\fBisdigit_l\fP()、\fBisgraph_l\fP()、\fBislower_l\fP()、\fBisprint_l\fP()、\fBispunct_l\fP()、\fBisspace_l\fP()、\fBisupper_l\fP()
和 \fBisxdigit_l\fP()。
.PP
\fBisascii_l\fP() 是 GNU 的扩展。
.SH NOTES
标准要求这些函数的参数 \fIc\fP 是 \fBEOF\fP 或在类型 \fIunsigned char\fP 中可表示的值。 如果参数 \fIc\fP 的类型为
\fIchar\fP，则必须将其强制转换为 \fIunsigned char\fP，如下例所示:
.PP
.in +4n
.EX
char c;
\&...
res = toupper((unsigned char) c);
.EE
.in
.PP
这是必要的，因为 \fIchar\fP 可能等同于 \fIsigned char\fP，在这种情况下，设置最高位的字节在转换为 \fIint\fP
时将进行符号扩展，从而产生超出 \fIunsigned char\fP 范围的值。
.PP
哪些字符属于哪个类的详细信息取决于语言环境。 例如，\fBisupper\fP() 不会将 A\-umlaut (\(:A) 识别为默认 \fBC\fP
语言环境中的大写字母。
.SH "SEE ALSO"
\fBiswalnum\fP(3), \fBiswalpha\fP(3), \fBiswblank\fP(3), \fBiswcntrl\fP(3),
\fBiswdigit\fP(3), \fBiswgraph\fP(3), \fBiswlower\fP(3), \fBiswprint\fP(3),
\fBiswpunct\fP(3), \fBiswspace\fP(3), \fBiswupper\fP(3), \fBiswxdigit\fP(3),
\fBnewlocale\fP(3), \fBsetlocale\fP(3), \fBtoascii\fP(3), \fBtolower\fP(3),
\fBtoupper\fP(3), \fBuselocale\fP(3), \fBascii\fP(7), \fBlocale\fP(7)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
