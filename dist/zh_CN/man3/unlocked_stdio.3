.\" -*- coding: UTF-8 -*-
'\" t
.\" Copyright (C) 2001 Andries Brouwer <aeb@cwi.nl>.
.\"
.\" SPDX-License-Identifier: Linux-man-pages-copyleft
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH unlocked_stdio 3 2023\-02\-05 "Linux man\-pages 6.03" 
.SH NAME
getc_unlocked、getchar_unlocked、putc_unlocked、putchar_unlocked \- 非锁定标准输入输出函数
.SH LIBRARY
标准 C 库 (\fIlibc\fP、\fI\-lc\fP)
.SH SYNOPSIS
.nf
\fB#include <stdio.h>\fP
.PP
\fBint getc_unlocked(FILE *\fP\fIstream\fP\fB);\fP
\fBint getchar_unlocked(void);\fP
\fBint putc_unlocked(int \fP\fIc\fP\fB, FILE *\fP\fIstream\fP\fB);\fP
\fBint putchar_unlocked(int \fP\fIc\fP\fB);\fP
.PP
\fBvoid clearerr_unlocked(FILE *\fP\fIstream\fP\fB);\fP
\fBint feof_unlocked(FILE *\fP\fIstream\fP\fB);\fP
\fBint ferror_unlocked(FILE *\fP\fIstream\fP\fB);\fP
\fBint fileno_unlocked(FILE *\fP\fIstream\fP\fB);\fP
\fBint fflush_unlocked(FILE *\fP\fIstream\fP\fB);\fP
.PP
\fBint fgetc_unlocked(FILE *\fP\fIstream\fP\fB);\fP
\fBint fputc_unlocked(int \fP\fIc\fP\fB, FILE *\fP\fIstream\fP\fB);\fP
.PP
\fBsize_t fread_unlocked(void \fP\fIptr\fP\fB[restrict .\fP\fIsize\fP\fB * .\fP\fIn\fP\fB],\fP
\fB                      size_t \fP\fIsize\fP\fB, size_t \fP\fIn\fP\fB,\fP 
\fB                      FILE *restrict \fP\fIstream\fP\fB);\fP
\fBsize_t fwrite_unlocked(const void \fP\fIptr\fP\fB[restrict .\fP\fIsize\fP\fB * .\fP\fIn\fP\fB],\fP
\fB                      size_t \fP\fIsize\fP\fB, size_t \fP\fIn\fP\fB,\fP
\fB                      FILE *restrict \fP\fIstream\fP\fB);\fP
.PP
\fBchar *fgets_unlocked(char \fP\fIs\fP\fB[restrict .\fP\fIn\fP\fB], int \fP\fIn\fP\fB, FILE *restrict \fP\fIstream\fP\fB);\fP
\fBint fputs_unlocked(const char *restrict \fP\fIs\fP\fB, FILE *restrict \fP\fIstream\fP\fB);\fP
.PP
\fB#include <wchar.h>\fP
.PP
\fBwint_t getwc_unlocked(FILE *\fP\fIstream\fP\fB);\fP
\fBwint_t getwchar_unlocked(void);\fP
\fBwint_t fgetwc_unlocked(FILE *\fP\fIstream\fP\fB);\fP
.PP
\fBwint_t fputwc_unlocked(wchar_t \fP\fIwc\fP\fB, FILE *\fP\fIstream\fP\fB);\fP
\fBwint_t putwc_unlocked(wchar_t \fP\fIwc\fP\fB, FILE *\fP\fIstream\fP\fB);\fP
\fBwint_t putwchar_unlocked(wchar_t \fP\fIwc\fP\fB);\fP
.PP
\fBwchar_t *fgetws_unlocked(wchar_t \fP\fIws\fP\fB[restrict .\fP\fIn\fP\fB], int \fP\fIn\fP\fB,\fP
\fB                      FILE *restrict \fP\fIstream\fP\fB);\fP
\fBint fputws_unlocked(const wchar_t *restrict \fP\fIws\fP\fB,\fP
\fB                      FILE *restrict \fP\fIstream\fP\fB);\fP
.fi
.PP
.RS -4
特性测试宏 glibc 的要求 (参见 \fBfeature_test_macros\fP(7)):
.nh
.RE
.ad l
.PP
\fBgetc_unlocked\fP(), \fBgetchar_unlocked\fP(), \fBputc_unlocked\fP(),
\fBputchar_unlocked\fP():
.nf
    /* glibc >= 2.24: */ _POSIX_C_SOURCE >= 199309L
        || /* glibc <= 2.23: */ _POSIX_C_SOURCE
        || /* glibc <= 2.19: */ _SVID_SOURCE || _BSD_SOURCE
.fi
.PP
\fBclearerr_unlocked\fP(), \fBfeof_unlocked\fP(), \fBferror_unlocked\fP(),
\fBfileno_unlocked\fP(), \fBfflush_unlocked\fP(), \fBfgetc_unlocked\fP(),
\fBfputc_unlocked\fP(), \fBfread_unlocked\fP(), \fBfwrite_unlocked\fP():
.nf
    /* glibc >= 2.19: */ _DEFAULT_SOURCE
        || /* glibc <= 2.19: */ _SVID_SOURCE || _BSD_SOURCE
.fi
.PP
\fBfgets_unlocked\fP(), \fBfputs_unlocked\fP(), \fBgetwc_unlocked\fP(),
\fBgetwchar_unlocked\fP(), \fBfgetwc_unlocked\fP(), \fBfputwc_unlocked\fP(),
\fBputwchar_unlocked\fP(), \fBfgetws_unlocked\fP(), \fBfputws_unlocked\fP():
.nf
    _GNU_SOURCE
.fi
.hy
.ad
.SH DESCRIPTION
这些函数中的每一个都与没有 "_unlocked" 后缀的对应物具有相同的行为，除了它们不使用锁定 (它们自己不设置锁，并且不测试其他人设置的锁的存在)
因此是线程不安全的.  请参见 \fBflockfile\fP(3)。
.SH ATTRIBUTES
有关本节中使用的术语的解释，请参见 \fBattributes\fP(7)。
.ad l
.nh
.TS
allbox;
lb lb lbx
l l l.
Interface	Attribute	Value
T{
\fBgetc_unlocked\fP(),
\fBputc_unlocked\fP(),
\fBclearerr_unlocked\fP(),
\fBfflush_unlocked\fP(),
\fBfgetc_unlocked\fP(),
\fBfputc_unlocked\fP(),
\fBfread_unlocked\fP(),
\fBfwrite_unlocked\fP(),
\fBfgets_unlocked\fP(),
\fBfputs_unlocked\fP(),
\fBgetwc_unlocked\fP(),
\fBfgetwc_unlocked\fP(),
\fBfputwc_unlocked\fP(),
\fBputwc_unlocked\fP(),
\fBfgetws_unlocked\fP(),
\fBfputws_unlocked\fP()
T}	Thread safety	T{
MT\-Safe race:stream
T}
T{
\fBgetchar_unlocked\fP(),
\fBgetwchar_unlocked\fP()
T}	Thread safety	T{
MT\-Unsafe race:stdin
T}
T{
\fBputchar_unlocked\fP(),
\fBputwchar_unlocked\fP()
T}	Thread safety	T{
MT\-Unsafe race:stdout
T}
T{
\fBfeof_unlocked\fP(),
\fBferror_unlocked\fP(),
\fBfileno_unlocked\fP()
T}	Thread safety	MT\-Safe
.TE
.hy
.ad
.sp 1
.SH STANDARDS
四个函数
\fBgetc_unlocked\fP()、\fBgetchar_unlocked\fP()、\fBputc_unlocked\fP()、\fBputchar_unlocked\fP()
在 POSIX.1\-2001 和 POSIX.1\-2008 中。
.PP
.\" E.g., in HP-UX 10.0. In HP-UX 10.30 they are called obsolescent, and
.\" moved to a compatibility library.
.\" Available in HP-UX 10.0: clearerr_unlocked, fclose_unlocked,
.\" feof_unlocked, ferror_unlocked, fflush_unlocked, fgets_unlocked,
.\" fgetwc_unlocked, fgetws_unlocked, fileno_unlocked, fputs_unlocked,
.\" fputwc_unlocked, fputws_unlocked, fread_unlocked, fseek_unlocked,
.\" ftell_unlocked, fwrite_unlocked, getc_unlocked, getchar_unlocked,
.\" getw_unlocked, getwc_unlocked, getwchar_unlocked, putc_unlocked,
.\" putchar_unlocked, puts_unlocked, putws_unlocked, putw_unlocked,
.\" putwc_unlocked, putwchar_unlocked, rewind_unlocked, setvbuf_unlocked,
.\" ungetc_unlocked, ungetwc_unlocked.
非标准 \fB*_unlocked\fP() 变体出现在一些 UNIX 系统上，并且在最近的 glibc 中可用。 它们可能不应该被使用。
.SH "SEE ALSO"
\fBflockfile\fP(3), \fBstdio\fP(3)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
