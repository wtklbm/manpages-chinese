.\" -*- coding: UTF-8 -*-
'\" t
.\" Copyright (C), 1995, Graeme W. Wilford. (Wilf.)
.\"
.\" SPDX-License-Identifier: Linux-man-pages-copyleft
.\"
.\" Wed Jun 14 16:10:28 BST 1995 Wilf. (G.Wilford@ee.surrey.ac.uk)
.\" Tiny change in formatting - aeb, 950812
.\" Modified 8 May 1998 by Joseph S. Myers (jsm28@cam.ac.uk)
.\"
.\" show the synopsis section nicely
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH regex 3 2023\-02\-05 "Linux man\-pages 6.03" 
.SH NAME
regcomp, regexec, regerror, regfree \- POSIX regex functions
.SH LIBRARY
标准 C 库 (\fIlibc\fP、\fI\-lc\fP)
.SH SYNOPSIS
.nf
\fB#include <regex.h>\fP
.PP
\fBint regcomp(regex_t *restrict \fP\fIpreg\fP\fB, const char *restrict \fP\fIregex\fP\fB,\fP
\fB            int \fP\fIcflags\fP\fB);\fP
\fBint regexec(const regex_t *restrict \fP\fIpreg\fP\fB, const char *restrict \fP\fIstring\fP\fB,\fP
\fB            size_t \fP\fInmatch\fP\fB, regmatch_t \fP\fIpmatch\fP\fB[restrict .\fP\fInmatch\fP\fB],\fP
\fB            int \fP\fIeflags\fP\fB);\fP
.PP
\fBsize_t regerror(int \fP\fIerrcode\fP\fB, const regex_t *restrict \fP\fIpreg\fP\fB,\fP
\fB            char \fP\fIerrbuf\fP\fB[restrict .\fP\fIerrbuf_size\fP\fB], size_t \fP\fIerrbuf_size\fP\fB);\fP
\fBvoid regfree(regex_t *\fP\fIpreg\fP\fB);\fP
.fi
.SH DESCRIPTION
.SS "POSIX regex compiling"
\fBregcomp\fP() 用于将正则表达式编译成适合后续 \fBregexec\fP() 搜索的形式。
.PP
\fBregcomp\fP() 随 \fIpreg\fP 提供，指向模式缓冲区存储区的指针; \fIregex\fP，指向空终止字符串的指针和
\fIcflags\fP，用于确定编译类型的标志。
.PP
所有正则表达式搜索都必须通过已编译的模式缓冲区来完成，因此必须始终为 \fBregexec\fP() 提供 \fBregcomp\fP()\-initialized
模式缓冲区的地址。
.PP
\fIcflags\fP 是以下零个或多个的 bitwise\-\fBor\fP:
.TP 
\fBREG_EXTENDED\fP
解释 \fIregex\fP 时使用 \fBPOSIX\fP 扩展正则表达式语法。 如果未设置，则使用 \fBPOSIX\fP 基本正则表达式语法。
.TP 
\fBREG_ICASE\fP
不区分大小写。 使用此模式缓冲区的后续 \fBregexec\fP() 搜索将不区分大小写。
.TP 
\fBREG_NOSUB\fP
不要报告火柴的位置。 如果提供的模式缓冲区是使用此标志集编译的，则忽略 \fInmatch\fP 和 \fIpmatch\fP 到 \fBregexec\fP()
的参数。
.TP 
\fBREG_NEWLINE\fP
Match\-any\-character 运算符不匹配换行符。
.IP
不包含换行符的非匹配列表 (\fB[\[ha]...]\fP) 不匹配换行符。
.IP
行首匹配运算符 (\fB\[ha]\fP) 匹配换行符后的空字符串，而不管 \fIeflags\fP、\fBregexec\fP() 的执行标志是否包含
\fBREG_NOTBOL\fP。
.IP
匹配行尾运算符 (\fB$\fP) 匹配换行符之前的空字符串，无论 \fIeflags\fP 是否包含 \fBREG_NOTEOL\fP。
.SS "POSIX regex matching"
\fBregexec\fP() 用于将空终止字符串与预编译模式缓冲区 \fIpreg\fP 进行匹配。 \fInmatch\fP 和 \fIpmatch\fP
用于提供有关任何匹配项位置的信息。 \fIeflags\fP 是零个或多个以下标志的 bitwise\-\fBor\fP:
.TP 
\fBREG_NOTBOL\fP
match\-beginning\-of\-line 运算符总是匹配失败 (但请参见上面的编译标志 \fBREG_NEWLINE\fP)。 当字符串的不同部分传递给
\fBregexec\fP() 并且字符串的开头不应被解释为行的开头时，可以使用此标志。
.TP 
\fBREG_NOTEOL\fP
match\-end\-of\-line 运算符总是匹配失败 (但见上面的编译标志 \fBREG_NEWLINE\fP)。
.TP 
\fBREG_STARTEND\fP
在输入字符串上使用 \fIpmatch[0]\fP，从字节 \fIpmatch[0].rm_so\fP 开始，在字节 \fIpmatch[0].rm_eo\fP
之前结束。 这允许匹配嵌入的 NUL 字节并避免在大字符串上出现 \fBstrlen\fP(3)。 它不在输入上使用 \fInmatch\fP，也不更改
\fBREG_NOTBOL\fP 或 \fBREG_NEWLINE\fP 处理。 此标志是 BSD 扩展，不存在于 POSIX 中。
.SS "Byte offsets"
除非为模式缓冲区的编译设置 \fBREG_NOSUB\fP，否则可以获得匹配寻址信息。 \fIpmatch\fP 的尺寸必须至少包含 \fInmatch\fP 元素。
这些由 \fBregexec\fP() 和子串匹配地址填充。 从 \fIi\fPth 左括号开始的子表达式的偏移量存储在 \fIpmatch[i]\fP 中。
整个正则表达式的匹配地址存放在 \fIpmatch[0]\fP 中。 (请注意，要返回 \fIN\fP 子表达式匹配项的偏移量，\fInmatch\fP 必须至少为
\fIN+1\fP.)。任何未使用的结构体元素将包含值 \-1。
.PP
在 \fI<regex.h>\fP 中定义了 \fIpmatch\fP 类型的 \fIregmatch_t\fP 结构体。
.PP
.in +4n
.EX
typedef 结构体 {
    regoff_t rm_so;
    regoff_t rm_eo;
} regmatch_t;
.EE
.in
.PP
每个不是 \-1 的 \fIrm_so\fP 元素都表示字符串中下一个最大子字符串匹配的起始偏移量。 相对 \fIrm_eo\fP
元素表示匹配的结束偏移量，即匹配文本后第一个字符的偏移量。
.SS "POSIX error reporting"
\fBregerror\fP() 用于将 \fBregcomp\fP() 和 \fBregexec\fP() 都可以返回的错误码转为错误信息字符串。
.PP
\fBregerror\fP() 传递了错误代码 \fIerrcode\fP、模式缓冲区 \fIpreg\fP、指向字符串缓冲区的指针 \fIerrbuf\fP
和字符串缓冲区的大小 \fIerrbuf_size\fP。 它返回包含以 null 结尾的错误消息字符串所需的 \fIerrbuf\fP 的大小。 如果
\fIerrbuf\fP 和 \fIerrbuf_size\fP 均非零，则 \fIerrbuf\fP 将填充错误消息的前 \fIerrbuf_size \- 1\fP
字符和终止空字节 (\[aq]\e0\[aq])。
.SS "POSIX pattern buffer freeing"
为 \fBregfree\fP() 提供预编译模式缓冲区 \fIpreg\fP 将释放编译进程 \fBregcomp\fP() 分配给模式缓冲区的内存。
.SH "RETURN VALUE"
\fBregcomp\fP() 为编译成功返回零或为失败返回错误代码。
.PP
\fBregexec\fP() 为匹配成功返回零，或为失败返回 \fBREG_NOMATCH\fP。
.SH ERRORS
\fBregcomp\fP(): 可以返回如下错误
.TP 
\fBREG_BADBR\fP
反向引用运算符的使用无效。
.TP 
\fBREG_BADPAT\fP
组或列表等模式运算符的使用无效。
.TP 
\fBREG_BADRPT\fP
重复运算符的使用无效，例如使用 \[aq]*\[aq] 作为第一个字符。
.TP 
\fBREG_EBRACE\fP
不匹配的括号区间运算符。
.TP 
\fBREG_EBRACK\fP
不匹配的括号列表运算符。
.TP 
\fBREG_ECOLLATE\fP
无效的整理元素。
.TP 
\fBREG_ECTYPE\fP
未知的字符类名称。
.TP 
\fBREG_EEND\fP
非特异性错误。 这不是由 POSIX.2 定义的。
.TP 
\fBREG_EESCAPE\fP
尾随反斜杠。
.TP 
\fBREG_EPAREN\fP
不匹配的括号组运算符。
.TP 
\fBREG_ERANGE\fP
范围运算符的使用无效; 例如，范围的终点出现在起点之前。
.TP 
\fBREG_ESIZE\fP
已编译的正则表达式需要大于 64\kB 的模式缓冲区。 这不是由 POSIX.2 定义的。
.TP 
\fBREG_ESPACE\fP
regex 例程内存不足。
.TP 
\fBREG_ESUBREG\fP
对子表达式的反向引用无效。
.SH ATTRIBUTES
有关本节中使用的术语的解释，请参见 \fBattributes\fP(7)。
.ad l
.nh
.TS
allbox;
lbx lb lb
l l l.
Interface	Attribute	Value
T{
\fBregcomp\fP(),
\fBregexec\fP()
T}	Thread safety	MT\-Safe locale
T{
\fBregerror\fP()
T}	Thread safety	MT\-Safe env
T{
\fBregfree\fP()
T}	Thread safety	MT\-Safe
.TE
.hy
.ad
.sp 1
.SH STANDARDS
POSIX.1\-2001, POSIX.1\-2008.
.SH EXAMPLES
.EX
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <regex.h>

#define ARRAY_SIZE(arr) (sizeof((arr)) / sizeof((arr)[0]))

static const char *const str =
        "1) John Driverhacker;\en2) John Doe;\en3) John Foo;\en";
static const char *const re = "John.*o";

int main(void)
{
    static const char *s = str;
    regex_t     regex;
    regmatch_t  pmatch[1];
    regoff_t    off, len;

    if (regcomp(&regex, re, REG_NEWLINE))
        exit(EXIT_FAILURE);

    printf("String = \e"%s\e"\en", str);
    printf("Matches:\en");

    for (unsigned int i = 0; ; i++) {
        if (regexec(&regex, s, ARRAY_SIZE(pmatch), pmatch, 0))
            break;

        off = pmatch[0].rm_so + (s \- str);
        len = pmatch[0].rm_eo \- pmatch[0].rm_so;
        printf("#%zu:\en", i);
        printf("offset = %jd; length = %jd\en", (intmax_t) off,
                (intmax_t) len);
        printf("substring = \e"%.*s\e"\en", len, s + pmatch[0].rm_so);

        s += pmatch[0].rm_eo;
    }

    exit(EXIT_SUCCESS);
}
.EE
.SH "SEE ALSO"
\fBgrep\fP(1), \fBregex\fP(7)
.PP
The glibc manual section, \fIRegular Expressions\fP
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
