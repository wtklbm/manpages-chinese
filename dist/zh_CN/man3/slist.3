.\" -*- coding: UTF-8 -*-
.\" Copyright (c) 1993
.\"    The Regents of the University of California.  All rights reserved.
.\" and Copyright (c) 2020 by Alejandro Colomar <alx@kernel.org>
.\"
.\" SPDX-License-Identifier: BSD-3-Clause
.\"
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH SLIST 3 2022\-10\-30 "Linux man\-pages 6.03" 
.SH NAME
.\"SLIST_FOREACH_FROM,
.\"SLIST_FOREACH_FROM_SAFE,
.\"SLIST_FOREACH_SAFE,
.\"SLIST_REMOVE_AFTER,
.\"SLIST_SWAP
SLIST_EMPTY, SLIST_ENTRY, SLIST_FIRST, SLIST_FOREACH, SLIST_HEAD,
SLIST_HEAD_INITIALIZER, SLIST_INIT, SLIST_INSERT_AFTER, SLIST_INSERT_HEAD,
SLIST_NEXT, SLIST_REMOVE, SLIST_REMOVE_HEAD \- 单链表的实现
.SH LIBRARY
标准 C 库 (\fIlibc\fP、\fI\-lc\fP)
.SH SYNOPSIS
.nf
\fB#include <sys/queue.h>\fP
.PP
\fBSLIST_ENTRY(TYPE);\fP
.PP
\fBSLIST_HEAD(HEADNAME, TYPE);\fP
\fBSLIST_HEAD SLIST_HEAD_INITIALIZER(SLIST_HEAD \fP\fIhead\fP\fB);\fP
\fBvoid SLIST_INIT(SLIST_HEAD *\fP\fIhead\fP\fB);\fP
.PP
\fBint SLIST_EMPTY(SLIST_HEAD *\fP\fIhead\fP\fB);\fP
.PP
\fBvoid SLIST_INSERT_HEAD(SLIST_HEAD *\fP\fIhead\fP\fB,\fP
\fB                        struct TYPE *\fP\fIelm\fP\fB, SLIST_ENTRY \fP\fINAME\fP\fB);\fP 
\fBvoid SLIST_INSERT_AFTER(struct TYPE *\fP\fIlistelm\fP\fB,\fP
\fB                        struct TYPE *\fP\fIelm\fP\fB, SLIST_ENTRY \fP\fINAME\fP\fB);\fP
.PP
\fBstruct TYPE *SLIST_FIRST(SLIST_HEAD *\fP\fIhead\fP\fB);\fP
\fBstruct TYPE *SLIST_NEXT(struct TYPE *\fP\fIelm\fP\fB, SLIST_ENTRY \fP\fINAME\fP\fB);\fP
.PP
.\" .BI "SLIST_FOREACH_FROM(struct TYPE *" var ", SLIST_HEAD *" head ,
.\" .BI "                        SLIST_ENTRY " NAME );
.\" .PP
.\" .BI "SLIST_FOREACH_SAFE(struct TYPE *" var ", SLIST_HEAD *" head ,
.\" .BI "                        SLIST_ENTRY " NAME ", struct TYPE *" temp_var );
.\" .BI "SLIST_FOREACH_FROM_SAFE(struct TYPE *" var ", SLIST_HEAD *" head ,
.\" .BI "                        SLIST_ENTRY " NAME ", struct TYPE *" temp_var );
\fBSLIST_FOREACH(struct TYPE *\fP\fIvar\fP\fB, SLIST_HEAD *\fP\fIhead\fP\fB, SLIST_ENTRY \fP\fINAME\fP\fB);\fP
.PP
.\" .BI "void SLIST_REMOVE_AFTER(struct TYPE *" elm ,
.\" .BI "                        SLIST_ENTRY " NAME );
.\" .PP
.\" .BI "void SLIST_SWAP(SLIST_HEAD *" head1 ", SLIST_HEAD *" head2 ,
.\" .BI "                        SLIST_ENTRY " NAME );
\fBvoid SLIST_REMOVE(SLIST_HEAD *\fP\fIhead\fP\fB, struct TYPE *\fP\fIelm\fP\fB,\fP
\fB                        SLIST_ENTRY \fP\fINAME\fP\fB);\fP
\fBvoid SLIST_REMOVE_HEAD(SLIST_HEAD *\fP\fIhead\fP\fB,\fP
\fB                        SLIST_ENTRY \fP\fINAME\fP\fB);\fP
.fi
.SH DESCRIPTION
这些宏定义双向链表并对其进行操作。
.PP
在宏定义中，\fITYPE\fP 是用户定义的结构体的名称，它必须包含一个 \fISLIST_ENTRY\fP 类型的字段，名为 \fINAME\fP。 参数
\fIHEADNAME\fP 是必须使用宏 \fBSLIST_HEAD\fP() 声明的用户定义结构体的名称。
.SS Creation
单向链表以 \fBSLIST_HEAD\fP() 宏定义的结构体为首。 这个结构体包含一个指向列表中第一个元素的指针。
这些元素被单独链接以最小化空间和指针操作开销，但以删除任意元素的 O(n) 为代价。 新元素可以添加到列表中现有元素之后或列表的头部。
\fISLIST_HEAD\fP 结构体声明如下:
.PP
.in +4
.EX
SLIST_HEAD(HEADNAME, TYPE) 头;
.EE
.in
.PP
其中 \fIstruct HEADNAME\fP 是要定义的结构体，\fIstruct TYPE\fP 是要链接到列表中的元素的类型。
指向列表头部的指针稍后可以声明为:
.PP
.in +4
.EX
struct HEADNAME *headp;
.EE
.in
.PP
(名称 \fIhead\fP 和 \fIheadp\fP 可由用户选择。)
.PP
\fBSLIST_ENTRY\fP() 声明了一个连接列表中元素的结构体。
.PP
\fBSLIST_HEAD_INITIALIZER\fP() 的计算结果为列表 \fIhead\fP 的初始化。
.PP
\fBSLIST_INIT\fP() 初始化 \fIhead\fP 引用的列表。
.PP
如果列表中没有元素，则 \fBSLIST_EMPTY\fP() 的计算结果为 true。
.SS Insertion
\fBSLIST_INSERT_HEAD\fP() 在列表的头部插入新元素 \fIelm\fP。
.PP
\fBSLIST_INSERT_AFTER\fP() 在元素 \fIlistelm\fP 之后插入新元素 \fIelm\fP。
.SS Traversal
\fBSLIST_FIRST\fP() 返回列表中的第一个元素，如果列表为空则返回 NULL。
.PP
\fBSLIST_NEXT\fP() 返回列表中的下一个元素。
.PP
.\" .PP
.\" .BR SLIST_FOREACH_FROM ()
.\" behaves identically to
.\" .BR SLIST_FOREACH ()
.\" when
.\" .I var
.\" is NULL, else it treats
.\" .I var
.\" as a previously found SLIST element and begins the loop at
.\" .I var
.\" instead of the first element in the SLIST referenced by
.\" .IR head .
.\" .Pp
.\" .BR SLIST_FOREACH_SAFE ()
.\" traverses the list referenced by
.\" .I head
.\" in the forward direction, assigning each element in
.\" turn to
.\" .IR var .
.\" However, unlike
.\" .BR SLIST_FOREACH ()
.\" here it is permitted to both remove
.\" .I var
.\" as well as free it from within the loop safely without interfering with the
.\" traversal.
.\" .PP
.\" .BR SLIST_FOREACH_FROM_SAFE ()
.\" behaves identically to
.\" .BR SLIST_FOREACH_SAFE ()
.\" when
.\" .I var
.\" is NULL, else it treats
.\" .I var
.\" as a previously found SLIST element and begins the loop at
.\" .I var
.\" instead of the first element in the SLIST referenced by
.\" .IR head .
\fBSLIST_FOREACH\fP() 正向遍历 \fIhead\fP 引用的链表，依次将每个元素赋值给 \fIvar\fP。
.SS Removal
\fBSLIST_REMOVE\fP() 从列表中删除元素 \fIelm\fP。
.PP
.\" .PP
.\" .BR SLIST_REMOVE_AFTER ()
.\" removes the element after
.\" .I elm
.\" from the list.
.\" Unlike
.\" .IR SLIST_REMOVE ,
.\" this macro does not traverse the entire list.
.\" .SS Other features
.\" .BR SLIST_SWAP ()
.\" swaps the contents of
.\" .I head1
.\" and
.\" .IR head2 .
\fBSLIST_REMOVE_HEAD\fP() 从列表的头部删除元素 \fIelm\fP。 为了获得最佳效率，从列表头部删除的元素应明确使用此宏而不是泛型
\fBSLIST_REMOVE\fP()。
.SH "RETURN VALUE"
如果列表为空，则 \fBSLIST_EMPTY\fP() 返回非零; 如果列表至少包含一个条目，则返回零。
.PP
\fBSLIST_FIRST\fP() 和 \fBSLIST_NEXT\fP() 分别返回指向第一个或下一个 \fITYPE\fP 结构体的指针。
.PP
\fBSLIST_HEAD_INITIALIZER\fP() 返回一个可以分配给列表 \fIhead\fP 的初始化。
.SH STANDARDS
不在 POSIX.1、POSIX.1\-2001 或 POSIX.1\-2008 中。 出现在 BSD 上 (SLIST 宏首次出现在 4.4BSD 中)。
.SH BUGS
\fBSLIST_FOREACH\fP() 不允许在循环内删除或释放 \fIvar\fP，因为它会干扰遍历。 \fBSLIST_FOREACH_SAFE\fP() 存在于
BSD 中但不存在于 glibc 中，它通过允许 \fIvar\fP 安全地从列表中删除并从循环中释放而不干扰遍历来修复此限制。
.SH EXAMPLES
.\" SRC BEGIN (slist.c)
.EX
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/queue.h>

struct entry {
    int data;
    SLIST_ENTRY(entry) entries;             /* Singly linked list */
};

SLIST_HEAD(slisthead, entry);

int
main(void)
{
    struct entry *n1, *n2, *n3, *np;
    struct slisthead head;                   /* Singly linked list
                                               head */

    SLIST_INIT(&head);                      /* Initialize the queue */

    n1 = malloc(sizeof(struct entry));      /* Insert at the head */
    SLIST_INSERT_HEAD(&head, n1, entries);

    n2 = malloc(sizeof(struct entry));      /* Insert after */
    SLIST_INSERT_AFTER(n1, n2, entries);

    SLIST_REMOVE(&head, n2, entry, entries);/* Deletion */
    free(n2);

    n3 = SLIST_FIRST(&head);
    SLIST_REMOVE_HEAD(&head, entries);      /* Deletion from the head */
    free(n3);

    for (unsigned int i = 0; i < 5; i++) {
        n1 = malloc(sizeof(struct entry));
        SLIST_INSERT_HEAD(&head, n1, entries);
        n1\->data = i;
    }

                                            /* Forward traversal */
    SLIST_FOREACH(np, &head, entries)
        printf("%i\en", np\->data);

    while (!SLIST_EMPTY(&head)) {           /* List deletion */
        n1 = SLIST_FIRST(&head);
        SLIST_REMOVE_HEAD(&head, entries);
        free(n1);
    }
    SLIST_INIT(&head);

    exit(EXIT_SUCCESS);
}
.EE
.\" SRC END
.SH "SEE ALSO"
\fBinsque\fP(3), \fBqueue\fP(7)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
