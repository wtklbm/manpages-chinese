.\" -*- coding: UTF-8 -*-
'\" t
.\" Copyright 1993 Mitchum DSouza <m.dsouza@mrc-apu.cam.ac.uk>
.\"
.\" SPDX-License-Identifier: Linux-man-pages-copyleft
.\"
.\" Modified, jmv@lucifer.dorms.spbu.ru, 1999-11-08
.\" Modified, aeb, 2000-04-07
.\" Updated from glibc docs, C. Scott Ananian, 2001-08-25
.\" Modified, aeb, 2001-08-31
.\" Modified, wharms 2001-11-12, remark on white space and example
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH strptime 3 2023\-02\-05 "Linux man\-pages 6.03" 
.SH NAME
strptime \- 将时间的字符串表示形式转换为时间 tm 结构体
.SH LIBRARY
标准 C 库 (\fIlibc\fP、\fI\-lc\fP)
.SH SYNOPSIS
.nf
\fB#define _XOPEN_SOURCE\fP       /* See feature_test_macros(7) */
\fB#include <time.h>\fP
.PP
\fBchar *strptime(const char *restrict \fP\fIs\fP\fB, const char *restrict \fP\fIformat\fP\fB,\fP
\fB               struct tm *restrict \fP\fItm\fP\fB);\fP
.fi
.SH DESCRIPTION
\fBstrptime\fP() 函数是 \fBstrftime\fP(3) 的逆数; 它将 \fIs\fP 指向的字符串转换为存储在 \fItm\fP 指向的
"broken\-down time" 结构体中的值，使用 \fIformat\fP 指定的格式。
.PP
分解时间结构体 \fItm\fP 在 \fBtm\fP(3type) 中描述。
.PP
\fIformat\fP 参数是由字段描述符和文本字符组成的字符串，让人联想到 \fBscanf\fP(3)。 每个字段描述符都包含一个 \fB%\fP
字符，后跟另一个指定字段描述符替换的字符。 \fIformat\fP
字符串中的所有其他字符必须在输入字符串中具有匹配字符，但空白除外，它与输入字符串中的零个或多个空白字符匹配。 任何两个字段描述符之间应该有
white\%space 或其他字母数字字符。
.PP
\fBstrptime\fP() 函数从左到右处理输入字符串。 三个可能的输入元素 (空白、字符值或格式) 中的每一个都被一个接一个地处理。
如果输入不能与格式字符串匹配，则函数停止。 不处理格式和输入字符串的其余部分。
.PP
下面列出了支持的输入字段描述符。 如果要匹配文本字符串 (例如星期几的名称或月份名称)，则比较不区分大小写。 如果要匹配数字，则允许但不是必需的前导零。
.TP 
\fB%%\fP
\fB%\fP 字符。
.TP 
\fB%a\fP or \fB%A\fP
根据当前区域设置的星期几的名称，缩写形式或全名。
.TP 
\fB%b\fP or \fB%B\fP or \fB%h\fP
根据当前语言环境的月份名称，缩写形式或全名。
.TP 
\fB%c\fP
当前语言环境的日期和时间表示。
.TP 
\fB%C\fP
世纪编号 (0\[en]99)。
.TP 
\fB%d\fP or \fB%e\fP
(1\[en]31) 月的第几天。
.TP 
\fB%D\fP
相当于 \fB%m/%d/%y\fP。 (这是美国风格的日期，非美国人很容易混淆，尤其是 \fB%d/%m/%y\fP 在欧洲被广泛使用。ISO 8601
标准格式是 \fB%Y\-%m\-%d\fP.)
.TP 
\fB%H\fP
小时 (0\[en]23)。
.TP 
\fB%I\fP
12 小时制 (1\[en]12) 上的小时。
.TP 
\fB%j\fP
(1\[en]366) 年的天数。
.TP 
\fB%m\fP
月份编号 (1\[en]12)。
.TP 
\fB%M\fP
分钟 (0\[en]59)。
.TP 
\fB%n\fP
任意空格。
.TP 
\fB%p\fP
语言环境相当于 AM 或 PM。 (注意: 可能没有。)
.TP 
\fB%r\fP
12 小时制时间 (使用区域设置的 AM 或 PM)。 在等同于 \fB%I:%M:%S %p\fP 的 POSIX 语言环境中。 如果当前语言环境的
\fBLC_TIME\fP 部分的 \fIt_fmt_ampm\fP 为空，则行为未定义。
.TP 
\fB%R\fP
相当于 \fB%H:%M\fP。
.TP 
\fB%S\fP
第二个 (0\[en] 60; 闰秒可能出现 60; 之前也允许使用 61)。
.TP 
\fB%t\fP
任意空格。
.TP 
\fB%T\fP
相当于 \fB%H:%M:%S\fP。
.TP 
\fB%U\fP
周数以星期日为一周的第一天 (0\[en]53)。 一月的第一个星期日是一周的第一天 1.
.TP 
\fB%w\fP
星期几的序号 (0\[en]6)，星期日 = 0.
.TP 
\fB%W\fP
周数以星期一为一周的第一天 (0\[en]53)。 一月的第一个星期一是一周的第一天 1.
.TP 
\fB%x\fP
日期，使用语言环境的日期格式。
.TP 
\fB%X\fP
时间，使用语言环境的时间格式。
.TP 
\fB%y\fP
(0\[en]99) 世纪内的年份。 如果世纪未另行指定，则 69\[en] 99 范围内的值指的是二十世纪 (1969\[en]1999) 中的年份;
00\[en] 68 范围内的值指的是二十一世纪 (2000\[en]2068) 中的年份。
.TP 
\fB%Y\fP
年份，包括世纪 (例如，1991)。
.PP
一些字段描述符可以通过 E 或 O 修饰符字符进行修改，以指示应使用替代格式或规范。 如果当前语言环境中不存在替代格式或规范，则使用未修改的字段描述符。
.PP
E 修饰符指定输入字符串可能包含日期和时间表示的替代语言环境相关版本:
.TP 
\fB%Ec\fP
语言环境的替代日期和时间表示。
.TP 
\fB%EC\fP
以区域设置的替代表示形式表示的基准年 (period) 的名称。
.TP 
\fB%Ex\fP
语言环境的替代日期表示。
.TP 
\fB%EX\fP
语言环境的替代时间表示。
.TP 
\fB%Ey\fP
在区域设置的替代表示中与 \fB%EC\fP (仅限年份) 的偏移量。
.TP 
\fB%EY\fP
完整的替代年份表示。
.PP
O 修饰符指定数字输入可以是另一种依赖于语言环境的格式:
.TP 
\fB%Od\fP or \fB%Oe\fP
使用语言环境的替代数字符号的月份中的第几天; 前导零是允许的，但不是必需的。
.TP 
\fB%OH\fP
使用区域设置的替代数字符号的小时 (24 小时制)。
.TP 
\fB%OI\fP
使用区域设置的替代数字符号的小时 (12 小时制)。
.TP 
\fB%Om\fP
使用区域设置的替代数字符号的月份。
.TP 
\fB%OM\fP
使用区域设置的替代数字符号的分钟。
.TP 
\fB%OS\fP
使用区域设置的替代数字符号的秒数。
.TP 
\fB%OU\fP
使用区域设置的替代数字符号的一年中的周数 (星期日作为一周的第一天)。
.TP 
\fB%Ow\fP
星期几的序号 (Sunday=0)，使用区域设置的替代数字符号。
.TP 
\fB%OW\fP
使用区域设置的替代数字符号的一年中的周数 (星期一作为一周的第一天)。
.TP 
\fB%Oy\fP
年份 (使用区域设置的替代数字符号从 \fB%C\fP) 偏移。
.SH "RETURN VALUE"
函数的返回值是指向在此函数调用中未处理的第一个字符的指针。 如果输入字符串包含的字符多于格式字符串所需的字符，则返回值指向最后一个使用的输入字符之后。
如果整个输入字符串都被消耗掉，则返回值指向字符串末尾的空字节。 如果 \fBstrptime\fP() 未能匹配所有格式字符串并因此发生错误，则函数返回
NULL。
.SH ATTRIBUTES
有关本节中使用的术语的解释，请参见 \fBattributes\fP(7)。
.ad l
.nh
.TS
allbox;
lbx lb lb
l l l.
Interface	Attribute	Value
T{
\fBstrptime\fP()
T}	Thread safety	MT\-Safe env locale
.TE
.hy
.ad
.sp 1
.SH STANDARDS
POSIX.1\-2001, POSIX.1\-2008, SUSv2.
.SH NOTES
.\" .PP
.\" This function is available since libc 4.6.8.
.\" Linux libc4 and libc5 includes define the prototype unconditionally;
.\" glibc2 includes provide a prototype only when
.\" .B _XOPEN_SOURCE
.\" or
.\" .B _GNU_SOURCE
.\" are defined.
.\" .PP
.\" Before libc 5.4.13 whitespace
.\" (and the \[aq]n\[aq] and \[aq]t\[aq] specifications) was not handled,
.\" no \[aq]E\[aq] and \[aq]O\[aq] locale modifier characters were accepted,
.\" and the \[aq]C\[aq] specification was a synonym for the \[aq]c\[aq] specification.
原则上，这个函数不初始化 \fItm\fP，而只存储指定的值。 这意味着 \fItm\fP 应该在调用之前初始化。 不同 UNIX 系统之间的细节略有不同。
glibc 实现不会触及那些未明确指定的字段，除非它在年、月或日元素中的任何一个发生更改时重新计算 \fItm_wday\fP 和 \fItm_yday\fP
字段。
.PP
.\" in the 20th century by libc4 and libc5.
.\" It is taken to be a year
.\" In libc4 and libc5 the code for %I is broken (fixed in glibc;
.\" %OI was fixed in glibc 2.2.4).
glibc 2.0 采用 \[aq] y\[aq] (世纪年) 规范来指定 1950\[en] 2049 范围内的年份。 从 glibc 2.1
开始，它被认为是 1969\[en] 2068 年。
.SS "glibc notes"
出于对称的原因，glibc 尝试为 \fBstrptime\fP() 支持与 \fBstrftime\fP(3) 相同的格式字符。
(大多数情况下，对应的字段被解析，但 \fItm\fP 中的字段没有改变。) 这导致
.TP 
\fB%F\fP
相当于 \fB%Y\-%m\-%d\fP，ISO 8601 日期格式。
.TP 
\fB%g\fP
对应于 ISO 周数的年份，但没有世纪 (0\[en]99)。
.TP 
\fB%G\fP
对应于 ISO 周数的年份。 (例如，1991 年。)
.TP 
\fB%u\fP
以十进制数表示的星期几 (1\[en] 7，其中星期一 = 1)。
.TP 
\fB%V\fP
ISO 8601:1988 周数为十进制数 (1\[en]53)。 如果包含 1 月 1 日的那一周 (从星期一开始)
在新的一年中有四天或更多天，那么它被认为是第 1 周。 否则为上年最后一周，下周为周 1.
.TP 
\fB%z\fP
RFC\-822/ISO 8601 标准时区规范。
.TP 
\fB%Z\fP
时区名称。
.PP
同样，由于 \fBstrftime\fP(3) 的 GNU 扩展，\fB%k\fP 被接受为 \fB%H\fP 的同义词，\fB%l\fP 被接受为 \fB%I\fP
的同义词，\fB%P\fP 被接受为 \fB%p\fP 的同义词。 Finally
.TP 
\fB%s\fP
自纪元 1970\-01\-01 00:00:00 +0000 (UTC) 以来的秒数。 除非闰秒支持可用，否则不计算闰秒。
.PP
glibc 实现不需要两个字段描述符之间的空格。
.SH EXAMPLES
下面的例子演示了 \fBstrptime\fP() 和 \fBstrftime\fP(3) 的使用。
.PP
.\" SRC BEGIN (strptime.c)
.EX
#define _XOPEN_SOURCE
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

int
main(void)
{
    struct tm tm;
    char buf[255];

    memset(&tm, 0, sizeof(tm));
    strptime("2001\-11\-12 18:31:01", "%Y\-%m\-%d %H:%M:%S", &tm);
    strftime(buf, sizeof(buf), "%d %b %Y %H:%M", &tm);
    puts(buf);
    exit(EXIT_SUCCESS);
}
.EE
.\" SRC END
.SH "SEE ALSO"
\fBtime\fP(2), \fBgetdate\fP(3), \fBscanf\fP(3), \fBsetlocale\fP(3), \fBstrftime\fP(3)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
