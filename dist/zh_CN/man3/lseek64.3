.\" -*- coding: UTF-8 -*-
'\" t
.\" Copyright 2004 Andries Brouwer <aeb@cwi.nl>.
.\" and Copyright (c) 2020 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" SPDX-License-Identifier: Linux-man-pages-copyleft
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH lseek64 3 2022\-12\-15 "Linux man\-pages 6.03" 
.SH NAME
lseek64 \- 重新定位 64 位 read/write 文件偏移量
.SH LIBRARY
标准 C 库 (\fIlibc\fP、\fI\-lc\fP)
.SH SYNOPSIS
.nf
\fB#define _LARGEFILE64_SOURCE\fP     /* See feature_test_macros(7) */
\fB#include <sys/types.h>\fP
\fB#include <unistd.h>\fP
.PP
\fBoff64_t lseek64(int \fP\fIfd\fP\fB, off64_t \fP\fIoffset\fP\fB, int \fP\fIwhence\fP\fB);\fP
.fi
.SH DESCRIPTION
当 \fIwhence\fP 的值分别为 \fBSEEK_SET\fP、\fBSEEK_CUR\fP 或 \fBSEEK_END\fP 时，\fBlseek\fP()
系列的函数将与文件描述符 \fIfd\fP 关联的打开文件的偏移量重新定位为相对于文件的开始、当前位置或结尾的 \fIoffset\fP 字节。
.PP
有关详细信息、返回值和错误，请参见 \fBlseek\fP(2)。
.PP
.\"
.\" For some background details, see:
.\" https://lore.kernel.org/linux-man/CAKgNAkhNSWR3uYhYYaxx74fZfJ3JrpfAAPVrK0AFk_cAOUsbDg@mail.gmail.com/
.\"
有四种接口可供选择: \fBlseek\fP()、\fBlseek64\fP()、\fBllseek\fP() 和 \fB_llseek\fP()。
.SS lseek()
Prototype:
.PP
.in +4n
.EX
\fBoff_t lseek(int \fP\fIfd\fP\fB, off_t \fP\fIoffset\fP\fB, int \fP\fIwhence\fP\fB);\fP
.EE
.in
.PP
C 库的 \fBlseek\fP() 包装器函数使用 \fIoff_t\fP 类型。 这是 32 位架构上的 32 位签名类型，除非使用
.PP
.in +4n
.EX
#define _FILE_OFFSET_BITS 64
.EE
.in
.PP
在这种情况下，它是一个 64 位有符号类型。
.SS lseek64()
Prototype:
.PP
.in +4n
.EX
\fBoff64_t lseek64(int \fP\fIfd\fP\fB, off64_t \fP\fIoffset\fP\fB, int \fP\fIwhence\fP\fB);\fP
.EE
.in
.PP
即使 \fIoff_t\fP 是 32 位类型，\fBlseek64\fP() 库函数也使用 64 位类型。 它的原型 (和 \fIoff64_t\fP)
类型只有在编译时才可用
.PP
.in +4n
.EX
#define _LARGEFILE64_SOURCE
.EE
.in
.PP
.\" in glibc 2.0.94, not in glibc 2.0.6
.\"
函数 \fBlseek64\fP() 从 glibc 2.1 开始可用。
.SS llseek()
Prototype:
.PP
.in +4n
.EX
\fBloff_t llseek(int \fP\fIfd\fP\fB, loff_t \fP\fIoffset\fP\fB, int \fP\fIwhence\fP\fB);\fP
.EE
.in
.PP
\fIloff_t\fP 类型是 64 位有符号类型。 \fBllseek\fP() 库函数在 glibc 中可用，无需特殊定义即可工作。 但是，glibc
头文件不提供原型。 用户应将上述原型或等效内容添加到他们自己的源代码中。 当用户抱怨 \fBe2fsck\fP(8) 的错误编译导致数据丢失时，glibc
2.1.3 添加了链接时警告
.PP
.in +4n
"`llseek\' 函数可能是危险的; 使用 `lseek64\' 代替。"
.in
.PP
如果需要无警告编译，这会使这个函数无法使用。
.PP
.\" glibc commit 5c5c0dd747070db624c8e2c43691cec854f114ef
.\"
从 glibc 2.28 开始，这个函数符号不再可用于新链接的应用程序。
.SS _llseek()
在 32 位架构上，这是用于 (由 C 库包装器任数) 实现上述所有任数的系统调用。 原型是:
.PP
.in +4n
.EX
\fBint _llseek(int \fP\fIfd\fP\fB, off_t \fP\fIoffset_hi\fP\fB, off_t \fP\fIoffset_lo\fP\fB,\fP
\fB            loff_t *\fP\fIresult\fP\fB, int \fP\fIwhence\fP\fB);\fP
.EE
.in
.PP
有关详细信息，请参见 \fBllseek\fP(2)。
.PP
.\" In arch/x86/entry/syscalls/syscall_32.tbl,
.\" we see the following line:
.\"
.\"    140     i386    _llseek                 sys_llseek
.\"
.\" This is essentially telling us that 'sys_llseek' (the name generated
.\" by SYSCALL_DEFINE5(llseek...)) is exposed to user-space as system call
.\" number 140, and that system call number will (IIUC) be exposed in
.\" autogenerated headers with the name "__NR__llseek" (i.e., "_llseek").
.\" The "i386" is telling us that this happens in i386 (32-bit Intel).
.\" There is nothing equivalent on x86-64, because 64 bit systems don't
.\" need an _llseek system call.
64 位系统不需要 \fB_llseek\fP() 系统调用。 相反，他们有一个支持 64 位文件偏移量的 \fBlseek\fP(2) 系统调用。
.SH ATTRIBUTES
有关本节中使用的术语的解释，请参见 \fBattributes\fP(7)。
.ad l
.nh
.TS
allbox;
lbx lb lb
l l l.
Interface	Attribute	Value
T{
\fBlseek64\fP()
T}	Thread safety	MT\-Safe
.TE
.hy
.ad
.sp 1
.SH NOTES
\fBlseek64\fP() 是在 1996 年完成的大型文件峰会 (LFS) 规范中指定的函数之一。 该规范的目的是提供过渡支持，允许 32
位系统上的应用程序访问大小超过 32 位 \fIoff_t\fP 类型可以表示的文件。 如上所述，如果定义了 \fB_LARGEFILE64_SOURCE\fP
特性测试宏，则此符号将由头文件公开。 或者，在 32 位系统上，如果宏 \fB_FILE_OFFSET_BITS\fP 定义为值 64，则符号
\fIlseek\fP 被别名为 \fIlseek64\fP。
.SH "SEE ALSO"
\fBllseek\fP(2), \fBlseek\fP(2)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
