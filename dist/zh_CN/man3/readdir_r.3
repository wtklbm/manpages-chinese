.\" -*- coding: UTF-8 -*-
'\" t
.\" Copyright (C) 2008, 2016 Michael Kerrisk <mtk.manpages@gmail.com>
.\" and Copyright (C) 2016 Florian Weimer <fweimer@redhat.com>
.\"
.\" SPDX-License-Identifier: Linux-man-pages-copyleft
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH readdir_r 3 2023\-02\-05 "Linux man\-pages 6.03" 
.SH NAME
readdir_r \- 读取目录
.SH LIBRARY
标准 C 库 (\fIlibc\fP、\fI\-lc\fP)
.SH SYNOPSIS
.nf
\fB#include <dirent.h>\fP
.PP
\fB[[deprecated]] int readdir_r(DIR *restrict \fP\fIdirp\fP\fB,\fP
\fB                             struct dirent *restrict \fP\fIentry\fP\fB,\fP
\fB                             struct dirent **restrict \fP\fIresult\fP\fB);\fP
.fi
.PP
.RS -4
特性测试宏 glibc 的要求 (参见 \fBfeature_test_macros\fP(7)):
.RE
.PP
\fBreaddir_r\fP():
.nf
    _POSIX_C_SOURCE
        || /* glibc <= 2.19: */ _BSD_SOURCE || _SVID_SOURCE
.fi
.SH DESCRIPTION
这个函数已弃用; 请改用 \fBreaddir\fP(3)。
.PP
\fBreaddir_r\fP() 函数是作为 \fBreaddir\fP(3) 的可重入版本而发明的。 它从目录流 \fIdirp\fP
中读取下一个目录条目，并将其返回到 \fIentry\fP 指向的调用者分配的缓冲区中。 有关 \fIdirent\fP 结构体的详细信息，请参见
\fBreaddir\fP(3)。
.PP
指向返回缓冲区的指针放在 \fI*result\fP 中; 如果遇到目录流的末尾，则在 \fI*result\fP 中返回 NULL。
.PP
建议应用程序使用 \fBreaddir\fP(3) 而不是 \fBreaddir_r\fP()。 此外，自 glibc 2.24 以来，glibc 弃用了
\fBreaddir_r\fP()。 原因如下:
.IP \[bu] 3
在 \fBNAME_MAX\fP 未定义的系统上，调用 \fBreaddir_r\fP() 可能不安全，因为接口不允许调用者指定用于返回目录条目的缓冲区的长度。
.IP \[bu]
在某些系统上，\fBreaddir_r\fP() 无法读取名称很长的目录条目。 当 glibc 实现遇到这样的名称时，\fBreaddir_r\fP()
会失败并显示错误 \fBENAMETOOLONG\fP \fIafter the final directory entry has been read\fP。
在某些其他系统上，\fBreaddir_r\fP() 可能会返回成功状态，但返回的 \fId_name\fP 字段可能不会以空值终止或被截断。
.IP \[bu]
在当前的 POSIX.1 规范 (POSIX.1\-2008) 中，不要求 \fBreaddir\fP(3) 是线程安全的。 但是，在现代实现 (包括
glibc 实现) 中，并发调用指定不同目录流的 \fBreaddir\fP(3) 是线程安全的。 因此，在多线程程序中一般不需要使用
\fBreaddir_r\fP()。 在多个线程必须从同一个目录流中读取的情况下，使用带有外部同步的 \fBreaddir\fP(3) 仍然比使用
\fBreaddir_r\fP() 更可取，原因已在上述各点中给出。
.IP \[bu]
.\" FIXME .
.\" http://www.austingroupbugs.net/view.php?id=696
预计 POSIX.1 的 future 版本将使 \fBreaddir_r\fP() 过时，并要求 \fBreaddir\fP(3)
在同时用于不同目录流时是线程安全的。
.SH "RETURN VALUE"
\fBreaddir_r\fP() 函数成功返回 0。 出错时，它返回一个正的错误号 (列在 ERRORS 下)。 如果到达目录流的末尾，则
\fBreaddir_r\fP() 返回 0，并在 \fI*result\fP 中返回 NULL。
.SH ERRORS
.TP 
\fBEBADF\fP
无效的目录流描述符 \fIdirp\fP。
.TP 
\fBENAMETOOLONG\fP
遇到名称太长而无法读取的目录条目。
.SH ATTRIBUTES
有关本节中使用的术语的解释，请参见 \fBattributes\fP(7)。
.ad l
.nh
.TS
allbox;
lbx lb lb
l l l.
Interface	Attribute	Value
T{
\fBreaddir_r\fP()
T}	Thread safety	MT\-Safe
.TE
.hy
.ad
.sp 1
.SH STANDARDS
POSIX.1\-2001, POSIX.1\-2008.
.SH "SEE ALSO"
\fBreaddir\fP(3)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
