.\" -*- coding: UTF-8 -*-
.\" Copyright (c) 1993
.\"	The Regents of the University of California.  All rights reserved.
.\" and Copyright (c) 2020 by Alejandro Colomar <alx@kernel.org>
.\"
.\" SPDX-License-Identifier: BSD-3-Clause
.\"
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH LIST 3 2022\-10\-30 "Linux man\-pages 6.03" 
.SH NAME
.\"LIST_FOREACH_FROM,
.\"LIST_FOREACH_SAFE,
.\"LIST_FOREACH_FROM_SAFE,
.\"LIST_PREV,
.\"LIST_SWAP
LIST_EMPTY, LIST_ENTRY, LIST_FIRST, LIST_FOREACH, LIST_HEAD,
LIST_HEAD_INITIALIZER, LIST_INIT, LIST_INSERT_AFTER, LIST_INSERT_BEFORE,
LIST_INSERT_HEAD, LIST_NEXT, LIST_REMOVE \- 双向链表的实现
.SH LIBRARY
标准 C 库 (\fIlibc\fP、\fI\-lc\fP)
.SH SYNOPSIS
.nf
\fB#include <sys/queue.h>\fP
.PP
\fBLIST_ENTRY(TYPE);\fP
.PP
\fBLIST_HEAD(HEADNAME, TYPE);\fP
\fBLIST_HEAD LIST_HEAD_INITIALIZER(LIST_HEAD \fP\fIhead\fP\fB);\fP
\fBvoid LIST_INIT(LIST_HEAD *\fP\fIhead\fP\fB);\fP
.PP
\fBint LIST_EMPTY(LIST_HEAD *\fP\fIhead\fP\fB);\fP
.PP
\fBvoid LIST_INSERT_HEAD(LIST_HEAD *\fP\fIhead\fP\fB,\fP
\fB                        struct TYPE *\fP\fIelm\fP\fB, LIST_ENTRY \fP\fINAME\fP\fB);\fP  
\fBvoid LIST_INSERT_BEFORE(struct TYPE *\fP\fIlistelm\fP\fB,\fP
\fB                        struct TYPE *\fP\fIelm\fP\fB, LIST_ENTRY \fP\fINAME\fP\fB);\fP
\fBvoid LIST_INSERT_AFTER(struct TYPE *\fP\fIlistelm\fP\fB,\fP
\fB                        struct TYPE *\fP\fIelm\fP\fB, LIST_ENTRY \fP\fINAME\fP\fB);\fP
.PP
.\" .BI "struct TYPE *LIST_PREV(struct TYPE *" elm ", LIST_HEAD *" head ,
.\" .BI "                        struct TYPE, LIST_ENTRY " NAME );
\fBstruct TYPE *LIST_FIRST(LIST_HEAD *\fP\fIhead\fP\fB);\fP
\fBstruct TYPE *LIST_NEXT(struct TYPE *\fP\fIelm\fP\fB, LIST_ENTRY \fP\fINAME\fP\fB);\fP
.PP
.\" .BI "LIST_FOREACH_FROM(struct TYPE *" var ", LIST_HEAD *" head ", LIST_ENTRY " NAME );
.\" .PP
.\" .BI "LIST_FOREACH_SAFE(struct TYPE *" var ", LIST_HEAD *" head ,
.\" .BI "                        LIST_ENTRY " NAME ", struct TYPE *" temp_var );
.\" .BI "LIST_FOREACH_FROM_SAFE(struct TYPE *" var ", LIST_HEAD *" head ,
.\" .BI "                        LIST_ENTRY " NAME ", struct TYPE *" temp_var );
\fBLIST_FOREACH(struct TYPE *\fP\fIvar\fP\fB, LIST_HEAD *\fP\fIhead\fP\fB, LIST_ENTRY \fP\fINAME\fP\fB);\fP
.PP
.\" .PP
.\" .BI "void LIST_SWAP(LIST_HEAD *" head1 ", LIST_HEAD *" head2 ,
.\" .BI "                        struct TYPE, LIST_ENTRY " NAME );
\fBvoid LIST_REMOVE(struct TYPE *\fP\fIelm\fP\fB, LIST_ENTRY \fP\fINAME\fP\fB);\fP
.fi
.SH DESCRIPTION
这些宏定义双向链表并对其进行操作。
.PP
在宏定义中，\fITYPE\fP 是用户定义的结构体的名称，它必须包含一个 \fILIST_ENTRY\fP 类型的字段，名为 \fINAME\fP。 参数
\fIHEADNAME\fP 是必须使用宏 \fBLIST_HEAD\fP() 声明的用户定义结构体的名称。
.SS Creation
列表以 \fBLIST_HEAD\fP() 宏定义的结构体为首。 这个结构体包含一个指向列表中第一个元素的指针。
这些元素是双向链接的，因此可以在不遍历列表的情况下删除任意元素。 新元素可以添加到列表中现有元素之后、现有元素之前或列表头部。 \fILIST_HEAD\fP
结构体声明如下:
.PP
.in +4
.EX
LIST_HEAD(HEADNAME, TYPE) 头;
.EE
.in
.PP
其中 \fIstruct HEADNAME\fP 是要定义的结构体，\fIstruct TYPE\fP 是要链接到列表中的元素的类型。
指向列表头部的指针稍后可以声明为:
.PP
.in +4
.EX
struct HEADNAME *headp;
.EE
.in
.PP
(名称 \fIhead\fP 和 \fIheadp\fP 可由用户选择。)
.PP
\fBLIST_ENTRY\fP() 声明了一个连接列表中元素的结构体。
.PP
\fBLIST_HEAD_INITIALIZER\fP() 的计算结果为列表 \fIhead\fP 的初始化。
.PP
\fBLIST_INIT\fP() 初始化 \fIhead\fP 引用的列表。
.PP
如果列表中没有元素，则 \fBLIST_EMPTY\fP() 的计算结果为 true。
.SS Insertion
\fBLIST_INSERT_HEAD\fP() 在列表的头部插入新元素 \fIelm\fP。
.PP
\fBLIST_INSERT_BEFORE\fP() 在元素 \fIlistelm\fP 之前插入新元素 \fIelm\fP。
.PP
\fBLIST_INSERT_AFTER\fP() 在元素 \fIlistelm\fP 之后插入新元素 \fIelm\fP。
.SS Traversal
.\" .PP
.\" .BR LIST_PREV ()
.\" returns the previous element in the list, or NULL if this is the first.
.\" List
.\" .I head
.\" must contain element
.\" .IR elm .
\fBLIST_FIRST\fP() 返回列表中的第一个元素，如果列表为空则返回 NULL。
.PP
\fBLIST_NEXT\fP() 返回列表中的下一个元素，如果这是最后一个，则返回 NULL。
.PP
.\" .PP
.\" .BR LIST_FOREACH_FROM ()
.\" behaves identically to
.\" .BR LIST_FOREACH ()
.\" when
.\" .I var
.\" is NULL, else it treats
.\" .I var
.\" as a previously found LIST element and begins the loop at
.\" .I var
.\" instead of the first element in the LIST referenced by
.\" .IR head .
.\" .PP
.\" .BR LIST_FOREACH_SAFE ()
.\" traverses the list referenced by
.\" .I head
.\" in the forward direction, assigning each element in turn to
.\" .IR var .
.\" However, unlike
.\" .BR LIST_FOREACH ()
.\" here it is permitted to both remove
.\" .I var
.\" as well as free it from within the loop safely without interfering with the
.\" traversal.
.\" .PP
.\" .BR LIST_FOREACH_FROM_SAFE ()
.\" behaves identically to
.\" .BR LIST_FOREACH_SAFE ()
.\" when
.\" .I var
.\" is NULL, else it treats
.\" .I var
.\" as a previously found LIST element and begins the loop at
.\" .I var
.\" instead of the first element in the LIST referenced by
.\" .IR head .
\fBLIST_FOREACH\fP() 正向遍历 \fIhead\fP 引用的链表，依次将每个元素赋值给 \fIvar\fP。
.SS Removal
.\" .SS Other features
.\" .BR LIST_SWAP ()
.\" swaps the contents of
.\" .I head1
.\" and
.\" .IR head2 .
\fBLIST_REMOVE\fP() 从列表中删除元素 \fIelm\fP。
.SH "RETURN VALUE"
如果列表为空，则 \fBLIST_EMPTY\fP() 返回非零; 如果列表至少包含一个条目，则返回零。
.PP
\fBLIST_FIRST\fP() 和 \fBLIST_NEXT\fP() 分别返回指向第一个或下一个 \fITYPE\fP 结构体的指针。
.PP
\fBLIST_HEAD_INITIALIZER\fP() 返回一个可以分配给列表 \fIhead\fP 的初始化。
.SH STANDARDS
不在 POSIX.1、POSIX.1\-2001 或 POSIX.1\-2008 中。 存在于 BSD 上 (LIST 宏首次出现在 4.4BSD 中)。
.SH BUGS
\fBLIST_FOREACH\fP() 不允许在循环内删除或释放 \fIvar\fP，因为它会干扰遍历。 \fBLIST_FOREACH_SAFE\fP() 存在于
BSD 中但不存在于 glibc 中，它通过允许 \fIvar\fP 安全地从列表中删除并从循环中释放而不干扰遍历来修复此限制。
.SH EXAMPLES
.\" SRC BEGIN (list.c)
.EX
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/queue.h>

struct entry {
    int data;
    LIST_ENTRY(entry) entries;              /* List */
};

LIST_HEAD(listhead, entry);

int
main(void)
{
    struct entry *n1, *n2, *n3, *np;
    struct listhead head;                    /* List head */
    int i;

    LIST_INIT(&head);                       /* Initialize the list */

    n1 = malloc(sizeof(struct entry));      /* Insert at the head */
    LIST_INSERT_HEAD(&head, n1, entries);

    n2 = malloc(sizeof(struct entry));      /* Insert after */
    LIST_INSERT_AFTER(n1, n2, entries);

    n3 = malloc(sizeof(struct entry));      /* Insert before */
    LIST_INSERT_BEFORE(n2, n3, entries);

    i = 0;                                   /* Forward traversal */
    LIST_FOREACH(np, &head, entries)
        np\->data = i++;

    LIST_REMOVE(n2, entries);               /* Deletion */
    free(n2);
                                            /* Forward traversal */
    LIST_FOREACH(np, &head, entries)
        printf("%i\en", np\->data);
                                            /* List deletion */
    n1 = LIST_FIRST(&head);
    while (n1 != NULL) {
        n2 = LIST_NEXT(n1, entries);
        free(n1);
        n1 = n2;
    }
    LIST_INIT(&head);

    exit(EXIT_SUCCESS);
}
.EE
.\" SRC END
.SH "SEE ALSO"
\fBinsque\fP(3), \fBqueue\fP(7)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
