.\" -*- coding: UTF-8 -*-
'\" t
.\" Copyright (c) 2008 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" SPDX-License-Identifier: Linux-man-pages-copyleft
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH pthread_attr_setguardsize 3 2022\-12\-15 "Linux man\-pages 6.03" 
.SH NAME
pthread_attr_setguardsize、pthread_attr_getguardsize \- 线程属性对象中的 set/get
保护大小属性
.SH LIBRARY
POSIX 线程库 (\fIlibpthread\fP, \fI\-lpthread\fP)
.SH SYNOPSIS
.nf
\fB#include <pthread.h>\fP
.PP
\fBint pthread_attr_setguardsize(pthread_attr_t *\fP\fIattr\fP\fB, size_t \fP\fIguardsize\fP\fB);\fP
\fBint pthread_attr_getguardsize(const pthread_attr_t *restrict \fP\fIattr\fP\fB,\fP
\fB                              size_t *restrict \fP\fIguardsize\fP\fB);\fP
.fi
.SH DESCRIPTION
\fBpthread_attr_setguardsize\fP() 函数将 \fIattr\fP 引用的线程属性对象的保护大小属性设置为 \fIguardsize\fP
中指定的值。
.PP
如果 \fIguardsize\fP 大于 0，那么对于使用 \fIattr\fP 创建的每个新线程，系统都会在线程栈的末尾分配一个至少 \fIguardsize\fP
字节的额外区域作为栈的保护区 (但请参见 BUGS)。
.PP
如果 \fIguardsize\fP 为 0，则使用 \fIattr\fP 创建的新线程将没有保护区。
.PP
默认保护大小与系统页面大小相同。
.PP
如果在 \fIattr\fP 中设置了栈地址属性 (使用 \fBpthread_attr_setstack\fP(3) 或
\fBpthread_attr_setstackaddr\fP(3))，意思是调用者正在分配线程的栈，那么忽略 guard size 属性 (即系统不创建
guard area) : 它是应用程序的负责处理栈溢出 (可能通过使用 \fBmprotect\fP(2) 在其分配的栈末尾手动定义保护区)。
.PP
\fBpthread_attr_getguardsize\fP() 函数返回 \fIguardsize\fP 指向的缓冲区中 \fIattr\fP
引用的线程属性对象的保护大小属性。
.SH "RETURN VALUE"
成功时，这些函数返回 0; 出错时，它们返回一个非零错误号。
.SH ERRORS
如果 \fIattr\fP 或 \fIguardsize\fP 无效，则 POSIX.1 记录 \fBEINVAL\fP 错误。 在 Linux 上，这些函数总是成功
(但可移植和 future 证明应用程序仍然应该处理可能的错误返回)。
.SH VERSIONS
这些函数是从 glibc 2.1 开始提供的。
.SH ATTRIBUTES
有关本节中使用的术语的解释，请参见 \fBattributes\fP(7)。
.ad l
.nh
.TS
allbox;
lbx lb lb
l l l.
Interface	Attribute	Value
T{
\fBpthread_attr_setguardsize\fP(),
\fBpthread_attr_getguardsize\fP()
T}	Thread safety	MT\-Safe
.TE
.hy
.ad
.sp 1
.SH STANDARDS
POSIX.1\-2001, POSIX.1\-2008.
.SH NOTES
保护区由受保护以防止读写访问的虚拟内存页组成。 如果线程溢出其栈进入保护区，那么在大多数硬架构上，它会收到 \fBSIGSEGV\fP 信号，从而通知它溢出。
保护区域从页面边界开始，保护大小在创建线程时在内部四舍五入为系统页面大小。 (尽管如此，\fBpthread_attr_getguardsize\fP()
返回由 \fBpthread_attr_setguardsize\fP().) 设置的防护尺寸
.PP
将保护大小设置为 0 可能有助于在创建许多线程并且知道永远不会发生栈溢出的应用程序中节省内存。
.PP
如果线程在栈上分配大型数据结构，则可能需要选择大于默认大小的保护大小来检测栈溢出。
.SH BUGS
与 glibc 2.8 一样，NPTL 线程实现包括栈大小分配内的保护区，而不是像 POSIX.1 要求的那样在栈末尾分配额外空间。
(如果保护大小值太大，这会导致 \fBpthread_create\fP(3) 的 \fBEINVAL\fP 错误，没有为实际栈留出空间。)
.PP
.\" glibc includes the guardsize within the allocated stack size,
.\" which looks pretty clearly to be in violation of POSIX.
.\"
.\" Filed bug, 22 Oct 2008:
.\" http://sources.redhat.com/bugzilla/show_bug.cgi?id=6973
.\"
.\" Older reports:
.\" https//bugzilla.redhat.com/show_bug.cgi?id=435337
.\" Reportedly, LinuxThreads did the right thing, allocating
.\" extra space at the end of the stack:
.\" http://sourceware.org/ml/libc-alpha/2008-05/msg00086.html
过时的 LinuxThreads 实现做了正确的事情，在栈的末尾为保护区分配了额外的空间。
.SH EXAMPLES
请参见 \fBpthread_getattr_np\fP(3)。
.SH "SEE ALSO"
\fBmmap\fP(2), \fBmprotect\fP(2), \fBpthread_attr_init\fP(3),
\fBpthread_attr_setstack\fP(3), \fBpthread_attr_setstacksize\fP(3),
\fBpthread_create\fP(3), \fBpthreads\fP(7)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
