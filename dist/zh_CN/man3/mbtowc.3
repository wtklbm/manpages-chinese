.\" -*- coding: UTF-8 -*-
'\" t
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" SPDX-License-Identifier: GPL-2.0-or-later
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH mbtowc 3 2023\-02\-05 "Linux man\-pages 6.03" 
.SH NAME
mbtowc \- 将多字节序列转换为宽字符
.SH LIBRARY
标准 C 库 (\fIlibc\fP、\fI\-lc\fP)
.SH SYNOPSIS
.nf
\fB#include <stdlib.h>\fP
.PP
\fBint mbtowc(wchar_t *restrict \fP\fIpwc\fP\fB, const char \fP\fIs\fP\fB[restrict .\fP\fIn\fP\fB], size_t \fP\fIn\fP\fB);\fP
.fi
.SH DESCRIPTION
这个函数的主要情况是 \fIs\fP 不为 NULL 且 \fIpwc\fP 不为 NULL。 在这种情况下，\fBmbtowc\fP() 函数最多检查从 \fIs\fP
开始的多字节字符串的 \fIn\fP 个字节，提取下一个完整的多字节字符，将其转换为宽字符并将其存储在 \fI*pwc\fP。 它更新只有 \fBmbtowc\fP()
函数知道的内部移位状态。 如果 \fIs\fP 不指向空字节 (\[aq]\e0\[aq])，则返回从 \fIs\fP 消耗的字节数，否则返回 0.
.PP
如果从 \fIs\fP 开始的 \fIn\fP 字节不包含完整的多字节字符，或者如果它们包含无效的多字节序列，则 \fBmbtowc\fP() 返回 \-1。
如果多字节字符串包含冗余移位序列，即使 \fIn\fP >= \fIMB_CUR_MAX\fP 也会发生这种情况。
.PP
另一种情况是 \fIs\fP 不为 NULL 但 \fIpwc\fP 为 NULL。 在这种情况下，\fBmbtowc\fP()
函数的行为如上，只是它不将转换后的宽字符存储在内存中。
.PP
.\" The Dinkumware doc and the Single UNIX specification say this, but
.\" glibc doesn't implement this.
第三种情况是 \fIs\fP 为 NULL。 在这种情况下，\fIpwc\fP 和 \fIn\fP 将被忽略。 \fBmbtowc\fP()
函数将只有此函数知道的移位状态重置为初始状态，如果编码具有非平凡的移位状态，则返回非零，如果编码是无状态的，则返回零。
.SH "RETURN VALUE"
如果 \fIs\fP 不为 NULL，则 \fBmbtowc\fP() 函数返回从 \fIs\fP 开始的消耗字节数，如果 \fIs\fP 指向空字节则返回
0，或者在失败时返回 \-1。
.PP
如果 \fIs\fP 为 NULL，则 \fBmbtowc\fP() 函数在编码具有非平凡移位状态时返回非零值，或者在编码无状态时返回零值。
.SH ATTRIBUTES
有关本节中使用的术语的解释，请参见 \fBattributes\fP(7)。
.ad l
.nh
.TS
allbox;
lbx lb lb
l l l.
Interface	Attribute	Value
T{
\fBmbtowc\fP()
T}	Thread safety	MT\-Unsafe race
.TE
.hy
.ad
.sp 1
.SH STANDARDS
POSIX.1\-2001, POSIX.1\-2008, C99.
.SH NOTES
\fBmbtowc\fP() 的行为取决于当前语言环境的 \fBLC_CTYPE\fP 类别。
.PP
这个函数不是多线程安全的。 函数 \fBmbrtowc\fP(3) 为相同的功能提供了更好的界面。
.SH "SEE ALSO"
\fBMB_CUR_MAX\fP(3), \fBmblen\fP(3), \fBmbrtowc\fP(3), \fBmbstowcs\fP(3),
\fBwcstombs\fP(3), \fBwctomb\fP(3)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
