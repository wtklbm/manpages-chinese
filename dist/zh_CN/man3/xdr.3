.\" -*- coding: UTF-8 -*-
'\" t
.\" This page was taken from the 4.4BSD-Lite CDROM (BSD license)
.\"
.\" %%%LICENSE_START(BSD_ONELINE_CDROM)
.\" This page was taken from the 4.4BSD-Lite CDROM (BSD license)
.\" %%%LICENSE_END
.\"
.\" @(#)xdr.3n	2.2 88/08/03 4.0 RPCSRC; from 1.16 88/03/14 SMI
.\"
.\" 2007-12-30, mtk, Convert function prototypes to modern C syntax
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH xdr 3 2022\-12\-15 "Linux man\-pages 6.03" 
.SH NAME
xdr \- 用于外部数据表示的库例程
.SH LIBRARY
标准 C 库 (\fIlibc\fP、\fI\-lc\fP)
.SH "SYNOPSIS AND DESCRIPTION"
这些例程允许 C 程序员以独立于机器的方式描述任意数据结构。 使用这些例程传输远程过程调用的数据。
.PP
下面的原型在 \fI<rpc/xdr.h>\fP 中声明并使用以下类型:
.PP
.RS 4
.EX
\fBtypedef int \fP\fIbool_t\fP\fB;\fP
.PP
\fBtypedef bool_t (*\fP\fIxdrproc_t\fP\fB)(XDR *, void *,...);\fP
.EE
.RE
.PP
\fIXDR\fP 类型的声明参见 \fI<rpc/xdr.h>\fP。
.PP
.nf
\fBbool_t xdr_array(XDR *\fP\fIxdrs\fP\fB, char **\fP\fIarrp\fP\fB, unsigned int *\fP\fIsizep\fP\fB,\fP
\fB                 unsigned int \fP\fImaxsize\fP\fB, unsigned int \fP\fIelsize\fP\fB,\fP
\fB                 xdrproc_t \fP\fIelproc\fP\fB);\fP
.fi
.IP
在可变长度数组及其对应的外部表示之间进行转换的过滤器原语。 参数 \fIarrp\fP 是数组指针的地址，而 \fIsizep\fP 是数组元素个数的地址;
此元素计数不能超过 \fImaxsize\fP。 参数 \fIelsize\fP 是每个数组元素的 \fIsizeof\fP，\fIelproc\fP 是一个 XDR
过滤器，它在数组元素的 C 形式和它们的外部表示之间进行转换。 如果成功，此例程返回 1，否则返回 0。
.PP
.nf
\fBbool_t xdr_bool(XDR *\fP\fIxdrs\fP\fB, bool_t *\fP\fIbp\fP\fB);\fP
.fi
.IP
在布尔值 (C 整数) 及其外部表示之间进行转换的过滤器原语。 对数据进行编码时，此过滤器会生成 1 或 0 的值。 如果成功，此例程返回 1，否则返回
0。
.PP
.nf
\fBbool_t xdr_bytes(XDR *\fP\fIxdrs\fP\fB, char **\fP\fIsp\fP\fB, unsigned int *\fP\fIsizep\fP\fB,\fP
\fB                 unsigned int \fP\fImaxsize\fP\fB);\fP
.fi
.IP
在计数的字节字符串和它们的外部表示之间进行转换的过滤器原语。 参数 \fIsp\fP 是字符串指针的地址。 字符串的长度位于地址 \fIsizep\fP;
字符串不能长于 \fImaxsize\fP。 如果成功，此例程返回 1，否则返回 0。
.PP
.nf
\fBbool_t xdr_char(XDR *\fP\fIxdrs\fP\fB, char *\fP\fIcp\fP\fB);\fP
.fi
.IP
在 C 字符及其外部表示之间进行转换的过滤器原语。 如果成功，此例程返回 1，否则返回 0。 注意: 编码后的字符不是封装的，每个占用 4 个字节。
对于字符数组，值得考虑 \fBxdr_bytes\fP()、\fBxdr_opaque\fP() 或 \fBxdr_string\fP()。
.PP
.nf
\fBvoid xdr_destroy(XDR *\fP\fIxdrs\fP\fB);\fP
.fi
.IP
调用与 XDR 流关联的销售例程 \fIxdrs\fP 的宏。 销毁通常涉及释放与流关联的私有数据结构。 在调用 \fBxdr_destroy\fP() 之后使用
\fIxdrs\fP 是未定义的。
.PP
.nf
\fBbool_t xdr_double(XDR *\fP\fIxdrs\fP\fB, double *\fP\fIdp\fP\fB);\fP
.fi
.IP
在 C \fIdouble\fP 精度数字及其外部表示之间进行转换的过滤器，原语。 如果成功，此例程返回 1，否则返回 0。
.PP
.nf
\fBbool_t xdr_enum(XDR *\fP\fIxdrs\fP\fB, enum_t *\fP\fIep\fP\fB);\fP
.fi
.IP
在 C \fIenum\fPs (实际上是整数) 及其外部表示之间进行转换的过滤器原语。 如果成功，此例程返回 1，否则返回 0。
.PP
.nf
\fBbool_t xdr_float(XDR *\fP\fIxdrs\fP\fB, float *\fP\fIfp\fP\fB);\fP
.fi
.IP
在 C \fIfloat\fPs 和它们的外部表示之间转换的过滤器原语。 如果成功，此例程返回 1，否则返回 0。
.PP
.nf
\fBvoid xdr_free(xdrproc_t \fP\fIproc\fP\fB, char *\fP\fIobjp\fP\fB);\fP
.fi
.IP
泛型释放例程。 第一个参数是被释放对象的 XDR 例程。 第二个参数是指向对象本身的指针。 注意: 传递给这个例程的指针是 \fInot\fP
释放的，但是它指向 \fIis\fP 的指针释放了 (recursively)。
.PP
.nf
\fBunsigned int xdr_getpos(XDR *\fP\fIxdrs\fP\fB);\fP
.fi
.IP
调用与 XDR 流关联的获取位置例程的宏，\fIxdrs\fP。 该例程返回一个无符号整数，它指示 XDR 字节流的位置。 XDR
流的一个理想特性是简单的算法可以处理这个数字，尽管 XDR 流实例不需要保证这一点。
.PP
.nf
\fBlong *xdr_inline(XDR *\fP\fIxdrs\fP\fB, int \fP\fIlen\fP\fB);\fP
.fi
.IP
调用与 XDR 流关联的内联例程 \fIxdrs\fP 的宏。 该例程返回一个指向连续的流缓冲区的指针; \fIlen\fP 是所需缓冲区的字节长度。 注意:
指针被转换为 \fIlong\ *\fP。
.IP
警告: 如果 \fBxdr_inline\fP() 无法分配一块连续的缓冲区，它可能会返回 NULL (0)。 因此，行为可能因流实例而异;
它的存在是为了效率。
.PP
.nf
\fBbool_t xdr_int(XDR *\fP\fIxdrs\fP\fB, int *\fP\fIip\fP\fB);\fP
.fi
.IP
在 C 整数及其外部表示之间进行转换的过滤器原语。 如果成功，此例程返回 1，否则返回 0。
.PP
.nf
\fBbool_t xdr_long(XDR *\fP\fIxdrs\fP\fB, long *\fP\fIlp\fP\fB);\fP
.fi
.IP
在 C \fIlong\fP 整数及其外部表示之间进行转换的过滤器原语。 如果成功，此例程返回 1，否则返回 0。
.PP
.nf
\fBvoid xdrmem_create(XDR *\fP\fIxdrs\fP\fB, char *\fP\fIaddr\fP\fB, unsigned int \fP\fIsize\fP\fB,\fP
\fB                   enum xdr_op \fP\fIop\fP\fB);\fP
.fi
.IP
此例程初始化 \fIxdrs\fP 指向的 XDR 流对象。 流的数据写入或读取位置 \fIaddr\fP 处的一块内存，其长度不超过 \fIsize\fP 字节长。
\fIop\fP 确定 XDR 流的方向 (\fBXDR_ENCODE\fP、\fBXDR_DECODE\fP 或 \fBXDR_FREE\fP)。
.PP
.nf
\fBbool_t xdr_opaque(XDR *\fP\fIxdrs\fP\fB, char *\fP\fIcp\fP\fB, unsigned int \fP\fIcnt\fP\fB);\fP
.fi
.IP
在固定大小的不透明数据及其外部表示之间进行转换的过滤器，原语。 参数 \fIcp\fP 是不透明对象的地址，\fIcnt\fP 是它的字节大小。
如果成功，此例程返回 1，否则返回 0。
.PP
.nf
\fBbool_t xdr_pointer(XDR *\fP\fIxdrs\fP\fB, char **\fP\fIobjpp\fP\fB,\fP
\fB                   unsigned int \fP\fIobjsize\fP\fB, xdrproc_t \fP\fIxdrobj\fP\fB);\fP
.fi
.IP
与 \fBxdr_reference\fP() 类似，只是它序列化了空指针，而 \fBxdr_reference\fP() 则没有。
因此，\fBxdr_pointer\fP() 可以表示递归数据结构，例如二叉树或链表。
.PP
.nf
\fBvoid xdrrec_create(XDR *\fP\fIxdrs\fP\fB, unsigned int \fP\fIsendsize\fP\fB,\fP
\fB                   unsigned int \fP\fIrecvsize\fP\fB, char *\fP\fIhandle\fP\fB,\fP
\fB                   int (*\fP\fIreadit\fP\fB)(char *, char *, int),\fP
\fB                   int (*\fP\fIwriteit\fP\fB)(char *, char *, int));\fP
.fi
.IP
此例程初始化 \fIxdrs\fP 指向的 XDR 流对象。 流的数据被写入大小为 \fIsendsize\fP 的缓冲区; 零值表示系统应该使用合适的默认值。
流的数据从大小为 \fIrecvsize\fP 的缓冲区中读取; 它也可以通过传递零值来设置为合适的默认值。 当流的输出缓冲区已满时，将调用
\fIwriteit\fP。 同样，当流的输入缓冲区为空时，将调用 \fIreadit\fP。 这两个例程的行为类似于系统调用 \fBread\fP(2) 和
\fBwrite\fP(2)，除了 \fIhandle\fP 作为第一个参数传递给前例程。 注意: XDR 流的 \fIop\fP 字段必须由调用者设置。
.IP
警告: 要从此 API 创建的 XDR 流中读取，您需要先调用 \fBxdrrec_skiprecord\fP()，然后再调用任何其他 XDR API。
这会在流中插入额外的字节以提供记录边界信息。 此外，出于同样的原因，使用不同 \fBxdr*_create\fP API 创建的 XDR 流也不兼容。
.PP
.nf
\fBbool_t xdrrec_endofrecord(XDR *\fP\fIxdrs\fP\fB, int \fP\fIsendnow\fP\fB);\fP
.fi
.IP
此例程只能在 \fBxdrrec_create\fP() 创建的流上调用。 输出缓冲区中的数据被标记为一个完整的记录，如果 \fIsendnow\fP
不为零，则输出缓冲区有选择地被写出。 如果成功，此例程返回 1，否则返回 0。
.PP
.nf
\fBbool_t xdrrec_eof(XDR *\fP\fIxdrs\fP\fB);\fP
.fi
.IP
此例程只能在 \fBxdrrec_create\fP() 创建的流上调用。 在消耗完流中当前记录的其余部分后，如果流没有更多输入，则此例程返回 1，否则返回
0。
.PP
.nf
\fBbool_t xdrrec_skiprecord(XDR *\fP\fIxdrs\fP\fB);\fP
.fi
.IP
此例程只能在 \fBxdrrec_create\fP() 创建的流上调用。 它告诉 XDR 实现应该丢弃流的输入缓冲区中的当前记录的其余部分。
如果成功，此例程返回 1，否则返回 0。
.PP
.nf
\fBbool_t xdr_reference(XDR *\fP\fIxdrs\fP\fB, char **\fP\fIpp\fP\fB, unsigned int \fP\fIsize\fP\fB,\fP
\fB                     xdrproc_t \fP\fIproc\fP\fB);\fP
.fi
.IP
提供结构内指针追逐的原语。 参数 \fIpp\fP 为指针地址; \fIsize\fP 是 \fIsizeof\fP \fI*pp\fP 指向的结构体; \fIproc\fP 是一个
XDR 过程，它在 C 形式和外部表示之间过滤结构体。 如果成功，此例程返回 1，否则返回 0。
.IP
警告: 此例程不理解空指针。 请改用 \fBxdr_pointer\fP()。
.PP
.nf
\fBxdr_setpos(XDR *\fP\fIxdrs\fP\fB, unsigned int \fP\fIpos\fP\fB);\fP
.fi
.IP
调用与 XDR 流 \fIxdrs\fP 关联的设置位置例程的宏。 参数 \fIpos\fP 是从 \fBxdr_getpos\fP() 得到的位置值。 如果 XDR
流可以重新定位，则此例程返回 1，否则返回 0。
.IP
警告: 很难重新定位某些类型的 XDR 流，因此此例程可能对一种类型的流失败而对另一种类型的流成功。
.PP
.nf
\fBbool_t xdr_short(XDR *\fP\fIxdrs\fP\fB, short *\fP\fIsp\fP\fB);\fP
.fi
.IP
在 C \fIshort\fP 整数及其外部表示之间进行转换的过滤器原语。 如果成功，此例程返回 1，否则返回 0。
.PP
.nf
\fBvoid xdrstdio_create(XDR *\fP\fIxdrs\fP\fB, FILE *\fP\fIfile\fP\fB, enum xdr_op \fP\fIop\fP\fB);\fP
.fi
.IP
此例程初始化 \fIxdrs\fP 指向的 XDR 流对象。 XDR 流数据写入或读取 \fIstdio\fP 流 \fIfile\fP。 参数 \fIop\fP 确定 XDR
流的方向 (\fBXDR_ENCODE\fP、\fBXDR_DECODE\fP 或 \fBXDR_FREE\fP)。
.IP
警告: 与此类 XDR 流关联的销售例程在 \fIfile\fP 流上调用 \fBfflush\fP(3)，但从不调用 \fBfclose\fP(3)。
.PP
.nf
\fBbool_t xdr_string(XDR *\fP\fIxdrs\fP\fB, char **\fP\fIsp\fP\fB, unsigned int \fP\fImaxsize\fP\fB);\fP
.fi
.IP
在 C 字符串及其对应的外部表示之间进行转换的过滤器原语。 字符串不能长于 \fImaxsize\fP。 注意: \fIsp\fP 是字符串指针的地址。
如果成功，此例程返回 1，否则返回 0。
.PP
.nf
\fBbool_t xdr_u_char(XDR *\fP\fIxdrs\fP\fB, unsigned char *\fP\fIucp\fP\fB);\fP
.fi
.IP
在 \fIunsigned\fP C 字符及其外部表示之间进行转换的过滤器原语。 如果成功，此例程返回 1，否则返回 0。
.PP
.nf
\fBbool_t xdr_u_int(XDR *\fP\fIxdrs\fP\fB, unsigned int *\fP\fIup\fP\fB);\fP
.fi
.IP
在 C \fIunsigned\fP 整数及其外部表示之间进行转换的过滤器原语。 如果成功，此例程返回 1，否则返回 0。
.PP
.nf
\fBbool_t xdr_u_long(XDR *\fP\fIxdrs\fP\fB, unsigned long *\fP\fIulp\fP\fB);\fP
.fi
.IP
在 C \fIunsigned long\fP 整数及其外部表示之间进行转换的过滤器原语。 如果成功，此例程返回 1，否则返回 0。
.PP
.nf
\fBbool_t xdr_u_short(XDR *\fP\fIxdrs\fP\fB, unsigned short *\fP\fIusp\fP\fB);\fP
.fi
.IP
在 C \fIunsigned short\fP 整数及其外部表示之间进行转换的过滤器原语。 如果成功，此例程返回 1，否则返回 0。
.PP
.nf
\fBbool_t xdr_union(XDR *\fP\fIxdrs\fP\fB, enum_t *\fP\fIdscmp\fP\fB, char *\fP\fIunp\fP\fB,\fP
\fB                 const struct xdr_discrim *\fP\fIchoices\fP\fB,\fP
\fB                 xdrproc_t \fP\fIdefaultarm\fP\fB);     /* may equal NULL */\fP
.fi
.IP
在已区分的 C \fIunion\fP 与其对应的外部表示之间进行转换的过滤器原语。 它首先翻译位于 \fIdscmp\fP 的 union 的判别式。
该判别式始终为 \fIenum_t\fP。 接下来翻译位于 \fIunp\fP 的 union。 参数 \fIchoices\fP 是指向
\fBxdr_discrim\fP() 结构数组的指针。 每个结构体包含一对有序的 [\fIvalue\fP,\fIproc\fP]。 如果 union
的判别式等于关联的 \fIvalue\fP，则调用 \fIproc\fP 来平移 union。 \fBxdr_discrim\fP() 结构体数组的末尾由值为 NULL
的例程表示。 如果在 \fIchoices\fP 数组中未找到判别式，则调用 \fIdefaultarm\fP 过程 (如果它不为 NULL)。 如果成功则返回
1，否则返回 0。
.PP
.nf
\fBbool_t xdr_vector(XDR *\fP\fIxdrs\fP\fB, char *\fP\fIarrp\fP\fB, unsigned int \fP\fIsize\fP\fB,\fP
\fB                  unsigned int \fP\fIelsize\fP\fB, xdrproc_t \fP\fIelproc\fP\fB);\fP
.fi
.IP
在固定长度数组及其对应的外部表示之间进行转换的过滤器原语。 参数 \fIarrp\fP 是数组指针的地址，而 \fIsize\fP 是数组的元素个数。 参数
\fIelsize\fP 是每个数组元素的 \fIsizeof\fP，\fIelproc\fP 是一个 XDR 过滤器，它在数组元素的 C
形式和它们的外部表示之间进行转换。 如果成功，此例程返回 1，否则返回 0。
.PP
.nf
\fBbool_t xdr_void(void);\fP
.fi
.IP
这个例程总是返回一个。 它可能会被传递给需要一个函数参数的 RPC 例程，在那里什么都不做。
.PP
.nf
\fBbool_t xdr_wrapstring(XDR *\fP\fIxdrs\fP\fB, char **\fP\fIsp\fP\fB);\fP
.fi
.IP
调用 \fBxdr_string(xdrs, sp,MAXUN.UNSIGNED );\fP 的原语，其中 \fBMAXUN.UNSIGNED\fP
是无符号整数的最大值。 \fBxdr_wrapstring\fP() 很方便，因为 RPC 包最多传递两个 XDR 例程作为参数，而
\fBxdr_string\fP() 是最常用的原语之一，需要三个。 如果成功则返回 1，否则返回 0。
.SH ATTRIBUTES
有关本节中使用的术语的解释，请参见 \fBattributes\fP(7)。
.ad l
.nh
.TS
allbox;
lbx lb lb
l l l.
Interface	Attribute	Value
T{
\fBxdr_array\fP(),
\fBxdr_bool\fP(),
\fBxdr_bytes\fP(),
\fBxdr_char\fP(),
\fBxdr_destroy\fP(),
\fBxdr_double\fP(),
\fBxdr_enum\fP(),
\fBxdr_float\fP(),
\fBxdr_free\fP(),
\fBxdr_getpos\fP(),
\fBxdr_inline\fP(),
\fBxdr_int\fP(),
\fBxdr_long\fP(),
\fBxdrmem_create\fP(),
\fBxdr_opaque\fP(),
\fBxdr_pointer\fP(),
\fBxdrrec_create\fP(),
\fBxdrrec_eof\fP(),
\fBxdrrec_endofrecord\fP(),
\fBxdrrec_skiprecord\fP(),
\fBxdr_reference\fP(),
\fBxdr_setpos\fP(),
\fBxdr_short\fP(),
\fBxdrstdio_create\fP(),
\fBxdr_string\fP(),
\fBxdr_u_char\fP(),
\fBxdr_u_int\fP(),
\fBxdr_u_long\fP(),
\fBxdr_u_short\fP(),
\fBxdr_union\fP(),
\fBxdr_vector\fP(),
\fBxdr_void\fP(),
\fBxdr_wrapstring\fP()
T}	Thread safety	MT\-Safe
.TE
.hy
.ad
.sp 1
.SH "SEE ALSO"
\fBrpc\fP(3)
.PP
以下手册:
.RS
外部数据表示标准: 协议规范
.br
外部数据表示: Sun 技术说明
.br
\fIXDR: External Data Representation Standard\fP, RFC\ 1014, Sun Microsystems,
Inc., USC\-ISI.
.RE
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
