.\" -*- coding: UTF-8 -*-
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" SPDX-License-Identifier: Linux-man-pages-copyleft
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sun Jul 25 10:54:31 1993, Rik Faith (faith@cs.unc.edu)
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH string 3 2023\-01\-22 "Linux man\-pages 6.03" 
.SH NAME
stpcpy, strcasecmp, strcat, strchr, strcmp, strcoll, strcpy, strcspn,
strdup, strfry, strlen, strncat, strncmp, strncpy, strncasecmp, strpbrk,
strrchr, strsep, strspn, strstr, strtok, strxfrm, index, rindex \- 字符串操作
.SH LIBRARY
标准 C 库 (\fIlibc\fP、\fI\-lc\fP)
.SH SYNOPSIS
\fB#include <strings.h>\fP
.TP 
\fBint strcasecmp(const char *\fP\fIs1\fP\fB, const char *\fP\fIs2\fP\fB);\fP
比较字符串 \fIs1\fP 和 \fIs2\fP，忽略大小写。
.TP 
\fBint strncasecmp(const char \fP\fIs1\fP\fB[.\fP\fIn\fP\fB], const char \fP\fIs2\fP\fB[.\fP\fIn\fP\fB], size_t \fP\fIn\fP\fB);\fP
比较字符串 \fIs1\fP 和 \fIs2\fP 的前 \fIn\fP 个字节，忽略大小写。
.TP 
\fBchar *index(const char *\fP\fIs\fP\fB, int \fP\fIc\fP\fB);\fP
与 \fBstrchr\fP(3) 相同。
.TP 
\fBchar *rindex(const char *\fP\fIs\fP\fB, int \fP\fIc\fP\fB);\fP
与 \fBstrrchr\fP(3) 相同。
.TP 
\fB#include <string.h>\fP
.TP 
\fBchar *stpcpy(char *restrict \fP\fIdest\fP\fB, const char *restrict \fP\fIsrc\fP\fB);\fP
将字符串从 \fIsrc\fP 复制到 \fIdest\fP，返回指向结果字符串末尾 \fIdest\fP 的指针。
.TP 
\fBchar *strcat(char *restrict \fP\fIdest\fP\fB, const char *restrict \fP\fIsrc\fP\fB);\fP
将字符串 \fIsrc\fP 追加到字符串 \fIdest\fP，返回指针 \fIdest\fP。
.TP 
\fBchar *strchr(const char *\fP\fIs\fP\fB, int \fP\fIc\fP\fB);\fP
返回指向字符 \fIc\fP 在字符串 \fIs\fP 中第一次出现的指针。
.TP 
\fBint strcmp(const char *\fP\fIs1\fP\fB, const char *\fP\fIs2\fP\fB);\fP
比较字符串 \fIs1\fP 和 \fIs2\fP。
.TP 
\fBint strcoll(const char *\fP\fIs1\fP\fB, const char *\fP\fIs2\fP\fB);\fP
使用当前语言环境比较字符串 \fIs1\fP 和 \fIs2\fP。
.TP 
\fBchar *strcpy(char *restrict \fP\fIdest\fP\fB, const char *restrict \fP\fIsrc\fP\fB);\fP
将字符串 \fIsrc\fP 复制到 \fIdest\fP，返回指向 \fIdest\fP 开头的指针。
.TP 
\fBsize_t strcspn(const char *\fP\fIs\fP\fB, const char *\fP\fIreject\fP\fB);\fP
计算不包含字符串 \fIreject\fP 中任何字节的字符串 \fIs\fP 的起始段长度，
.TP 
\fBchar *strdup(const char *\fP\fIs\fP\fB);\fP
在使用 \fBmalloc\fP(3) 分配的内存中返回字符串 \fIs\fP 的副本。
.TP 
\fBchar *strfry(char *\fP\fIstring\fP\fB);\fP
随机交换 \fIstring\fP 中的字符。
.TP 
\fBsize_t strlen(const char *\fP\fIs\fP\fB);\fP
返回字符串 \fIs\fP 的长度。
.TP 
.nf
\fBchar *strncat(char \fP\fIdest\fP\fB[restrict strlen(.\fP\fIdest\fP\fB) + .\fP\fIn\fP\fB + 1],\fP
\fB       const char \fP\fIsrc\fP\fB[restrict .\fP\fIn\fP\fB],\fP
\fB       size_t \fP\fIn\fP\fB);\fP
.fi
将未终止的字符串 \fIsrc\fP 中最多 \fIn\fP 个字节追加到字符串 \fIdest\fP，返回指向 \fIdest\fP 的指针。
.TP 
\fBint strncmp(const char \fP\fIs1\fP\fB[.\fP\fIn\fP\fB], const char \fP\fIs2\fP\fB[.\fP\fIn\fP\fB], size_t \fP\fIn\fP\fB);\fP
最多比较字符串 \fIs1\fP 和 \fIs2\fP 的 \fIn\fP 个字节。
.TP 
\fBchar *strpbrk(const char *\fP\fIs\fP\fB, const char *\fP\fIaccept\fP\fB);\fP
返回指向字符串 \fIaccept\fP 中的一个字节在字符串 \fIs\fP 中第一次出现的指针。
.TP 
\fBchar *strrchr(const char *\fP\fIs\fP\fB, int \fP\fIc\fP\fB);\fP
返回指向字符 \fIc\fP 在字符串 \fIs\fP 中最后一次出现的指针。
.TP 
\fBchar *strsep(char **restrict \fP\fIstringp\fP\fB, const char *restrict \fP\fIdelim\fP\fB);\fP
提取 \fIstringp\fP 中由 \fIdelim\fP 中的一个字节分隔的初始 token。
.TP 
\fBsize_t strspn(const char *\fP\fIs\fP\fB, const char *\fP\fIaccept\fP\fB);\fP
计算字符串 \fIs\fP 中完全由 \fIaccept\fP 中的字节组成的起始段的长度。
.TP 
\fBchar *strstr(const char *\fP\fIhaystack\fP\fB, const char *\fP\fIneedle\fP\fB);\fP
查找字符串 \fIhaystack\fP 中第一次出现的子字符串 \fIneedle\fP，返回指向找到的子字符串的指针。
.TP 
\fBchar *strtok(char *restrict \fP\fIs\fP\fB, const char *restrict \fP\fIdelim\fP\fB);\fP
从由 \fIdelim\fP 中的一个字节分隔的字符串 \fIs\fP 中提取 tokens。
.TP 
.nf
\fBsize_t strxfrm(char \fP\fIdest\fP\fB[restrict .\fP\fIn\fP\fB], const char \fP\fIsrc\fP\fB[restrict .\fP\fIn\fP\fB],\fP
\fB        size_t \fP\fIn\fP\fB);\fP
.fi
将 \fIsrc\fP 转换为当前语言环境并将第一个 \fIn\fP 字节复制到 \fIdest\fP。
.SS "Obsolete functions"
.TP 
.nf
\fBchar *strncpy(char \fP\fIdest\fP\fB[restrict .\fP\fIn\fP\fB], const char \fP\fIsrc\fP\fB[restrict .\fP\fIn\fP\fB],\fP
\fB       size_t \fP\fIn\fP\fB);\fP
.fi
将最多 \fIn\fP 个字节从字符串 \fIsrc\fP 复制到 \fIdest\fP，返回指向 \fIdest\fP 开头的指针。
.SH DESCRIPTION
字符串函数对以 null 结尾的字符串执行操作。 有关每个函数的说明，请参见单独的手册页。
.SH "SEE ALSO"
\fBbstring\fP(3), \fBstpcpy\fP(3), \fBstrcasecmp\fP(3), \fBstrcat\fP(3), \fBstrchr\fP(3),
\fBstrcmp\fP(3), \fBstrcoll\fP(3), \fBstrcpy\fP(3), \fBstrcspn\fP(3), \fBstrdup\fP(3),
\fBstrfry\fP(3), \fBstrlen\fP(3), \fBstrncasecmp\fP(3), \fBstrncat\fP(3), \fBstrncmp\fP(3),
\fBstrncpy\fP(3), \fBstrpbrk\fP(3), \fBstrrchr\fP(3), \fBstrsep\fP(3), \fBstrspn\fP(3),
\fBstrstr\fP(3), \fBstrtok\fP(3), \fBstrxfrm\fP(3)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
