.\" -*- coding: UTF-8 -*-
'\" t
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\" and Copyright 2006 Michael Kerrisk <mtk.manpages@ganil.com>
.\"
.\" SPDX-License-Identifier: Linux-man-pages-copyleft
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sun Jul 25 10:53:39 1993 by Rik Faith (faith@cs.unc.edu)
.\" Added correction due to nsd@bbc.com (Nick Duffek) - aeb, 950610
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH strtol 3 2023\-02\-05 "Linux man\-pages 6.03" 
.SH NAME
strtol, strtoll, strtoq \- 将字符串转换为长整型
.SH LIBRARY
标准 C 库 (\fIlibc\fP、\fI\-lc\fP)
.SH SYNOPSIS
.nf
\fB#include <stdlib.h>\fP
.PP
\fBlong strtol(const char *restrict \fP\fInptr\fP\fB,\fP
\fB            char **restrict \fP\fIendptr\fP\fB, int \fP\fIbase\fP\fB);\fP 
\fBlong long strtoll(const char *restrict \fP\fInptr\fP\fB,\fP
\fB            char **restrict \fP\fIendptr\fP\fB, int \fP\fIbase\fP\fB);\fP
.fi
.PP
.RS -4
特性测试宏 glibc 的要求 (参见 \fBfeature_test_macros\fP(7)):
.RE
.PP
\fBstrtoll\fP():
.nf
    _ISOC99_SOURCE
        || /* glibc <= 2.19: */ _SVID_SOURCE || _BSD_SOURCE
.fi
.SH DESCRIPTION
\fBstrtol\fP() 函数根据给定的 \fIbase\fP 将 \fInptr\fP 中的字符串的初始部分转换为长整型值，该值必须介于 2 和 36 之间 (含
2 和 36)，或者是特殊值 0.
.PP
该字符串可以以任意数量的空格开头 (由 \fBisspace\fP(3)) 确定，后跟一个可选的 \[aq]+\[aq] 或 \[aq]\-\[aq] 符号。
如果 \fIbase\fP 为零或 16，则该字符串可能包含 "0x" 或 "0X" 前缀，并且该数字将以 16 为基数读取; 否则，零 \fIbase\fP
被视为 10 (decimal)，除非下一个字符是 \[aq] 0\[aq]，在这种情况下，它被视为 8 (octal)。
.PP
字符串的其余部分以明显的方式转换为 \fIlong\fP 值，在给定基数中不是有效数字的第一个字符处停止。 (在 10 以上的基数中，大写或小写字母
\[aq] A\[aq] 表示 10，\[aq] B\[aq] 表示 11，依此类推，\[aq] Z\[aq] 代表 35。)
.PP
如果 \fIendptr\fP 不为 NULL，则 \fBstrtol\fP() 将第一个无效字符的地址存储在 \fI*endptr\fP 中。 如果根本没有数字，则
\fBstrtol\fP() 将 \fInptr\fP 的原始值存储在 \fI*endptr\fP 中 (并返回 0)。 特别是，如果返回时 \fI*nptr\fP 不是
\[aq]\e0\[aq] 但 \fI**endptr\fP 是 \[aq]\e0\[aq]，则整个字符串是有效的。
.PP
\fBstrtoll\fP() 函数的工作方式与 \fBstrtol\fP() 函数相同，但返回的是 \fIlong long\fP 整数值。
.SH "RETURN VALUE"
\fBstrtol\fP() 函数返回转换的结果，除非该值会下溢或上溢。 如果发生下溢，\fBstrtol\fP() 返回 \fBLONG_MIN\fP。
如果发生溢出，\fBstrtol\fP() 返回 \fBLONG_MAX\fP。 在这两种情况下，\fIerrno\fP 都设置为 \fBERANGE\fP。
\fBstrtoll\fP() 的情况完全相同 (使用 \fBLLONG_MIN\fP 和 \fBLLONG_MAX\fP 而不是 \fBLONG_MIN\fP 和
\fBLONG_MAX\fP)。
.SH ERRORS
.TP 
\fBEINVAL\fP
(不在 C99 中) 给定的 \fIbase\fP 包含不受支持的值。
.TP 
\fBERANGE\fP
结果值越界。
.PP
如果没有执行转换 (没有看到数字，返回 0)，该实现也可以将 \fIerrno\fP 设置为 \fBEINVAL\fP。
.SH ATTRIBUTES
有关本节中使用的术语的解释，请参见 \fBattributes\fP(7)。
.ad l
.nh
.TS
allbox;
lbx lb lb
l l l.
Interface	Attribute	Value
T{
\fBstrtol\fP(),
\fBstrtoll\fP(),
\fBstrtoq\fP()
T}	Thread safety	MT\-Safe locale
.TE
.hy
.ad
.sp 1
.SH STANDARDS
\fBstrtol\fP(): POSIX.1\-2001, POSIX.1\-2008, C99, SVr4, 4.3BSD.
.PP
\fBstrtoll\fP(): POSIX.1\-2001, POSIX.1\-2008, C99.
.SH NOTES
由于 \fBstrtol\fP() 可以在成功和失败时合法地为 \fBstrtoll\fP()) 返回 0、\fBLONG_MAX\fP 或 \fBLONG_MIN\fP
(\fBLLONG_MAX\fP 或 \fBLLONG_MIN\fP，因此调用程序应在调用之前将 \fIerrno\fP 设置为 0，然后通过检查 \fIerrno\fP
之后是否具有非零值来确定是否发生错误调用。
.PP
根据 POSIX.1，在 "C" 和 "POSIX" 以外的语言环境中，这些函数可以接受其他实现定义的数字字符串。
.PP
BSD 还有
.PP
.in +4n
.EX
\fBquad_t strtoq(const char *\fP\fInptr\fP\fB, char **\fP\fIendptr\fP\fB, int \fP\fIbase\fP\fB);\fP
.EE
.in
.PP
具有完全类似的定义。 根据当前体系结构的字长，这可能等同于 \fBstrtoll\fP() 或 \fBstrtol\fP()。
.SH EXAMPLES
下面显示的程序演示了 \fBstrtol\fP() 的使用。 第一个命令行参数指定一个字符串，\fBstrtol\fP() 应该从中解析一个数字。 第二个
(optional) 参数指定要用于转换的基数。 (此参数使用 \fBatoi\fP(3) 转换为数字形式，这是一个不执行错误检查且界面比
\fBstrtol\fP().) 更简单的函数。此程序生成的结果的一些示例如下:
.PP
.in +4n
.EX
$\fB ./a.out 123\fP
strtol() 返回 123
$\fB ./a.out \[aq]    123\[aq]\fP
strtol() 返回 123
$\fB ./a.out 123abc\fP
strtol() 返回 123
数字后的其他字符: "abc"
$\fB ./a.out 123abc 55\fP
strtol: 无效的参数
$\fB ./a.out \[aq]\[aq]\fP
没有找到数字
$\fB ./a.out 4000000000\fP
strtol: 数值结果越界
.EE
.in
.SS "Program source"
.\" SRC BEGIN (strtol.c)
\&
.EX
#include <errno.h>
#include <limits.h>
#include <stdio.h>
#include <stdlib.h>

int
main(int argc, char *argv[])
{
    int base;
    char *endptr, *str;
    long val;

    if (argc < 2) {
        fprintf(stderr, "Usage: %s str [base]\en", argv[0]);
        exit(EXIT_FAILURE);
    }

    str = argv[1];
    base = (argc > 2) ? atoi(argv[2]) : 0;

    errno = 0;     /* To distinguish success/failure after call */
    val = strtol(str, &endptr, base);

    /* Check for various possible errors. */

    if (errno != 0) {
        perror("strtol");
        exit(EXIT_FAILURE);
    }

    if (endptr == str) {
        fprintf(stderr, "No digits were found\en");
        exit(EXIT_FAILURE);
    }

    /* If we got here, strtol() successfully parsed a number. */

    printf("strtol() returned %ld\en", val);

    if (*endptr != \[aq]\e0\[aq])        /* Not necessarily an error...  */
        printf("Further characters after number: \e"%s\e"\en", endptr);

    exit(EXIT_SUCCESS);
}
.EE
.\" SRC END
.SH "SEE ALSO"
\fBatof\fP(3), \fBatoi\fP(3), \fBatol\fP(3), \fBstrtod\fP(3), \fBstrtoimax\fP(3),
\fBstrtoul\fP(3)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
