.\" -*- coding: UTF-8 -*-
'\" t
.\" Copyright (c) 1999 Andries Brouwer (aeb@cwi.nl)
.\"
.\" SPDX-License-Identifier: Linux-man-pages-copyleft
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH tempnam 3 2023\-02\-05 "Linux man\-pages 6.03" 
.SH NAME
tempnam \- 为临时文件创建一个名称
.SH LIBRARY
标准 C 库 (\fIlibc\fP、\fI\-lc\fP)
.SH SYNOPSIS
.nf
\fB#include <stdio.h>\fP
.PP
\fBchar *tempnam(const char *\fP\fIdir\fP\fB, const char *\fP\fIpfx\fP\fB);\fP
.fi
.PP
.RS -4
特性测试宏 glibc 的要求 (参见 \fBfeature_test_macros\fP(7)):
.RE
.PP
\fBtempnam\fP():
.nf
    由于 glibc 2.19:
        _DEFAULT_SOURCE
    glibc 2.19 及更早版本:
        _BSD_SOURCE || _SVID_SOURCE
.fi
.SH DESCRIPTION
\fINever use this function.\fP 请改用 \fBmkstemp\fP(3) 或 \fBtmpfile\fP(3)。
.PP
\fBtempnam\fP() 函数返回一个指向字符串的指针，该字符串是一个有效的文件名，因此在 \fBtempnam\fP() 检查时不存在具有此名称的文件。
如果 \fIpfx\fP 是最多五个字节的非 NULL 字符串，则生成的路径名的文件名后缀将以 \fIpfx\fP 开头。 生成的路径名的目录前缀部分必须是
"appropriate" (通常至少意味着可写)。
.PP
通过以下步骤尝试找到合适的目录:
.TP  3
a)
如果环境变量 \fBTMPDIR\fP 存在并且包含适当目录的名称，则使用该变量。
.TP 
b)
否则，如果 \fIdir\fP 参数为非 NULL 且合适，则使用它。
.TP 
c)
否则，在适当的时候使用 \fIP_tmpdir\fP (如 \fI<stdio.h>\fP) 中所定义)。
.TP 
d)
最后，可以使用实现定义的目录。
.PP
\fBtempnam\fP() 返回的字符串是使用 \fBmalloc\fP(3) 分配的，因此应该由 \fBfree\fP(3) 释放。
.SH "RETURN VALUE"
成功时，\fBtempnam\fP() 函数返回一个指向唯一临时文件名的指针。 如果无法生成唯一名称，则返回 NULL，并设置 \fIerrno\fP 以指示错误。
.SH ERRORS
.TP 
\fBENOMEM\fP
存储分配失败。
.SH ATTRIBUTES
有关本节中使用的术语的解释，请参见 \fBattributes\fP(7)。
.ad l
.nh
.TS
allbox;
lbx lb lb
l l l.
Interface	Attribute	Value
T{
\fBtempnam\fP()
T}	Thread safety	MT\-Safe env
.TE
.hy
.ad
.sp 1
.SH STANDARDS
SVr4, 4.3BSD, POSIX.1\-2001.  POSIX.1\-2008 将 \fBtempnam\fP() 标记为已过时。
.SH NOTES
尽管 \fBtempnam\fP() 生成的名称难以猜测，但在 \fBtempnam\fP() 返回路径名的时间和程序打开它的时间之间，另一个程序可能会使用
\fBopen\fP(2) 创建该路径名，或者将其创建为符号链接。 这可能会导致安全漏洞。 为避免这种可能性，请使用 \fBopen\fP(2) \fBO_EXCL\fP
标志打开路径名。 或者更好的是，使用 \fBmkstemp\fP(3) 或 \fBtmpfile\fP(3)。
.PP
SUSv2 没有提到 \fBTMPDIR\fP 的使用; glibc 将仅在程序未设置用户 ID 时使用它。 在 SVr4 上，\fBd)\fP 下使用的目录是
\fI/tmp\fP (这就是 glibc 所做的)。
.PP
因为它动态分配用于返回路径名的内存，\fBtempnam\fP() 是可重入的，因此与 \fBtmpnam\fP(3) 不同，它是线程安全的。
.PP
\fBtempnam\fP() 函数每次调用都会生成不同的字符串，直到 \fBTMP_MAX\fP (定义为 \fI<stdio.h>\fP) 次。
如果它被调用超过 \fBTMP_MAX\fP 次，则行为是实现定义的。
.PP
\fBtempnam\fP() 最多使用 \fIpfx\fP 的前五个字节。
.PP
找不到唯一名称时，\fBtempnam\fP() 的 glibc 实现失败并显示错误 \fBEEXIST\fP。
.SH BUGS
"appropriate" 的确切含义未定义; 未指定如何确定目录的可访问性。
.SH "SEE ALSO"
\fBmkstemp\fP(3), \fBmktemp\fP(3), \fBtmpfile\fP(3), \fBtmpnam\fP(3)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
