.\" -*- coding: UTF-8 -*-
'\" t
.\" Copyright 2002 walter harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" SPDX-License-Identifier: GPL-1.0-or-later
.\"
.\" based on the description in glibc source and infopages
.\"
.\" Corrections and additions, aeb
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH argz_add 3 2023\-02\-05 "Linux man\-pages 6.03" 
.SH NAME
argz_add, argz_add_sep, argz_append, argz_count, argz_create,
argz_create_sep, argz_delete, argz_extract, argz_insert, argz_next,
argz_replace, argz_stringify \- 处理 argz 列表的函数
.SH LIBRARY
标准 C 库 (\fIlibc\fP、\fI\-lc\fP)
.SH SYNOPSIS
.nf
\fB#include <argz.h>\fP
.PP
\fBerror_t argz_add(char **restrict \fP\fIargz\fP\fB, size_t *restrict \fP\fIargz_len\fP\fB,\fP
\fB                const char *restrict \fP\fIstr\fP\fB);\fP
.PP
\fBerror_t argz_add_sep(char **restrict \fP\fIargz\fP\fB, size_t *restrict \fP\fIargz_len\fP\fB,\fP
\fB                const char *restrict \fP\fIstr\fP\fB, int \fP\fIdelim\fP\fB);\fP
.PP
\fBerror_t argz_append(char **restrict \fP\fIargz\fP\fB, size_t *restrict \fP\fIargz_len\fP\fB,\fP
\fB                const char *restrict \fP\fIbuf\fP\fB, size_t \fP\fIbuf_len\fP\fB);\fP
.PP
\fBsize_t argz_count(const char *\fP\fIargz\fP\fB, size_t \fP\fIargz_len\fP\fB);\fP
.PP
\fBerror_t argz_create(char *const \fP\fIargv\fP\fB[], char **restrict \fP\fIargz\fP\fB,\fP
\fB                size_t *restrict \fP\fIargz_len\fP\fB);\fP
.PP
\fBerror_t argz_create_sep(const char *restrict \fP\fIstr\fP\fB, int \fP\fIsep\fP\fB,\fP
\fB                char **restrict \fP\fIargz\fP\fB, size_t *restrict \fP\fIargz_len\fP\fB);\fP
.PP
\fBvoid argz_delete(char **restrict \fP\fIargz\fP\fB, size_t *restrict \fP\fIargz_len\fP\fB,\fP
\fB                char *restrict \fP\fIentry\fP\fB);\fP
.PP
\fBvoid argz_extract(const char *restrict \fP\fIargz\fP\fB, size_t \fP\fIargz_len\fP\fB,\fP
\fB                char **restrict \fP\fIargv\fP\fB);\fP
.PP
\fBerror_t argz_insert(char **restrict \fP\fIargz\fP\fB, size_t *restrict \fP\fIargz_len\fP\fB,\fP
\fB                char *restrict \fP\fIbefore\fP\fB, const char *restrict \fP\fIentry\fP\fB);\fP
.PP
\fBchar *argz_next(const char *restrict \fP\fIargz\fP\fB, size_t \fP\fIargz_len\fP\fB,\fP
\fB                const char *restrict \fP\fIentry\fP\fB);\fP
.PP
\fBerror_t argz_replace(char **restrict \fP\fIargz\fP\fB, size_t *restrict \fP\fIargz_len\fP\fB,\fP
\fB                const char *restrict \fP\fIstr\fP\fB, const char *restrict \fP\fIwith\fP\fB,\fP
\fB                unsigned int *restrict \fP\fIreplace_count\fP\fB);\fP
.PP
\fBvoid argz_stringify(char *\fP\fIargz\fP\fB, size_t \fP\fIlen\fP\fB, int \fP\fIsep\fP\fB);\fP
.fi
.SH DESCRIPTION
这些函数是特定于 glibc 的。
.PP
argz vector 是指向字符缓冲区的指针以及长度。 字符缓冲区的预期解释是一个字符串数组，其中字符串由空字节 (\[aq]\e0\[aq])
分隔。 如果长度不为零，则缓冲区的最后一个字节必须为空字节。
.PP
这些函数用于处理 argz vectors。 (NULL,0) 对是一个 argz vector，相反，长度为 0 的 argz vectors
必须有空指针。 非空 argz vectors 的分配是使用 \fBmalloc\fP(3) 完成的，因此可以使用 \fBfree\fP(3) 再次处理它们。
.PP
\fBargz_add\fP() 在数组 \fI*argz\fP 的末尾添加字符串 \fIstr\fP，并更新 \fI*argz\fP 和 \fI*argz_len\fP。
.PP
\fBargz_add_sep\fP() 类似，但将字符串 \fIstr\fP 拆分为由定界符 \fIdelim\fP 分隔的子字符串。 例如，可以在带有定界符
\[aq]:\[aq] 的 UNIX 搜索路径上使用它。
.PP
\fBargz_append\fP() 在 (\fI*argz\fP,\ \fI*argz_len\fP) 之后，追加，了 argz vector (\fIbuf\fP,\ \fIbuf_len\fP) 并更新了 \fI*argz\fP 和 \fI*argz_len\fP。 (因此，\fI*argz_len\fP 将增加 \fIbuf_len\fP.)
.PP
\fBargz_count\fP() 统计 (\fIargz\fP,\ \fIargz_len\fP) 中字符串的个数，即空字节 (\[aq]\e0\[aq]) 的个数。
.PP
\fBargz_create\fP() 将由 \fI(char\ *)\ 0\fP 终止的 UNIX 风格的参数 vector \fIargv\fP 转换为 argz
vector (\fI*argz\fP,\ \fI*argz_len\fP)。
.PP
\fBargz_create_sep\fP() 通过在每次出现分隔符 \fIsep\fP 时将其分解，将以 null 结尾的字符串 \fIstr\fP 转换为 argz
vector (\fI*argz\fP,\ \fI*argz_len\fP)。
.PP
\fBargz_delete\fP() 从 argz vector (\fI*argz\fP,\ \fI*argz_len\fP) 中移除 \fIentry\fP
指向的子字符串并更新 \fI*argz\fP 和 \fI*argz_len\fP。
.PP
\fBargz_extract\fP() 与 \fBargz_create\fP() 相反。 它采用 argz vector (\fIargz\fP,\ \fIargz_len\fP) 并用指向子字符串的指针和最后的 NULL 填充从 \fIargv\fP 开始的数组，形成 UNIX 风格的 argv vector。
数组 \fIargv\fP 必须为 \fIargz_count\fP(\fIargz\fP、\fIargz_len\fP) + 1 个指针留出空间。
.PP
\fBargz_insert\fP() 与 \fBargz_delete\fP() 相反。 它将位置 \fIbefore\fP 的参数 \fIentry\fP 插入到 argz
vector (\fI*argz\fP,\ \fI*argz_len\fP) 并更新 \fI*argz\fP 和 \fI*argz_len\fP。 如果 \fIbefore\fP 为
NULL，则 \fIentry\fP 将插入到末尾。
.PP
\fBargz_next\fP() 是步进 argz vector 的一个函数。 如果 \fIentry\fP 为 NULL，则返回第一个条目。
否则，返回以下条目。 如果没有后续条目，则返回 NULL。
.PP
\fBargz_replace\fP() 将每次出现的 \fIstr\fP 替换为 \fIwith\fP，并根据需要重新分配 argz。 如果
\fIreplace_count\fP 为非 NULL，则 \fI*replace_count\fP 将增加替换次数。
.PP
\fBargz_stringify\fP() 与 \fBargz_create_sep\fP() 相反。 它通过用 \fIsep\fP 替换除最后一个以外的所有空字节
(\[aq]\e0\[aq])，将 argz vector 转换为普通字符串。
.SH "RETURN VALUE"
所有做内存分配的 argz 函数的返回类型都是 \fIerror_t\fP (整型)，成功返回 0，分配错误返回 \fBENOMEM\fP。
.SH ATTRIBUTES
有关本节中使用的术语的解释，请参见 \fBattributes\fP(7)。
.ad l
.nh
.TS
allbox;
lbx lb lb
l l l.
Interface	Attribute	Value
T{
\fBargz_add\fP(),
\fBargz_add_sep\fP(),
\fBargz_append\fP(),
\fBargz_count\fP(),
\fBargz_create\fP(),
\fBargz_create_sep\fP(),
\fBargz_delete\fP(),
\fBargz_extract\fP(),
\fBargz_insert\fP(),
\fBargz_next\fP(),
\fBargz_replace\fP(),
\fBargz_stringify\fP()
T}	Thread safety	MT\-Safe
.TE
.hy
.ad
.sp 1
.SH STANDARDS
这些函数是 GNU 的扩展。
.SH BUGS
没有终止空字节的 Argz vectors 可能会导致分段错误。
.SH "SEE ALSO"
\fBenvz_add\fP(3)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
