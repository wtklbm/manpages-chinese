.\" -*- coding: UTF-8 -*-
'\" t
.\" Copyright (c) 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" SPDX-License-Identifier: Linux-man-pages-copyleft
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH matherr 3 2023\-02\-05 "Linux man\-pages 6.03" 
.SH NAME
matherr\-SVID 数学库异常处理
.SH LIBRARY
数学库 (\fIlibm\fP、\fI\-lm\fP)
.SH SYNOPSIS
.nf
\fB#include <math.h>\fP
.PP
\fB[[deprecated]] int matherr(struct exception *\fP\fIexc\fP\fB);\fP
.PP
\fB[[deprecated]] extern _LIB_VERSION_TYPE _LIB_VERSION;\fP
.fi
.SH DESCRIPTION
.\" glibc commit 813378e9fe17e029caf627cab76fe23eb46815fa
\fINote\fP: glibc 不再支持此页面中描述的机制。 在 glibc 2.27 之前，它已被标记为已过时。 自 glibc 2.27
以来，该机制已被完全删除。 新应用程序应使用 \fBmath_error\fP(7) 和 \fBfenv\fP(3) 中描述的技术。 此页面记录了
\fBmatherr\fP() 机制，以帮助维护和移植旧应用程序。
.PP
System V 接口定义 (SVID) 指定各种数学函数在检测到数学异常时应调用名为 \fBmatherr\fP() 的函数。
这个函数在数学函数函数返回之前被调用; \fBmatherr\fP() 返回后，系统再返回数学函数，数学函数又返回给调用者。
.PP
要使用 \fBmatherr\fP()，程序员必须定义 \fB_SVID_SOURCE\fP 特性测试宏 (在包含 \fIany\fP 头文件之前)，并将值
\fB_SVID_\fP 赋给外部变量 \fB_LIB_VERSION\fP。
.PP
系统提供默认版本 \fBmatherr\fP()。 这个版本什么也不做，并返回零 (见下文了解其意义)。 默认的 \fBmatherr\fP()
可以被程序员定义的版本覆盖，当发生异常时将调用它。 函数调用一个参数，一个指向 \fIexception\fP 结构体的指针，定义如下:
.PP
.in +4n
.EX
struct exception {
    int    type;      /* Exception type */
    char  *name;      /* Name of function causing exception */
    double arg1;      /* 1st argument to function */
    double arg2;      /* 2nd argument to function */
    double retval;    /* Function return value */
}
.EE
.in
.PP
\fItype\fP 字段具有以下值之一:
.TP  12
\fBDOMAIN\fP
发生域错误 (函数参数超出了函数定义的范围)。 返回值取决于函数; \fIerrno\fP 设置为 \fBEDOM\fP。
.TP 
\fBSING\fP
出现极点错误 (函数结果为无穷大)。 在大多数情况下，返回值是 \fBHUGE\fP (最大的单精度浮点数)，带有适当的符号。
在大多数情况下，\fIerrno\fP 设置为 \fBEDOM\fP。
.TP 
\fBOVERFLOW\fP
发生溢出。 在大多数情况下，返回值 \fBHUGE\fP，\fIerrno\fP 设置为 \fBERANGE\fP。
.TP 
\fBUNDERFLOW\fP
发生下溢。 返回 0.0，并将 \fIerrno\fP 设置为 \fBERANGE\fP。
.TP 
\fBTLOSS\fP
完全失去意义。 返回 0.0，并将 \fIerrno\fP 设置为 \fBERANGE\fP。
.TP 
\fBPLOSS\fP
部分失去意义。 该值在 glibc (和许多其他系统) 上未使用。
.PP
\fIarg1\fP 和 \fIarg2\fP 字段是提供给函数的参数 (\fIarg2\fP 对于只需要一个参数的函数是未定义的)。
.PP
\fIretval\fP 字段指定数学函数将返回给其调用者的返回值。 程序员定义的 \fBmatherr\fP() 可以修改这个域来改变数学函数的返回值。
.PP
如果 \fBmatherr\fP() 函数返回零，则系统按上述设置 \fIerrno\fP，并可能在标准错误上打印一条错误消息 (见下文)。
.PP
如果 \fBmatherr\fP() 函数返回非零值，则系统不会设置 \fIerrno\fP，并且不会打印错误消息。
.SS "Math functions that employ matherr()"
下表列出了调用 \fBmatherr\fP() 的函数和情况。 "Type" 列表示调用 \fBmatherr\fP() 时分配给 \fIexc\->type\fP
的值。 "Result" 列是分配给 \fIexc\->retval\fP 的默认返回值。
.PP
"Msg?" 和 "errno" 列描述了 \fBmatherr\fP() 返回零时的默认行为。 如果 "Msg?" 列包含
"y"，则系统会在标准错误上打印一条错误消息。
.PP
该表使用以下符号和缩写:
.PP
.RS
.TS
l l.
x        first argument to function
y        second argument to function
fin      finite value for argument
neg      negative value for argument
int      integral value for argument
o/f      result overflowed
u/f      result underflowed
|x|      absolute value of x
X_TLOSS  is a constant defined in \fI<math.h>\fP
.TE
.RE
.\" Details below from glibc 2.8's sysdeps/ieee754/k_standard.c
.\" A subset of cases were test by experimental programs.
.TS
lB lB lB cB lB
l l l c l.
Function	Type	Result	Msg?	errno
acos(|x|>1)	DOMAIN	HUGE	y	EDOM
asin(|x|>1)	DOMAIN	HUGE	y	EDOM
atan2(0,0)	DOMAIN	HUGE	y	EDOM
.\" retval is 0.0/0.0
acosh(x<1)	DOMAIN	NAN	y	EDOM	
.\" retval is 0.0/0.0
atanh(|x|>1)	DOMAIN	NAN	y	EDOM	
.\" retval is x/0.0
atanh(|x|==1)	SING	(x>0.0)?	y	EDOM	
\ 	\ 	HUGE_VAL :
\ 	\ 	\-HUGE_VAL
cosh(fin) o/f	OVERFLOW	HUGE	n	ERANGE
sinh(fin) o/f	OVERFLOW	(x>0.0) ?	n	ERANGE
\ 	\ 	HUGE : \-HUGE
sqrt(x<0)	DOMAIN	0.0	y	EDOM
hypot(fin,fin) o/f	OVERFLOW	HUGE	n	ERANGE
exp(fin) o/f	OVERFLOW	HUGE	n	ERANGE
exp(fin) u/f	UNDERFLOW	0.0	n	ERANGE
exp2(fin) o/f	OVERFLOW	HUGE	n	ERANGE
exp2(fin) u/f	UNDERFLOW	0.0	n	ERANGE
exp10(fin) o/f	OVERFLOW	HUGE	n	ERANGE
exp10(fin) u/f	UNDERFLOW	0.0	n	ERANGE
j0(|x|>X_TLOSS)	TLOSS	0.0	y	ERANGE
j1(|x|>X_TLOSS)	TLOSS	0.0	y	ERANGE
jn(|x|>X_TLOSS)	TLOSS	0.0	y	ERANGE
y0(x>X_TLOSS)	TLOSS	0.0	y	ERANGE
y1(x>X_TLOSS)	TLOSS	0.0	y	ERANGE
yn(x>X_TLOSS)	TLOSS	0.0	y	ERANGE
y0(0)	DOMAIN	\-HUGE	y	EDOM
y0(x<0)	DOMAIN	\-HUGE	y	EDOM
y1(0)	DOMAIN	\-HUGE	y	EDOM
y1(x<0)	DOMAIN	\-HUGE	y	EDOM
yn(n,0)	DOMAIN	\-HUGE	y	EDOM
yn(x<0)	DOMAIN	\-HUGE	y	EDOM
lgamma(fin) o/f	OVERFLOW	HUGE	n	ERANGE
lgamma(\-int) or	SING	HUGE	y	EDOM
\ \ lgamma(0)
tgamma(fin) o/f	OVERFLOW	HUGE_VAL	n	ERANGE
tgamma(\-int)	SING	NAN	y	EDOM
tgamma(0)	SING	copysign(	y	ERANGE
\ 	\ 	HUGE_VAL,x)
log(0)	SING	\-HUGE	y	EDOM
log(x<0)	DOMAIN	\-HUGE	y	EDOM
.\" different from log()
log2(0)	SING	\-HUGE	n	EDOM	
.\" different from log()
log2(x<0)	DOMAIN	\-HUGE	n	EDOM	
log10(0)	SING	\-HUGE	y	EDOM
log10(x<0)	DOMAIN	\-HUGE	y	EDOM
pow(0.0,0.0)	DOMAIN	0.0	y	EDOM
pow(x,y) o/f	OVERFLOW	HUGE	n	ERANGE
pow(x,y) u/f	UNDERFLOW	0.0	n	ERANGE
pow(NaN,0.0)	DOMAIN	x	n	EDOM
.\" +0 and -0
0**neg	DOMAIN	0.0	y	EDOM	
neg**non\-int	DOMAIN	0.0	y	EDOM
scalb() o/f	OVERFLOW	(x>0.0) ?	n	ERANGE
\ 	\ 	HUGE_VAL :
\ 	\ 	\-HUGE_VAL
scalb() u/f	UNDERFLOW	copysign(	n	ERANGE
\ 	\ 	\ \ 0.0,x)
fmod(x,0)	DOMAIN	x	y	EDOM
.\" retval is 0.0/0.0
remainder(x,0)	DOMAIN	NAN	y	EDOM	
.TE
.SH ATTRIBUTES
有关本节中使用的术语的解释，请参见 \fBattributes\fP(7)。
.ad l
.nh
.TS
allbox;
lbx lb lb
l l l.
Interface	Attribute	Value
T{
\fBmatherr\fP()
T}	Thread safety	MT\-Safe
.TE
.hy
.ad
.sp 1
.SH EXAMPLES
示例程序演示了调用 \fBlog\fP(3) 时 \fBmatherr\fP() 的使用。 该程序最多占用三个命令行参数。 第一个参数是要赋给 \fBlog\fP(3)
的浮点数。 如果提供了可选的第二个参数，则 \fB_LIB_VERSION\fP 设置为 \fB_SVID_\fP，以便调用
\fBmatherr\fP()，并且命令行参数中提供的整数用作 \fBmatherr\fP() 的返回值。
如果提供了可选的第三个命令行参数，则它指定了一个替代返回值，\fBmatherr\fP() 应将其分配为数学函数的返回值。
.PP
以下示例运行，其中 \fBlog\fP(3) 的参数为 0.0，不使用 \fBmatherr\fP():
.PP
.in +4n
.EX
$\fB ./a.out 0.0\fP
errno: 数值结果越界
x=\-inf
.EE
.in
.PP
在接下来的运行中，\fBmatherr\fP() 被调用，并返回 0:
.PP
.in +4n
.EX
$\fB ./a.out 0.0 0\fP
log() 函数中的 matherr SING 异常
        参数: 0.000000，0.000000
        更新: \-340282346638528859811704183484516925440.000000
日志: SING 错误
errno: 数值参数超出域
x=\-340282346638528859811704183484516925440.000000
.EE
.in
.PP
消息 "log: SING error" 由 C 库打印。
.PP
在接下来的运行中，\fBmatherr\fP() 被调用，并返回一个非零值:
.PP
.in +4n
.EX
$\fB ./a.out 0.0 1\fP
log() 函数中的 matherr SING 异常
        参数: 0.000000，0.000000
        更新: \-340282346638528859811704183484516925440.000000
x=\-340282346638528859811704183484516925440.000000
.EE
.in
.PP
在这种情况下，C 库没有打印消息，也没有设置 \fIerrno\fP。
.PP
在接下来的运行中，\fBmatherr\fP() 被调用，更改数学函数的返回值，并返回一个非零值:
.PP
.in +4n
.EX
$\fB ./a.out 0.0 1 12345.0\fP
log() 函数中的 matherr SING 异常
        参数: 0.000000，0.000000
        更新: \-340282346638528859811704183484516925440.000000
x=12345.000000
.EE
.in
.SS "Program source"
.\" [[deprecated]] SRC BEGIN (matherr.c)
\&
.EX
#define _SVID_SOURCE
#include <errno.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>

static int matherr_ret = 0;      /* Value that matherr()
                                   should return */ 
static int change_retval = 0;    /* Should matherr() change
                                   function\[aq]s return value?  */
static double new_retval;        /* New function return value */

int
matherr(struct exception *exc)
{
    fprintf(stderr, "matherr %s exception in %s() function\en",
            (exc\->type == DOMAIN) ?    "DOMAIN" :
            (exc\->type == OVERFLOW) ?  "OVERFLOW" :
            (exc\->type == UNDERFLOW) ? "UNDERFLOW" :
            (exc\->type == SING) ?      "SING" :
            (exc\->type == TLOSS) ?     "TLOSS" :
            (exc\->type == PLOSS) ?     "PLOSS" : "???",
            exc\->name);
    fprintf(stderr, "        args:   %f, %f\en",
            exc\->arg1, exc\->arg2);
    fprintf(stderr, "        retval: %f\en", exc\->retval);

    if (change_retval)
        exc\->retval = new_retval;

    return matherr_ret;
}

int
main(int argc, char *argv[])
{
    double x;

    if (argc < 2) {
        fprintf (stderr, " 用法: %s <argval>"
                " [<matherr\-ret> [<new\-func\-retval>]]\en", argv[0]);
        exit(EXIT_FAILURE);
    }

    if (argc > 2) {
        _LIB_VERSION = _SVID_;
        matherr_ret = atoi(argv[2]);
    }

    if (argc > 3) {
        change_retval = 1;
        new_retval = atof(argv[3]);
    }

    x = log(atof(argv[1]));
    if (errno != 0)
        perror("errno");

    printf("x=%f\en", x);
    exit(EXIT_SUCCESS);
}
.EE
.\" SRC END
.SH "SEE ALSO"
\fBfenv\fP(3), \fBmath_error\fP(7), \fBstandards\fP(7)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
