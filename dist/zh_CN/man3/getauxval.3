.\" -*- coding: UTF-8 -*-
'\" t
.\" Copyright 2012 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" SPDX-License-Identifier: Linux-man-pages-copyleft
.\"
.\" See also https://lwn.net/Articles/519085/
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH getauxval 3 2023\-01\-07 "Linux man\-pages 6.03" 
.SH NAME
getauxval \- 从辅助 vector 中检索一个值
.SH LIBRARY
标准 C 库 (\fIlibc\fP、\fI\-lc\fP)
.SH SYNOPSIS
.nf
\fB#include <sys/auxv.h>\fP
.PP
\fBunsigned long getauxval(unsigned long \fP\fItype\fP\fB);\fP
.fi
.SH DESCRIPTION
\fBgetauxval\fP() 函数从辅助 vector 中检索值，这是内核的 ELF 二进制加载程序在执行程序时用于将某些信息传递给用户空间的一种机制。
.PP
辅助 vector 中的每个条目都由一对值组成: 一个标识该条目代表什么的类型，以及该类型的一个值。 给定参数
\fItype\fP，\fBgetauxval\fP() 返回对应的值。
.PP
下表给出了每个 \fItype\fP 的返回值。 并非所有 \fItype\fP 值都存在于所有体系结构中。
.TP 
\fBAT_BASE\fP
程序解释器 (通常是动态链接器) 的基地址。
.TP 
\fBAT_BASE_PLATFORM\fP
.\" commit e585b768da111f2c2d413de6214e83bbdfee8f22
指向字符串的指针 (仅限 PowerPC 和 MIPS)。 在 PowerPC 上，这标识了真正的平台; 可能与 \fBAT_PLATFORM\fP 不同。
在 MIPS 上，这标识 ISA 级别 (自 Linux 5.7 起)。
.TP 
\fBAT_CLKTCK\fP
\fBtimes\fP(2) 计数的频率。 该值也可以通过 \fIsysconf(_SC_CLK_TCK)\fP 获得。
.TP 
\fBAT_DCACHEBSIZE\fP
数据缓存块大小。
.TP 
\fBAT_EGID\fP
线程的有效组 ID。
.TP 
\fBAT_ENTRY\fP
可执行文件的入口地址。
.TP 
\fBAT_EUID\fP
线程的有效用户 ID。
.TP 
\fBAT_EXECFD\fP
程序的文件描述符。
.TP 
\fBAT_EXECFN\fP
指向包含用于执行程序的路径名的字符串的指针。
.TP 
\fBAT_FLAGS\fP
标记 (unused)。
.TP 
\fBAT_FPUCW\fP
使用 FPU 控制字 (仅限 SuperH 架构)。 这提供了有关内核执行的 FPU 初始化的一些信息。
.TP 
\fBAT_GID\fP
线程的真实组 ID。
.TP 
\fBAT_HWCAP\fP
一种体系结构和 ABI 相关的位掩码，其设置指示详细的处理器功能。 位掩码的内容取决于硬件 (例如，有关 Intel x86
架构的详细信息，请参见内核源文件 \fIarch/x86/include/asm/cpufeature.h\fP; 返回的值是其中描述的数组的第一个 32
位字)。 可通过 \fI/proc/cpuinfo\fP 获得相同信息的人类可读版本。
.TP 
\fBAT_HWCAP2\fP (since glibc 2.18)
有关处理器功能的更多与机器相关的提示。
.TP 
\fBAT_ICACHEBSIZE\fP
.\" .TP
.\" .BR AT_IGNORE
.\" .TP
.\" .BR AT_IGNOREPPC
.\" .TP
.\" .BR AT_NOTELF
指令缓存块大小。
.TP 
.\" Kernel commit 98a5f361b8625c6f4841d6ba013bbf0e80d08147
\fBAT_L1D_CACHEGEOMETRY\fP
L1 数据缓存的几何结构，在底部 16 位中使用缓存行大小 (以字节为单位) 和接下来的 16 位中的缓存关联性进行编码。 关联性是这样的，如果 N 是
16 位值，则缓存是 N 路集合关联的。
.TP 
\fBAT_L1D_CACHESIZE\fP
L1 数据缓存大小。
.TP 
\fBAT_L1I_CACHEGEOMETRY\fP
L1 指令高速缓存的几何结构，编码为 \fBAT_L1D_CACHEGEOMETRY\fP。
.TP 
\fBAT_L1I_CACHESIZE\fP
L1 指令缓存大小。
.TP 
\fBAT_L2_CACHEGEOMETRY\fP
L2 缓存的几何结构，编码为 \fBAT_L1D_CACHEGEOMETRY\fP。
.TP 
\fBAT_L2_CACHESIZE\fP
L2 缓存大小。
.TP 
\fBAT_L3_CACHEGEOMETRY\fP
L3 缓存的几何结构，编码为 \fBAT_L1D_CACHEGEOMETRY\fP。
.TP 
\fBAT_L3_CACHESIZE\fP
L3 缓存大小。
.TP 
\fBAT_PAGESZ\fP
系统页面大小 (与 \fIsysconf(_SC_PAGESIZE)\fP) 返回的值相同。
.TP 
\fBAT_PHDR\fP
可执行文件的程序头地址。
.TP 
\fBAT_PHENT\fP
程序头条目的大小。
.TP 
\fBAT_PHNUM\fP
程序头的数量。
.TP 
\fBAT_PLATFORM\fP
指向标识程序运行的硬件平台的字符串的指针。 动态链接器在解释 \fIrpath\fP 值时使用它。
.TP 
\fBAT_RANDOM\fP
包含随机值的十六个字节的地址。
.TP 
\fBAT_SECURE\fP
如果应该安全地对待此可执行文件，则具有非零值。 最常见的情况是，非零值表示进程正在执行设置用户 ID 或设置组 ID 二进制文件 (因此其真实和有效的
UID 或 GID 彼此不同)，或者它通过执行二进制文件获得了能力具有功能的文件 (参见 \fBcapabilities\fP(7)).  或者，非零值可能由
Linux 安全模块触发。 当此值为非零时，动态链接器禁用某些环境变量的使用 (请参见 \fBld\-linux.so\fP(8)) 和 glibc
更改其行为的其他方面。 (另见 \fBsecure_getenv\fP(3).)
.TP 
\fBAT_SYSINFO\fP
vDSO 中系统调用函数的入口点。 不是所有架构上的 present/needed (例如，x86\-64 上不存在)。
.TP 
\fBAT_SYSINFO_EHDR\fP
包含内核创建的虚拟动态共享对象 (vDSO) 的页面地址，以提供某些系统调用的快速实现。
.TP 
\fBAT_UCACHEBSIZE\fP
统一缓存块大小。
.TP 
\fBAT_UID\fP
线程的真实用户 ID。
.SH "RETURN VALUE"
成功时，\fBgetauxval\fP() 返回对应于 \fItype\fP 的值。 如果未找到 \fItype\fP，则返回 0。
.SH ERRORS
.TP 
\fBENOENT\fP (since glibc 2.19)
.\" commit b9ab448f980e296eac21ac65f53783967cc6037b
在辅助 vector 中找不到与 \fItype\fP 对应的条目。
.SH VERSIONS
在 glibc 2.16 中添加了 \fBgetauxval\fP() 函数。
.SH ATTRIBUTES
有关本节中使用的术语的解释，请参见 \fBattributes\fP(7)。
.ad l
.nh
.TS
allbox;
lbx lb lb
l l l.
Interface	Attribute	Value
T{
\fBgetauxval\fP()
T}	Thread safety	MT\-Safe
.TE
.hy
.ad
.sp 1
.SH STANDARDS
这个函数是一个非标准的 glibc 扩展。
.SH NOTES
辅助 vector 中信息的主要消费者是动态链接器 \fBld\-linux.so\fP(8)。 辅助 vector
是一种方便高效的快捷方式，它允许内核传达动态链接器通常或总是需要的一组特定标准信息。 在某些情况下，可以通过系统调用获得相同的信息，但使用辅助
vector 更便宜。
.PP
辅助 vector 位于进程地址空间中参数列表和环境的正上方。 提供给程序的辅助 vector 可以通过在运行程序时设置 \fBLD_SHOW_AUXV\fP
环境变量来查看:
.PP
.in +4n
.EX
$ LD_SHOW_AUXV=1 睡眠 1
.EE
.in
.PP
任何进程的辅助 vector 都可以通过 \fI/proc/[pid]/auxv\fP 获取 (受限于文件权限) ; 有关更多信息，请参见
\fBproc\fP(5)。
.SH BUGS
在 glibc 2.19 中加入 \fBENOENT\fP 错误之前，没有办法明确区分找不到 \fItype\fP 的情况和 \fItype\fP 对应的值为 0
的情况。
.SH "SEE ALSO"
\fBexecve\fP(2), \fBsecure_getenv\fP(3), \fBvdso\fP(7), \fBld\-linux.so\fP(8)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
