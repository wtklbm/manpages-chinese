.\" -*- coding: UTF-8 -*-
.\" Copyright (C) 2017, Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" SPDX-License-Identifier: Linux-man-pages-copyleft
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH getentropy 3 2022\-11\-10 "Linux man\-pages 6.03" 
.SH NAME
getentropy \- 用随机字节填充缓冲区
.SH LIBRARY
标准 C 库 (\fIlibc\fP、\fI\-lc\fP)
.SH SYNOPSIS
.nf
\fB#include <unistd.h>\fP
.PP
\fBint getentropy(void \fP\fIbuffer\fP\fB[.\fP\fIlength\fP\fB], size_t \fP\fIlength\fP\fB);\fP
.fi
.PP
.RS -4
特性测试宏 glibc 的要求 (参见 \fBfeature_test_macros\fP(7)):
.RE
.PP
\fBgetentropy\fP():
.nf
    _DEFAULT_SOURCE
.fi
.SH DESCRIPTION
\fBgetentropy\fP() 函数将 \fIlength\fP 字节的高质量随机数据写入从 \fIbuffer\fP 指向的位置开始的缓冲区。 \fIlength\fP
参数的最大允许值为 256。
.PP
对 \fBgetentropy\fP() 的成功调用总是提供请求的熵字节数。
.SH "RETURN VALUE"
成功时，此函数返回零。 出错时返回 \-1，并设置 \fIerrno\fP 以指示错误。
.SH ERRORS
.TP 
\fBEFAULT\fP
\fIbuffer\fP 和 \fIlength\fP 指定的部分或全部缓冲区不在有效的可寻址内存中。
.TP 
\fBEIO\fP
\fIlength\fP 大于 256。
.TP 
\fBEIO\fP
尝试用随机数据覆盖 \fIbuffer\fP 时出现未指定的错误。
.TP 
\fBENOSYS\fP
此内核版本未实现实现此函数所需的 \fBgetrandom\fP(2) 系统调用。
.SH VERSIONS
\fBgetentropy\fP() 函数最早出现在 glibc 2.25 中。
.SH STANDARDS
这个函数是不标准的。 它也出现在 OpenBSD 上。
.SH NOTES
\fBgetentropy\fP() 函数是使用 \fBgetrandom\fP(2) 实现的。
.PP
尽管 glibc 包装器使 \fBgetrandom\fP(2) 成为取消点，但 \fBgetentropy\fP() 不是取消点。
.PP
\fBgetentropy\fP() 也在 \fB<sys/random.h>\fP 中声明。 (无需定义特性测试宏即可从该头文件中获取声明。)
.PP
如果系统刚刚启动并且内核尚未收集到足够的随机性来初始化熵池，则调用 \fBgetentropy\fP() 可能会阻塞。
在这种情况下，即使处理了信号，\fBgetentropy\fP() 也会继续阻塞，并且只会在熵池初始化后返回。
.SH "SEE ALSO"
\fBgetrandom\fP(2), \fBurandom\fP(4), \fBrandom\fP(7)
.PP
.SH [手册页中文版]
.PP
本翻译为免费文档；阅读
.UR https://www.gnu.org/licenses/gpl-3.0.html
GNU 通用公共许可证第 3 版
.UE
或稍后的版权条款。因使用该翻译而造成的任何问题和损失完全由您承担。
.PP
该中文翻译由 wtklbm
.B <wtklbm@gmail.com>
根据个人学习需要制作。
.PP
项目地址:
.UR \fBhttps://github.com/wtklbm/manpages-chinese\fR
.ME 。
